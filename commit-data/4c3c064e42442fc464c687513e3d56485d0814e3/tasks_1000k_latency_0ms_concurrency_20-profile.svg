<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,016 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="2035.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="2019.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="2003.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1987.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1971.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1955.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1939.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1923.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1907.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1891.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1875.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1859.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1827.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1811.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1795.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1779.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1763.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1747.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1731.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1715.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1699.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1683.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1667.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1651.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1635.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1619.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1603.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1587.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1571.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1555.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1539.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1523.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1507.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1491.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1475.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1459.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1443.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1427.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1411.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1395.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1379.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1363.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1347.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1331.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1315.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1299.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1283.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1267.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1251.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1235.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1219.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1203.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1187.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1171.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1155.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1139.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1123.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1107.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1091.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1075.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1059.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1043.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1027.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1011.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="995.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="979.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="963.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="947.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="931.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="915.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="899.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="883.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="867.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="851.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="835.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="819.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="787.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="771.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="755.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="739.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="723.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="707.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="675.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="643.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="611.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="515.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="499.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="483.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="451.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="435.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="419.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="387.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="371.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="355.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="339.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="307.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="291.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="275.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="259.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="243.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="227.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="211.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="195.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="179.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="163.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="147.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="131.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="115.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="99.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="83.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="67.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="51.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="35.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.10%)</title><rect x="11.2" y="2035.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.2" y="2046.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.10%)</title><rect x="11.2" y="2019.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="2030.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.10%)</title><rect x="11.2" y="2003.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.2" y="2014.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.10%)</title><rect x="11.2" y="1987.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.2" y="1998.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.10%)</title><rect x="11.2" y="1971.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="1982.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="11.2" y="1955.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.2" y="1966.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.20%)</title><rect x="12.3" y="2035.0" width="2.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="15.3" y="2046.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="12.3" y="2019.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.3" y="2030.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="12.3" y="2003.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.3" y="2014.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="12.3" y="1987.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.3" y="1998.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="12.3" y="1971.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.3" y="1982.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.10%)</title><rect x="13.5" y="2019.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.5" y="2030.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.10%)</title><rect x="14.6" y="2035.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="17.6" y="2046.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="14.6" y="2019.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.6" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (211 samples, 20.77%)</title><rect x="15.8" y="2035.0" width="245.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.8" y="2046.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (211 samples, 20.77%)</title><rect x="15.8" y="2019.0" width="245.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.8" y="2030.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (208 samples, 20.47%)</title><rect x="15.8" y="2003.0" width="241.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="2014.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.39%)</title><rect x="18.1" y="1987.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.1" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.39%)</title><rect x="18.1" y="1971.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.1" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.39%)</title><rect x="18.1" y="1955.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.1" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.39%)</title><rect x="18.1" y="1939.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.1" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.39%)</title><rect x="18.1" y="1923.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.39%)</title><rect x="18.1" y="1907.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.30%)</title><rect x="19.3" y="1891.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (3 samples, 0.30%)</title><rect x="19.3" y="1875.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.3" y="1886.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="19.3" y="1859.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="22.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.20%)</title><rect x="20.5" y="1859.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.20%)</title><rect x="20.5" y="1843.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.5" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="20.5" y="1827.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="23.5" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="21.6" y="1827.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.10%)</title><rect x="22.8" y="1987.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="22.8" y="1971.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="25.8" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="22.8" y="1955.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.8" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="22.8" y="1939.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.8" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="22.8" y="1923.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="22.8" y="1907.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="22.8" y="1891.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.10%)</title><rect x="22.8" y="1875.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="22.8" y="1859.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.10%)</title><rect x="22.8" y="1843.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.8" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="22.8" y="1827.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.20%)</title><rect x="23.9" y="1987.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.9" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.20%)</title><rect x="23.9" y="1971.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.9" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.20%)</title><rect x="23.9" y="1955.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/1274269114.accept (1 samples, 0.10%)</title><rect x="25.1" y="1939.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.10%)</title><rect x="25.1" y="1923.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.10%)</title><rect x="25.1" y="1907.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (167 samples, 16.44%)</title><rect x="26.3" y="1987.0" width="193.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.3" y="1998.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/37944632.accept (160 samples, 15.75%)</title><rect x="26.3" y="1971.0" width="185.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.3" y="1982.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (160 samples, 15.75%)</title><rect x="26.3" y="1955.0" width="185.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.3" y="1966.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (146 samples, 14.37%)</title><rect x="26.3" y="1939.0" width="169.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="29.3" y="1950.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (146 samples, 14.37%)</title><rect x="26.3" y="1923.0" width="169.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.3" y="1934.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (146 samples, 14.37%)</title><rect x="26.3" y="1907.0" width="169.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.3" y="1918.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (146 samples, 14.37%)</title><rect x="26.3" y="1891.0" width="169.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.3" y="1902.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (146 samples, 14.37%)</title><rect x="26.3" y="1875.0" width="169.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.3" y="1886.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (146 samples, 14.37%)</title><rect x="26.3" y="1859.0" width="169.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.3" y="1870.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (116 samples, 11.42%)</title><rect x="26.3" y="1843.0" width="134.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="29.3" y="1854.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 2.07%)</title><rect x="26.3" y="1827.0" width="24.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.3" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 2.07%)</title><rect x="26.3" y="1811.0" width="24.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.3" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (21 samples, 2.07%)</title><rect x="26.3" y="1795.0" width="24.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.3" y="1806.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.10%)</title><rect x="49.5" y="1779.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.79%)</title><rect x="50.6" y="1827.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.79%)</title><rect x="50.6" y="1811.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.49%)</title><rect x="54.1" y="1795.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.30%)</title><rect x="56.5" y="1779.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (87 samples, 8.56%)</title><rect x="59.9" y="1827.0" width="101.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.9" y="1838.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (87 samples, 8.56%)</title><rect x="59.9" y="1811.0" width="101.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.9" y="1822.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (87 samples, 8.56%)</title><rect x="59.9" y="1795.0" width="101.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.9" y="1806.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (87 samples, 8.56%)</title><rect x="59.9" y="1779.0" width="101.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.9" y="1790.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (86 samples, 8.46%)</title><rect x="61.1" y="1763.0" width="99.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="64.1" y="1774.0">jdk/internal..</text>
</g>
<g>
<title>Unsafe_Unpark (42 samples, 4.13%)</title><rect x="62.3" y="1747.0" width="48.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="65.3" y="1758.0">Unsa..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.10%)</title><rect x="71.6" y="1731.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="74.6" y="1742.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.10%)</title><rect x="72.7" y="1731.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="75.7" y="1742.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.20%)</title><rect x="73.9" y="1731.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="76.9" y="1742.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (10 samples, 0.98%)</title><rect x="76.2" y="1731.0" width="11.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="79.2" y="1742.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="86.7" y="1715.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="89.7" y="1726.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.69%)</title><rect x="87.8" y="1731.0" width="8.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="90.8" y="1742.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.30%)</title><rect x="95.9" y="1731.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="98.9" y="1742.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.98%)</title><rect x="99.4" y="1731.0" width="11.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="102.4" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_signal (43 samples, 4.23%)</title><rect x="111.0" y="1747.0" width="50.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="114.0" y="1758.0">__pth..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (27 samples, 2.66%)</title><rect x="161.0" y="1843.0" width="31.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.0" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (27 samples, 2.66%)</title><rect x="161.0" y="1827.0" width="31.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="164.0" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.59%)</title><rect x="185.4" y="1811.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.59%)</title><rect x="185.4" y="1795.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.30%)</title><rect x="192.3" y="1843.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.30%)</title><rect x="192.3" y="1827.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.30%)</title><rect x="192.3" y="1811.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.30%)</title><rect x="192.3" y="1795.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.3" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.10%)</title><rect x="194.7" y="1779.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.7" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (8 samples, 0.79%)</title><rect x="195.8" y="1939.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (8 samples, 0.79%)</title><rect x="195.8" y="1923.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.79%)</title><rect x="195.8" y="1907.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="198.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.79%)</title><rect x="195.8" y="1891.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="204.0" y="1875.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.0" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.10%)</title><rect x="204.0" y="1859.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.20%)</title><rect x="205.1" y="1939.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="205.1" y="1923.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.1" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="205.1" y="1907.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.10%)</title><rect x="205.1" y="1891.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.1" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="206.3" y="1907.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.10%)</title><rect x="206.3" y="1891.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.10%)</title><rect x="206.3" y="1875.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="206.3" y="1859.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="206.3" y="1843.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.39%)</title><rect x="207.4" y="1939.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.39%)</title><rect x="207.4" y="1923.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="209.8" y="1907.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.20%)</title><rect x="209.8" y="1891.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.10%)</title><rect x="212.1" y="1971.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="215.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.10%)</title><rect x="212.1" y="1955.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="212.1" y="1939.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.1" y="1950.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="212.1" y="1923.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="215.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.49%)</title><rect x="213.2" y="1971.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.49%)</title><rect x="213.2" y="1955.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.49%)</title><rect x="213.2" y="1939.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.49%)</title><rect x="213.2" y="1923.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.2" y="1934.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.39%)</title><rect x="214.4" y="1907.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="219.1" y="1971.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="219.1" y="1955.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.10%)</title><rect x="219.1" y="1939.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.10%)</title><rect x="219.1" y="1923.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (32 samples, 3.15%)</title><rect x="220.2" y="1987.0" width="37.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.2" y="1998.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (32 samples, 3.15%)</title><rect x="220.2" y="1971.0" width="37.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.2" y="1982.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (21 samples, 2.07%)</title><rect x="220.2" y="1955.0" width="24.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.2" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.10%)</title><rect x="220.2" y="1939.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.10%)</title><rect x="220.2" y="1923.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="221.4" y="1939.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="221.4" y="1923.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="221.4" y="1907.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="224.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="221.4" y="1891.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="221.4" y="1875.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="221.4" y="1859.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="221.4" y="1843.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="221.4" y="1827.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.10%)</title><rect x="221.4" y="1811.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.10%)</title><rect x="221.4" y="1795.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.10%)</title><rect x="221.4" y="1779.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.4" y="1790.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="221.4" y="1763.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="224.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (19 samples, 1.87%)</title><rect x="222.5" y="1939.0" width="22.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.5" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (19 samples, 1.87%)</title><rect x="222.5" y="1923.0" width="22.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.5" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.10%)</title><rect x="223.7" y="1907.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (1 samples, 0.10%)</title><rect x="223.7" y="1891.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="223.7" y="1875.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.7" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="223.7" y="1859.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="226.7" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.10%)</title><rect x="223.7" y="1843.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (16 samples, 1.57%)</title><rect x="224.9" y="1907.0" width="18.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (16 samples, 1.57%)</title><rect x="224.9" y="1891.0" width="18.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.9" y="1902.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.20%)</title><rect x="224.9" y="1875.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.9" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.20%)</title><rect x="224.9" y="1859.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.9" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.20%)</title><rect x="224.9" y="1843.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.9" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.20%)</title><rect x="224.9" y="1827.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.9" y="1838.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (2 samples, 0.20%)</title><rect x="224.9" y="1811.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.9" y="1822.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="224.9" y="1795.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="227.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (9 samples, 0.89%)</title><rect x="227.2" y="1875.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.10%)</title><rect x="228.3" y="1859.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.10%)</title><rect x="228.3" y="1843.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="228.3" y="1827.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.10%)</title><rect x="228.3" y="1811.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.59%)</title><rect x="229.5" y="1859.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.59%)</title><rect x="229.5" y="1843.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (6 samples, 0.59%)</title><rect x="229.5" y="1827.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (6 samples, 0.59%)</title><rect x="229.5" y="1811.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (5 samples, 0.49%)</title><rect x="230.7" y="1795.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="236.5" y="1859.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.10%)</title><rect x="236.5" y="1843.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.10%)</title><rect x="236.5" y="1827.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.10%)</title><rect x="236.5" y="1811.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.10%)</title><rect x="236.5" y="1795.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.5" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.10%)</title><rect x="236.5" y="1779.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatchSize (1 samples, 0.10%)</title><rect x="236.5" y="1763.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.5" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (5 samples, 0.49%)</title><rect x="237.6" y="1875.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.49%)</title><rect x="237.6" y="1859.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.49%)</title><rect x="237.6" y="1843.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.49%)</title><rect x="237.6" y="1827.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.6" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="242.3" y="1811.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="245.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.10%)</title><rect x="243.4" y="1907.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="243.4" y="1891.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="243.4" y="1875.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="243.4" y="1859.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="243.4" y="1843.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.4" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="243.4" y="1827.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.4" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="243.4" y="1811.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="246.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.10%)</title><rect x="244.6" y="1955.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="247.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.39%)</title><rect x="245.8" y="1955.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.20%)</title><rect x="245.8" y="1939.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.20%)</title><rect x="245.8" y="1923.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.20%)</title><rect x="245.8" y="1907.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.20%)</title><rect x="245.8" y="1891.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.20%)</title><rect x="245.8" y="1875.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.20%)</title><rect x="245.8" y="1859.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="248.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.20%)</title><rect x="245.8" y="1843.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (2 samples, 0.20%)</title><rect x="245.8" y="1827.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.8" y="1838.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.20%)</title><rect x="245.8" y="1811.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.8" y="1822.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.20%)</title><rect x="245.8" y="1795.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="245.8" y="1779.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="248.8" y="1790.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.20%)</title><rect x="245.8" y="1763.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="248.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.20%)</title><rect x="245.8" y="1747.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="248.8" y="1758.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.20%)</title><rect x="245.8" y="1731.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="248.8" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.20%)</title><rect x="245.8" y="1715.0" width="2.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="248.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.20%)</title><rect x="248.1" y="1939.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.20%)</title><rect x="248.1" y="1923.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.20%)</title><rect x="248.1" y="1907.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="248.1" y="1891.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="248.1" y="1875.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.10%)</title><rect x="248.1" y="1859.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.10%)</title><rect x="248.1" y="1843.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.write (1 samples, 0.10%)</title><rect x="248.1" y="1827.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.writeByte (1 samples, 0.10%)</title><rect x="248.1" y="1811.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.10%)</title><rect x="249.3" y="1891.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ApiVersionsResponse.intersect (1 samples, 0.10%)</title><rect x="249.3" y="1875.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="249.3" y="1859.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.49%)</title><rect x="250.4" y="1955.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="251.6" y="1939.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="251.6" y="1923.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.10%)</title><rect x="251.6" y="1907.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.&lt;init&gt; (1 samples, 0.10%)</title><rect x="251.6" y="1891.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.&lt;init&gt; (1 samples, 0.10%)</title><rect x="251.6" y="1875.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.30%)</title><rect x="252.7" y="1939.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="255.1" y="1923.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="255.1" y="1907.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.10%)</title><rect x="255.1" y="1891.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.1" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.10%)</title><rect x="255.1" y="1875.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.10%)</title><rect x="256.2" y="1955.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="256.2" y="1939.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.10%)</title><rect x="256.2" y="1923.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (3 samples, 0.30%)</title><rect x="257.4" y="2003.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.4" y="2014.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="257.4" y="1987.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.4" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="257.4" y="1971.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.4" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.30%)</title><rect x="257.4" y="1955.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.4" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.30%)</title><rect x="257.4" y="1939.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.4" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.30%)</title><rect x="257.4" y="1923.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.4" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (2 samples, 0.20%)</title><rect x="257.4" y="1907.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="258.5" y="1891.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.5" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$253/136785509.test (1 samples, 0.10%)</title><rect x="258.5" y="1875.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="261.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="259.7" y="1907.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.10%)</title><rect x="259.7" y="1891.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.7" y="1902.0"></text>
</g>
<g>
<title>java/lang/Thread.run (586 samples, 57.68%)</title><rect x="260.9" y="2035.0" width="680.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.9" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (586 samples, 57.68%)</title><rect x="260.9" y="2019.0" width="680.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.9" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (586 samples, 57.68%)</title><rect x="260.9" y="2003.0" width="680.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.9" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/193259095.run (371 samples, 36.52%)</title><rect x="266.7" y="1987.0" width="430.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.7" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (371 samples, 36.52%)</title><rect x="266.7" y="1971.0" width="430.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.7" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (371 samples, 36.52%)</title><rect x="266.7" y="1955.0" width="430.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.7" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (371 samples, 36.52%)</title><rect x="266.7" y="1939.0" width="430.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.7" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (41 samples, 4.04%)</title><rect x="269.0" y="1923.0" width="47.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.0" y="1934.0">com/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.10%)</title><rect x="269.0" y="1907.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.10%)</title><rect x="269.0" y="1891.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$501/1618535540.get$Lambda (1 samples, 0.10%)</title><rect x="269.0" y="1875.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="272.0" y="1886.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="269.0" y="1859.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="272.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (40 samples, 3.94%)</title><rect x="270.2" y="1907.0" width="46.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.2" y="1918.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (40 samples, 3.94%)</title><rect x="270.2" y="1891.0" width="46.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.2" y="1902.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 2.36%)</title><rect x="288.7" y="1875.0" width="27.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.7" y="1886.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.10%)</title><rect x="288.7" y="1859.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="291.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 2.26%)</title><rect x="289.9" y="1859.0" width="26.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.9" y="1870.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$501/1618535540.accept (23 samples, 2.26%)</title><rect x="289.9" y="1843.0" width="26.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.9" y="1854.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (23 samples, 2.26%)</title><rect x="289.9" y="1827.0" width="26.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.9" y="1838.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (23 samples, 2.26%)</title><rect x="289.9" y="1811.0" width="26.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.9" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (23 samples, 2.26%)</title><rect x="289.9" y="1795.0" width="26.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.9" y="1806.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (21 samples, 2.07%)</title><rect x="292.2" y="1779.0" width="24.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.2" y="1790.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.10%)</title><rect x="292.2" y="1763.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 1.97%)</title><rect x="293.4" y="1763.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.4" y="1774.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (12 samples, 1.18%)</title><rect x="316.6" y="1923.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (12 samples, 1.18%)</title><rect x="316.6" y="1907.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.6" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 1.18%)</title><rect x="316.6" y="1891.0" width="14.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.6" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 1.18%)</title><rect x="316.6" y="1875.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.6" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.30%)</title><rect x="316.6" y="1859.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.6" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.89%)</title><rect x="320.1" y="1859.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.1" y="1870.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.69%)</title><rect x="322.4" y="1843.0" width="8.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="325.4" y="1854.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.69%)</title><rect x="322.4" y="1827.0" width="8.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="325.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (117 samples, 11.52%)</title><rect x="330.6" y="1923.0" width="135.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.6" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.20%)</title><rect x="332.9" y="1907.0" width="2.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="335.9" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.20%)</title><rect x="332.9" y="1891.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="335.9" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.69%)</title><rect x="335.2" y="1907.0" width="8.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="338.2" y="1918.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.59%)</title><rect x="336.4" y="1891.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="339.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (106 samples, 10.43%)</title><rect x="343.3" y="1907.0" width="123.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="346.3" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (106 samples, 10.43%)</title><rect x="343.3" y="1891.0" width="123.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.3" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (106 samples, 10.43%)</title><rect x="343.3" y="1875.0" width="123.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.3" y="1886.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (106 samples, 10.43%)</title><rect x="343.3" y="1859.0" width="123.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="346.3" y="1870.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (106 samples, 10.43%)</title><rect x="343.3" y="1843.0" width="123.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.3" y="1854.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 0.39%)</title><rect x="343.3" y="1827.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="346.3" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.10%)</title><rect x="343.3" y="1811.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.10%)</title><rect x="343.3" y="1795.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.10%)</title><rect x="343.3" y="1779.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="343.3" y="1763.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="346.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="343.3" y="1747.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 0.30%)</title><rect x="344.5" y="1811.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.30%)</title><rect x="344.5" y="1795.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="347.5" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.10%)</title><rect x="344.5" y="1779.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="347.5" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="345.6" y="1779.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="348.6" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="345.6" y="1763.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="348.6" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="345.6" y="1747.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="348.6" y="1758.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="345.6" y="1731.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="348.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.10%)</title><rect x="346.8" y="1779.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="346.8" y="1763.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.10%)</title><rect x="346.8" y="1747.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (68 samples, 6.69%)</title><rect x="348.0" y="1827.0" width="78.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.0" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.59%)</title><rect x="348.0" y="1811.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="351.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.59%)</title><rect x="348.0" y="1795.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="351.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.20%)</title><rect x="352.6" y="1779.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 0.49%)</title><rect x="354.9" y="1811.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.39%)</title><rect x="354.9" y="1795.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="357.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.30%)</title><rect x="354.9" y="1779.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="357.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.20%)</title><rect x="356.1" y="1763.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="359.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.10%)</title><rect x="358.4" y="1779.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="361.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.10%)</title><rect x="359.6" y="1795.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="362.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.98%)</title><rect x="360.7" y="1811.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.69%)</title><rect x="364.2" y="1795.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (47 samples, 4.63%)</title><rect x="372.4" y="1811.0" width="54.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="375.4" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (47 samples, 4.63%)</title><rect x="372.4" y="1795.0" width="54.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="375.4" y="1806.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.18%)</title><rect x="373.5" y="1779.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="376.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.89%)</title><rect x="373.5" y="1763.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="376.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.89%)</title><rect x="373.5" y="1747.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="376.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.89%)</title><rect x="373.5" y="1731.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (9 samples, 0.89%)</title><rect x="373.5" y="1715.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.49%)</title><rect x="378.2" y="1699.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="381.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.20%)</title><rect x="384.0" y="1763.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.10%)</title><rect x="385.1" y="1747.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.10%)</title><rect x="385.1" y="1731.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.10%)</title><rect x="385.1" y="1715.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.10%)</title><rect x="385.1" y="1699.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.10%)</title><rect x="386.3" y="1763.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="389.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (34 samples, 3.35%)</title><rect x="387.5" y="1779.0" width="39.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.5" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (34 samples, 3.35%)</title><rect x="387.5" y="1763.0" width="39.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="390.5" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (33 samples, 3.25%)</title><rect x="388.6" y="1747.0" width="38.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.6" y="1758.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.38%)</title><rect x="390.9" y="1731.0" width="16.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.20%)</title><rect x="390.9" y="1715.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="393.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.59%)</title><rect x="393.3" y="1715.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="396.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.59%)</title><rect x="393.3" y="1699.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="396.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.59%)</title><rect x="393.3" y="1683.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.30%)</title><rect x="393.3" y="1667.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="396.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.30%)</title><rect x="396.8" y="1667.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="399.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.39%)</title><rect x="400.2" y="1715.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.20%)</title><rect x="402.6" y="1699.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.20%)</title><rect x="402.6" y="1683.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="405.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.20%)</title><rect x="404.9" y="1715.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.20%)</title><rect x="404.9" y="1699.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="406.0" y="1683.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.0" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.39%)</title><rect x="407.2" y="1731.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.30%)</title><rect x="408.4" y="1715.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.30%)</title><rect x="408.4" y="1699.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="411.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.30%)</title><rect x="408.4" y="1683.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (3 samples, 0.30%)</title><rect x="408.4" y="1667.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (3 samples, 0.30%)</title><rect x="408.4" y="1651.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.4" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (3 samples, 0.30%)</title><rect x="408.4" y="1635.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (3 samples, 0.30%)</title><rect x="408.4" y="1619.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.4" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.30%)</title><rect x="408.4" y="1603.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="411.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.59%)</title><rect x="411.9" y="1731.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.59%)</title><rect x="411.9" y="1715.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.59%)</title><rect x="411.9" y="1699.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.59%)</title><rect x="411.9" y="1683.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="414.9" y="1694.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.59%)</title><rect x="411.9" y="1667.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.9" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.59%)</title><rect x="411.9" y="1651.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="414.9" y="1662.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (6 samples, 0.59%)</title><rect x="411.9" y="1635.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="414.9" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.69%)</title><rect x="418.8" y="1731.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.8" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.69%)</title><rect x="418.8" y="1715.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.8" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.30%)</title><rect x="418.8" y="1699.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="421.8" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.39%)</title><rect x="422.3" y="1699.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.3" y="1710.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.39%)</title><rect x="422.3" y="1683.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.3" y="1694.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.39%)</title><rect x="422.3" y="1667.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="425.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="425.8" y="1651.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="428.8" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (34 samples, 3.35%)</title><rect x="426.9" y="1827.0" width="39.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.9" y="1838.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (34 samples, 3.35%)</title><rect x="426.9" y="1811.0" width="39.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.9" y="1822.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (34 samples, 3.35%)</title><rect x="426.9" y="1795.0" width="39.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.9" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (34 samples, 3.35%)</title><rect x="426.9" y="1779.0" width="39.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="429.9" y="1790.0">com..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (34 samples, 3.35%)</title><rect x="426.9" y="1763.0" width="39.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="429.9" y="1774.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (196 samples, 19.29%)</title><rect x="466.4" y="1923.0" width="227.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.4" y="1934.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (33 samples, 3.25%)</title><rect x="466.4" y="1907.0" width="38.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="469.4" y="1918.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (33 samples, 3.25%)</title><rect x="466.4" y="1891.0" width="38.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="469.4" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (33 samples, 3.25%)</title><rect x="466.4" y="1875.0" width="38.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.4" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 1.67%)</title><rect x="467.6" y="1859.0" width="19.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.10%)</title><rect x="468.8" y="1843.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.39%)</title><rect x="469.9" y="1843.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="472.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="469.9" y="1827.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.9" y="1838.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="469.9" y="1811.0" width="3.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="472.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="469.9" y="1795.0" width="3.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="472.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.10%)</title><rect x="473.4" y="1827.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="476.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.10%)</title><rect x="473.4" y="1811.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 1.08%)</title><rect x="474.6" y="1843.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="477.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 1.08%)</title><rect x="474.6" y="1827.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="477.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.30%)</title><rect x="487.3" y="1859.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="490.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="487.3" y="1843.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="490.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.10%)</title><rect x="488.5" y="1843.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="491.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.10%)</title><rect x="489.7" y="1843.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="492.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.10%)</title><rect x="489.7" y="1827.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 1.18%)</title><rect x="490.8" y="1859.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="493.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.20%)</title><rect x="490.8" y="1843.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="493.8" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 0.98%)</title><rect x="493.1" y="1843.0" width="11.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.20%)</title><rect x="493.1" y="1827.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="496.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="494.3" y="1811.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="497.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="494.3" y="1795.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="497.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.79%)</title><rect x="495.5" y="1827.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="498.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.39%)</title><rect x="504.8" y="1907.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="507.8" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.39%)</title><rect x="504.8" y="1891.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (93 samples, 9.15%)</title><rect x="509.4" y="1907.0" width="108.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.4" y="1918.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (81 samples, 7.97%)</title><rect x="509.4" y="1891.0" width="94.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="512.4" y="1902.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (22 samples, 2.17%)</title><rect x="516.4" y="1875.0" width="25.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.4" y="1886.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.20%)</title><rect x="526.8" y="1859.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="529.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.20%)</title><rect x="526.8" y="1843.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="529.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.20%)</title><rect x="526.8" y="1827.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="529.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.20%)</title><rect x="526.8" y="1811.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="529.8" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="526.8" y="1795.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="529.8" y="1806.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="528.0" y="1779.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="531.0" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.10%)</title><rect x="528.0" y="1763.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="531.0" y="1774.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="528.0" y="1747.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="531.0" y="1758.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.20%)</title><rect x="529.2" y="1859.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="532.2" y="1870.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9 samples, 0.89%)</title><rect x="531.5" y="1859.0" width="10.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="534.5" y="1870.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="541.9" y="1875.0" width="2.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="544.9" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (51 samples, 5.02%)</title><rect x="544.3" y="1875.0" width="59.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="547.3" y="1886.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (50 samples, 4.92%)</title><rect x="545.4" y="1859.0" width="58.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="548.4" y="1870.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (19 samples, 1.87%)</title><rect x="545.4" y="1843.0" width="22.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="548.4" y="1854.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.98%)</title><rect x="555.9" y="1827.0" width="11.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="558.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.98%)</title><rect x="555.9" y="1811.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="558.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="567.5" y="1843.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="570.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="567.5" y="1827.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="570.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (30 samples, 2.95%)</title><rect x="568.6" y="1843.0" width="34.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.6" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (30 samples, 2.95%)</title><rect x="568.6" y="1827.0" width="34.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="571.6" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.30%)</title><rect x="571.0" y="1811.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.30%)</title><rect x="571.0" y="1795.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="574.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.30%)</title><rect x="571.0" y="1779.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="574.0" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (25 samples, 2.46%)</title><rect x="574.4" y="1811.0" width="29.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.4" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.79%)</title><rect x="588.4" y="1795.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="591.4" y="1806.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.10%)</title><rect x="596.5" y="1779.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="599.5" y="1790.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.49%)</title><rect x="597.7" y="1795.0" width="5.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="600.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (12 samples, 1.18%)</title><rect x="603.5" y="1891.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="606.5" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (12 samples, 1.18%)</title><rect x="603.5" y="1875.0" width="13.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="606.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 1.18%)</title><rect x="603.5" y="1859.0" width="13.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.5" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.30%)</title><rect x="603.5" y="1843.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="606.5" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="603.5" y="1827.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="606.5" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.20%)</title><rect x="604.6" y="1827.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="607.6" y="1838.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (9 samples, 0.89%)</title><rect x="607.0" y="1843.0" width="10.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="610.0" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.89%)</title><rect x="607.0" y="1827.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.0" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="613.9" y="1811.0" width="3.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="616.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (44 samples, 4.33%)</title><rect x="617.4" y="1907.0" width="51.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="620.4" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (44 samples, 4.33%)</title><rect x="617.4" y="1891.0" width="51.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="620.4" y="1902.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/926294788.process (19 samples, 1.87%)</title><rect x="619.7" y="1875.0" width="22.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="622.7" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (18 samples, 1.77%)</title><rect x="620.9" y="1859.0" width="20.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.38%)</title><rect x="620.9" y="1843.0" width="16.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="623.9" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.69%)</title><rect x="627.9" y="1827.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="630.9" y="1838.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.20%)</title><rect x="630.2" y="1811.0" width="2.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="633.2" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.20%)</title><rect x="630.2" y="1795.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="633.2" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.30%)</title><rect x="632.5" y="1811.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="635.5" y="1822.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="632.5" y="1795.0" width="3.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="635.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="636.0" y="1827.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="639.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.39%)</title><rect x="637.2" y="1843.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.20%)</title><rect x="639.5" y="1827.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="642.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.10%)</title><rect x="640.6" y="1811.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="643.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.30%)</title><rect x="641.8" y="1875.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="644.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (6 samples, 0.59%)</title><rect x="645.3" y="1875.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="648.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (5 samples, 0.49%)</title><rect x="646.5" y="1859.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.20%)</title><rect x="652.3" y="1875.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="655.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.20%)</title><rect x="652.3" y="1859.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.10%)</title><rect x="654.6" y="1875.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.10%)</title><rect x="654.6" y="1859.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="657.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$495/1377432225.get$Lambda (1 samples, 0.10%)</title><rect x="654.6" y="1843.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="657.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.10%)</title><rect x="654.6" y="1827.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="657.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="655.7" y="1875.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="658.7" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="655.7" y="1859.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="658.7" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.30%)</title><rect x="656.9" y="1875.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="659.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.30%)</title><rect x="656.9" y="1859.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.9" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (3 samples, 0.30%)</title><rect x="656.9" y="1843.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.9" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.10%)</title><rect x="659.2" y="1827.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="662.2" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.20%)</title><rect x="660.4" y="1875.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.49%)</title><rect x="662.7" y="1875.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="665.7" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.49%)</title><rect x="662.7" y="1859.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="665.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.39%)</title><rect x="663.9" y="1843.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="666.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.30%)</title><rect x="663.9" y="1827.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="666.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$497/134257253.accept (2 samples, 0.20%)</title><rect x="663.9" y="1811.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.9" y="1822.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="666.2" y="1811.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="669.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.10%)</title><rect x="667.4" y="1827.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="670.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.20%)</title><rect x="668.5" y="1907.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="671.5" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (2 samples, 0.20%)</title><rect x="668.5" y="1891.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="671.5" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.10%)</title><rect x="670.8" y="1907.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="673.8" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="670.8" y="1891.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="673.8" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="670.8" y="1875.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="673.8" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="670.8" y="1859.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="673.8" y="1870.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="670.8" y="1843.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="673.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="672.0" y="1907.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="675.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="672.0" y="1891.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="675.0" y="1902.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="672.0" y="1875.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="675.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="672.0" y="1859.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="675.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.10%)</title><rect x="673.2" y="1907.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="676.2" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.10%)</title><rect x="673.2" y="1891.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="676.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$498/628780735.get$Lambda (1 samples, 0.10%)</title><rect x="673.2" y="1875.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="676.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$498/628780735.&lt;init&gt; (1 samples, 0.10%)</title><rect x="673.2" y="1859.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="676.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.67%)</title><rect x="674.3" y="1907.0" width="19.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.67%)</title><rect x="674.3" y="1891.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.48%)</title><rect x="676.7" y="1875.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.7" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.49%)</title><rect x="676.7" y="1859.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="679.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$498/628780735.accept (2 samples, 0.20%)</title><rect x="677.8" y="1843.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="680.8" y="1854.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.20%)</title><rect x="680.1" y="1843.0" width="2.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="683.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.79%)</title><rect x="682.5" y="1859.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$498/628780735.accept (8 samples, 0.79%)</title><rect x="682.5" y="1843.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="685.5" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.69%)</title><rect x="683.6" y="1827.0" width="8.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="686.6" y="1838.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.59%)</title><rect x="684.8" y="1811.0" width="7.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="687.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.20%)</title><rect x="691.8" y="1859.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="694.8" y="1870.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.30%)</title><rect x="694.1" y="1923.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="697.1" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="694.1" y="1907.0" width="3.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="697.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.30%)</title><rect x="697.6" y="1987.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.6" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.30%)</title><rect x="697.6" y="1971.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.6" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.30%)</title><rect x="697.6" y="1955.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.30%)</title><rect x="697.6" y="1939.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="700.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (207 samples, 20.37%)</title><rect x="701.0" y="1987.0" width="240.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="704.0" y="1998.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (204 samples, 20.08%)</title><rect x="704.5" y="1971.0" width="237.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="707.5" y="1982.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (189 samples, 18.60%)</title><rect x="704.5" y="1955.0" width="219.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="707.5" y="1966.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.10%)</title><rect x="708.0" y="1939.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="711.0" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="708.0" y="1923.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="711.0" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="708.0" y="1907.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="711.0" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="708.0" y="1891.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="711.0" y="1902.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="708.0" y="1875.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="711.0" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.67%)</title><rect x="709.2" y="1939.0" width="19.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="712.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.39%)</title><rect x="728.9" y="1939.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.39%)</title><rect x="728.9" y="1923.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="732.4" y="1907.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="735.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="732.4" y="1891.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="735.4" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.10%)</title><rect x="732.4" y="1875.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="735.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (6 samples, 0.59%)</title><rect x="733.6" y="1939.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="736.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (6 samples, 0.59%)</title><rect x="733.6" y="1923.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="736.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (158 samples, 15.55%)</title><rect x="740.5" y="1939.0" width="183.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="743.5" y="1950.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (156 samples, 15.35%)</title><rect x="742.9" y="1923.0" width="181.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="745.9" y="1934.0">jdk/internal/misc/Unsaf..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.10%)</title><rect x="745.2" y="1907.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="748.2" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (151 samples, 14.86%)</title><rect x="746.3" y="1907.0" width="175.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="749.3" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (15 samples, 1.48%)</title><rect x="751.0" y="1891.0" width="17.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="754.0" y="1902.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.59%)</title><rect x="754.5" y="1875.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="757.5" y="1886.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.20%)</title><rect x="756.8" y="1859.0" width="2.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="759.8" y="1870.0"></text>
</g>
<g>
<title>update_get_addr (2 samples, 0.20%)</title><rect x="759.1" y="1859.0" width="2.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="762.1" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="761.4" y="1875.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="764.4" y="1886.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.20%)</title><rect x="762.6" y="1875.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="765.6" y="1886.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.10%)</title><rect x="764.9" y="1875.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="767.9" y="1886.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="766.1" y="1875.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="769.1" y="1886.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.10%)</title><rect x="767.2" y="1875.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="770.2" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (3 samples, 0.30%)</title><rect x="768.4" y="1891.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="771.4" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.30%)</title><rect x="771.9" y="1891.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="774.9" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (40 samples, 3.94%)</title><rect x="775.4" y="1891.0" width="46.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="778.4" y="1902.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (67 samples, 6.59%)</title><rect x="821.8" y="1891.0" width="77.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="824.8" y="1902.0">__pthread..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.39%)</title><rect x="899.6" y="1891.0" width="4.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="902.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (6 samples, 0.59%)</title><rect x="904.3" y="1891.0" width="7.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="907.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.30%)</title><rect x="911.3" y="1891.0" width="3.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="914.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="914.7" y="1891.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="917.7" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.30%)</title><rect x="915.9" y="1891.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="918.9" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.20%)</title><rect x="919.4" y="1891.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="921.7" y="1907.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="924.7" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="922.9" y="1907.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.48%)</title><rect x="924.0" y="1955.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.0" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.48%)</title><rect x="924.0" y="1939.0" width="17.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="927.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.48%)</title><rect x="924.0" y="1923.0" width="17.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="927.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.48%)</title><rect x="924.0" y="1907.0" width="17.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.10%)</title><rect x="940.3" y="1891.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="943.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="941.5" y="2035.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.5" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="941.5" y="2019.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="944.5" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="941.5" y="2003.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="944.5" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.10%)</title><rect x="941.5" y="1987.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="944.5" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeyIterator.next (1 samples, 0.10%)</title><rect x="941.5" y="1971.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="944.5" y="1982.0"></text>
</g>
<g>
<title>start_thread (213 samples, 20.96%)</title><rect x="942.6" y="2035.0" width="247.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="945.6" y="2046.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (213 samples, 20.96%)</title><rect x="942.6" y="2019.0" width="247.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="945.6" y="2030.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (213 samples, 20.96%)</title><rect x="942.6" y="2003.0" width="247.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="945.6" y="2014.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.20%)</title><rect x="942.6" y="1987.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="945.6" y="1998.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.20%)</title><rect x="942.6" y="1971.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="945.6" y="1982.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.10%)</title><rect x="942.6" y="1955.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.6" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.10%)</title><rect x="942.6" y="1939.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="945.6" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.10%)</title><rect x="943.8" y="1955.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="946.8" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.10%)</title><rect x="943.8" y="1939.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="946.8" y="1950.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="943.8" y="1923.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.8" y="1934.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (210 samples, 20.67%)</title><rect x="944.9" y="1987.0" width="243.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.9" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (208 samples, 20.47%)</title><rect x="944.9" y="1971.0" width="241.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="947.9" y="1982.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (208 samples, 20.47%)</title><rect x="944.9" y="1955.0" width="241.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.9" y="1966.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (206 samples, 20.28%)</title><rect x="944.9" y="1939.0" width="239.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.9" y="1950.0">C2Compiler::compile_method(ciEnv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (206 samples, 20.28%)</title><rect x="944.9" y="1923.0" width="239.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.9" y="1934.0">Compile::Compile(ciEnv*, C2Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (77 samples, 7.58%)</title><rect x="944.9" y="1907.0" width="89.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="947.9" y="1918.0">Compile::C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.20%)</title><rect x="944.9" y="1891.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="947.9" y="1902.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="944.9" y="1875.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.9" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="944.9" y="1859.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.9" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.10%)</title><rect x="944.9" y="1843.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="947.9" y="1854.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.10%)</title><rect x="944.9" y="1827.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="947.9" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="946.1" y="1875.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="949.1" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="947.3" y="1891.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="950.3" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.89%)</title><rect x="948.4" y="1891.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.4" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="948.4" y="1875.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="951.4" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.69%)</title><rect x="949.6" y="1875.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="952.6" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.39%)</title><rect x="949.6" y="1859.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="952.6" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.10%)</title><rect x="954.2" y="1859.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="954.2" y="1843.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.2" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="954.2" y="1827.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="957.2" y="1838.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="954.2" y="1811.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="957.2" y="1822.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.10%)</title><rect x="954.2" y="1795.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="957.2" y="1806.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="955.4" y="1859.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="958.4" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.10%)</title><rect x="955.4" y="1843.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.4" y="1854.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.10%)</title><rect x="955.4" y="1827.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.4" y="1838.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="956.6" y="1859.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="959.6" y="1870.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.10%)</title><rect x="957.7" y="1875.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="960.7" y="1886.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.10%)</title><rect x="958.9" y="1891.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="961.9" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.10%)</title><rect x="958.9" y="1875.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="961.9" y="1886.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.10%)</title><rect x="958.9" y="1859.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.79%)</title><rect x="960.0" y="1891.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="963.0" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.79%)</title><rect x="960.0" y="1875.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.10%)</title><rect x="960.0" y="1859.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="963.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="961.2" y="1859.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="964.2" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.10%)</title><rect x="961.2" y="1843.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="964.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="962.4" y="1859.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.4" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.10%)</title><rect x="962.4" y="1843.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.30%)</title><rect x="963.5" y="1859.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_exit_block_pressure(Block*) (1 samples, 0.10%)</title><rect x="965.8" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="968.8" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.10%)</title><rect x="965.8" y="1827.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="968.8" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.10%)</title><rect x="967.0" y="1859.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="970.0" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.10%)</title><rect x="968.2" y="1859.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (56 samples, 5.51%)</title><rect x="969.3" y="1891.0" width="65.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.3" y="1902.0">PhaseCh..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="969.3" y="1875.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="972.3" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.20%)</title><rect x="970.5" y="1875.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="973.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.20%)</title><rect x="972.8" y="1875.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="975.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="974.0" y="1859.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="977.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.30%)</title><rect x="975.1" y="1875.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="976.3" y="1859.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="977.5" y="1859.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.5" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="977.5" y="1843.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.59%)</title><rect x="978.6" y="1875.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.6" y="1886.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.10%)</title><rect x="984.4" y="1859.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 1.28%)</title><rect x="985.6" y="1875.0" width="15.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.10%)</title><rect x="990.2" y="1859.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="993.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.49%)</title><rect x="991.4" y="1859.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="994.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="994.9" y="1843.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="997.9" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.30%)</title><rect x="997.2" y="1859.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="999.5" y="1843.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1002.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.10%)</title><rect x="1000.7" y="1875.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1003.7" y="1886.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1000.7" y="1859.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.30%)</title><rect x="1001.9" y="1875.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1004.9" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1004.2" y="1859.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1007.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.10%)</title><rect x="1005.3" y="1875.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1006.5" y="1875.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1009.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1007.7" y="1875.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.69%)</title><rect x="1008.8" y="1875.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.49%)</title><rect x="1011.1" y="1859.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.39%)</title><rect x="1016.9" y="1875.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1019.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.20%)</title><rect x="1016.9" y="1859.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.9" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.20%)</title><rect x="1019.3" y="1859.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.3" y="1870.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.10%)</title><rect x="1019.3" y="1843.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.3" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.10%)</title><rect x="1020.4" y="1843.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1023.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.20%)</title><rect x="1021.6" y="1875.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1024.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1021.6" y="1859.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1022.8" y="1859.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1025.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1023.9" y="1875.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1023.9" y="1859.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.9" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.59%)</title><rect x="1025.1" y="1875.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1028.1" y="1886.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.10%)</title><rect x="1025.1" y="1859.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.1" y="1870.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="1025.1" y="1843.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1028.1" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.49%)</title><rect x="1026.2" y="1859.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.2" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1029.7" y="1843.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1032.7" y="1854.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="1029.7" y="1827.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1032.7" y="1838.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1030.9" y="1843.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1033.9" y="1854.0"></text>
</g>
<g>
<title>addP_rReg_immNode::two_adr() const (1 samples, 0.10%)</title><rect x="1032.0" y="1875.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.0" y="1886.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1033.2" y="1875.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.2" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (113 samples, 11.12%)</title><rect x="1034.4" y="1907.0" width="131.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1037.4" y="1918.0">Compile::Optimiz..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (41 samples, 4.04%)</title><rect x="1034.4" y="1891.0" width="47.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.4" y="1902.0">Comp..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (41 samples, 4.04%)</title><rect x="1034.4" y="1875.0" width="47.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1037.4" y="1886.0">Phas..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1034.4" y="1859.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.4" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1034.4" y="1843.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.4" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1034.4" y="1827.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1034.4" y="1811.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1037.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.10%)</title><rect x="1034.4" y="1795.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.4" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.10%)</title><rect x="1034.4" y="1779.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.4" y="1790.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1034.4" y="1763.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1037.4" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1035.5" y="1859.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1036.7" y="1859.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1039.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1037.9" y="1843.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (29 samples, 2.85%)</title><rect x="1039.0" y="1859.0" width="33.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1042.0" y="1870.0">Ph..</text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.10%)</title><rect x="1040.2" y="1843.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (27 samples, 2.66%)</title><rect x="1041.3" y="1843.0" width="31.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1044.3" y="1854.0">Ph..</text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (2 samples, 0.20%)</title><rect x="1041.3" y="1827.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1044.3" y="1838.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1043.7" y="1827.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (21 samples, 2.07%)</title><rect x="1044.8" y="1827.0" width="24.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.8" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.10%)</title><rect x="1046.0" y="1811.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1049.0" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1046.0" y="1795.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.0" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (19 samples, 1.87%)</title><rect x="1047.1" y="1811.0" width="22.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.1" y="1822.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.10%)</title><rect x="1069.2" y="1827.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.2" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.10%)</title><rect x="1070.4" y="1827.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.4" y="1838.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.10%)</title><rect x="1071.5" y="1827.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1074.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1072.7" y="1859.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1072.7" y="1843.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1075.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.10%)</title><rect x="1073.9" y="1859.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1076.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1073.9" y="1843.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.49%)</title><rect x="1075.0" y="1859.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.49%)</title><rect x="1075.0" y="1843.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.0" y="1854.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1075.0" y="1827.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.0" y="1838.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.20%)</title><rect x="1075.0" y="1811.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.0" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1077.3" y="1827.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1080.3" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1078.5" y="1827.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1081.5" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (2 samples, 0.20%)</title><rect x="1078.5" y="1811.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.5" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1078.5" y="1795.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1081.5" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1078.5" y="1779.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.5" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1078.5" y="1763.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.5" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1078.5" y="1747.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.5" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1078.5" y="1731.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.5" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1078.5" y="1715.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.5" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1078.5" y="1699.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.5" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1078.5" y="1683.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.5" y="1694.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1078.5" y="1667.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.5" y="1678.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1078.5" y="1651.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.5" y="1662.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1079.7" y="1731.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.7" y="1742.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1079.7" y="1715.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.7" y="1726.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.10%)</title><rect x="1080.8" y="1859.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1083.8" y="1870.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (2 samples, 0.20%)</title><rect x="1082.0" y="1891.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1083.1" y="1875.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1083.1" y="1859.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1086.1" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1083.1" y="1843.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1086.1" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.10%)</title><rect x="1083.1" y="1827.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1086.1" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1083.1" y="1811.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.1" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1083.1" y="1795.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.1" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1083.1" y="1779.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1086.1" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1083.1" y="1763.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.1" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1083.1" y="1747.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.1" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1083.1" y="1731.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.1" y="1742.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1083.1" y="1715.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.1" y="1726.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1083.1" y="1699.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (14 samples, 1.38%)</title><rect x="1084.3" y="1891.0" width="16.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.3" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (14 samples, 1.38%)</title><rect x="1084.3" y="1875.0" width="16.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.3" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1084.3" y="1859.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.3" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.10%)</title><rect x="1084.3" y="1843.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1087.3" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::add_edge(PointsToNode*, PointsToNode*) [clone .isra.196] (1 samples, 0.10%)</title><rect x="1084.3" y="1827.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.3" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (13 samples, 1.28%)</title><rect x="1085.5" y="1859.0" width="15.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1088.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (12 samples, 1.18%)</title><rect x="1086.6" y="1843.0" width="14.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.6" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (12 samples, 1.18%)</title><rect x="1086.6" y="1827.0" width="14.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1089.6" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1086.6" y="1811.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.6" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1086.6" y="1795.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1089.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (11 samples, 1.08%)</title><rect x="1087.8" y="1811.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.8" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1087.8" y="1795.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1087.8" y="1779.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.8" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1087.8" y="1763.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.8" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1087.8" y="1747.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1087.8" y="1731.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1087.8" y="1715.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1087.8" y="1699.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1087.8" y="1683.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1087.8" y="1667.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1087.8" y="1651.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1087.8" y="1635.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1090.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1087.8" y="1619.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1087.8" y="1603.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.8" y="1614.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1087.8" y="1587.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.8" y="1598.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1087.8" y="1571.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.8" y="1582.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.10%)</title><rect x="1087.8" y="1555.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1090.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1699.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1683.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1092.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1667.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1651.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1092.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1635.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1619.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1603.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1587.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1571.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1555.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1539.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1523.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1092.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1507.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1491.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1475.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1459.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1092.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1443.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1427.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1411.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1092.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1395.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1379.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1363.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1092.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1347.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1089.0" y="1331.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.0" y="1342.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1089.0" y="1315.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1090.1" y="1715.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1090.1" y="1699.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.1" y="1710.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1090.1" y="1683.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (8 samples, 0.79%)</title><rect x="1091.3" y="1795.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.3" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.20%)</title><rect x="1091.3" y="1779.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.3" y="1790.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (2 samples, 0.20%)</title><rect x="1091.3" y="1763.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.3" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.59%)</title><rect x="1093.6" y="1779.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.6" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.59%)</title><rect x="1093.6" y="1763.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.6" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1093.6" y="1747.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.6" y="1758.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1093.6" y="1731.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.39%)</title><rect x="1094.8" y="1747.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1731.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1715.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1699.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1683.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1667.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1651.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1635.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1619.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1603.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.8" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1587.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.8" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1571.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1555.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1539.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1523.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1507.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1094.8" y="1491.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1094.8" y="1475.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.8" y="1486.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1094.8" y="1459.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1475.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.9" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1459.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.9" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1443.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.9" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1427.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.9" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1411.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.9" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1395.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.9" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1379.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.9" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1363.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.9" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1347.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.9" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1331.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.9" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1095.9" y="1315.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.9" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1299.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.9" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1283.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.9" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1267.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.9" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1251.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.9" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1235.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.9" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1219.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.9" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1203.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.9" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1187.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1171.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.9" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1095.9" y="1155.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.9" y="1166.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1095.9" y="1139.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.9" y="1150.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.10%)</title><rect x="1097.1" y="1299.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1098.2" y="1731.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1098.2" y="1715.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.2" y="1726.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1098.2" y="1699.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.2" y="1710.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.10%)</title><rect x="1099.4" y="1747.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.4" y="1758.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1100.6" y="1891.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.6" y="1902.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1100.6" y="1875.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.6" y="1886.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1100.6" y="1859.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.6" y="1870.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1100.6" y="1843.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.6" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.10%)</title><rect x="1100.6" y="1827.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.6" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.10%)</title><rect x="1100.6" y="1811.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.6" y="1822.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.10%)</title><rect x="1101.7" y="1891.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.10%)</title><rect x="1101.7" y="1875.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (27 samples, 2.66%)</title><rect x="1102.9" y="1891.0" width="31.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.9" y="1902.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1102.9" y="1875.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.9" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1102.9" y="1859.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.9" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1102.9" y="1843.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1102.9" y="1827.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.10%)</title><rect x="1102.9" y="1811.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.9" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1104.1" y="1875.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.1" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1104.1" y="1859.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.10%)</title><rect x="1104.1" y="1843.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.10%)</title><rect x="1104.1" y="1827.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.1" y="1838.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.10%)</title><rect x="1104.1" y="1811.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.1" y="1822.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.10%)</title><rect x="1105.2" y="1875.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.20%)</title><rect x="1106.4" y="1875.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.4" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1107.5" y="1859.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1108.7" y="1875.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1109.9" y="1859.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 1.67%)</title><rect x="1111.0" y="1875.0" width="19.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 1.57%)</title><rect x="1112.2" y="1859.0" width="18.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 1.38%)</title><rect x="1113.3" y="1843.0" width="16.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.3" y="1854.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.10%)</title><rect x="1113.3" y="1827.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.20%)</title><rect x="1114.5" y="1827.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.20%)</title><rect x="1114.5" y="1811.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.5" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.10%)</title><rect x="1115.7" y="1795.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.7" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (11 samples, 1.08%)</title><rect x="1116.8" y="1827.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.10%)</title><rect x="1129.6" y="1843.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1130.8" y="1875.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*) (1 samples, 0.10%)</title><rect x="1130.8" y="1859.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.20%)</title><rect x="1131.9" y="1875.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.20%)</title><rect x="1131.9" y="1859.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.9" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1131.9" y="1843.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.9" y="1854.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1131.9" y="1827.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.9" y="1838.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1133.1" y="1843.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.1" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.10%)</title><rect x="1133.1" y="1827.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.1" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1811.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.1" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1795.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1779.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.1" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1763.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.1" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1747.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.1" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1731.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1715.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.1" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1699.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1683.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1667.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.1" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1651.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1635.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.1" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1619.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.1" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1603.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.1" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1587.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.1" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1571.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1555.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1539.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.1" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1523.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.1" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1507.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="1518.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1491.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.1" y="1502.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1133.1" y="1475.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="1486.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1133.1" y="1459.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="1470.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (25 samples, 2.46%)</title><rect x="1134.3" y="1891.0" width="29.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.3" y="1902.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (24 samples, 2.36%)</title><rect x="1135.4" y="1875.0" width="27.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.4" y="1886.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1137.7" y="1859.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1137.7" y="1843.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.7" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1138.9" y="1859.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.20%)</title><rect x="1138.9" y="1843.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.9" y="1854.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.10%)</title><rect x="1138.9" y="1827.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1140.1" y="1827.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.1" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1140.1" y="1811.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.1" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1141.2" y="1859.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.2" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1141.2" y="1843.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.2" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1141.2" y="1827.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.2" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1141.2" y="1811.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.2" y="1822.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1142.4" y="1859.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="1870.0"></text>
</g>
<g>
<title>MemBarNode::remove(PhaseIterGVN*) [clone .part.156] (1 samples, 0.10%)</title><rect x="1142.4" y="1843.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1145.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1142.4" y="1827.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1142.4" y="1811.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.4" y="1822.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1142.4" y="1795.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.4" y="1806.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.10%)</title><rect x="1143.5" y="1859.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.20%)</title><rect x="1144.7" y="1859.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1147.0" y="1859.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.59%)</title><rect x="1148.2" y="1859.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.20%)</title><rect x="1152.8" y="1843.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.8" y="1854.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.20%)</title><rect x="1152.8" y="1827.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.8" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1155.2" y="1859.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.2" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1156.3" y="1859.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1156.3" y="1843.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1156.3" y="1827.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.3" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1156.3" y="1811.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.3" y="1822.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1157.5" y="1843.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1160.5" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.39%)</title><rect x="1158.6" y="1859.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.6" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (4 samples, 0.39%)</title><rect x="1158.6" y="1843.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.6" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1158.6" y="1827.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.6" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1158.6" y="1811.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.6" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1158.6" y="1795.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.6" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1158.6" y="1779.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.6" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1158.6" y="1763.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.6" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1158.6" y="1747.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.6" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1731.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.6" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1715.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.6" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1699.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.6" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1683.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1667.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1651.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.6" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1635.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.6" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1619.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.6" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1603.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.6" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1587.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.6" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1158.6" y="1571.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.6" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1158.6" y="1555.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.6" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1158.6" y="1539.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.6" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1158.6" y="1523.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.6" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1158.6" y="1507.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.6" y="1518.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1158.6" y="1491.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.6" y="1502.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1158.6" y="1475.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.6" y="1486.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1159.8" y="1507.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.8" y="1518.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1159.8" y="1491.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.8" y="1502.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1161.0" y="1555.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="1566.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1161.0" y="1539.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.0" y="1550.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1162.1" y="1731.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.1" y="1742.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1162.1" y="1715.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="1726.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.10%)</title><rect x="1163.3" y="1891.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1163.3" y="1875.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1163.3" y="1859.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1163.3" y="1843.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="1854.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1163.3" y="1827.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="1838.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.10%)</title><rect x="1163.3" y="1811.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="1822.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1164.4" y="1891.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.4" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 1.38%)</title><rect x="1165.6" y="1907.0" width="16.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.6" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 1.38%)</title><rect x="1165.6" y="1891.0" width="16.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 1.38%)</title><rect x="1165.6" y="1875.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 1.38%)</title><rect x="1165.6" y="1859.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 1.38%)</title><rect x="1165.6" y="1843.0" width="16.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.6" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 1.38%)</title><rect x="1165.6" y="1827.0" width="16.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 1.38%)</title><rect x="1165.6" y="1811.0" width="16.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 1.38%)</title><rect x="1165.6" y="1795.0" width="16.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 1.38%)</title><rect x="1165.6" y="1779.0" width="16.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 1.38%)</title><rect x="1165.6" y="1763.0" width="16.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 1.38%)</title><rect x="1165.6" y="1747.0" width="16.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 1.28%)</title><rect x="1165.6" y="1731.0" width="15.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.49%)</title><rect x="1165.6" y="1715.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.6" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.49%)</title><rect x="1165.6" y="1699.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.6" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.49%)</title><rect x="1165.6" y="1683.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.49%)</title><rect x="1165.6" y="1667.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.49%)</title><rect x="1165.6" y="1651.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.39%)</title><rect x="1165.6" y="1635.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.6" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1165.6" y="1619.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1165.6" y="1603.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.6" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1165.6" y="1587.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1165.6" y="1571.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1165.6" y="1555.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1165.6" y="1539.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.6" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1165.6" y="1523.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.6" y="1534.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1165.6" y="1507.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.6" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1166.8" y="1523.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.8" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1166.8" y="1507.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.8" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1166.8" y="1491.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1166.8" y="1475.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1166.8" y="1459.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1166.8" y="1443.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1166.8" y="1427.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.8" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1166.8" y="1411.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.8" y="1422.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.10%)</title><rect x="1166.8" y="1395.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.8" y="1406.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1166.8" y="1379.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="1390.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1166.8" y="1363.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="1374.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.10%)</title><rect x="1166.8" y="1347.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.10%)</title><rect x="1167.9" y="1395.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="1406.0"></text>
</g>
<g>
<title>ciMethod::is_initializer() const (1 samples, 0.10%)</title><rect x="1167.9" y="1379.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="1390.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1169.1" y="1619.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1169.1" y="1603.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1169.1" y="1587.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1169.1" y="1571.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1169.1" y="1555.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.1" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1169.1" y="1539.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.1" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1169.1" y="1523.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1169.1" y="1507.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.1" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1169.1" y="1491.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1169.1" y="1475.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.1" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1169.1" y="1459.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1169.1" y="1443.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1169.1" y="1427.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.1" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1169.1" y="1411.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.1" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1169.1" y="1395.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.1" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1169.1" y="1379.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1169.1" y="1363.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1169.1" y="1347.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1169.1" y="1331.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.1" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1169.1" y="1315.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.1" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1169.1" y="1299.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.1" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1169.1" y="1283.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1169.1" y="1267.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1169.1" y="1251.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1169.1" y="1235.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.1" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1169.1" y="1219.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.1" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1169.1" y="1203.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.1" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1169.1" y="1187.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1169.1" y="1171.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1169.1" y="1155.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1169.1" y="1139.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.1" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1169.1" y="1123.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.1" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1169.1" y="1107.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1169.1" y="1091.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1169.1" y="1075.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1169.1" y="1059.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.1" y="1070.0"></text>
</g>
<g>
<title>GraphKit::load_array_length(Node*) (1 samples, 0.10%)</title><rect x="1169.1" y="1043.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.1" y="1054.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1169.1" y="1027.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.1" y="1038.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1169.1" y="1011.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1170.3" y="1635.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.3" y="1646.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.10%)</title><rect x="1170.3" y="1619.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.3" y="1630.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1170.3" y="1603.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.3" y="1614.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1170.3" y="1587.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="1598.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (8 samples, 0.79%)</title><rect x="1171.4" y="1715.0" width="9.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.4" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.69%)</title><rect x="1171.4" y="1699.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.69%)</title><rect x="1171.4" y="1683.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.69%)</title><rect x="1171.4" y="1667.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.69%)</title><rect x="1171.4" y="1651.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.69%)</title><rect x="1171.4" y="1635.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.69%)</title><rect x="1171.4" y="1619.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="1630.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1171.4" y="1603.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.4" y="1614.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1171.4" y="1587.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="1598.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1171.4" y="1571.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.4" y="1582.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1171.4" y="1555.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="1566.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1171.4" y="1539.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="1550.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1171.4" y="1523.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.4" y="1534.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1171.4" y="1507.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="1518.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1171.4" y="1491.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.4" y="1502.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1171.4" y="1475.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="1486.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1171.4" y="1459.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="1470.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1171.4" y="1443.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="1454.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1171.4" y="1427.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="1438.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1171.4" y="1411.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="1422.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.10%)</title><rect x="1171.4" y="1395.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="1406.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1171.4" y="1379.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.4" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.59%)</title><rect x="1172.6" y="1603.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.59%)</title><rect x="1172.6" y="1587.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.59%)</title><rect x="1172.6" y="1571.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.59%)</title><rect x="1172.6" y="1555.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.59%)</title><rect x="1172.6" y="1539.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.59%)</title><rect x="1172.6" y="1523.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.49%)</title><rect x="1172.6" y="1507.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.49%)</title><rect x="1172.6" y="1491.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.49%)</title><rect x="1172.6" y="1475.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.49%)</title><rect x="1172.6" y="1459.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.49%)</title><rect x="1172.6" y="1443.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.49%)</title><rect x="1172.6" y="1427.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1172.6" y="1411.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1172.6" y="1395.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1172.6" y="1379.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1172.6" y="1363.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1172.6" y="1347.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1172.6" y="1331.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1172.6" y="1315.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1172.6" y="1299.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1172.6" y="1283.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.6" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1172.6" y="1267.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1172.6" y="1251.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1172.6" y="1235.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.6" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1172.6" y="1219.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1172.6" y="1203.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1172.6" y="1187.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1172.6" y="1171.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1172.6" y="1155.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1172.6" y="1139.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1172.6" y="1123.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1172.6" y="1107.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1172.6" y="1091.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1172.6" y="1075.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1172.6" y="1059.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1172.6" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1172.6" y="1027.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1172.6" y="1011.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1172.6" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1172.6" y="979.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1172.6" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1172.6" y="947.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1172.6" y="931.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1172.6" y="915.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="926.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.10%)</title><rect x="1172.6" y="899.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.6" y="910.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.10%)</title><rect x="1172.6" y="883.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="894.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.10%)</title><rect x="1172.6" y="867.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="878.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1172.6" y="851.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="862.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.10%)</title><rect x="1172.6" y="835.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.20%)</title><rect x="1173.7" y="1331.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.7" y="1342.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.10%)</title><rect x="1173.7" y="1315.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="1326.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.10%)</title><rect x="1173.7" y="1299.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="1310.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1173.7" y="1283.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="1294.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.10%)</title><rect x="1173.7" y="1267.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="1278.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="1173.7" y="1251.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1174.9" y="1315.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="1326.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.10%)</title><rect x="1174.9" y="1299.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="1310.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1174.9" y="1283.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="1294.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.10%)</title><rect x="1174.9" y="1267.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="1278.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.10%)</title><rect x="1174.9" y="1251.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="1262.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.10%)</title><rect x="1174.9" y="1235.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="1246.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.10%)</title><rect x="1174.9" y="1219.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="1230.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.10%)</title><rect x="1174.9" y="1203.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="1214.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.10%)</title><rect x="1174.9" y="1187.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="1198.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.10%)</title><rect x="1174.9" y="1171.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="1182.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.10%)</title><rect x="1174.9" y="1155.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="1166.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1176.1" y="1411.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1176.1" y="1395.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1176.1" y="1379.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1176.1" y="1363.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1176.1" y="1347.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1176.1" y="1331.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1176.1" y="1315.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.1" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1176.1" y="1299.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1176.1" y="1283.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1176.1" y="1267.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1176.1" y="1251.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1176.1" y="1235.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1176.1" y="1219.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="1230.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1176.1" y="1203.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.1" y="1214.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.10%)</title><rect x="1176.1" y="1187.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="1198.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.10%)</title><rect x="1176.1" y="1171.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.10%)</title><rect x="1176.1" y="1155.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.10%)</title><rect x="1176.1" y="1139.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.1" y="1150.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.10%)</title><rect x="1176.1" y="1123.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="1134.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="1176.1" y="1107.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1179.1" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.2" y="1187.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1177.2" y="1171.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1177.2" y="1155.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1177.2" y="1139.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1177.2" y="1123.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.10%)</title><rect x="1177.2" y="1107.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="1118.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.10%)</title><rect x="1177.2" y="1091.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="1102.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1177.2" y="1075.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.2" y="1086.0"></text>
</g>
<g>
<title>TypeOopPtr::cleanup_speculative() const (1 samples, 0.10%)</title><rect x="1177.2" y="1059.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="1070.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.4" y="1507.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.4" y="1491.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.4" y="1475.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="1486.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.10%)</title><rect x="1178.4" y="1459.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="1470.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1178.4" y="1443.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="1454.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1178.4" y="1427.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.4" y="1438.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1699.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="1710.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1683.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="1694.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.5" y="1667.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.5" y="1651.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.5" y="1635.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="1646.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.5" y="1619.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="1630.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.5" y="1603.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.5" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1587.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.5" y="1571.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.5" y="1555.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.5" y="1539.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.5" y="1523.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.5" y="1507.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="1518.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1491.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="1502.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1475.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="1486.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.5" y="1459.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.5" y="1470.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.5" y="1443.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.5" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.5" y="1427.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.5" y="1411.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.5" y="1395.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1379.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.5" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.5" y="1363.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.5" y="1347.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.5" y="1331.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.5" y="1315.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.5" y="1299.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="1310.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1283.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1267.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.5" y="1251.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.5" y="1235.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.5" y="1219.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.5" y="1203.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.5" y="1187.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1171.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.5" y="1155.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.5" y="1139.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.5" y="1123.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.5" y="1107.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.5" y="1091.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.5" y="1075.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.5" y="1059.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.5" y="1043.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.5" y="1027.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.5" y="1011.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1179.5" y="995.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1179.5" y="979.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="990.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.10%)</title><rect x="1179.5" y="963.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="974.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1179.5" y="947.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="958.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1179.5" y="931.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="942.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.10%)</title><rect x="1179.5" y="915.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="926.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.10%)</title><rect x="1179.5" y="899.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="910.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.10%)</title><rect x="1179.5" y="883.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="894.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.10%)</title><rect x="1179.5" y="867.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="878.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1179.5" y="851.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1180.7" y="1731.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="1742.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1180.7" y="1715.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1726.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.10%)</title><rect x="1180.7" y="1699.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="1710.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.10%)</title><rect x="1181.9" y="1907.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="1918.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.10%)</title><rect x="1183.0" y="1907.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="1918.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.10%)</title><rect x="1183.0" y="1891.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.0" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.20%)</title><rect x="1184.2" y="1939.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.20%)</title><rect x="1184.2" y="1923.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.20%)</title><rect x="1184.2" y="1907.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.20%)</title><rect x="1184.2" y="1891.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (2 samples, 0.20%)</title><rect x="1184.2" y="1875.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.20%)</title><rect x="1184.2" y="1859.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.20%)</title><rect x="1184.2" y="1843.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.20%)</title><rect x="1184.2" y="1827.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.20%)</title><rect x="1184.2" y="1811.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.20%)</title><rect x="1184.2" y="1795.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.2" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.20%)</title><rect x="1184.2" y="1779.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.20%)</title><rect x="1184.2" y="1763.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.2" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.20%)</title><rect x="1184.2" y="1747.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.4" y="1731.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.4" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.4" y="1715.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.4" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.4" y="1699.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.4" y="1710.0"></text>
</g>
<g>
<title>ValueStack::pop_arguments(int) (1 samples, 0.10%)</title><rect x="1185.4" y="1683.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.4" y="1694.0"></text>
</g>
<g>
<title>CompileTask::free(CompileTask*) (1 samples, 0.10%)</title><rect x="1186.5" y="1971.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.5" y="1982.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.10%)</title><rect x="1187.7" y="1971.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="1982.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.10%)</title><rect x="1187.7" y="1955.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.10%)</title><rect x="1187.7" y="1939.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.7" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.10%)</title><rect x="1187.7" y="1923.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1190.7" y="1934.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.10%)</title><rect x="1187.7" y="1907.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.7" y="1918.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.10%)</title><rect x="1188.8" y="1987.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="1998.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.8" y="1971.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="1982.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.10%)</title><rect x="1188.8" y="1955.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="1966.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="1939.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.8" y="1950.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="1923.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="1907.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.8" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (1 samples, 0.10%)</title><rect x="1188.8" y="1891.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.8" y="1902.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.10%)</title><rect x="1188.8" y="1875.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.8" y="1886.0"></text>
</g>
<g>
<title>G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="1188.8" y="1859.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.8" y="1870.0"></text>
</g>
</g>
</svg>
