<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (264 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 6.06%)</title><rect x="10.0" y="1139.0" width="71.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (16 samples, 6.06%)</title><rect x="10.0" y="1123.0" width="71.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1134.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (16 samples, 6.06%)</title><rect x="10.0" y="1107.0" width="71.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1118.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (5 samples, 1.89%)</title><rect x="10.0" y="1091.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (3 samples, 1.14%)</title><rect x="10.0" y="1075.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (1 samples, 0.38%)</title><rect x="14.5" y="1059.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$CollectorImpl.&lt;init&gt; (1 samples, 0.38%)</title><rect x="14.5" y="1043.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.38%)</title><rect x="18.9" y="1059.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.38%)</title><rect x="18.9" y="1043.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.38%)</title><rect x="18.9" y="1027.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.38%)</title><rect x="18.9" y="1011.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (2 samples, 0.76%)</title><rect x="23.4" y="1075.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (1 samples, 0.38%)</title><rect x="23.4" y="1059.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.38%)</title><rect x="27.9" y="1059.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.38%)</title><rect x="27.9" y="1043.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.52%)</title><rect x="32.3" y="1091.0" width="17.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/388774129.accept (4 samples, 1.52%)</title><rect x="32.3" y="1075.0" width="17.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.52%)</title><rect x="32.3" y="1059.0" width="17.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (2 samples, 0.76%)</title><rect x="32.3" y="1043.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.76%)</title><rect x="32.3" y="1027.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.76%)</title><rect x="32.3" y="1011.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.76%)</title><rect x="32.3" y="995.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.76%)</title><rect x="32.3" y="979.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.38%)</title><rect x="36.8" y="963.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.38%)</title><rect x="36.8" y="947.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.38%)</title><rect x="36.8" y="931.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.38%)</title><rect x="36.8" y="915.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.38%)</title><rect x="36.8" y="899.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.76%)</title><rect x="41.3" y="1043.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.76%)</title><rect x="41.3" y="1027.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.76%)</title><rect x="41.3" y="1011.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.76%)</title><rect x="41.3" y="995.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.3" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.38%)</title><rect x="50.2" y="1091.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 2.27%)</title><rect x="54.7" y="1091.0" width="26.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.7" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (6 samples, 2.27%)</title><rect x="54.7" y="1075.0" width="26.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.7" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.27%)</title><rect x="54.7" y="1059.0" width="26.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="57.7" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="54.7" y="1043.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="57.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="54.7" y="1027.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.38%)</title><rect x="54.7" y="1011.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.38%)</title><rect x="54.7" y="995.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.38%)</title><rect x="54.7" y="979.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.38%)</title><rect x="54.7" y="963.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.38%)</title><rect x="54.7" y="947.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.38%)</title><rect x="54.7" y="931.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.38%)</title><rect x="54.7" y="915.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.38%)</title><rect x="54.7" y="899.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.7" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.38%)</title><rect x="54.7" y="883.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.7" y="894.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="54.7" y="867.0" width="4.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="57.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (3 samples, 1.14%)</title><rect x="59.2" y="1043.0" width="13.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.38%)</title><rect x="59.2" y="1027.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.38%)</title><rect x="59.2" y="1011.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.2" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.38%)</title><rect x="59.2" y="995.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="62.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$473/1900449636.accept (1 samples, 0.38%)</title><rect x="59.2" y="979.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.38%)</title><rect x="59.2" y="963.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.38%)</title><rect x="59.2" y="947.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.38%)</title><rect x="59.2" y="931.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.76%)</title><rect x="63.6" y="1027.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (2 samples, 0.76%)</title><rect x="63.6" y="1011.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.76%)</title><rect x="63.6" y="995.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.38%)</title><rect x="68.1" y="979.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.38%)</title><rect x="68.1" y="963.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.38%)</title><rect x="68.1" y="947.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.38%)</title><rect x="68.1" y="931.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.38%)</title><rect x="68.1" y="915.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.38%)</title><rect x="68.1" y="899.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.38%)</title><rect x="68.1" y="883.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.38%)</title><rect x="68.1" y="867.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.1" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.38%)</title><rect x="68.1" y="851.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.1" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.38%)</title><rect x="68.1" y="835.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.1" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.38%)</title><rect x="68.1" y="819.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.76%)</title><rect x="72.6" y="1043.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.76%)</title><rect x="72.6" y="1027.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.38%)</title><rect x="72.6" y="1011.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.6" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.38%)</title><rect x="72.6" y="995.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.38%)</title><rect x="77.0" y="1011.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.38%)</title><rect x="77.0" y="995.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.38%)</title><rect x="77.0" y="979.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.run (133 samples, 50.38%)</title><rect x="81.5" y="1139.0" width="594.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.5" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (133 samples, 50.38%)</title><rect x="81.5" y="1123.0" width="594.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.5" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (133 samples, 50.38%)</title><rect x="81.5" y="1107.0" width="594.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.5" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/458661910.run (123 samples, 46.59%)</title><rect x="81.5" y="1091.0" width="549.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.5" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/45..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (123 samples, 46.59%)</title><rect x="81.5" y="1075.0" width="549.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.5" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (123 samples, 46.59%)</title><rect x="81.5" y="1059.0" width="549.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.5" y="1070.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (123 samples, 46.59%)</title><rect x="81.5" y="1043.0" width="549.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.5" y="1054.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.38%)</title><rect x="86.0" y="1027.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="89.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (8 samples, 3.03%)</title><rect x="90.5" y="1027.0" width="35.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.5" y="1038.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.03%)</title><rect x="90.5" y="1011.0" width="35.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.5" y="1022.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.03%)</title><rect x="90.5" y="995.0" width="35.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.5" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.65%)</title><rect x="94.9" y="979.0" width="31.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.9" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.65%)</title><rect x="94.9" y="963.0" width="31.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.9" y="974.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$480/862037595.accept (7 samples, 2.65%)</title><rect x="94.9" y="947.0" width="31.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.9" y="958.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (7 samples, 2.65%)</title><rect x="94.9" y="931.0" width="31.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.9" y="942.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 2.65%)</title><rect x="94.9" y="915.0" width="31.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="97.9" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (7 samples, 2.65%)</title><rect x="94.9" y="899.0" width="31.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.9" y="910.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 2.65%)</title><rect x="94.9" y="883.0" width="31.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.9" y="894.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.52%)</title><rect x="94.9" y="867.0" width="17.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.9" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.38%)</title><rect x="108.3" y="851.0" width="4.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="111.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.14%)</title><rect x="112.8" y="867.0" width="13.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (1 samples, 0.38%)</title><rect x="126.2" y="1027.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (1 samples, 0.38%)</title><rect x="126.2" y="1011.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.38%)</title><rect x="126.2" y="995.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.38%)</title><rect x="126.2" y="979.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="129.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.38%)</title><rect x="126.2" y="963.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (17 samples, 6.44%)</title><rect x="130.7" y="1027.0" width="76.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.7" y="1038.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (17 samples, 6.44%)</title><rect x="130.7" y="1011.0" width="76.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.7" y="1022.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (17 samples, 6.44%)</title><rect x="130.7" y="995.0" width="76.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.7" y="1006.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 6.44%)</title><rect x="130.7" y="979.0" width="76.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="133.7" y="990.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 6.44%)</title><rect x="130.7" y="963.0" width="76.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="133.7" y="974.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (17 samples, 6.44%)</title><rect x="130.7" y="947.0" width="76.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="133.7" y="958.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.27%)</title><rect x="130.7" y="931.0" width="26.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="133.7" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.27%)</title><rect x="130.7" y="915.0" width="26.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="133.7" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.27%)</title><rect x="130.7" y="899.0" width="26.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.7" y="910.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="130.7" y="883.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="133.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="130.7" y="867.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="133.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.38%)</title><rect x="130.7" y="851.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="133.7" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.38%)</title><rect x="130.7" y="835.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="133.7" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.38%)</title><rect x="130.7" y="819.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="133.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 1.89%)</title><rect x="135.2" y="883.0" width="22.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="138.2" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 1.89%)</title><rect x="135.2" y="867.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.2" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (4 samples, 1.52%)</title><rect x="135.2" y="851.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (4 samples, 1.52%)</title><rect x="135.2" y="835.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.38%)</title><rect x="153.0" y="851.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="153.0" y="835.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="156.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="153.0" y="819.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="156.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.38%)</title><rect x="153.0" y="803.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="156.0" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.38%)</title><rect x="153.0" y="787.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="156.0" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.38%)</title><rect x="153.0" y="771.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="156.0" y="782.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.38%)</title><rect x="153.0" y="755.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="156.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 4.17%)</title><rect x="157.5" y="931.0" width="49.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.5" y="942.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.52%)</title><rect x="157.5" y="915.0" width="17.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.52%)</title><rect x="157.5" y="899.0" width="17.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 1.14%)</title><rect x="157.5" y="883.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 1.14%)</title><rect x="157.5" y="867.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="166.4" y="851.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="169.4" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="166.4" y="835.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="169.4" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.38%)</title><rect x="166.4" y="819.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="169.4" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.38%)</title><rect x="166.4" y="803.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="169.4" y="814.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.38%)</title><rect x="166.4" y="787.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="169.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.38%)</title><rect x="170.9" y="883.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.38%)</title><rect x="170.9" y="867.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="173.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.38%)</title><rect x="170.9" y="851.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.38%)</title><rect x="175.4" y="915.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (6 samples, 2.27%)</title><rect x="179.8" y="915.0" width="26.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.8" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.27%)</title><rect x="179.8" y="899.0" width="26.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.8" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.38%)</title><rect x="179.8" y="883.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.38%)</title><rect x="179.8" y="867.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="182.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.89%)</title><rect x="184.3" y="883.0" width="22.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="187.3" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.89%)</title><rect x="184.3" y="867.0" width="22.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.3" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 1.89%)</title><rect x="184.3" y="851.0" width="22.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.3" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.76%)</title><rect x="193.3" y="835.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.38%)</title><rect x="197.7" y="819.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.38%)</title><rect x="197.7" y="803.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.38%)</title><rect x="197.7" y="787.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="200.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.38%)</title><rect x="197.7" y="771.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.38%)</title><rect x="202.2" y="835.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.38%)</title><rect x="202.2" y="819.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.38%)</title><rect x="202.2" y="803.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.38%)</title><rect x="202.2" y="787.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.2" y="798.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.38%)</title><rect x="202.2" y="771.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.38%)</title><rect x="202.2" y="755.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.38%)</title><rect x="202.2" y="739.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (95 samples, 35.98%)</title><rect x="206.7" y="1027.0" width="424.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="209.7" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessPip..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (8 samples, 3.03%)</title><rect x="206.7" y="1011.0" width="35.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.7" y="1022.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (8 samples, 3.03%)</title><rect x="206.7" y="995.0" width="35.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.7" y="1006.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (8 samples, 3.03%)</title><rect x="206.7" y="979.0" width="35.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="209.7" y="990.0">ch/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.38%)</title><rect x="206.7" y="963.0" width="4.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="209.7" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 1.89%)</title><rect x="211.1" y="963.0" width="22.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.1" y="974.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="220.1" y="947.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.76%)</title><rect x="224.5" y="947.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.76%)</title><rect x="224.5" y="931.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.5" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.76%)</title><rect x="233.5" y="963.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.5" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.76%)</title><rect x="233.5" y="947.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="236.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.76%)</title><rect x="233.5" y="931.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.5" y="942.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.38%)</title><rect x="238.0" y="915.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.76%)</title><rect x="242.4" y="1011.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.4" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.76%)</title><rect x="242.4" y="995.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (19 samples, 7.20%)</title><rect x="251.4" y="1011.0" width="84.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.4" y="1022.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (13 samples, 4.92%)</title><rect x="255.8" y="995.0" width="58.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.8" y="1006.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 2.65%)</title><rect x="255.8" y="979.0" width="31.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.8" y="990.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.14%)</title><rect x="269.2" y="963.0" width="13.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="272.2" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.14%)</title><rect x="269.2" y="947.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.2" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.14%)</title><rect x="269.2" y="931.0" width="13.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.2" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.14%)</title><rect x="269.2" y="915.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.2" y="926.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.38%)</title><rect x="278.2" y="899.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="281.2" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="282.7" y="963.0" width="4.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="285.7" y="974.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.27%)</title><rect x="287.1" y="979.0" width="26.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.1" y="990.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.89%)</title><rect x="291.6" y="963.0" width="22.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.6" y="974.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="291.6" y="947.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.38%)</title><rect x="291.6" y="931.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.38%)</title><rect x="291.6" y="915.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.52%)</title><rect x="296.1" y="947.0" width="17.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.52%)</title><rect x="296.1" y="931.0" width="17.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.38%)</title><rect x="296.1" y="915.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.1" y="926.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.38%)</title><rect x="296.1" y="899.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.1" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.38%)</title><rect x="296.1" y="883.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.14%)</title><rect x="300.5" y="915.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (4 samples, 1.52%)</title><rect x="313.9" y="995.0" width="17.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (4 samples, 1.52%)</title><rect x="313.9" y="979.0" width="17.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.9" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 1.14%)</title><rect x="313.9" y="963.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.9" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.76%)</title><rect x="313.9" y="947.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="316.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.76%)</title><rect x="313.9" y="931.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.9" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.38%)</title><rect x="322.9" y="947.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.9" y="958.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.38%)</title><rect x="327.3" y="963.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.3" y="974.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (1 samples, 0.38%)</title><rect x="327.3" y="947.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.3" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.38%)</title><rect x="331.8" y="995.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.38%)</title><rect x="331.8" y="979.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.8" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.38%)</title><rect x="331.8" y="963.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.8" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.38%)</title><rect x="331.8" y="947.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (64 samples, 24.24%)</title><rect x="336.3" y="1011.0" width="286.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.3" y="1022.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (64 samples, 24.24%)</title><rect x="336.3" y="995.0" width="286.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.3" y="1006.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/1297926796.process (50 samples, 18.94%)</title><rect x="336.3" y="979.0" width="223.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="339.3" y="990.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (50 samples, 18.94%)</title><rect x="336.3" y="963.0" width="223.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.3" y="974.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (50 samples, 18.94%)</title><rect x="336.3" y="947.0" width="223.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.3" y="958.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (48 samples, 18.18%)</title><rect x="336.3" y="931.0" width="214.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.3" y="942.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (48 samples, 18.18%)</title><rect x="336.3" y="915.0" width="214.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.3" y="926.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (45 samples, 17.05%)</title><rect x="345.2" y="899.0" width="201.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="348.2" y="910.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 1.89%)</title><rect x="349.7" y="883.0" width="22.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="352.7" y="894.0">H..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.38%)</title><rect x="372.0" y="883.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="375.0" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.52%)</title><rect x="376.5" y="883.0" width="17.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="379.5" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 4.55%)</title><rect x="394.4" y="883.0" width="53.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="397.4" y="894.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (7 samples, 2.65%)</title><rect x="448.0" y="883.0" width="31.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="451.0" y="894.0">ja..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (15 samples, 5.68%)</title><rect x="479.3" y="883.0" width="67.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="482.3" y="894.0">os::sle..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.52%)</title><rect x="497.2" y="867.0" width="17.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="500.2" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 2.27%)</title><rect x="515.1" y="867.0" width="26.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="518.1" y="878.0">_..</text>
</g>
<g>
<title>[vdso] (4 samples, 1.52%)</title><rect x="524.0" y="851.0" width="17.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="527.0" y="862.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.38%)</title><rect x="541.9" y="867.0" width="4.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="544.9" y="878.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.38%)</title><rect x="546.4" y="899.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="549.4" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="550.8" y="931.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.38%)</title><rect x="550.8" y="915.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.8" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.38%)</title><rect x="555.3" y="931.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="558.3" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.38%)</title><rect x="555.3" y="915.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="558.3" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.38%)</title><rect x="555.3" y="899.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="558.3" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.38%)</title><rect x="555.3" y="883.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="558.3" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.38%)</title><rect x="555.3" y="867.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="558.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 1.89%)</title><rect x="559.8" y="979.0" width="22.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="562.8" y="990.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.38%)</title><rect x="582.1" y="979.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="585.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.38%)</title><rect x="582.1" y="963.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="585.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.38%)</title><rect x="586.6" y="979.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="589.6" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.38%)</title><rect x="586.6" y="963.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.6" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.76%)</title><rect x="591.1" y="979.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="594.1" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (2 samples, 0.76%)</title><rect x="591.1" y="963.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="594.1" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (2 samples, 0.76%)</title><rect x="591.1" y="947.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="594.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.89%)</title><rect x="600.0" y="979.0" width="22.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.0" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.89%)</title><rect x="600.0" y="963.0" width="22.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.0" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.89%)</title><rect x="600.0" y="947.0" width="22.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.0" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 1.14%)</title><rect x="600.0" y="931.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.0" y="942.0"></text>
</g>
<g>
<title>itable stub (3 samples, 1.14%)</title><rect x="600.0" y="915.0" width="13.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="603.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.76%)</title><rect x="613.4" y="931.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="616.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$478/2013581959.accept (2 samples, 0.76%)</title><rect x="613.4" y="915.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="616.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$1 (2 samples, 0.76%)</title><rect x="613.4" y="899.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="616.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.76%)</title><rect x="622.3" y="1011.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.76%)</title><rect x="622.3" y="995.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="625.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.76%)</title><rect x="622.3" y="979.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="625.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.76%)</title><rect x="622.3" y="963.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="625.3" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="626.8" y="947.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="629.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="626.8" y="931.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="629.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.38%)</title><rect x="626.8" y="915.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="629.8" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.38%)</title><rect x="626.8" y="899.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="629.8" y="910.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.38%)</title><rect x="626.8" y="883.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="629.8" y="894.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.38%)</title><rect x="626.8" y="867.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="629.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 3.79%)</title><rect x="631.3" y="1091.0" width="44.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="634.3" y="1102.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 3.41%)</title><rect x="635.8" y="1075.0" width="40.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="638.8" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 1.14%)</title><rect x="635.8" y="1059.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 1.14%)</title><rect x="635.8" y="1043.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.14%)</title><rect x="635.8" y="1027.0" width="13.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="638.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.27%)</title><rect x="649.2" y="1059.0" width="26.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="652.2" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.27%)</title><rect x="649.2" y="1043.0" width="26.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="652.2" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.27%)</title><rect x="649.2" y="1027.0" width="26.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.2" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.27%)</title><rect x="649.2" y="1011.0" width="26.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.2" y="1022.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.76%)</title><rect x="676.0" y="1139.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="679.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.sendHeartbeatRequest (1 samples, 0.38%)</title><rect x="676.0" y="1123.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="679.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.38%)</title><rect x="680.5" y="1123.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="683.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.38%)</title><rect x="680.5" y="1107.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="683.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.38%)</title><rect x="680.5" y="1091.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.38%)</title><rect x="680.5" y="1075.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="680.5" y="1059.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.38%)</title><rect x="680.5" y="1043.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.38%)</title><rect x="680.5" y="1027.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="683.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.38%)</title><rect x="680.5" y="1011.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="683.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.38%)</title><rect x="680.5" y="995.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="683.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.&lt;init&gt; (1 samples, 0.38%)</title><rect x="680.5" y="979.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="683.5" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.38%)</title><rect x="680.5" y="963.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="683.5" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.38%)</title><rect x="680.5" y="947.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="683.5" y="958.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.38%)</title><rect x="680.5" y="931.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="683.5" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.38%)</title><rect x="680.5" y="915.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="683.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.38%)</title><rect x="680.5" y="899.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="683.5" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.38%)</title><rect x="680.5" y="883.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="683.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.38%)</title><rect x="680.5" y="867.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="683.5" y="878.0"></text>
</g>
<g>
<title>start_thread (113 samples, 42.80%)</title><rect x="684.9" y="1139.0" width="505.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="687.9" y="1150.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (113 samples, 42.80%)</title><rect x="684.9" y="1123.0" width="505.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="687.9" y="1134.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (113 samples, 42.80%)</title><rect x="684.9" y="1107.0" width="505.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="687.9" y="1118.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 3.41%)</title><rect x="684.9" y="1091.0" width="40.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="687.9" y="1102.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 3.41%)</title><rect x="684.9" y="1075.0" width="40.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="687.9" y="1086.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.27%)</title><rect x="684.9" y="1059.0" width="26.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="687.9" y="1070.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 1.89%)</title><rect x="689.4" y="1043.0" width="22.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="692.4" y="1054.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.14%)</title><rect x="693.9" y="1027.0" width="13.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="696.9" y="1038.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.38%)</title><rect x="707.3" y="1027.0" width="4.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="710.3" y="1038.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 1.14%)</title><rect x="711.7" y="1059.0" width="13.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="714.7" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 1.14%)</title><rect x="711.7" y="1043.0" width="13.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="714.7" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 1.14%)</title><rect x="711.7" y="1027.0" width="13.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="714.7" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (3 samples, 1.14%)</title><rect x="711.7" y="1011.0" width="13.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="714.7" y="1022.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 1.14%)</title><rect x="711.7" y="995.0" width="13.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="714.7" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 1.14%)</title><rect x="711.7" y="979.0" width="13.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="714.7" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.14%)</title><rect x="711.7" y="963.0" width="13.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="714.7" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (104 samples, 39.39%)</title><rect x="725.2" y="1091.0" width="464.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="728.2" y="1102.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (103 samples, 39.02%)</title><rect x="725.2" y="1075.0" width="460.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="728.2" y="1086.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (103 samples, 39.02%)</title><rect x="725.2" y="1059.0" width="460.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="728.2" y="1070.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (98 samples, 37.12%)</title><rect x="725.2" y="1043.0" width="438.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="728.2" y="1054.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Directive..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (98 samples, 37.12%)</title><rect x="725.2" y="1027.0" width="438.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="728.2" y="1038.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (66 samples, 25.00%)</title><rect x="725.2" y="1011.0" width="295.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="728.2" y="1022.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.14%)</title><rect x="725.2" y="995.0" width="13.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="728.2" y="1006.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.76%)</title><rect x="725.2" y="979.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="728.2" y="990.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.38%)</title><rect x="734.1" y="979.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="737.1" y="990.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.38%)</title><rect x="734.1" y="963.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="737.1" y="974.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.38%)</title><rect x="734.1" y="947.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="737.1" y="958.0"></text>
</g>
<g>
<title>loadPNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.38%)</title><rect x="734.1" y="931.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="737.1" y="942.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.76%)</title><rect x="738.6" y="995.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="741.6" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.76%)</title><rect x="738.6" y="979.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="741.6" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.38%)</title><rect x="743.0" y="963.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.0" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.38%)</title><rect x="743.0" y="947.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="746.0" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.65%)</title><rect x="747.5" y="995.0" width="31.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="750.5" y="1006.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.76%)</title><rect x="747.5" y="979.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="750.5" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.89%)</title><rect x="756.4" y="979.0" width="22.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="759.4" y="990.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.14%)</title><rect x="756.4" y="963.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="759.4" y="974.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.38%)</title><rect x="769.8" y="963.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="772.8" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.38%)</title><rect x="769.8" y="947.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="772.8" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.38%)</title><rect x="769.8" y="931.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="772.8" y="942.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.38%)</title><rect x="769.8" y="915.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="772.8" y="926.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.38%)</title><rect x="774.3" y="963.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="777.3" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.38%)</title><rect x="774.3" y="947.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="777.3" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.38%)</title><rect x="774.3" y="931.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="777.3" y="942.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.38%)</title><rect x="774.3" y="915.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="777.3" y="926.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.38%)</title><rect x="774.3" y="899.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="777.3" y="910.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.38%)</title><rect x="774.3" y="883.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="777.3" y="894.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.38%)</title><rect x="774.3" y="867.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="777.3" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 2.27%)</title><rect x="778.8" y="995.0" width="26.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="781.8" y="1006.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 2.27%)</title><rect x="778.8" y="979.0" width="26.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="781.8" y="990.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.76%)</title><rect x="778.8" y="963.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="781.8" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.38%)</title><rect x="778.8" y="947.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="781.8" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.38%)</title><rect x="783.3" y="947.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="786.3" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.76%)</title><rect x="787.7" y="963.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="790.7" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.38%)</title><rect x="787.7" y="947.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="790.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.38%)</title><rect x="787.7" y="931.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="790.7" y="942.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.38%)</title><rect x="792.2" y="947.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="795.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.38%)</title><rect x="796.7" y="963.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="799.7" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.38%)</title><rect x="801.1" y="963.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="804.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (48 samples, 18.18%)</title><rect x="805.6" y="995.0" width="214.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="808.6" y="1006.0">PhaseChaitin::Register_Alloc..</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.38%)</title><rect x="805.6" y="979.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="808.6" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 1.14%)</title><rect x="810.1" y="979.0" width="13.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="813.1" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.38%)</title><rect x="823.5" y="979.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="826.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.76%)</title><rect x="828.0" y="979.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="831.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="828.0" y="963.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.0" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.38%)</title><rect x="832.4" y="963.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="835.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.27%)</title><rect x="836.9" y="979.0" width="26.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.9" y="990.0">P..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.38%)</title><rect x="850.3" y="963.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="853.3" y="974.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.38%)</title><rect x="854.8" y="963.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="857.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.38%)</title><rect x="859.2" y="963.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="862.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.38%)</title><rect x="859.2" y="947.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="862.2" y="958.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.38%)</title><rect x="859.2" y="931.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="862.2" y="942.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.38%)</title><rect x="859.2" y="915.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="862.2" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 4.92%)</title><rect x="863.7" y="979.0" width="58.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="866.7" y="990.0">PhaseC..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.38%)</title><rect x="877.1" y="963.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.76%)</title><rect x="881.6" y="963.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="884.6" y="974.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.38%)</title><rect x="886.1" y="947.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="889.1" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.14%)</title><rect x="890.5" y="963.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.5" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="899.5" y="947.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="902.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 1.52%)</title><rect x="903.9" y="963.0" width="17.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="906.9" y="974.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (4 samples, 1.52%)</title><rect x="903.9" y="947.0" width="17.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="906.9" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.14%)</title><rect x="921.8" y="979.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.8" y="990.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.38%)</title><rect x="926.3" y="963.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="929.3" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.38%)</title><rect x="930.8" y="963.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.38%)</title><rect x="935.2" y="979.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="938.2" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.38%)</title><rect x="935.2" y="963.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.38%)</title><rect x="939.7" y="979.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="942.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.14%)</title><rect x="944.2" y="979.0" width="13.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.76%)</title><rect x="948.6" y="963.0" width="9.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="951.6" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.38%)</title><rect x="957.6" y="979.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="960.6" y="990.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.38%)</title><rect x="957.6" y="963.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.6" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.38%)</title><rect x="957.6" y="947.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="960.6" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.14%)</title><rect x="962.0" y="979.0" width="13.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.76%)</title><rect x="966.5" y="963.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="969.5" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.76%)</title><rect x="975.5" y="979.0" width="8.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="978.5" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.76%)</title><rect x="975.5" y="963.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="978.5" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (8 samples, 3.03%)</title><rect x="984.4" y="979.0" width="35.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.4" y="990.0">Pha..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.38%)</title><rect x="1006.7" y="963.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1009.7" y="974.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.38%)</title><rect x="1006.7" y="947.0" width="4.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1009.7" y="958.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.76%)</title><rect x="1011.2" y="963.0" width="9.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.2" y="974.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.38%)</title><rect x="1011.2" y="947.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1014.2" y="958.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.38%)</title><rect x="1011.2" y="931.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1014.2" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="1015.7" y="947.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.7" y="958.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 8.33%)</title><rect x="1020.2" y="1011.0" width="98.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.2" y="1022.0">Compile::Opt..</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.38%)</title><rect x="1020.2" y="995.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1023.2" y="1006.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.38%)</title><rect x="1020.2" y="979.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.2" y="990.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.38%)</title><rect x="1020.2" y="963.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1023.2" y="974.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.38%)</title><rect x="1020.2" y="947.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1023.2" y="958.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (7 samples, 2.65%)</title><rect x="1024.6" y="995.0" width="31.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1027.6" y="1006.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 2.65%)</title><rect x="1024.6" y="979.0" width="31.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1027.6" y="990.0">Ph..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.38%)</title><rect x="1024.6" y="963.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1027.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.52%)</title><rect x="1029.1" y="963.0" width="17.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 1.52%)</title><rect x="1029.1" y="947.0" width="17.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.1" y="958.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.38%)</title><rect x="1029.1" y="931.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.1" y="942.0"></text>
</g>
<g>
<title>MemBarCPUOrderNode::Opcode() const (1 samples, 0.38%)</title><rect x="1033.6" y="931.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.6" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.38%)</title><rect x="1038.0" y="931.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1041.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.38%)</title><rect x="1038.0" y="915.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.0" y="926.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.38%)</title><rect x="1042.5" y="931.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.5" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.76%)</title><rect x="1047.0" y="963.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.0" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.76%)</title><rect x="1047.0" y="947.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.0" y="958.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.38%)</title><rect x="1047.0" y="931.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.0" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.38%)</title><rect x="1051.4" y="931.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.4" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1051.4" y="915.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.4" y="926.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.38%)</title><rect x="1051.4" y="899.0" width="4.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1054.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.38%)</title><rect x="1055.9" y="995.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1058.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.38%)</title><rect x="1055.9" y="979.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1058.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.38%)</title><rect x="1055.9" y="963.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.9" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.38%)</title><rect x="1055.9" y="947.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1058.9" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.38%)</title><rect x="1055.9" y="931.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.9" y="942.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.38%)</title><rect x="1055.9" y="915.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.9" y="926.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.38%)</title><rect x="1055.9" y="899.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.9" y="910.0"></text>
</g>
<g>
<title>CounterData::cell_count() const (1 samples, 0.38%)</title><rect x="1055.9" y="883.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (5 samples, 1.89%)</title><rect x="1060.4" y="995.0" width="22.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.4" y="1006.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.38%)</title><rect x="1060.4" y="979.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.52%)</title><rect x="1064.8" y="979.0" width="17.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.76%)</title><rect x="1073.8" y="963.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1076.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.76%)</title><rect x="1073.8" y="947.0" width="8.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.8" y="958.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.38%)</title><rect x="1078.3" y="931.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.3" y="942.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.38%)</title><rect x="1078.3" y="915.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.3" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 3.03%)</title><rect x="1082.7" y="995.0" width="35.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.7" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 3.03%)</title><rect x="1082.7" y="979.0" width="35.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.7" y="990.0">Pha..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1082.7" y="963.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.38%)</title><rect x="1082.7" y="947.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.7" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.38%)</title><rect x="1082.7" y="931.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1085.7" y="942.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.38%)</title><rect x="1082.7" y="915.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.7" y="926.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1087.2" y="963.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.2" y="974.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.38%)</title><rect x="1087.2" y="947.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.2" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.38%)</title><rect x="1087.2" y="931.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.2" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1087.2" y="915.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.2" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 1.52%)</title><rect x="1091.7" y="963.0" width="17.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.38%)</title><rect x="1105.1" y="947.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.1" y="958.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.38%)</title><rect x="1105.1" y="931.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.1" y="942.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.38%)</title><rect x="1109.5" y="963.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.5" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1114.0" y="963.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.0" y="974.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.38%)</title><rect x="1114.0" y="947.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.0" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="931.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.0" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="915.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.0" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="899.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.0" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="883.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.0" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="867.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="851.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="835.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="819.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="803.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.0" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="787.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.0" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="771.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.0" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.38%)</title><rect x="1114.0" y="755.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.0" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1114.0" y="739.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 3.79%)</title><rect x="1118.5" y="1011.0" width="44.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.5" y="1022.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 3.79%)</title><rect x="1118.5" y="995.0" width="44.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.5" y="1006.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 3.79%)</title><rect x="1118.5" y="979.0" width="44.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.5" y="990.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 3.79%)</title><rect x="1118.5" y="963.0" width="44.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.5" y="974.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 3.79%)</title><rect x="1118.5" y="947.0" width="44.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.5" y="958.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 3.79%)</title><rect x="1118.5" y="931.0" width="44.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.5" y="942.0">Pars..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.03%)</title><rect x="1118.5" y="915.0" width="35.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.5" y="926.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.03%)</title><rect x="1118.5" y="899.0" width="35.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.5" y="910.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.03%)</title><rect x="1118.5" y="883.0" width="35.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.5" y="894.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.03%)</title><rect x="1118.5" y="867.0" width="35.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.5" y="878.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.03%)</title><rect x="1118.5" y="851.0" width="35.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.5" y="862.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 3.03%)</title><rect x="1118.5" y="835.0" width="35.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.5" y="846.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.52%)</title><rect x="1118.5" y="819.0" width="17.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.52%)</title><rect x="1118.5" y="803.0" width="17.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.52%)</title><rect x="1118.5" y="787.0" width="17.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.52%)</title><rect x="1118.5" y="771.0" width="17.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.52%)</title><rect x="1118.5" y="755.0" width="17.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.52%)</title><rect x="1118.5" y="739.0" width="17.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.5" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1118.5" y="723.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.5" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1118.5" y="707.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.5" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="1118.5" y="691.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="1118.5" y="675.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="1118.5" y="659.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.5" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1118.5" y="643.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1118.5" y="627.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1118.5" y="611.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.38%)</title><rect x="1118.5" y="595.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.5" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.38%)</title><rect x="1118.5" y="579.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.5" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1118.5" y="563.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.5" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1118.5" y="547.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.5" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.38%)</title><rect x="1118.5" y="531.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.5" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.38%)</title><rect x="1118.5" y="515.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.5" y="526.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1118.5" y="499.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.5" y="510.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.38%)</title><rect x="1118.5" y="483.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.5" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.38%)</title><rect x="1118.5" y="467.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.5" y="478.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.38%)</title><rect x="1118.5" y="451.0" width="4.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1121.5" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.76%)</title><rect x="1123.0" y="723.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.76%)</title><rect x="1123.0" y="707.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.76%)</title><rect x="1123.0" y="691.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.76%)</title><rect x="1123.0" y="675.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.76%)</title><rect x="1123.0" y="659.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.76%)</title><rect x="1123.0" y="643.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="654.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_return_for_speculation() (1 samples, 0.38%)</title><rect x="1123.0" y="627.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.0" y="638.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.38%)</title><rect x="1123.0" y="611.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.0" y="622.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.38%)</title><rect x="1123.0" y="595.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.0" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.38%)</title><rect x="1123.0" y="579.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.0" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.38%)</title><rect x="1123.0" y="563.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.0" y="574.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.38%)</title><rect x="1123.0" y="547.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.0" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1127.4" y="627.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1127.4" y="611.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1127.4" y="595.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1127.4" y="579.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1127.4" y="563.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1127.4" y="547.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1127.4" y="531.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1127.4" y="515.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1127.4" y="499.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1127.4" y="483.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1127.4" y="467.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.38%)</title><rect x="1127.4" y="451.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.4" y="462.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.38%)</title><rect x="1127.4" y="435.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.4" y="446.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.38%)</title><rect x="1127.4" y="419.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.4" y="430.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.38%)</title><rect x="1127.4" y="403.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.4" y="414.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.38%)</title><rect x="1127.4" y="387.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.4" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.38%)</title><rect x="1127.4" y="371.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.4" y="382.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.38%)</title><rect x="1127.4" y="355.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.4" y="366.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.38%)</title><rect x="1127.4" y="339.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.4" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1131.9" y="723.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1131.9" y="707.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1131.9" y="691.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1131.9" y="675.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1131.9" y="659.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1131.9" y="643.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1131.9" y="627.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1131.9" y="611.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1131.9" y="595.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1131.9" y="579.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1131.9" y="563.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1131.9" y="547.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.38%)</title><rect x="1131.9" y="531.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.9" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.38%)</title><rect x="1131.9" y="515.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.9" y="526.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1131.9" y="499.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.9" y="510.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.38%)</title><rect x="1131.9" y="483.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.9" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.52%)</title><rect x="1136.4" y="819.0" width="17.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.4" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.52%)</title><rect x="1136.4" y="803.0" width="17.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.4" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.52%)</title><rect x="1136.4" y="787.0" width="17.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.52%)</title><rect x="1136.4" y="771.0" width="17.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.52%)</title><rect x="1136.4" y="755.0" width="17.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.52%)</title><rect x="1136.4" y="739.0" width="17.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.52%)</title><rect x="1136.4" y="723.0" width="17.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.4" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.52%)</title><rect x="1136.4" y="707.0" width="17.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.4" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.52%)</title><rect x="1136.4" y="691.0" width="17.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.52%)</title><rect x="1136.4" y="675.0" width="17.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.52%)</title><rect x="1136.4" y="659.0" width="17.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.52%)</title><rect x="1136.4" y="643.0" width="17.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.52%)</title><rect x="1136.4" y="627.0" width="17.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.4" y="638.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1136.4" y="611.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.4" y="622.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.38%)</title><rect x="1136.4" y="595.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.4" y="606.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.38%)</title><rect x="1136.4" y="579.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.4" y="590.0"></text>
</g>
<g>
<title>GraphKit::create_and_map_if(Node*, Node*, float, float) (1 samples, 0.38%)</title><rect x="1136.4" y="563.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.4" y="574.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.38%)</title><rect x="1136.4" y="547.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.4" y="558.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.38%)</title><rect x="1136.4" y="531.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.14%)</title><rect x="1140.8" y="611.0" width="13.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.14%)</title><rect x="1140.8" y="595.0" width="13.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.14%)</title><rect x="1140.8" y="579.0" width="13.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.14%)</title><rect x="1140.8" y="563.0" width="13.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.14%)</title><rect x="1140.8" y="547.0" width="13.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.14%)</title><rect x="1140.8" y="531.0" width="13.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.14%)</title><rect x="1140.8" y="515.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.14%)</title><rect x="1140.8" y="499.0" width="13.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.14%)</title><rect x="1140.8" y="483.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.14%)</title><rect x="1140.8" y="467.0" width="13.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.14%)</title><rect x="1140.8" y="451.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.14%)</title><rect x="1140.8" y="435.0" width="13.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1140.8" y="419.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1140.8" y="403.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1140.8" y="387.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1140.8" y="371.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1140.8" y="355.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1140.8" y="339.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.8" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.38%)</title><rect x="1140.8" y="323.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.8" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.38%)</title><rect x="1140.8" y="307.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.8" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.38%)</title><rect x="1140.8" y="291.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.8" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.38%)</title><rect x="1140.8" y="275.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.8" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.38%)</title><rect x="1140.8" y="259.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.8" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1140.8" y="243.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.8" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.38%)</title><rect x="1140.8" y="227.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.8" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.38%)</title><rect x="1140.8" y="211.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.38%)</title><rect x="1140.8" y="195.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.8" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.38%)</title><rect x="1140.8" y="179.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.8" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1140.8" y="163.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.8" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1140.8" y="147.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.8" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.38%)</title><rect x="1140.8" y="131.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.8" y="142.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.38%)</title><rect x="1140.8" y="115.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.8" y="126.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1140.8" y="99.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.8" y="110.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.38%)</title><rect x="1140.8" y="83.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.8" y="94.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.38%)</title><rect x="1140.8" y="67.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.8" y="78.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.38%)</title><rect x="1140.8" y="51.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.8" y="62.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.38%)</title><rect x="1140.8" y="35.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1145.3" y="419.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.3" y="430.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.38%)</title><rect x="1145.3" y="403.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.3" y="414.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.38%)</title><rect x="1145.3" y="387.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.3" y="398.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.38%)</title><rect x="1145.3" y="371.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.3" y="382.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.38%)</title><rect x="1145.3" y="355.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.3" y="366.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.38%)</title><rect x="1145.3" y="339.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.3" y="350.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.38%)</title><rect x="1145.3" y="323.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.3" y="334.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.38%)</title><rect x="1145.3" y="307.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.3" y="318.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.38%)</title><rect x="1145.3" y="291.0" width="4.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1148.3" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.38%)</title><rect x="1149.8" y="419.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.76%)</title><rect x="1154.2" y="915.0" width="9.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.2" y="926.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.38%)</title><rect x="1154.2" y="899.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="910.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.38%)</title><rect x="1154.2" y="883.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.7" y="899.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.7" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.7" y="883.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.7" y="867.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.7" y="851.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.7" y="835.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.7" y="819.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.7" y="803.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1158.7" y="787.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1158.7" y="771.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1158.7" y="755.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1158.7" y="739.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1158.7" y="723.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.7" y="734.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1158.7" y="707.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="718.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.38%)</title><rect x="1158.7" y="691.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.7" y="702.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) [clone .part.183] (1 samples, 0.38%)</title><rect x="1158.7" y="675.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.7" y="686.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.38%)</title><rect x="1158.7" y="659.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.7" y="670.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.38%)</title><rect x="1158.7" y="643.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.7" y="654.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 1.89%)</title><rect x="1163.2" y="1043.0" width="22.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.2" y="1054.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (5 samples, 1.89%)</title><rect x="1163.2" y="1027.0" width="22.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="1038.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 1.89%)</title><rect x="1163.2" y="1011.0" width="22.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.2" y="1022.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 1.89%)</title><rect x="1163.2" y="995.0" width="22.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="1006.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (2 samples, 0.76%)</title><rect x="1163.2" y="979.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="990.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.38%)</title><rect x="1163.2" y="963.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.2" y="974.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.38%)</title><rect x="1167.7" y="963.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.7" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.38%)</title><rect x="1167.7" y="947.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.7" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.38%)</title><rect x="1167.7" y="931.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.38%)</title><rect x="1167.7" y="915.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.7" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.38%)</title><rect x="1167.7" y="899.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.7" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1167.7" y="883.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.7" y="867.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.7" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.7" y="851.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.7" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.38%)</title><rect x="1167.7" y="835.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.7" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.38%)</title><rect x="1167.7" y="819.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.7" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1167.7" y="803.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.7" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.7" y="787.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.7" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.7" y="771.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="782.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) [clone .constprop.380] (1 samples, 0.38%)</title><rect x="1167.7" y="755.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.7" y="766.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.38%)</title><rect x="1167.7" y="739.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 1.14%)</title><rect x="1172.1" y="979.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.1" y="990.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 1.14%)</title><rect x="1172.1" y="963.0" width="13.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.1" y="974.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.38%)</title><rect x="1172.1" y="947.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.1" y="958.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.234] (1 samples, 0.38%)</title><rect x="1172.1" y="931.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.1" y="942.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.38%)</title><rect x="1172.1" y="915.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.1" y="926.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.38%)</title><rect x="1172.1" y="899.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.1" y="910.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (2 samples, 0.76%)</title><rect x="1176.6" y="947.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.6" y="958.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.38%)</title><rect x="1181.1" y="931.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="942.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.38%)</title><rect x="1185.5" y="1075.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="1086.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.38%)</title><rect x="1185.5" y="1059.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="1070.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.38%)</title><rect x="1185.5" y="1043.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="1054.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.38%)</title><rect x="1185.5" y="1027.0" width="4.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1188.5" y="1038.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.38%)</title><rect x="1185.5" y="1011.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="1022.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.38%)</title><rect x="1185.5" y="995.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="1006.0"></text>
</g>
</g>
</svg>
