<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (852 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (206 samples, 24.18%)</title><rect x="10.0" y="1075.0" width="285.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (206 samples, 24.18%)</title><rect x="10.0" y="1059.0" width="285.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (206 samples, 24.18%)</title><rect x="10.0" y="1043.0" width="285.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.35%)</title><rect x="10.0" y="1027.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.35%)</title><rect x="10.0" y="1011.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.23%)</title><rect x="14.2" y="1027.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.23%)</title><rect x="14.2" y="1011.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.12%)</title><rect x="15.5" y="995.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.12%)</title><rect x="15.5" y="979.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.12%)</title><rect x="15.5" y="963.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.59%)</title><rect x="16.9" y="1027.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.59%)</title><rect x="16.9" y="1011.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.59%)</title><rect x="16.9" y="995.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$135/501530857.accept (5 samples, 0.59%)</title><rect x="16.9" y="979.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.59%)</title><rect x="16.9" y="963.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.47%)</title><rect x="18.3" y="947.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.35%)</title><rect x="19.7" y="931.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.7" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (160 samples, 18.78%)</title><rect x="23.8" y="1027.0" width="221.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.8" y="1038.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/1361869947.accept (155 samples, 18.19%)</title><rect x="23.8" y="1011.0" width="214.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.8" y="1022.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (154 samples, 18.08%)</title><rect x="25.2" y="995.0" width="213.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.2" y="1006.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (141 samples, 16.55%)</title><rect x="25.2" y="979.0" width="195.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.2" y="990.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (141 samples, 16.55%)</title><rect x="25.2" y="963.0" width="195.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.2" y="974.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (141 samples, 16.55%)</title><rect x="25.2" y="947.0" width="195.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.2" y="958.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (141 samples, 16.55%)</title><rect x="25.2" y="931.0" width="195.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.2" y="942.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (141 samples, 16.55%)</title><rect x="25.2" y="915.0" width="195.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.2" y="926.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (141 samples, 16.55%)</title><rect x="25.2" y="899.0" width="195.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.2" y="910.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 12.21%)</title><rect x="75.1" y="883.0" width="144.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="78.1" y="894.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.88%)</title><rect x="75.1" y="867.0" width="22.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.1" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.88%)</title><rect x="75.1" y="851.0" width="22.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.1" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.88%)</title><rect x="75.1" y="835.0" width="22.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.1" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.70%)</title><rect x="97.3" y="867.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.70%)</title><rect x="97.3" y="851.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="100.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.23%)</title><rect x="100.0" y="835.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.0" y="846.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.23%)</title><rect x="100.0" y="819.0" width="2.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="103.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.23%)</title><rect x="102.8" y="835.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (82 samples, 9.62%)</title><rect x="105.6" y="867.0" width="113.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.6" y="878.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (82 samples, 9.62%)</title><rect x="105.6" y="851.0" width="113.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="108.6" y="862.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 9.51%)</title><rect x="105.6" y="835.0" width="112.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.6" y="846.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 9.51%)</title><rect x="105.6" y="819.0" width="112.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.6" y="830.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 9.27%)</title><rect x="108.3" y="803.0" width="109.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.3" y="814.0">sun/misc/Unsa..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.12%)</title><rect x="109.7" y="787.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="112.7" y="798.0"></text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 8.22%)</title><rect x="111.1" y="787.0" width="97.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="114.1" y="798.0">Unsafe_Unpark</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.23%)</title><rect x="112.5" y="771.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="115.5" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.12%)</title><rect x="115.3" y="771.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="118.3" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (49 samples, 5.75%)</title><rect x="116.6" y="771.0" width="67.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="119.6" y="782.0">__pthre..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.47%)</title><rect x="184.5" y="771.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="187.5" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.53%)</title><rect x="190.0" y="771.0" width="18.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="193.0" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.59%)</title><rect x="208.1" y="787.0" width="6.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="211.1" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.23%)</title><rect x="215.0" y="787.0" width="2.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="218.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.12%)</title><rect x="217.7" y="835.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.12%)</title><rect x="219.1" y="883.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.12%)</title><rect x="219.1" y="867.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.12%)</title><rect x="219.1" y="851.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.12%)</title><rect x="219.1" y="835.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (7 samples, 0.82%)</title><rect x="220.5" y="979.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (7 samples, 0.82%)</title><rect x="220.5" y="963.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.35%)</title><rect x="230.2" y="979.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.35%)</title><rect x="230.2" y="963.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.35%)</title><rect x="230.2" y="947.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="233.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.12%)</title><rect x="233.0" y="931.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.0" y="942.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.12%)</title><rect x="233.0" y="915.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.35%)</title><rect x="234.4" y="979.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.35%)</title><rect x="234.4" y="963.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.35%)</title><rect x="234.4" y="947.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.35%)</title><rect x="234.4" y="931.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.12%)</title><rect x="234.4" y="915.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.12%)</title><rect x="234.4" y="899.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.23%)</title><rect x="235.8" y="915.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.23%)</title><rect x="238.5" y="1011.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (2 samples, 0.23%)</title><rect x="238.5" y="995.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (2 samples, 0.23%)</title><rect x="238.5" y="979.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.5" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.12%)</title><rect x="238.5" y="963.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.5" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.12%)</title><rect x="238.5" y="947.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.12%)</title><rect x="238.5" y="931.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.5" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.values (1 samples, 0.12%)</title><rect x="239.9" y="963.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.23%)</title><rect x="241.3" y="1011.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.23%)</title><rect x="241.3" y="995.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.23%)</title><rect x="241.3" y="979.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.23%)</title><rect x="241.3" y="963.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.3" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.12%)</title><rect x="242.7" y="947.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.12%)</title><rect x="244.1" y="1011.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="244.1" y="995.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (36 samples, 4.23%)</title><rect x="245.4" y="1027.0" width="49.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.4" y="1038.0">org/a..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.12%)</title><rect x="245.4" y="1011.0" width="1.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="248.4" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="245.4" y="995.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="248.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (35 samples, 4.11%)</title><rect x="246.8" y="1011.0" width="48.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.8" y="1022.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (25 samples, 2.93%)</title><rect x="246.8" y="995.0" width="34.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.8" y="1006.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (25 samples, 2.93%)</title><rect x="246.8" y="979.0" width="34.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.8" y="990.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (24 samples, 2.82%)</title><rect x="246.8" y="963.0" width="33.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.8" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (20 samples, 2.35%)</title><rect x="246.8" y="947.0" width="27.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.8" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (19 samples, 2.23%)</title><rect x="246.8" y="931.0" width="26.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.8" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 1.29%)</title><rect x="251.0" y="915.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.47%)</title><rect x="260.7" y="899.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="263.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.47%)</title><rect x="260.7" y="883.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.47%)</title><rect x="260.7" y="867.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.47%)</title><rect x="260.7" y="851.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.47%)</title><rect x="260.7" y="835.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.47%)</title><rect x="260.7" y="819.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.47%)</title><rect x="260.7" y="803.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (5 samples, 0.59%)</title><rect x="266.2" y="915.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 0.47%)</title><rect x="267.6" y="899.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.35%)</title><rect x="267.6" y="883.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="270.6" y="894.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.35%)</title><rect x="267.6" y="867.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.12%)</title><rect x="271.8" y="883.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.12%)</title><rect x="271.8" y="867.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.8" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="271.8" y="851.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="274.8" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="271.8" y="835.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="274.8" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="271.8" y="819.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="274.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="271.8" y="803.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="274.8" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="271.8" y="787.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="274.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.12%)</title><rect x="273.1" y="931.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.12%)</title><rect x="274.5" y="947.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.12%)</title><rect x="274.5" y="931.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.12%)</title><rect x="274.5" y="915.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.12%)</title><rect x="274.5" y="899.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (2 samples, 0.23%)</title><rect x="275.9" y="947.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.23%)</title><rect x="275.9" y="931.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.23%)</title><rect x="275.9" y="915.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="277.3" y="899.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.12%)</title><rect x="278.7" y="947.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.12%)</title><rect x="280.1" y="963.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.12%)</title><rect x="280.1" y="947.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.12%)</title><rect x="280.1" y="931.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.1" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.12%)</title><rect x="280.1" y="915.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="280.1" y="899.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="283.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.35%)</title><rect x="281.5" y="995.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.35%)</title><rect x="281.5" y="979.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="284.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.35%)</title><rect x="281.5" y="963.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="281.5" y="947.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="284.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="281.5" y="931.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.5" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="281.5" y="915.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.12%)</title><rect x="282.8" y="947.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.12%)</title><rect x="282.8" y="931.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.12%)</title><rect x="284.2" y="947.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.12%)</title><rect x="284.2" y="931.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.12%)</title><rect x="284.2" y="915.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.2" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.12%)</title><rect x="284.2" y="899.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$319/11761495.accept (1 samples, 0.12%)</title><rect x="284.2" y="883.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$collectPartitions$5 (1 samples, 0.12%)</title><rect x="284.2" y="867.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$318/692737983.test (1 samples, 0.12%)</title><rect x="284.2" y="851.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$partitionsNeedingValidation$8 (1 samples, 0.12%)</title><rect x="284.2" y="835.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$700 (1 samples, 0.12%)</title><rect x="284.2" y="819.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.23%)</title><rect x="285.6" y="995.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.12%)</title><rect x="285.6" y="979.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.12%)</title><rect x="285.6" y="963.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.12%)</title><rect x="285.6" y="947.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="288.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.12%)</title><rect x="285.6" y="931.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.12%)</title><rect x="287.0" y="979.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.12%)</title><rect x="288.4" y="995.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.12%)</title><rect x="288.4" y="979.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.12%)</title><rect x="288.4" y="963.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.12%)</title><rect x="288.4" y="947.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.12%)</title><rect x="288.4" y="931.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.12%)</title><rect x="288.4" y="915.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.12%)</title><rect x="288.4" y="899.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.12%)</title><rect x="288.4" y="883.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.12%)</title><rect x="288.4" y="867.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.4" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.12%)</title><rect x="288.4" y="851.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.4" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.12%)</title><rect x="288.4" y="835.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.12%)</title><rect x="288.4" y="819.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="288.4" y="803.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.4" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.12%)</title><rect x="288.4" y="787.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.12%)</title><rect x="288.4" y="771.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.12%)</title><rect x="288.4" y="755.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.4" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="288.4" y="739.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="291.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.35%)</title><rect x="289.8" y="995.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.12%)</title><rect x="289.8" y="979.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.12%)</title><rect x="289.8" y="963.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.12%)</title><rect x="289.8" y="947.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.8" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.12%)</title><rect x="289.8" y="931.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="292.8" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="289.8" y="915.0" width="1.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="292.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.23%)</title><rect x="291.2" y="979.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="294.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.23%)</title><rect x="291.2" y="963.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.12%)</title><rect x="291.2" y="947.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.12%)</title><rect x="291.2" y="931.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="291.2" y="915.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.12%)</title><rect x="291.2" y="899.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.12%)</title><rect x="292.5" y="947.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.12%)</title><rect x="292.5" y="931.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.12%)</title><rect x="293.9" y="995.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="293.9" y="979.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="293.9" y="963.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.12%)</title><rect x="293.9" y="947.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.12%)</title><rect x="293.9" y="931.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (565 samples, 66.31%)</title><rect x="295.3" y="1075.0" width="782.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.3" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (565 samples, 66.31%)</title><rect x="295.3" y="1059.0" width="782.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.3" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (565 samples, 66.31%)</title><rect x="295.3" y="1043.0" width="782.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.3" y="1054.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.35%)</title><rect x="300.8" y="1027.0" width="4.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="303.8" y="1038.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.35%)</title><rect x="300.8" y="1011.0" width="4.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="303.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (1 samples, 0.12%)</title><rect x="305.0" y="1027.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/1375279632.run (371 samples, 43.54%)</title><rect x="306.4" y="1027.0" width="513.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.4" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$3..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$80 (371 samples, 43.54%)</title><rect x="306.4" y="1011.0" width="513.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.4" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$pu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (371 samples, 43.54%)</title><rect x="306.4" y="995.0" width="513.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.4" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="307.8" y="979.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="310.8" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.12%)</title><rect x="309.2" y="979.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="312.2" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="309.2" y="963.0" width="1.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="312.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (367 samples, 43.08%)</title><rect x="310.5" y="979.0" width="508.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.5" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.12%)</title><rect x="317.5" y="963.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="320.5" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.12%)</title><rect x="317.5" y="947.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.12%)</title><rect x="317.5" y="931.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="317.5" y="915.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (33 samples, 3.87%)</title><rect x="318.8" y="963.0" width="45.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.8" y="974.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 2.11%)</title><rect x="339.6" y="947.0" width="25.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.6" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 2.11%)</title><rect x="339.6" y="931.0" width="25.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.6" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 2.11%)</title><rect x="339.6" y="915.0" width="25.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="342.6" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.12%)</title><rect x="339.6" y="899.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.12%)</title><rect x="339.6" y="883.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.12%)</title><rect x="339.6" y="867.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$366/1809750236.accept (1 samples, 0.12%)</title><rect x="339.6" y="851.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 2.00%)</title><rect x="341.0" y="899.0" width="23.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="344.0" y="910.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$366/1809750236.accept (16 samples, 1.88%)</title><rect x="342.4" y="883.0" width="22.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.4" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (16 samples, 1.88%)</title><rect x="342.4" y="867.0" width="22.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.4" y="878.0">c..</text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="345.2" y="851.0" width="1.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="348.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (13 samples, 1.53%)</title><rect x="346.5" y="851.0" width="18.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (13 samples, 1.53%)</title><rect x="346.5" y="835.0" width="18.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="349.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (12 samples, 1.41%)</title><rect x="347.9" y="819.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.59%)</title><rect x="347.9" y="803.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.59%)</title><rect x="347.9" y="787.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.82%)</title><rect x="354.9" y="803.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="357.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (2 samples, 0.23%)</title><rect x="364.6" y="963.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (2 samples, 0.23%)</title><rect x="364.6" y="947.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$284/404283136.get (2 samples, 0.23%)</title><rect x="364.6" y="931.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="367.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.23%)</title><rect x="364.6" y="915.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="367.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.23%)</title><rect x="364.6" y="899.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="367.6" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.23%)</title><rect x="364.6" y="883.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="367.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.23%)</title><rect x="364.6" y="867.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="367.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="365.9" y="851.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="368.9" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.12%)</title><rect x="365.9" y="835.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="368.9" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.12%)</title><rect x="365.9" y="819.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="368.9" y="830.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.12%)</title><rect x="365.9" y="803.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="368.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.12%)</title><rect x="365.9" y="787.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="368.9" y="798.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.12%)</title><rect x="365.9" y="771.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="368.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (96 samples, 11.27%)</title><rect x="367.3" y="963.0" width="133.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="370.3" y="974.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (96 samples, 11.27%)</title><rect x="367.3" y="947.0" width="133.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="370.3" y="958.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (96 samples, 11.27%)</title><rect x="367.3" y="931.0" width="133.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="370.3" y="942.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (96 samples, 11.27%)</title><rect x="367.3" y="915.0" width="133.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="370.3" y="926.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (96 samples, 11.27%)</title><rect x="367.3" y="899.0" width="133.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.3" y="910.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (96 samples, 11.27%)</title><rect x="367.3" y="883.0" width="133.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.3" y="894.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (33 samples, 3.87%)</title><rect x="367.3" y="867.0" width="45.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.3" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (9 samples, 1.06%)</title><rect x="367.3" y="851.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (9 samples, 1.06%)</title><rect x="367.3" y="835.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.&lt;init&gt; (9 samples, 1.06%)</title><rect x="367.3" y="819.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.&lt;init&gt; (1 samples, 0.12%)</title><rect x="378.4" y="803.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.35%)</title><rect x="379.8" y="851.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.35%)</title><rect x="379.8" y="835.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="382.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.12%)</title><rect x="379.8" y="819.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.23%)</title><rect x="381.2" y="819.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.12%)</title><rect x="382.6" y="803.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="385.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 2.46%)</title><rect x="383.9" y="851.0" width="29.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="386.9" y="862.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (21 samples, 2.46%)</title><rect x="383.9" y="835.0" width="29.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="386.9" y="846.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="385.3" y="819.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="388.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.12%)</title><rect x="385.3" y="803.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="388.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.12%)</title><rect x="386.7" y="819.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.12%)</title><rect x="386.7" y="803.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="389.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.82%)</title><rect x="388.1" y="819.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (2 samples, 0.23%)</title><rect x="389.5" y="803.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.5" y="814.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.23%)</title><rect x="389.5" y="787.0" width="2.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="392.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (2 samples, 0.23%)</title><rect x="392.3" y="803.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (2 samples, 0.23%)</title><rect x="395.0" y="803.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.70%)</title><rect x="397.8" y="819.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="400.8" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="400.6" y="803.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="403.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="400.6" y="787.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="403.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="400.6" y="771.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="403.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="400.6" y="755.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="403.6" y="766.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.12%)</title><rect x="400.6" y="739.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="403.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.12%)</title><rect x="401.9" y="803.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="404.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.12%)</title><rect x="401.9" y="787.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.23%)</title><rect x="403.3" y="803.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.59%)</title><rect x="406.1" y="819.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="411.6" y="803.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (57 samples, 6.69%)</title><rect x="413.0" y="867.0" width="79.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="416.0" y="878.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.23%)</title><rect x="413.0" y="851.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.23%)</title><rect x="413.0" y="835.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.12%)</title><rect x="413.0" y="819.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="416.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.12%)</title><rect x="414.4" y="819.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.59%)</title><rect x="415.8" y="851.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="418.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.59%)</title><rect x="415.8" y="835.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="418.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.94%)</title><rect x="422.7" y="851.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.94%)</title><rect x="422.7" y="835.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.82%)</title><rect x="424.1" y="819.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="427.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.82%)</title><rect x="424.1" y="803.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="427.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.23%)</title><rect x="431.0" y="787.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="434.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.35%)</title><rect x="433.8" y="851.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.35%)</title><rect x="433.8" y="835.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.8" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="433.8" y="819.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="436.8" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="433.8" y="803.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="436.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.23%)</title><rect x="435.2" y="819.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.12%)</title><rect x="436.6" y="803.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="439.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.12%)</title><rect x="436.6" y="787.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="439.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (39 samples, 4.58%)</title><rect x="438.0" y="851.0" width="54.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="441.0" y="862.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (39 samples, 4.58%)</title><rect x="438.0" y="835.0" width="54.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.0" y="846.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 1.06%)</title><rect x="440.7" y="819.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="443.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.47%)</title><rect x="440.7" y="803.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="443.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.47%)</title><rect x="440.7" y="787.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="443.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.47%)</title><rect x="440.7" y="771.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.47%)</title><rect x="440.7" y="755.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="443.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.59%)</title><rect x="446.3" y="803.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="449.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.12%)</title><rect x="446.3" y="787.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="449.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.47%)</title><rect x="447.7" y="787.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="450.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.47%)</title><rect x="447.7" y="771.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.35%)</title><rect x="449.0" y="755.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.35%)</title><rect x="449.0" y="739.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (28 samples, 3.29%)</title><rect x="453.2" y="819.0" width="38.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.2" y="830.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (26 samples, 3.05%)</title><rect x="456.0" y="803.0" width="36.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.0" y="814.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (25 samples, 2.93%)</title><rect x="457.3" y="787.0" width="34.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="460.3" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.17%)</title><rect x="458.7" y="771.0" width="13.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.12%)</title><rect x="465.7" y="755.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="468.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.12%)</title><rect x="465.7" y="739.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.12%)</title><rect x="465.7" y="723.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.12%)</title><rect x="465.7" y="707.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="468.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.47%)</title><rect x="467.0" y="755.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="470.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.23%)</title><rect x="467.0" y="739.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.23%)</title><rect x="469.8" y="739.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.23%)</title><rect x="469.8" y="723.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="472.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.59%)</title><rect x="472.6" y="771.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="475.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.35%)</title><rect x="475.4" y="755.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.35%)</title><rect x="475.4" y="739.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="478.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.35%)</title><rect x="475.4" y="723.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="478.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.35%)</title><rect x="475.4" y="707.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.59%)</title><rect x="479.5" y="771.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.59%)</title><rect x="479.5" y="755.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.59%)</title><rect x="479.5" y="739.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="482.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.59%)</title><rect x="479.5" y="723.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.5" y="734.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.59%)</title><rect x="479.5" y="707.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.5" y="718.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.35%)</title><rect x="482.3" y="691.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="485.3" y="702.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor7.newInstance (1 samples, 0.12%)</title><rect x="485.0" y="675.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.23%)</title><rect x="486.4" y="771.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="489.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.23%)</title><rect x="486.4" y="755.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="489.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.23%)</title><rect x="486.4" y="739.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="489.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.23%)</title><rect x="489.2" y="771.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.70%)</title><rect x="492.0" y="867.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="495.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.70%)</title><rect x="492.0" y="851.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="495.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.70%)</title><rect x="492.0" y="835.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="495.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.70%)</title><rect x="492.0" y="819.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="495.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.12%)</title><rect x="494.7" y="803.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.35%)</title><rect x="496.1" y="803.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="499.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (228 samples, 26.76%)</title><rect x="500.3" y="963.0" width="315.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="503.3" y="974.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.82%)</title><rect x="504.4" y="947.0" width="9.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="507.4" y="958.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.82%)</title><rect x="504.4" y="931.0" width="9.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="507.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (41 samples, 4.81%)</title><rect x="514.1" y="947.0" width="56.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="517.1" y="958.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (40 samples, 4.69%)</title><rect x="515.5" y="931.0" width="55.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="518.5" y="942.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 4.69%)</title><rect x="515.5" y="915.0" width="55.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="518.5" y="926.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.82%)</title><rect x="515.5" y="899.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="518.5" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.82%)</title><rect x="515.5" y="883.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="518.5" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.82%)</title><rect x="515.5" y="867.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="518.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.82%)</title><rect x="515.5" y="851.0" width="9.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="518.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.35%)</title><rect x="521.1" y="835.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="524.1" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (33 samples, 3.87%)</title><rect x="525.2" y="899.0" width="45.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="528.2" y="910.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (24 samples, 2.82%)</title><rect x="537.7" y="883.0" width="33.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.7" y="894.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 0.94%)</title><rect x="559.8" y="867.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="562.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.35%)</title><rect x="570.9" y="947.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="573.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.35%)</title><rect x="570.9" y="931.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="573.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (131 samples, 15.38%)</title><rect x="575.1" y="947.0" width="181.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="578.1" y="958.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="575.1" y="931.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="578.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (123 samples, 14.44%)</title><rect x="576.5" y="931.0" width="170.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="579.5" y="942.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (40 samples, 4.69%)</title><rect x="590.3" y="915.0" width="55.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="593.3" y="926.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (35 samples, 4.11%)</title><rect x="594.5" y="899.0" width="48.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="597.5" y="910.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (21 samples, 2.46%)</title><rect x="604.2" y="883.0" width="29.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.2" y="894.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.70%)</title><rect x="620.8" y="867.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.8" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.70%)</title><rect x="620.8" y="851.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.8" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.70%)</title><rect x="620.8" y="835.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.8" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.70%)</title><rect x="620.8" y="819.0" width="8.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="623.8" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.35%)</title><rect x="620.8" y="803.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="623.8" y="814.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.12%)</title><rect x="620.8" y="787.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="623.8" y="798.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.12%)</title><rect x="620.8" y="771.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="623.8" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.12%)</title><rect x="622.2" y="787.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="625.2" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.12%)</title><rect x="623.5" y="787.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="626.5" y="798.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.12%)</title><rect x="623.5" y="771.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="626.5" y="782.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.12%)</title><rect x="623.5" y="755.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="626.5" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.35%)</title><rect x="624.9" y="803.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="627.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.23%)</title><rect x="624.9" y="787.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="627.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.12%)</title><rect x="626.3" y="771.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="629.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.12%)</title><rect x="627.7" y="787.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="630.7" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.35%)</title><rect x="629.1" y="867.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.1" y="878.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.23%)</title><rect x="633.2" y="883.0" width="2.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="636.2" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.59%)</title><rect x="636.0" y="883.0" width="6.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="639.0" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="642.9" y="899.0" width="2.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="645.9" y="910.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.59%)</title><rect x="645.7" y="915.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="648.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.59%)</title><rect x="645.7" y="899.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="648.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.59%)</title><rect x="645.7" y="883.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.7" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (68 samples, 7.98%)</title><rect x="652.6" y="915.0" width="94.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="655.6" y="926.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (67 samples, 7.86%)</title><rect x="654.0" y="899.0" width="92.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="657.0" y="910.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.59%)</title><rect x="654.0" y="883.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="657.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.59%)</title><rect x="654.0" y="867.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.59%)</title><rect x="654.0" y="851.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.59%)</title><rect x="654.0" y="835.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="657.0" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (62 samples, 7.28%)</title><rect x="660.9" y="883.0" width="85.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.9" y="894.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.put (60 samples, 7.04%)</title><rect x="663.7" y="867.0" width="83.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.7" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.putVal (30 samples, 3.52%)</title><rect x="705.3" y="851.0" width="41.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="708.3" y="862.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (6 samples, 0.70%)</title><rect x="723.3" y="835.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="726.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.94%)</title><rect x="731.6" y="835.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.6" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.23%)</title><rect x="739.9" y="819.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.9" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.23%)</title><rect x="739.9" y="803.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="742.9" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.23%)</title><rect x="739.9" y="787.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="742.9" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="741.3" y="771.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="744.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.12%)</title><rect x="741.3" y="755.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="744.3" y="766.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.35%)</title><rect x="742.7" y="835.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="745.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 0.82%)</title><rect x="746.8" y="931.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="749.8" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.82%)</title><rect x="746.8" y="915.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="749.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.82%)</title><rect x="746.8" y="899.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="749.8" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.82%)</title><rect x="746.8" y="883.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.12%)</title><rect x="749.6" y="867.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="752.6" y="878.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="749.6" y="851.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="752.6" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.35%)</title><rect x="751.0" y="867.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="754.0" y="878.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.35%)</title><rect x="751.0" y="851.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="754.0" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="755.1" y="867.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="758.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (34 samples, 3.99%)</title><rect x="756.5" y="947.0" width="47.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.5" y="958.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (34 samples, 3.99%)</title><rect x="756.5" y="931.0" width="47.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="759.5" y="942.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/125880647.process (15 samples, 1.76%)</title><rect x="759.3" y="915.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="762.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (15 samples, 1.76%)</title><rect x="759.3" y="899.0" width="20.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="762.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 1.53%)</title><rect x="762.0" y="883.0" width="18.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="765.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.12%)</title><rect x="771.7" y="867.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.7" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.12%)</title><rect x="771.7" y="851.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="774.7" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.12%)</title><rect x="771.7" y="835.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="774.7" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.12%)</title><rect x="771.7" y="819.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="774.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.12%)</title><rect x="771.7" y="803.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="774.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.47%)</title><rect x="773.1" y="867.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.1" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.35%)</title><rect x="774.5" y="851.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="777.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.23%)</title><rect x="775.9" y="835.0" width="2.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="778.9" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="778.7" y="867.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="781.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.23%)</title><rect x="780.0" y="915.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="783.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="781.4" y="899.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="784.4" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="781.4" y="883.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="784.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="781.4" y="867.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="784.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="781.4" y="851.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="784.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (7 samples, 0.82%)</title><rect x="782.8" y="915.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="785.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (4 samples, 0.47%)</title><rect x="785.6" y="899.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.12%)</title><rect x="791.1" y="899.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.12%)</title><rect x="791.1" y="883.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.12%)</title><rect x="791.1" y="867.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="794.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.12%)</title><rect x="792.5" y="915.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$363/2013794568.get (1 samples, 0.12%)</title><rect x="792.5" y="899.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="795.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$93 (1 samples, 0.12%)</title><rect x="792.5" y="883.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="795.5" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.35%)</title><rect x="793.9" y="915.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.9" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.12%)</title><rect x="796.7" y="899.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.7" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="796.7" y="883.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="799.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.47%)</title><rect x="798.1" y="915.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.47%)</title><rect x="798.1" y="899.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="801.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.47%)</title><rect x="798.1" y="883.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="801.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.35%)</title><rect x="798.1" y="867.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="801.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.35%)</title><rect x="798.1" y="851.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="801.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.35%)</title><rect x="798.1" y="835.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="801.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$364/706725048.accept (1 samples, 0.12%)</title><rect x="800.8" y="819.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="803.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.12%)</title><rect x="802.2" y="867.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 1.06%)</title><rect x="803.6" y="947.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 1.06%)</title><rect x="803.6" y="931.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 1.06%)</title><rect x="803.6" y="915.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="806.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.82%)</title><rect x="803.6" y="899.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.82%)</title><rect x="803.6" y="883.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="806.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.82%)</title><rect x="803.6" y="867.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$365/1244675063.accept (4 samples, 0.47%)</title><rect x="803.6" y="851.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="806.6" y="862.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.35%)</title><rect x="809.1" y="851.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="812.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.23%)</title><rect x="813.3" y="899.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="816.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$365/1244675063.accept (2 samples, 0.23%)</title><rect x="813.3" y="883.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="816.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$73 (2 samples, 0.23%)</title><rect x="813.3" y="867.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.23%)</title><rect x="813.3" y="851.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="816.3" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.23%)</title><rect x="813.3" y="835.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.3" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.23%)</title><rect x="813.3" y="819.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="816.3" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.23%)</title><rect x="816.1" y="963.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="819.1" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.23%)</title><rect x="816.1" y="947.0" width="2.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="819.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.12%)</title><rect x="818.8" y="979.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="821.8" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.12%)</title><rect x="818.8" y="963.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="821.8" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.12%)</title><rect x="818.8" y="947.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="821.8" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="818.8" y="931.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="821.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.12%)</title><rect x="818.8" y="915.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="821.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.12%)</title><rect x="818.8" y="899.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="821.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.59%)</title><rect x="820.2" y="1027.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="823.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.59%)</title><rect x="820.2" y="1011.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="823.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.59%)</title><rect x="820.2" y="995.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="823.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.59%)</title><rect x="820.2" y="979.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="823.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (181 samples, 21.24%)</title><rect x="827.1" y="1027.0" width="250.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="830.1" y="1038.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (178 samples, 20.89%)</title><rect x="831.3" y="1011.0" width="246.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="834.3" y="1022.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (147 samples, 17.25%)</title><rect x="872.8" y="995.0" width="203.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="875.8" y="1006.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (141 samples, 16.55%)</title><rect x="881.2" y="979.0" width="195.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="884.2" y="990.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (130 samples, 15.26%)</title><rect x="896.4" y="963.0" width="180.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="899.4" y="974.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.12%)</title><rect x="900.5" y="947.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.5" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.23%)</title><rect x="901.9" y="947.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="904.9" y="958.0"></text>
</g>
<g>
<title>Unsafe_Park (123 samples, 14.44%)</title><rect x="904.7" y="947.0" width="170.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="907.7" y="958.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.12%)</title><rect x="904.7" y="931.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.7" y="942.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (15 samples, 1.76%)</title><rect x="906.1" y="931.0" width="20.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="909.1" y="942.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.59%)</title><rect x="911.6" y="915.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="914.6" y="926.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.12%)</title><rect x="911.6" y="899.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="914.6" y="910.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.35%)</title><rect x="913.0" y="899.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.0" y="910.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.12%)</title><rect x="917.2" y="899.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="920.2" y="910.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.47%)</title><rect x="918.5" y="915.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.5" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.23%)</title><rect x="924.1" y="915.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="927.1" y="926.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.12%)</title><rect x="926.9" y="931.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="929.9" y="942.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.35%)</title><rect x="928.2" y="931.0" width="4.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="931.2" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (37 samples, 4.34%)</title><rect x="932.4" y="931.0" width="51.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="935.4" y="942.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 5.87%)</title><rect x="983.6" y="931.0" width="69.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="986.6" y="942.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.23%)</title><rect x="1052.9" y="931.0" width="2.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1055.9" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.12%)</title><rect x="1055.7" y="931.0" width="1.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1058.7" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.47%)</title><rect x="1057.0" y="931.0" width="5.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1060.0" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.23%)</title><rect x="1062.6" y="931.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1065.6" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.12%)</title><rect x="1065.4" y="931.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1068.4" y="942.0"></text>
</g>
<g>
<title>_init (3 samples, 0.35%)</title><rect x="1066.7" y="931.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1069.7" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.23%)</title><rect x="1070.9" y="931.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.9" y="942.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="1073.7" y="931.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.7" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="1075.0" y="947.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.12%)</title><rect x="1076.4" y="995.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1079.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.12%)</title><rect x="1076.4" y="979.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1079.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.12%)</title><rect x="1076.4" y="963.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1079.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.12%)</title><rect x="1076.4" y="947.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1079.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.12%)</title><rect x="1077.8" y="1075.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1080.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.12%)</title><rect x="1077.8" y="1059.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.12%)</title><rect x="1077.8" y="1043.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1080.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.12%)</title><rect x="1077.8" y="1027.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1080.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.12%)</title><rect x="1077.8" y="1011.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1080.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.12%)</title><rect x="1077.8" y="995.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1080.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.12%)</title><rect x="1077.8" y="979.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1080.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.12%)</title><rect x="1077.8" y="963.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1080.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.12%)</title><rect x="1077.8" y="947.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1080.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.12%)</title><rect x="1077.8" y="931.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1080.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.12%)</title><rect x="1077.8" y="915.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1080.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.12%)</title><rect x="1077.8" y="899.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1080.8" y="910.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.contains (1 samples, 0.12%)</title><rect x="1077.8" y="883.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1080.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.12%)</title><rect x="1077.8" y="867.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1080.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="1077.8" y="851.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1080.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.12%)</title><rect x="1077.8" y="835.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1080.8" y="846.0"></text>
</g>
<g>
<title>start_thread (80 samples, 9.39%)</title><rect x="1079.2" y="1075.0" width="110.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1082.2" y="1086.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (80 samples, 9.39%)</title><rect x="1079.2" y="1059.0" width="110.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1082.2" y="1070.0">java_start(Th..</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 2.23%)</title><rect x="1079.2" y="1043.0" width="26.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1082.2" y="1054.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1079.2" y="1027.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.2" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1079.2" y="1011.0" width="1.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1082.2" y="1022.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.47%)</title><rect x="1080.6" y="1027.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.6" y="1038.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.47%)</title><rect x="1080.6" y="1011.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.6" y="1022.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.23%)</title><rect x="1080.6" y="995.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.6" y="1006.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.23%)</title><rect x="1083.4" y="995.0" width="2.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1086.4" y="1006.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 1.53%)</title><rect x="1086.1" y="1027.0" width="18.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.1" y="1038.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.47%)</title><rect x="1086.1" y="1011.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.1" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.12%)</title><rect x="1086.1" y="995.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.1" y="1006.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.12%)</title><rect x="1087.5" y="995.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.5" y="1006.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.23%)</title><rect x="1088.9" y="995.0" width="2.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1091.9" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.82%)</title><rect x="1091.7" y="1011.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.7" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.23%)</title><rect x="1091.7" y="995.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.7" y="1006.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.23%)</title><rect x="1091.7" y="979.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1094.7" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.59%)</title><rect x="1094.4" y="995.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.4" y="1006.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.47%)</title><rect x="1094.4" y="979.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.4" y="990.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.12%)</title><rect x="1100.0" y="979.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.0" y="990.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.12%)</title><rect x="1100.0" y="963.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.0" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.23%)</title><rect x="1101.4" y="1011.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.4" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.23%)</title><rect x="1101.4" y="995.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.4" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.23%)</title><rect x="1101.4" y="979.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.4" y="990.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.23%)</title><rect x="1101.4" y="963.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.4" y="974.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.23%)</title><rect x="1101.4" y="947.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.4" y="958.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.23%)</title><rect x="1101.4" y="931.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.4" y="942.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.12%)</title><rect x="1102.7" y="915.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.7" y="926.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.12%)</title><rect x="1102.7" y="899.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.7" y="910.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1104.1" y="1027.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.1" y="1038.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::record_thread_work_item(G1GCPhaseTimes::GCParPhases, unsigned int, unsigned long) (1 samples, 0.12%)</title><rect x="1104.1" y="1011.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.1" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (59 samples, 6.92%)</title><rect x="1105.5" y="1043.0" width="81.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.5" y="1054.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (59 samples, 6.92%)</title><rect x="1105.5" y="1027.0" width="81.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.5" y="1038.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (59 samples, 6.92%)</title><rect x="1105.5" y="1011.0" width="81.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.5" y="1022.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (59 samples, 6.92%)</title><rect x="1105.5" y="995.0" width="81.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.5" y="1006.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (59 samples, 6.92%)</title><rect x="1105.5" y="979.0" width="81.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.5" y="990.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (59 samples, 6.92%)</title><rect x="1105.5" y="963.0" width="81.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.5" y="974.0">Compile::..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.12%)</title><rect x="1105.5" y="947.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.5" y="958.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.12%)</title><rect x="1105.5" y="931.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.5" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1105.5" y="915.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.5" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1105.5" y="899.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.5" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1105.5" y="883.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.5" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1105.5" y="867.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.5" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1105.5" y="851.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.5" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1105.5" y="835.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.5" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1105.5" y="819.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.5" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1105.5" y="803.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1105.5" y="787.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.5" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1105.5" y="771.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.5" y="782.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.12%)</title><rect x="1105.5" y="755.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.5" y="766.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.12%)</title><rect x="1105.5" y="739.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.5" y="750.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.12%)</title><rect x="1105.5" y="723.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.5" y="734.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.12%)</title><rect x="1105.5" y="707.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.5" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.12%)</title><rect x="1105.5" y="691.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.5" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.12%)</title><rect x="1105.5" y="675.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.5" y="686.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 3.76%)</title><rect x="1106.9" y="947.0" width="44.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.9" y="958.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.12%)</title><rect x="1106.9" y="931.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.9" y="942.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.12%)</title><rect x="1106.9" y="915.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.9" y="926.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.12%)</title><rect x="1106.9" y="899.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.9" y="910.0"></text>
</g>
<g>
<title>addL_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.12%)</title><rect x="1106.9" y="883.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.9" y="894.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.12%)</title><rect x="1108.3" y="931.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.3" y="942.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.12%)</title><rect x="1108.3" y="915.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.3" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.23%)</title><rect x="1109.7" y="931.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.7" y="942.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.23%)</title><rect x="1109.7" y="915.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.7" y="926.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.12%)</title><rect x="1111.1" y="899.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.1" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.12%)</title><rect x="1111.1" y="883.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.1" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.12%)</title><rect x="1111.1" y="867.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.1" y="878.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.12%)</title><rect x="1112.4" y="931.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.4" y="942.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.12%)</title><rect x="1112.4" y="915.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.4" y="926.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.12%)</title><rect x="1112.4" y="899.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.4" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.12%)</title><rect x="1113.8" y="931.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.8" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.12%)</title><rect x="1113.8" y="915.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.8" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1113.8" y="899.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.8" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.12%)</title><rect x="1115.2" y="931.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.2" y="942.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.12%)</title><rect x="1115.2" y="915.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.2" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 2.93%)</title><rect x="1116.6" y="931.0" width="34.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.6" y="942.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1116.6" y="915.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.6" y="926.0"></text>
</g>
<g>
<title>Node::jvms() const (2 samples, 0.23%)</title><rect x="1118.0" y="915.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.0" y="926.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.12%)</title><rect x="1120.8" y="915.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.8" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.12%)</title><rect x="1122.1" y="915.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.1" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.12%)</title><rect x="1122.1" y="899.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.47%)</title><rect x="1123.5" y="915.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.5" y="926.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.12%)</title><rect x="1126.3" y="899.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.3" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.12%)</title><rect x="1127.7" y="899.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.7" y="910.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.12%)</title><rect x="1127.7" y="883.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.7" y="894.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.12%)</title><rect x="1127.7" y="867.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.70%)</title><rect x="1129.1" y="915.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.1" y="926.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.12%)</title><rect x="1131.8" y="899.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.8" y="910.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.12%)</title><rect x="1131.8" y="883.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.8" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.23%)</title><rect x="1133.2" y="899.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.2" y="910.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1136.0" y="899.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.0" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.47%)</title><rect x="1137.4" y="915.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.4" y="926.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1141.5" y="899.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.5" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.23%)</title><rect x="1142.9" y="915.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.23%)</title><rect x="1142.9" y="899.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.9" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.12%)</title><rect x="1145.7" y="915.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.7" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1145.7" y="899.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.7" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.12%)</title><rect x="1147.1" y="915.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.1" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1147.1" y="899.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.1" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.12%)</title><rect x="1148.5" y="915.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.5" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.12%)</title><rect x="1149.8" y="915.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 2.35%)</title><rect x="1151.2" y="947.0" width="27.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.2" y="958.0">C..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.12%)</title><rect x="1151.2" y="931.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.12%)</title><rect x="1151.2" y="915.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.12%)</title><rect x="1151.2" y="899.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.2" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.12%)</title><rect x="1152.6" y="931.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.6" y="942.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.12%)</title><rect x="1152.6" y="915.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.6" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.12%)</title><rect x="1152.6" y="899.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.6" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.12%)</title><rect x="1152.6" y="883.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.6" y="894.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.12%)</title><rect x="1152.6" y="867.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.6" y="878.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.12%)</title><rect x="1152.6" y="851.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (10 samples, 1.17%)</title><rect x="1154.0" y="931.0" width="13.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.0" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1154.0" y="915.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.0" y="926.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.12%)</title><rect x="1154.0" y="899.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.0" y="910.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.12%)</title><rect x="1155.4" y="915.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.12%)</title><rect x="1156.8" y="915.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1158.1" y="915.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.59%)</title><rect x="1159.5" y="915.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.23%)</title><rect x="1163.7" y="899.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.23%)</title><rect x="1163.7" y="883.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.12%)</title><rect x="1165.1" y="867.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.12%)</title><rect x="1166.5" y="915.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.5" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.82%)</title><rect x="1167.8" y="931.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.82%)</title><rect x="1167.8" y="915.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.8" y="926.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.23%)</title><rect x="1167.8" y="899.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.8" y="910.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (2 samples, 0.23%)</title><rect x="1167.8" y="883.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="894.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.23%)</title><rect x="1170.6" y="899.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.6" y="910.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.23%)</title><rect x="1170.6" y="883.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.6" y="894.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.12%)</title><rect x="1172.0" y="867.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.0" y="878.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.12%)</title><rect x="1172.0" y="851.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.12%)</title><rect x="1172.0" y="835.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.0" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.12%)</title><rect x="1172.0" y="819.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.0" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.12%)</title><rect x="1172.0" y="803.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1175.0" y="814.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1173.4" y="899.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="910.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.12%)</title><rect x="1174.8" y="899.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="910.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1176.2" y="899.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.2" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.12%)</title><rect x="1176.2" y="883.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.2" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.12%)</title><rect x="1176.2" y="867.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.2" y="878.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.12%)</title><rect x="1176.2" y="851.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.2" y="862.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.12%)</title><rect x="1177.5" y="931.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="942.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.12%)</title><rect x="1177.5" y="915.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.5" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.70%)</title><rect x="1178.9" y="947.0" width="8.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.70%)</title><rect x="1178.9" y="931.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.70%)</title><rect x="1178.9" y="915.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.70%)</title><rect x="1178.9" y="899.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.70%)</title><rect x="1178.9" y="883.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.70%)</title><rect x="1178.9" y="867.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1178.9" y="851.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1178.9" y="835.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1178.9" y="819.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1178.9" y="803.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1178.9" y="787.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1178.9" y="771.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1178.9" y="755.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1178.9" y="739.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1178.9" y="723.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1178.9" y="707.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1178.9" y="691.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1178.9" y="675.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.12%)</title><rect x="1178.9" y="659.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.12%)</title><rect x="1178.9" y="643.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1178.9" y="627.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.12%)</title><rect x="1178.9" y="611.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.12%)</title><rect x="1178.9" y="595.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.59%)</title><rect x="1180.3" y="851.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.59%)</title><rect x="1180.3" y="835.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.59%)</title><rect x="1180.3" y="819.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.59%)</title><rect x="1180.3" y="803.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.59%)</title><rect x="1180.3" y="787.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.59%)</title><rect x="1180.3" y="771.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.47%)</title><rect x="1180.3" y="755.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.47%)</title><rect x="1180.3" y="739.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.47%)</title><rect x="1180.3" y="723.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.47%)</title><rect x="1180.3" y="707.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.47%)</title><rect x="1180.3" y="691.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.47%)</title><rect x="1180.3" y="675.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.47%)</title><rect x="1180.3" y="659.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.47%)</title><rect x="1180.3" y="643.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.47%)</title><rect x="1180.3" y="627.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.47%)</title><rect x="1180.3" y="611.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.47%)</title><rect x="1180.3" y="595.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.35%)</title><rect x="1180.3" y="579.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.35%)</title><rect x="1180.3" y="563.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.35%)</title><rect x="1180.3" y="547.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.35%)</title><rect x="1180.3" y="531.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.35%)</title><rect x="1180.3" y="515.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.35%)</title><rect x="1180.3" y="499.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.35%)</title><rect x="1180.3" y="483.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.35%)</title><rect x="1180.3" y="467.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.35%)</title><rect x="1180.3" y="451.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.35%)</title><rect x="1180.3" y="435.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.35%)</title><rect x="1180.3" y="419.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.35%)</title><rect x="1180.3" y="403.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.35%)</title><rect x="1180.3" y="387.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.35%)</title><rect x="1180.3" y="371.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.35%)</title><rect x="1180.3" y="355.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.35%)</title><rect x="1180.3" y="339.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.35%)</title><rect x="1180.3" y="323.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.35%)</title><rect x="1180.3" y="307.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1180.3" y="291.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.3" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1180.3" y="275.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1180.3" y="259.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1180.3" y="243.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1180.3" y="227.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1180.3" y="211.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1180.3" y="195.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1180.3" y="179.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1180.3" y="163.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="174.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.12%)</title><rect x="1180.3" y="147.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.12%)</title><rect x="1180.3" y="131.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="142.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.12%)</title><rect x="1180.3" y="115.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.12%)</title><rect x="1180.3" y="99.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.12%)</title><rect x="1180.3" y="83.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.12%)</title><rect x="1180.3" y="67.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.12%)</title><rect x="1180.3" y="51.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.12%)</title><rect x="1180.3" y="35.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1181.7" y="291.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.12%)</title><rect x="1181.7" y="275.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.12%)</title><rect x="1181.7" y="259.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1181.7" y="243.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.12%)</title><rect x="1181.7" y="227.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.12%)</title><rect x="1183.1" y="291.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="302.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.12%)</title><rect x="1183.1" y="275.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="286.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.12%)</title><rect x="1183.1" y="259.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="270.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.12%)</title><rect x="1183.1" y="243.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="254.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.12%)</title><rect x="1183.1" y="227.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.12%)</title><rect x="1184.5" y="579.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="590.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.12%)</title><rect x="1184.5" y="563.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="574.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.12%)</title><rect x="1184.5" y="547.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.5" y="558.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.12%)</title><rect x="1184.5" y="531.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="542.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.12%)</title><rect x="1184.5" y="515.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.8" y="755.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.8" y="739.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.8" y="723.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.8" y="707.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.8" y="691.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.8" y="675.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.8" y="659.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.8" y="643.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.8" y="627.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.8" y="611.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.8" y="595.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.8" y="579.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.8" y="563.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.8" y="547.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.8" y="531.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.8" y="515.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.8" y="499.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.8" y="483.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.8" y="467.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.8" y="451.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.8" y="435.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.8" y="419.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.8" y="403.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.8" y="387.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.8" y="371.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.8" y="355.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.8" y="339.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.8" y="323.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.8" y="307.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.8" y="291.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1185.8" y="275.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.8" y="286.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.12%)</title><rect x="1185.8" y="259.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="270.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.12%)</title><rect x="1185.8" y="243.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.8" y="254.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.23%)</title><rect x="1187.2" y="1043.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.2" y="1054.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.23%)</title><rect x="1187.2" y="1027.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.2" y="1038.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.12%)</title><rect x="1187.2" y="1011.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.12%)</title><rect x="1187.2" y="995.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.12%)</title><rect x="1187.2" y="979.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.2" y="990.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.12%)</title><rect x="1187.2" y="963.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.2" y="974.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.12%)</title><rect x="1187.2" y="947.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.12%)</title><rect x="1187.2" y="931.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.2" y="942.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.12%)</title><rect x="1187.2" y="915.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.2" y="926.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.12%)</title><rect x="1188.6" y="1011.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="1022.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.12%)</title><rect x="1188.6" y="995.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.6" y="1006.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.12%)</title><rect x="1188.6" y="979.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.6" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.12%)</title><rect x="1188.6" y="963.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.6" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.12%)</title><rect x="1188.6" y="947.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="958.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.12%)</title><rect x="1188.6" y="931.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="942.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.12%)</title><rect x="1188.6" y="915.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.6" y="926.0"></text>
</g>
</g>
</svg>
