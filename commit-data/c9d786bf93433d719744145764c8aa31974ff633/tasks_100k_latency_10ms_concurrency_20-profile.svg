<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (177 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.56%)</title><rect x="10.0" y="1299.0" width="6.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.56%)</title><rect x="10.0" y="1283.0" width="6.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>stringStream::write(char const*, unsigned long) (1 samples, 0.56%)</title><rect x="10.0" y="1267.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.56%)</title><rect x="10.0" y="1251.0" width="6.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.56%)</title><rect x="10.0" y="1235.0" width="6.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 9.04%)</title><rect x="16.7" y="1299.0" width="106.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="1310.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (16 samples, 9.04%)</title><rect x="16.7" y="1283.0" width="106.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="1294.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (16 samples, 9.04%)</title><rect x="16.7" y="1267.0" width="106.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.7" y="1278.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.56%)</title><rect x="16.7" y="1251.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.7" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsPaused (1 samples, 0.56%)</title><rect x="16.7" y="1235.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 1.13%)</title><rect x="23.3" y="1251.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 1.13%)</title><rect x="23.3" y="1235.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.3" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.13%)</title><rect x="23.3" y="1219.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$135/119826845.accept (2 samples, 1.13%)</title><rect x="23.3" y="1203.0" width="13.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 1.13%)</title><rect x="23.3" y="1187.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 1.13%)</title><rect x="23.3" y="1171.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.3" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 1.13%)</title><rect x="23.3" y="1155.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 3.39%)</title><rect x="36.7" y="1251.0" width="40.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.7" y="1262.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/1761111321.accept (5 samples, 2.82%)</title><rect x="36.7" y="1235.0" width="33.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.7" y="1246.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 2.82%)</title><rect x="36.7" y="1219.0" width="33.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.7" y="1230.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.56%)</title><rect x="36.7" y="1203.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.56%)</title><rect x="36.7" y="1187.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.56%)</title><rect x="36.7" y="1171.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 1.69%)</title><rect x="43.3" y="1203.0" width="20.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="46.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 1.69%)</title><rect x="43.3" y="1187.0" width="20.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.56%)</title><rect x="63.3" y="1203.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.56%)</title><rect x="63.3" y="1187.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="66.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.56%)</title><rect x="63.3" y="1171.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.56%)</title><rect x="63.3" y="1155.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="66.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.56%)</title><rect x="63.3" y="1139.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.56%)</title><rect x="70.0" y="1235.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.95%)</title><rect x="76.7" y="1251.0" width="46.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="79.7" y="1262.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.95%)</title><rect x="76.7" y="1235.0" width="46.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.7" y="1246.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.82%)</title><rect x="76.7" y="1219.0" width="33.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.7" y="1230.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.56%)</title><rect x="76.7" y="1203.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.56%)</title><rect x="76.7" y="1187.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="79.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.56%)</title><rect x="76.7" y="1171.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.56%)</title><rect x="76.7" y="1155.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.56%)</title><rect x="76.7" y="1139.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.56%)</title><rect x="76.7" y="1123.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.56%)</title><rect x="76.7" y="1107.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.56%)</title><rect x="76.7" y="1091.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.56%)</title><rect x="76.7" y="1075.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.56%)</title><rect x="76.7" y="1059.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.56%)</title><rect x="76.7" y="1043.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.7" y="1054.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.56%)</title><rect x="76.7" y="1027.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.7" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.56%)</title><rect x="76.7" y="1011.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.7" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.56%)</title><rect x="76.7" y="995.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.7" y="1006.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.56%)</title><rect x="76.7" y="979.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.7" y="990.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.56%)</title><rect x="76.7" y="963.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.7" y="974.0"></text>
</g>
<g>
<title>java/nio/Bits.copyFromArray (1 samples, 0.56%)</title><rect x="76.7" y="947.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.7" y="958.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.56%)</title><rect x="76.7" y="931.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.7" y="942.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.56%)</title><rect x="76.7" y="915.0" width="6.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="79.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (4 samples, 2.26%)</title><rect x="83.3" y="1203.0" width="26.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.3" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.69%)</title><rect x="83.3" y="1187.0" width="20.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (3 samples, 1.69%)</title><rect x="83.3" y="1171.0" width="20.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.69%)</title><rect x="83.3" y="1155.0" width="20.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.13%)</title><rect x="83.3" y="1139.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.56%)</title><rect x="96.7" y="1139.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.56%)</title><rect x="96.7" y="1123.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.56%)</title><rect x="96.7" y="1107.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.7" y="1118.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.56%)</title><rect x="96.7" y="1091.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.56%)</title><rect x="103.3" y="1187.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords$$Lambda$350/1016151193.iterator (1 samples, 0.56%)</title><rect x="103.3" y="1171.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="106.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.batchIterator (1 samples, 0.56%)</title><rect x="103.3" y="1155.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.3" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.56%)</title><rect x="103.3" y="1139.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.3" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.56%)</title><rect x="103.3" y="1123.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.3" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.56%)</title><rect x="103.3" y="1107.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.56%)</title><rect x="103.3" y="1091.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.3" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.56%)</title><rect x="103.3" y="1075.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="106.3" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.56%)</title><rect x="103.3" y="1059.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="106.3" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.56%)</title><rect x="103.3" y="1043.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="106.3" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.56%)</title><rect x="103.3" y="1027.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="106.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.56%)</title><rect x="110.0" y="1219.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.56%)</title><rect x="110.0" y="1203.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="113.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.56%)</title><rect x="110.0" y="1187.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.56%)</title><rect x="116.7" y="1219.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.56%)</title><rect x="116.7" y="1203.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="119.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.56%)</title><rect x="116.7" y="1187.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.56%)</title><rect x="116.7" y="1171.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.56%)</title><rect x="116.7" y="1155.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$InFlightRequest.&lt;init&gt; (1 samples, 0.56%)</title><rect x="116.7" y="1139.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$InFlightRequest.&lt;init&gt; (1 samples, 0.56%)</title><rect x="116.7" y="1123.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (78 samples, 44.07%)</title><rect x="123.3" y="1299.0" width="520.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="126.3" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (78 samples, 44.07%)</title><rect x="123.3" y="1283.0" width="520.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="126.3" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (78 samples, 44.07%)</title><rect x="123.3" y="1267.0" width="520.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.3" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/1604712688.run (72 samples, 40.68%)</title><rect x="123.3" y="1251.0" width="480.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="126.3" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$80 (72 samples, 40.68%)</title><rect x="123.3" y="1235.0" width="480.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.3" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (72 samples, 40.68%)</title><rect x="123.3" y="1219.0" width="480.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="126.3" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.proc..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="123.3" y="1203.0" width="6.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="126.3" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="123.3" y="1187.0" width="6.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="126.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (71 samples, 40.11%)</title><rect x="130.0" y="1203.0" width="473.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.0" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.s..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (5 samples, 2.82%)</title><rect x="130.0" y="1187.0" width="33.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="133.0" y="1198.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.69%)</title><rect x="143.3" y="1171.0" width="20.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.69%)</title><rect x="143.3" y="1155.0" width="20.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.69%)</title><rect x="143.3" y="1139.0" width="20.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.69%)</title><rect x="143.3" y="1123.0" width="20.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="146.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$374/13722599.accept (3 samples, 1.69%)</title><rect x="143.3" y="1107.0" width="20.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (3 samples, 1.69%)</title><rect x="143.3" y="1091.0" width="20.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 1.69%)</title><rect x="143.3" y="1075.0" width="20.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 1.69%)</title><rect x="143.3" y="1059.0" width="20.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 1.69%)</title><rect x="143.3" y="1043.0" width="20.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.56%)</title><rect x="143.3" y="1027.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.56%)</title><rect x="143.3" y="1011.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.13%)</title><rect x="150.0" y="1027.0" width="13.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (12 samples, 6.78%)</title><rect x="163.3" y="1187.0" width="80.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="166.3" y="1198.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (12 samples, 6.78%)</title><rect x="163.3" y="1171.0" width="80.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.3" y="1182.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (12 samples, 6.78%)</title><rect x="163.3" y="1155.0" width="80.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="166.3" y="1166.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 6.78%)</title><rect x="163.3" y="1139.0" width="80.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="166.3" y="1150.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 6.78%)</title><rect x="163.3" y="1123.0" width="80.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="166.3" y="1134.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 6.78%)</title><rect x="163.3" y="1107.0" width="80.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="166.3" y="1118.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.26%)</title><rect x="163.3" y="1091.0" width="26.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="166.3" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.56%)</title><rect x="163.3" y="1075.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="166.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.56%)</title><rect x="163.3" y="1059.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="166.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.&lt;init&gt; (1 samples, 0.56%)</title><rect x="163.3" y="1043.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="166.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.56%)</title><rect x="170.0" y="1075.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.56%)</title><rect x="170.0" y="1059.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="173.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.56%)</title><rect x="170.0" y="1043.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.13%)</title><rect x="176.7" y="1075.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.13%)</title><rect x="176.7" y="1059.0" width="13.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 3.95%)</title><rect x="190.0" y="1091.0" width="46.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="193.0" y="1102.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.56%)</title><rect x="190.0" y="1075.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.56%)</title><rect x="190.0" y="1059.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (1 samples, 0.56%)</title><rect x="190.0" y="1043.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.56%)</title><rect x="190.0" y="1027.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.56%)</title><rect x="196.7" y="1075.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.56%)</title><rect x="196.7" y="1059.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.56%)</title><rect x="196.7" y="1043.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (5 samples, 2.82%)</title><rect x="203.3" y="1075.0" width="33.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="206.3" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.82%)</title><rect x="203.3" y="1059.0" width="33.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.3" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.56%)</title><rect x="203.3" y="1043.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.56%)</title><rect x="203.3" y="1027.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.56%)</title><rect x="203.3" y="1011.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.56%)</title><rect x="203.3" y="995.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.26%)</title><rect x="210.0" y="1043.0" width="26.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.0" y="1054.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.26%)</title><rect x="210.0" y="1027.0" width="26.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.0" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.26%)</title><rect x="210.0" y="1011.0" width="26.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.0" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.56%)</title><rect x="210.0" y="995.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.56%)</title><rect x="210.0" y="979.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.56%)</title><rect x="216.7" y="995.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.56%)</title><rect x="216.7" y="979.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="219.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.56%)</title><rect x="216.7" y="963.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.56%)</title><rect x="216.7" y="947.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="219.7" y="958.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.56%)</title><rect x="216.7" y="931.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.13%)</title><rect x="223.3" y="995.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 1.13%)</title><rect x="223.3" y="979.0" width="13.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="226.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 1.13%)</title><rect x="223.3" y="963.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 1.13%)</title><rect x="223.3" y="947.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.3" y="958.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 1.13%)</title><rect x="223.3" y="931.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.3" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.56%)</title><rect x="223.3" y="915.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="226.3" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(instanceKlassHandle, bool, int, Thread*) (1 samples, 0.56%)</title><rect x="223.3" y="899.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="226.3" y="910.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.56%)</title><rect x="230.0" y="915.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.56%)</title><rect x="236.7" y="1091.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.56%)</title><rect x="236.7" y="1075.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.56%)</title><rect x="236.7" y="1059.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.56%)</title><rect x="236.7" y="1043.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.56%)</title><rect x="236.7" y="1027.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (52 samples, 29.38%)</title><rect x="243.3" y="1187.0" width="346.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.3" y="1198.0">com/linecorp/decaton/processor/runtime/internal..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.13%)</title><rect x="250.0" y="1171.0" width="13.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="253.0" y="1182.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.13%)</title><rect x="250.0" y="1155.0" width="13.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="253.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (8 samples, 4.52%)</title><rect x="263.3" y="1171.0" width="53.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.3" y="1182.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (7 samples, 3.95%)</title><rect x="270.0" y="1155.0" width="46.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.0" y="1166.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (7 samples, 3.95%)</title><rect x="270.0" y="1139.0" width="46.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.0" y="1150.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.56%)</title><rect x="276.7" y="1123.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.56%)</title><rect x="276.7" y="1107.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.56%)</title><rect x="276.7" y="1091.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.56%)</title><rect x="276.7" y="1075.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 2.82%)</title><rect x="283.3" y="1123.0" width="33.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.3" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.13%)</title><rect x="303.3" y="1107.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.13%)</title><rect x="303.3" y="1091.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (10 samples, 5.65%)</title><rect x="316.7" y="1171.0" width="66.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.7" y="1182.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (9 samples, 5.08%)</title><rect x="316.7" y="1155.0" width="60.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.7" y="1166.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.56%)</title><rect x="316.7" y="1139.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.56%)</title><rect x="316.7" y="1123.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.56%)</title><rect x="316.7" y="1107.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.56%)</title><rect x="316.7" y="1091.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.56%)</title><rect x="316.7" y="1075.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.56%)</title><rect x="316.7" y="1059.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.7" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.56%)</title><rect x="316.7" y="1043.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="319.7" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.56%)</title><rect x="316.7" y="1027.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="319.7" y="1038.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.56%)</title><rect x="316.7" y="1011.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="319.7" y="1022.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 4.52%)</title><rect x="323.3" y="1139.0" width="53.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.3" y="1150.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 4.52%)</title><rect x="323.3" y="1123.0" width="53.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.3" y="1134.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 4.52%)</title><rect x="323.3" y="1107.0" width="53.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.3" y="1118.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 4.52%)</title><rect x="323.3" y="1091.0" width="53.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.3" y="1102.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 2.26%)</title><rect x="350.0" y="1075.0" width="26.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.0" y="1086.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.56%)</title><rect x="370.0" y="1059.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.56%)</title><rect x="376.7" y="1155.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.7" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.56%)</title><rect x="376.7" y="1139.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.56%)</title><rect x="376.7" y="1123.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="379.7" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.56%)</title><rect x="376.7" y="1107.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.7" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="376.7" y="1091.0" width="6.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="379.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (30 samples, 16.95%)</title><rect x="383.3" y="1171.0" width="200.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.3" y="1182.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (30 samples, 16.95%)</title><rect x="383.3" y="1155.0" width="200.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="386.3" y="1166.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/1893214581.process (27 samples, 15.25%)</title><rect x="383.3" y="1139.0" width="180.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="386.3" y="1150.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (27 samples, 15.25%)</title><rect x="383.3" y="1123.0" width="180.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="386.3" y="1134.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (27 samples, 15.25%)</title><rect x="383.3" y="1107.0" width="180.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.3" y="1118.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (24 samples, 13.56%)</title><rect x="383.3" y="1091.0" width="160.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="386.3" y="1102.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/lang/Thread.sleep (24 samples, 13.56%)</title><rect x="383.3" y="1075.0" width="160.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="386.3" y="1086.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (22 samples, 12.43%)</title><rect x="396.7" y="1059.0" width="146.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="399.7" y="1070.0">JVM_Sleep</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="396.7" y="1043.0" width="6.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="399.7" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="396.7" y="1027.0" width="6.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="399.7" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.56%)</title><rect x="403.3" y="1043.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="406.3" y="1054.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (20 samples, 11.30%)</title><rect x="410.0" y="1043.0" width="133.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="413.0" y="1054.0">os::sleep(Thread*..</text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 3.95%)</title><rect x="423.3" y="1027.0" width="46.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="426.3" y="1038.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_timedwait (6 samples, 3.39%)</title><rect x="470.0" y="1027.0" width="40.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="473.0" y="1038.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.56%)</title><rect x="510.0" y="1027.0" width="6.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="513.0" y="1038.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.69%)</title><rect x="516.7" y="1027.0" width="20.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="519.7" y="1038.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.56%)</title><rect x="536.7" y="1027.0" width="6.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="539.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.56%)</title><rect x="543.3" y="1091.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.13%)</title><rect x="550.0" y="1091.0" width="13.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.56%)</title><rect x="563.3" y="1139.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="566.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.56%)</title><rect x="563.3" y="1123.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="566.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (2 samples, 1.13%)</title><rect x="570.0" y="1139.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="573.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.56%)</title><rect x="583.3" y="1171.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.56%)</title><rect x="583.3" y="1155.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.56%)</title><rect x="583.3" y="1139.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.56%)</title><rect x="583.3" y="1123.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="586.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$372/1106012636.accept (1 samples, 0.56%)</title><rect x="583.3" y="1107.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$73 (1 samples, 0.56%)</title><rect x="583.3" y="1091.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.56%)</title><rect x="583.3" y="1075.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="586.3" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.56%)</title><rect x="583.3" y="1059.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="586.3" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.56%)</title><rect x="583.3" y="1043.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="586.3" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="583.3" y="1027.0" width="6.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="586.3" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="583.3" y="1011.0" width="6.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="586.3" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.13%)</title><rect x="590.0" y="1187.0" width="13.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="593.0" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.13%)</title><rect x="590.0" y="1171.0" width="13.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="593.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 1.69%)</title><rect x="603.3" y="1251.0" width="20.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.69%)</title><rect x="603.3" y="1235.0" width="20.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="606.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.69%)</title><rect x="603.3" y="1219.0" width="20.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="606.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.69%)</title><rect x="603.3" y="1203.0" width="20.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.3" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.13%)</title><rect x="610.0" y="1187.0" width="13.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="613.0" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.13%)</title><rect x="610.0" y="1171.0" width="13.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="613.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.69%)</title><rect x="623.3" y="1251.0" width="20.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="626.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.69%)</title><rect x="623.3" y="1235.0" width="20.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.69%)</title><rect x="623.3" y="1219.0" width="20.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.69%)</title><rect x="623.3" y="1203.0" width="20.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="626.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.69%)</title><rect x="623.3" y="1187.0" width="20.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.69%)</title><rect x="623.3" y="1171.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.56%)</title><rect x="643.3" y="1299.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.56%)</title><rect x="643.3" y="1283.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="646.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.56%)</title><rect x="643.3" y="1267.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="646.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.56%)</title><rect x="643.3" y="1251.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="646.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.56%)</title><rect x="643.3" y="1235.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.56%)</title><rect x="643.3" y="1219.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.3" y="1230.0"></text>
</g>
<g>
<title>start_thread (81 samples, 45.76%)</title><rect x="650.0" y="1299.0" width="540.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="653.0" y="1310.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (81 samples, 45.76%)</title><rect x="650.0" y="1283.0" width="540.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="653.0" y="1294.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 9.04%)</title><rect x="650.0" y="1267.0" width="106.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="653.0" y="1278.0">GangWorker::l..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 9.04%)</title><rect x="650.0" y="1251.0" width="106.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="653.0" y="1262.0">G1ParTask::wo..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (16 samples, 9.04%)</title><rect x="650.0" y="1235.0" width="106.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="653.0" y="1246.0">G1ParEvacuate..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 5.65%)</title><rect x="650.0" y="1219.0" width="66.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="653.0" y="1230.0">G1ParSc..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.13%)</title><rect x="703.3" y="1203.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="706.3" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.56%)</title><rect x="710.0" y="1187.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="713.0" y="1198.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.56%)</title><rect x="716.7" y="1219.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="719.7" y="1230.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 2.82%)</title><rect x="723.3" y="1219.0" width="33.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="726.3" y="1230.0">Sp..</text>
</g>
<g>
<title>JavaThread::run() (65 samples, 36.72%)</title><rect x="756.7" y="1267.0" width="433.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="759.7" y="1278.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (65 samples, 36.72%)</title><rect x="756.7" y="1251.0" width="433.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="759.7" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (65 samples, 36.72%)</title><rect x="756.7" y="1235.0" width="433.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="759.7" y="1246.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (65 samples, 36.72%)</title><rect x="756.7" y="1219.0" width="433.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="759.7" y="1230.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (63 samples, 35.59%)</title><rect x="756.7" y="1203.0" width="420.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="759.7" y="1214.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (63 samples, 35.59%)</title><rect x="756.7" y="1187.0" width="420.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="759.7" y="1198.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 20.90%)</title><rect x="756.7" y="1171.0" width="246.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="759.7" y="1182.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.56%)</title><rect x="756.7" y="1155.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="759.7" y="1166.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.56%)</title><rect x="756.7" y="1139.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="759.7" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.13%)</title><rect x="763.3" y="1155.0" width="13.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="766.3" y="1166.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.56%)</title><rect x="763.3" y="1139.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="766.3" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.56%)</title><rect x="763.3" y="1123.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="766.3" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.56%)</title><rect x="763.3" y="1107.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="766.3" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.56%)</title><rect x="770.0" y="1139.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="773.0" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.56%)</title><rect x="770.0" y="1123.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="773.0" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.69%)</title><rect x="776.7" y="1155.0" width="20.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="779.7" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.69%)</title><rect x="776.7" y="1139.0" width="20.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="779.7" y="1150.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.69%)</title><rect x="776.7" y="1123.0" width="20.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="779.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.69%)</title><rect x="796.7" y="1155.0" width="20.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="799.7" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.69%)</title><rect x="796.7" y="1139.0" width="20.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="799.7" y="1150.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.56%)</title><rect x="796.7" y="1123.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="799.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.56%)</title><rect x="803.3" y="1123.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="806.3" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="810.0" y="1123.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="813.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 15.82%)</title><rect x="816.7" y="1155.0" width="186.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="819.7" y="1166.0">PhaseChaitin::Register_A..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.56%)</title><rect x="816.7" y="1139.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="819.7" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.56%)</title><rect x="816.7" y="1123.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="819.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.56%)</title><rect x="823.3" y="1139.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="826.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.56%)</title><rect x="823.3" y="1123.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.3" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="823.3" y="1107.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="826.3" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 3.39%)</title><rect x="830.0" y="1139.0" width="40.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.0" y="1150.0">Pha..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.56%)</title><rect x="843.3" y="1123.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="846.3" y="1134.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.56%)</title><rect x="850.0" y="1123.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.0" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.56%)</title><rect x="856.7" y="1123.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="859.7" y="1134.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.56%)</title><rect x="863.3" y="1123.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="866.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.82%)</title><rect x="870.0" y="1139.0" width="33.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.0" y="1150.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.69%)</title><rect x="883.3" y="1123.0" width="20.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="886.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.56%)</title><rect x="903.3" y="1139.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="906.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.56%)</title><rect x="910.0" y="1139.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="913.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.69%)</title><rect x="916.7" y="1139.0" width="20.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="919.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.56%)</title><rect x="930.0" y="1123.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.0" y="1134.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 2.26%)</title><rect x="936.7" y="1139.0" width="26.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="939.7" y="1150.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 2.26%)</title><rect x="936.7" y="1123.0" width="26.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="939.7" y="1134.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 2.26%)</title><rect x="936.7" y="1107.0" width="26.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.7" y="1118.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.56%)</title><rect x="936.7" y="1091.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.7" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 1.13%)</title><rect x="943.3" y="1091.0" width="13.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="946.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.56%)</title><rect x="956.7" y="1091.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.7" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="956.7" y="1075.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.13%)</title><rect x="963.3" y="1139.0" width="13.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="966.3" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="970.0" y="1123.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.0" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.26%)</title><rect x="976.7" y="1139.0" width="26.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.7" y="1150.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="996.7" y="1123.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.7" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="996.7" y="1107.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.7" y="1118.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 12.43%)</title><rect x="1003.3" y="1171.0" width="146.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1006.3" y="1182.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.56%)</title><rect x="1003.3" y="1155.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.3" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.56%)</title><rect x="1003.3" y="1139.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1006.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 9.04%)</title><rect x="1010.0" y="1155.0" width="106.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1013.0" y="1166.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.13%)</title><rect x="1010.0" y="1139.0" width="13.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.0" y="1150.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.56%)</title><rect x="1016.7" y="1123.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1019.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.13%)</title><rect x="1023.3" y="1139.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.3" y="1150.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.56%)</title><rect x="1023.3" y="1123.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.3" y="1134.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.56%)</title><rect x="1030.0" y="1123.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1033.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 6.21%)</title><rect x="1036.7" y="1139.0" width="73.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.7" y="1150.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (10 samples, 5.65%)</title><rect x="1043.3" y="1123.0" width="66.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1046.3" y="1134.0">PhaseId..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.56%)</title><rect x="1050.0" y="1107.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.56%)</title><rect x="1056.7" y="1107.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1059.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 3.95%)</title><rect x="1063.3" y="1107.0" width="46.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.3" y="1118.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.56%)</title><rect x="1110.0" y="1139.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.56%)</title><rect x="1110.0" y="1123.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.82%)</title><rect x="1116.7" y="1155.0" width="33.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.7" y="1166.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.82%)</title><rect x="1116.7" y="1139.0" width="33.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.7" y="1150.0">Ph..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1123.3" y="1123.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.3" y="1134.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1123.3" y="1107.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.56%)</title><rect x="1130.0" y="1123.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.0" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1136.7" y="1123.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.7" y="1134.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.56%)</title><rect x="1136.7" y="1107.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.7" y="1118.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1143.3" y="1123.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.3" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.56%)</title><rect x="1143.3" y="1107.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.3" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="1091.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.3" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="1075.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.3" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="1059.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.3" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="1043.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.3" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="1027.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.3" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="1011.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.3" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="995.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.3" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="979.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.3" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="963.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.3" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="947.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.3" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="931.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.3" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="915.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.3" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="899.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.3" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.56%)</title><rect x="1143.3" y="883.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.3" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.56%)</title><rect x="1143.3" y="867.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.69%)</title><rect x="1150.0" y="1171.0" width="20.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.0" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.69%)</title><rect x="1150.0" y="1155.0" width="20.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.69%)</title><rect x="1150.0" y="1139.0" width="20.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.69%)</title><rect x="1150.0" y="1123.0" width="20.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.69%)</title><rect x="1150.0" y="1107.0" width="20.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.69%)</title><rect x="1150.0" y="1091.0" width="20.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.0" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.69%)</title><rect x="1150.0" y="1075.0" width="20.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.0" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.69%)</title><rect x="1150.0" y="1059.0" width="20.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.69%)</title><rect x="1150.0" y="1043.0" width="20.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.69%)</title><rect x="1150.0" y="1027.0" width="20.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.69%)</title><rect x="1150.0" y="1011.0" width="20.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.69%)</title><rect x="1150.0" y="995.0" width="20.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.0" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="979.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.0" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.0" y="963.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.0" y="947.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.0" y="931.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.0" y="915.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.0" y="899.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="883.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.0" y="867.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.0" y="851.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.0" y="835.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.0" y="819.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.0" y="803.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="787.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.0" y="771.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.0" y="755.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.0" y="739.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.0" y="723.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.0" y="707.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="691.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.0" y="675.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.0" y="659.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.0" y="643.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.0" y="627.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.0" y="611.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.0" y="595.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.0" y="579.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.0" y="563.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.0" y="547.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.0" y="531.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.0" y="515.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.0" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.56%)</title><rect x="1150.0" y="499.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.0" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.56%)</title><rect x="1150.0" y="483.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.0" y="494.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.56%)</title><rect x="1150.0" y="467.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.0" y="478.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.56%)</title><rect x="1150.0" y="451.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.0" y="462.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.56%)</title><rect x="1150.0" y="435.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.0" y="446.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.56%)</title><rect x="1150.0" y="419.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.0" y="430.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.56%)</title><rect x="1150.0" y="403.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.0" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.13%)</title><rect x="1156.7" y="979.0" width="13.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.13%)</title><rect x="1156.7" y="963.0" width="13.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.13%)</title><rect x="1156.7" y="947.0" width="13.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.13%)</title><rect x="1156.7" y="931.0" width="13.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.13%)</title><rect x="1156.7" y="915.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.13%)</title><rect x="1156.7" y="899.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.13%)</title><rect x="1156.7" y="883.0" width="13.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.13%)</title><rect x="1156.7" y="867.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.13%)</title><rect x="1156.7" y="851.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.13%)</title><rect x="1156.7" y="835.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.13%)</title><rect x="1156.7" y="819.0" width="13.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.13%)</title><rect x="1156.7" y="803.0" width="13.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.13%)</title><rect x="1156.7" y="787.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.13%)</title><rect x="1156.7" y="771.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.13%)</title><rect x="1156.7" y="755.0" width="13.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.13%)</title><rect x="1156.7" y="739.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.13%)</title><rect x="1156.7" y="723.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.13%)</title><rect x="1156.7" y="707.0" width="13.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.13%)</title><rect x="1156.7" y="691.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.13%)</title><rect x="1156.7" y="675.0" width="13.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.13%)</title><rect x="1156.7" y="659.0" width="13.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.13%)</title><rect x="1156.7" y="643.0" width="13.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.13%)</title><rect x="1156.7" y="627.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.13%)</title><rect x="1156.7" y="611.0" width="13.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.13%)</title><rect x="1156.7" y="595.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.13%)</title><rect x="1156.7" y="579.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.13%)</title><rect x="1156.7" y="563.0" width="13.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.13%)</title><rect x="1156.7" y="547.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.13%)</title><rect x="1156.7" y="531.0" width="13.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.13%)</title><rect x="1156.7" y="515.0" width="13.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.13%)</title><rect x="1156.7" y="499.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.56%)</title><rect x="1156.7" y="483.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.7" y="494.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.56%)</title><rect x="1156.7" y="467.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.7" y="478.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.56%)</title><rect x="1156.7" y="451.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.7" y="462.0"></text>
</g>
<g>
<title>InlineTree::InlineTree(Compile*, InlineTree const*, ciMethod*, JVMState*, int, float, int) (1 samples, 0.56%)</title><rect x="1156.7" y="435.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="483.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="467.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="451.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="435.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="419.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.3" y="403.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="387.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="371.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="355.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="339.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="323.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="307.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.3" y="291.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="275.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="259.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="243.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="227.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="211.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.3" y="195.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.3" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.3" y="179.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.3" y="163.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.3" y="147.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.3" y="131.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.3" y="115.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.56%)</title><rect x="1163.3" y="99.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.56%)</title><rect x="1163.3" y="83.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="94.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.56%)</title><rect x="1163.3" y="67.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.3" y="78.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.56%)</title><rect x="1163.3" y="51.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="62.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.56%)</title><rect x="1163.3" y="35.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.56%)</title><rect x="1170.0" y="1171.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.0" y="1182.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.56%)</title><rect x="1170.0" y="1155.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="1166.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.13%)</title><rect x="1176.7" y="1203.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.7" y="1214.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.13%)</title><rect x="1176.7" y="1187.0" width="13.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.13%)</title><rect x="1176.7" y="1171.0" width="13.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.7" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.13%)</title><rect x="1176.7" y="1155.0" width="13.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1166.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.56%)</title><rect x="1176.7" y="1139.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="1150.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.56%)</title><rect x="1176.7" y="1123.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="1134.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.56%)</title><rect x="1176.7" y="1107.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.56%)</title><rect x="1176.7" y="1091.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.56%)</title><rect x="1176.7" y="1075.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.7" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.56%)</title><rect x="1176.7" y="1059.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.56%)</title><rect x="1176.7" y="1043.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_instance_klass_for_declared_method_holder(ciKlass*) (1 samples, 0.56%)</title><rect x="1176.7" y="1027.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.56%)</title><rect x="1183.3" y="1139.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.3" y="1150.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.56%)</title><rect x="1183.3" y="1123.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="1134.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.56%)</title><rect x="1183.3" y="1107.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="1118.0"></text>
</g>
<g>
<title>LIR_List::append(LIR_InsertionBuffer*) (1 samples, 0.56%)</title><rect x="1183.3" y="1091.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="1102.0"></text>
</g>
</g>
</svg>
