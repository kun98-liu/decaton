<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1478" onload="init(evt)" viewBox="0 0 1200 1478" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1461"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1461"> </text>
<g id="frames">
<g>
<title>all (291 samples, 100.00%)</title><rect x="10.0" y="1427.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1438.0">all</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.34%)</title><rect x="10.0" y="1411.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.34%)</title><rect x="10.0" y="1395.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.34%)</title><rect x="10.0" y="1379.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.34%)</title><rect x="10.0" y="1363.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.34%)</title><rect x="10.0" y="1347.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConstantPool::resolve_string_constants_impl(constantPoolHandle const&amp;, Thread*) (1 samples, 0.34%)</title><rect x="10.0" y="1331.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.34%)</title><rect x="10.0" y="1315.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>java_lang_String::create_from_unicode(unsigned short*, int, Thread*) (1 samples, 0.34%)</title><rect x="10.0" y="1299.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 1.03%)</title><rect x="14.1" y="1411.0" width="12.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="17.1" y="1422.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.03%)</title><rect x="14.1" y="1395.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.1" y="1406.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 1.03%)</title><rect x="14.1" y="1379.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.1" y="1390.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.34%)</title><rect x="14.1" y="1363.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.1" y="1374.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.34%)</title><rect x="18.1" y="1363.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.1" y="1374.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.34%)</title><rect x="18.1" y="1347.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="21.1" y="1358.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.34%)</title><rect x="22.2" y="1363.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="25.2" y="1374.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.34%)</title><rect x="26.2" y="1411.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="29.2" y="1422.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.34%)</title><rect x="26.2" y="1395.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="29.2" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 5.50%)</title><rect x="30.3" y="1411.0" width="64.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.3" y="1422.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (16 samples, 5.50%)</title><rect x="30.3" y="1395.0" width="64.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.3" y="1406.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (16 samples, 5.50%)</title><rect x="30.3" y="1379.0" width="64.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.3" y="1390.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.69%)</title><rect x="30.3" y="1363.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.3" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.34%)</title><rect x="30.3" y="1347.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.3" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.34%)</title><rect x="30.3" y="1331.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.3" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="30.3" y="1315.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.34%)</title><rect x="30.3" y="1299.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.3" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="30.3" y="1283.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.3" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.34%)</title><rect x="30.3" y="1267.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.3" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.34%)</title><rect x="30.3" y="1251.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.3" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (1 samples, 0.34%)</title><rect x="30.3" y="1235.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.34%)</title><rect x="30.3" y="1219.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.34%)</title><rect x="34.3" y="1347.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.3" y="1358.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.34%)</title><rect x="34.3" y="1331.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="37.3" y="1342.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.34%)</title><rect x="34.3" y="1315.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="37.3" y="1326.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.34%)</title><rect x="34.3" y="1299.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="37.3" y="1310.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.34%)</title><rect x="34.3" y="1283.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="37.3" y="1294.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.34%)</title><rect x="34.3" y="1267.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="37.3" y="1278.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.34%)</title><rect x="34.3" y="1251.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="37.3" y="1262.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 0.34%)</title><rect x="34.3" y="1235.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="37.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.69%)</title><rect x="38.4" y="1363.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.4" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.69%)</title><rect x="38.4" y="1347.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.4" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.69%)</title><rect x="38.4" y="1331.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/404622780.accept (2 samples, 0.69%)</title><rect x="38.4" y="1315.0" width="8.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.4" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.69%)</title><rect x="38.4" y="1299.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.69%)</title><rect x="38.4" y="1283.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.4" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.69%)</title><rect x="38.4" y="1267.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.37%)</title><rect x="46.5" y="1363.0" width="16.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.5" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/1456828564.accept (4 samples, 1.37%)</title><rect x="46.5" y="1347.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.5" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.37%)</title><rect x="46.5" y="1331.0" width="16.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.5" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (1 samples, 0.34%)</title><rect x="46.5" y="1315.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.5" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.34%)</title><rect x="46.5" y="1299.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.34%)</title><rect x="46.5" y="1283.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.34%)</title><rect x="46.5" y="1267.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.34%)</title><rect x="46.5" y="1251.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.5" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.69%)</title><rect x="50.5" y="1315.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.5" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.69%)</title><rect x="50.5" y="1299.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.69%)</title><rect x="50.5" y="1283.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.69%)</title><rect x="50.5" y="1267.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.34%)</title><rect x="58.7" y="1315.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.34%)</title><rect x="58.7" y="1299.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.34%)</title><rect x="58.7" y="1283.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.7" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.34%)</title><rect x="58.7" y="1267.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 2.75%)</title><rect x="62.7" y="1363.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.7" y="1374.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 2.75%)</title><rect x="62.7" y="1347.0" width="32.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.7" y="1358.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.06%)</title><rect x="62.7" y="1331.0" width="24.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.7" y="1342.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.03%)</title><rect x="62.7" y="1315.0" width="12.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.03%)</title><rect x="62.7" y="1299.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.69%)</title><rect x="62.7" y="1283.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.34%)</title><rect x="62.7" y="1267.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.34%)</title><rect x="62.7" y="1251.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.34%)</title><rect x="62.7" y="1235.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.34%)</title><rect x="62.7" y="1219.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.parse (1 samples, 0.34%)</title><rect x="62.7" y="1203.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.34%)</title><rect x="62.7" y="1187.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.read (1 samples, 0.34%)</title><rect x="62.7" y="1171.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="66.8" y="1267.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="69.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="66.8" y="1251.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.34%)</title><rect x="66.8" y="1235.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$240/1147629786.shouldBlock (1 samples, 0.34%)</title><rect x="70.8" y="1283.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.34%)</title><rect x="70.8" y="1267.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.34%)</title><rect x="70.8" y="1251.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.8" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.34%)</title><rect x="70.8" y="1235.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="70.8" y="1219.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="70.8" y="1203.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.34%)</title><rect x="70.8" y="1187.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="70.8" y="1171.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="73.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="70.8" y="1155.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.34%)</title><rect x="70.8" y="1139.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.34%)</title><rect x="70.8" y="1123.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.34%)</title><rect x="70.8" y="1107.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.34%)</title><rect x="70.8" y="1091.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (3 samples, 1.03%)</title><rect x="74.9" y="1315.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="77.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.03%)</title><rect x="74.9" y="1299.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (2 samples, 0.69%)</title><rect x="74.9" y="1283.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="77.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.69%)</title><rect x="74.9" y="1267.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.34%)</title><rect x="74.9" y="1251.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.34%)</title><rect x="74.9" y="1235.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.34%)</title><rect x="74.9" y="1219.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.34%)</title><rect x="74.9" y="1203.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.34%)</title><rect x="74.9" y="1187.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.34%)</title><rect x="74.9" y="1171.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.34%)</title><rect x="78.9" y="1251.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="81.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.34%)</title><rect x="78.9" y="1235.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.34%)</title><rect x="78.9" y="1219.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.9" y="1230.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.34%)</title><rect x="78.9" y="1203.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.34%)</title><rect x="83.0" y="1283.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.34%)</title><rect x="83.0" y="1267.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="83.0" y="1251.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.34%)</title><rect x="83.0" y="1235.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.69%)</title><rect x="87.0" y="1331.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.69%)</title><rect x="87.0" y="1315.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.34%)</title><rect x="87.0" y="1299.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.34%)</title><rect x="87.0" y="1283.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.34%)</title><rect x="87.0" y="1267.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.34%)</title><rect x="87.0" y="1251.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.34%)</title><rect x="87.0" y="1235.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData.&lt;init&gt; (1 samples, 0.34%)</title><rect x="87.0" y="1219.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData.read (1 samples, 0.34%)</title><rect x="87.0" y="1203.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.0" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.34%)</title><rect x="87.0" y="1187.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.34%)</title><rect x="87.0" y="1171.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="91.1" y="1299.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.34%)</title><rect x="91.1" y="1283.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="94.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.34%)</title><rect x="91.1" y="1267.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="94.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.run (157 samples, 53.95%)</title><rect x="95.2" y="1411.0" width="636.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.2" y="1422.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (157 samples, 53.95%)</title><rect x="95.2" y="1395.0" width="636.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.2" y="1406.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (157 samples, 53.95%)</title><rect x="95.2" y="1379.0" width="636.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.2" y="1390.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/1897414247.run (147 samples, 50.52%)</title><rect x="103.3" y="1363.0" width="596.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.3" y="1374.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/189741424..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (147 samples, 50.52%)</title><rect x="103.3" y="1347.0" width="596.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.3" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (147 samples, 50.52%)</title><rect x="103.3" y="1331.0" width="596.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.3" y="1342.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (147 samples, 50.52%)</title><rect x="103.3" y="1315.0" width="596.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.3" y="1326.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (14 samples, 4.81%)</title><rect x="119.5" y="1299.0" width="56.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.5" y="1310.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.81%)</title><rect x="119.5" y="1283.0" width="56.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.5" y="1294.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.81%)</title><rect x="119.5" y="1267.0" width="56.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.5" y="1278.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.34%)</title><rect x="135.7" y="1251.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="138.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 3.09%)</title><rect x="139.8" y="1251.0" width="36.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.8" y="1262.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 3.09%)</title><rect x="139.8" y="1235.0" width="36.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="142.8" y="1246.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$488/1527584325.accept (9 samples, 3.09%)</title><rect x="139.8" y="1219.0" width="36.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.8" y="1230.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (9 samples, 3.09%)</title><rect x="139.8" y="1203.0" width="36.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="142.8" y="1214.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (9 samples, 3.09%)</title><rect x="139.8" y="1187.0" width="36.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.8" y="1198.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (9 samples, 3.09%)</title><rect x="139.8" y="1171.0" width="36.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="142.8" y="1182.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 3.09%)</title><rect x="139.8" y="1155.0" width="36.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.8" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 3.09%)</title><rect x="139.8" y="1139.0" width="36.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.8" y="1150.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/1572975701.accept (2 samples, 0.69%)</title><rect x="168.1" y="1123.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (32 samples, 11.00%)</title><rect x="176.3" y="1299.0" width="129.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.3" y="1310.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (32 samples, 11.00%)</title><rect x="176.3" y="1283.0" width="129.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.3" y="1294.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (32 samples, 11.00%)</title><rect x="176.3" y="1267.0" width="129.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.3" y="1278.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 11.00%)</title><rect x="176.3" y="1251.0" width="129.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.3" y="1262.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 11.00%)</title><rect x="176.3" y="1235.0" width="129.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.3" y="1246.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (32 samples, 11.00%)</title><rect x="176.3" y="1219.0" width="129.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.3" y="1230.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (15 samples, 5.15%)</title><rect x="176.3" y="1203.0" width="60.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.3" y="1214.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.37%)</title><rect x="176.3" y="1187.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.37%)</title><rect x="176.3" y="1171.0" width="16.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.37%)</title><rect x="176.3" y="1155.0" width="16.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.37%)</title><rect x="176.3" y="1139.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.37%)</title><rect x="176.3" y="1123.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.3" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="188.4" y="1107.0" width="4.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="191.4" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="188.4" y="1091.0" width="4.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="191.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 3.78%)</title><rect x="192.5" y="1187.0" width="44.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.5" y="1198.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (11 samples, 3.78%)</title><rect x="192.5" y="1171.0" width="44.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.5" y="1182.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 3.44%)</title><rect x="192.5" y="1155.0" width="40.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.5" y="1166.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (10 samples, 3.44%)</title><rect x="192.5" y="1139.0" width="40.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.5" y="1150.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (9 samples, 3.09%)</title><rect x="192.5" y="1123.0" width="36.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.5" y="1134.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (9 samples, 3.09%)</title><rect x="192.5" y="1107.0" width="36.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.5" y="1118.0">com..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="224.9" y="1091.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="227.9" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="224.9" y="1075.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="227.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.34%)</title><rect x="229.0" y="1123.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="229.0" y="1107.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.34%)</title><rect x="233.0" y="1155.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.0" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="233.0" y="1139.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="236.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (14 samples, 4.81%)</title><rect x="237.1" y="1203.0" width="56.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.1" y="1214.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.37%)</title><rect x="237.1" y="1187.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.03%)</title><rect x="237.1" y="1171.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 1.03%)</title><rect x="237.1" y="1155.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="240.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 1.03%)</title><rect x="237.1" y="1139.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.1" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="245.2" y="1123.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="248.2" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="245.2" y="1107.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="248.2" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.34%)</title><rect x="245.2" y="1091.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="248.2" y="1102.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.34%)</title><rect x="245.2" y="1075.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="248.2" y="1086.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.34%)</title><rect x="245.2" y="1059.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="248.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.34%)</title><rect x="249.2" y="1171.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (10 samples, 3.44%)</title><rect x="253.3" y="1187.0" width="40.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.3" y="1198.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 3.44%)</title><rect x="253.3" y="1171.0" width="40.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.3" y="1182.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.72%)</title><rect x="253.3" y="1155.0" width="20.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.69%)</title><rect x="253.3" y="1139.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.3" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.69%)</title><rect x="253.3" y="1123.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.69%)</title><rect x="253.3" y="1107.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.69%)</title><rect x="253.3" y="1091.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.69%)</title><rect x="253.3" y="1075.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.03%)</title><rect x="261.4" y="1139.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.34%)</title><rect x="265.5" y="1123.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.34%)</title><rect x="265.5" y="1107.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.34%)</title><rect x="269.5" y="1123.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.34%)</title><rect x="269.5" y="1107.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.34%)</title><rect x="269.5" y="1091.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.34%)</title><rect x="269.5" y="1075.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.72%)</title><rect x="273.6" y="1155.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.72%)</title><rect x="273.6" y="1139.0" width="20.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.37%)</title><rect x="277.6" y="1123.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.69%)</title><rect x="277.6" y="1107.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.69%)</title><rect x="277.6" y="1091.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.69%)</title><rect x="277.6" y="1075.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.69%)</title><rect x="277.6" y="1059.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.69%)</title><rect x="277.6" y="1043.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.69%)</title><rect x="285.7" y="1107.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.69%)</title><rect x="285.7" y="1091.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="289.8" y="1075.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.34%)</title><rect x="289.8" y="1059.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.34%)</title><rect x="289.8" y="1043.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.03%)</title><rect x="293.8" y="1203.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.03%)</title><rect x="293.8" y="1187.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.8" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.03%)</title><rect x="293.8" y="1171.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.03%)</title><rect x="293.8" y="1155.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.03%)</title><rect x="293.8" y="1139.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (97 samples, 33.33%)</title><rect x="306.0" y="1299.0" width="393.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.0" y="1310.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (7 samples, 2.41%)</title><rect x="306.0" y="1283.0" width="28.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.0" y="1294.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (7 samples, 2.41%)</title><rect x="306.0" y="1267.0" width="28.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.0" y="1278.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (7 samples, 2.41%)</title><rect x="306.0" y="1251.0" width="28.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.0" y="1262.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.34%)</title><rect x="306.0" y="1235.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.34%)</title><rect x="306.0" y="1219.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="306.0" y="1203.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.0" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 2.06%)</title><rect x="310.1" y="1235.0" width="24.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.1" y="1246.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.06%)</title><rect x="310.1" y="1219.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.1" y="1230.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.06%)</title><rect x="310.1" y="1203.0" width="24.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.1" y="1214.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (25 samples, 8.59%)</title><rect x="334.4" y="1283.0" width="101.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.4" y="1294.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (15 samples, 5.15%)</title><rect x="334.4" y="1267.0" width="60.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.4" y="1278.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 4.12%)</title><rect x="334.4" y="1251.0" width="48.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="337.4" y="1262.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.34%)</title><rect x="346.6" y="1235.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.34%)</title><rect x="346.6" y="1219.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.6" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="346.6" y="1203.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="349.6" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.34%)</title><rect x="346.6" y="1187.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="349.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.75%)</title><rect x="350.6" y="1235.0" width="32.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="353.6" y="1246.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 2.75%)</title><rect x="350.6" y="1219.0" width="32.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.6" y="1230.0">ja..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 1.37%)</title><rect x="366.8" y="1203.0" width="16.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="369.8" y="1214.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.03%)</title><rect x="383.1" y="1251.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.1" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.03%)</title><rect x="383.1" y="1235.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="386.1" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.34%)</title><rect x="383.1" y="1219.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="386.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.34%)</title><rect x="383.1" y="1203.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="386.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.34%)</title><rect x="383.1" y="1187.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 0.69%)</title><rect x="387.1" y="1219.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.69%)</title><rect x="387.1" y="1203.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="390.1" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.69%)</title><rect x="387.1" y="1187.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.1" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.34%)</title><rect x="391.2" y="1171.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.2" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="391.2" y="1155.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="394.2" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="391.2" y="1139.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="394.2" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.34%)</title><rect x="391.2" y="1123.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="394.2" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.34%)</title><rect x="391.2" y="1107.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="394.2" y="1118.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.34%)</title><rect x="391.2" y="1091.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="394.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (10 samples, 3.44%)</title><rect x="395.2" y="1267.0" width="40.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="398.2" y="1278.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (7 samples, 2.41%)</title><rect x="395.2" y="1251.0" width="28.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="398.2" y="1262.0">co..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 2.41%)</title><rect x="395.2" y="1235.0" width="28.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.2" y="1246.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 2.41%)</title><rect x="395.2" y="1219.0" width="28.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.2" y="1230.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 2.06%)</title><rect x="395.2" y="1203.0" width="24.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.2" y="1214.0">j..</text>
</g>
<g>
<title>java/lang/Object.equals (2 samples, 0.69%)</title><rect x="407.4" y="1187.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.34%)</title><rect x="415.5" y="1187.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.5" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.34%)</title><rect x="419.6" y="1203.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="422.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 1.03%)</title><rect x="423.6" y="1251.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.6" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 1.03%)</title><rect x="423.6" y="1235.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="426.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties$$Lambda$203/1659309731.get$Lambda (3 samples, 1.03%)</title><rect x="423.6" y="1219.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.34%)</title><rect x="427.7" y="1203.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties$$Lambda$203/1659309731.&lt;init&gt; (1 samples, 0.34%)</title><rect x="431.7" y="1203.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="434.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (65 samples, 22.34%)</title><rect x="435.8" y="1283.0" width="263.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.8" y="1294.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (65 samples, 22.34%)</title><rect x="435.8" y="1267.0" width="263.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.8" y="1278.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/381099956.process (56 samples, 19.24%)</title><rect x="439.8" y="1251.0" width="227.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.8" y="1262.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (56 samples, 19.24%)</title><rect x="439.8" y="1235.0" width="227.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.8" y="1246.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (56 samples, 19.24%)</title><rect x="439.8" y="1219.0" width="227.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.8" y="1230.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 19.24%)</title><rect x="439.8" y="1203.0" width="227.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="442.8" y="1214.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>java/lang/Thread.sleep (51 samples, 17.53%)</title><rect x="447.9" y="1187.0" width="206.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="450.9" y="1198.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (47 samples, 16.15%)</title><rect x="452.0" y="1171.0" width="190.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="455.0" y="1182.0">JVM_Sleep</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.34%)</title><rect x="456.0" y="1155.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="459.0" y="1166.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (2 samples, 0.69%)</title><rect x="460.1" y="1155.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="463.1" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (1 samples, 0.34%)</title><rect x="468.2" y="1155.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="471.2" y="1166.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 2.75%)</title><rect x="472.3" y="1155.0" width="32.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="475.3" y="1166.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 5.50%)</title><rect x="504.7" y="1155.0" width="64.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="507.7" y="1166.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.69%)</title><rect x="569.6" y="1155.0" width="8.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="572.6" y="1166.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.34%)</title><rect x="577.7" y="1155.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="580.7" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="581.8" y="1155.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="584.8" y="1166.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (12 samples, 4.12%)</title><rect x="585.8" y="1155.0" width="48.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="588.8" y="1166.0">os::..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 1.72%)</title><rect x="602.0" y="1139.0" width="20.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="605.0" y="1150.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.34%)</title><rect x="618.2" y="1123.0" width="4.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="621.2" y="1134.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.34%)</title><rect x="622.3" y="1139.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="625.3" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="626.4" y="1139.0" width="4.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="629.4" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="630.4" y="1139.0" width="4.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="633.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="630.4" y="1123.0" width="4.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="633.4" y="1134.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.69%)</title><rect x="634.5" y="1155.0" width="8.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="637.5" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="642.6" y="1171.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="645.6" y="1182.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="646.6" y="1171.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="649.6" y="1182.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.34%)</title><rect x="650.7" y="1171.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="653.7" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 1.03%)</title><rect x="654.7" y="1187.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="657.7" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.69%)</title><rect x="658.8" y="1171.0" width="8.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="661.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 1.03%)</title><rect x="666.9" y="1251.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="669.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.69%)</title><rect x="679.1" y="1251.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (2 samples, 0.69%)</title><rect x="679.1" y="1235.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.34%)</title><rect x="687.2" y="1251.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="690.2" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.34%)</title><rect x="687.2" y="1235.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="690.2" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.34%)</title><rect x="687.2" y="1219.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="690.2" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.34%)</title><rect x="691.2" y="1251.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="694.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.34%)</title><rect x="695.3" y="1251.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.34%)</title><rect x="695.3" y="1235.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="698.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.34%)</title><rect x="695.3" y="1219.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="698.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.34%)</title><rect x="695.3" y="1203.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="698.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 2.75%)</title><rect x="699.3" y="1363.0" width="32.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="702.3" y="1374.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 2.75%)</title><rect x="699.3" y="1347.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.3" y="1358.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.69%)</title><rect x="699.3" y="1331.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.69%)</title><rect x="699.3" y="1315.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="702.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.69%)</title><rect x="699.3" y="1299.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.06%)</title><rect x="707.5" y="1331.0" width="24.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.5" y="1342.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.06%)</title><rect x="707.5" y="1315.0" width="24.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.5" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.06%)</title><rect x="707.5" y="1299.0" width="24.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="710.5" y="1310.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.06%)</title><rect x="707.5" y="1283.0" width="24.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="710.5" y="1294.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.69%)</title><rect x="731.8" y="1411.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.8" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.69%)</title><rect x="731.8" y="1395.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="734.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.69%)</title><rect x="731.8" y="1379.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="734.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.34%)</title><rect x="731.8" y="1363.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.34%)</title><rect x="731.8" y="1347.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="734.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.34%)</title><rect x="731.8" y="1331.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="734.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.34%)</title><rect x="735.8" y="1363.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="735.8" y="1347.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="738.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.34%)</title><rect x="735.8" y="1331.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="738.8" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.34%)</title><rect x="735.8" y="1315.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="738.8" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.34%)</title><rect x="735.8" y="1299.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.8" y="1310.0"></text>
</g>
<g>
<title>start_thread (111 samples, 38.14%)</title><rect x="739.9" y="1411.0" width="450.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="742.9" y="1422.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (111 samples, 38.14%)</title><rect x="739.9" y="1395.0" width="450.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="742.9" y="1406.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (111 samples, 38.14%)</title><rect x="739.9" y="1379.0" width="450.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="742.9" y="1390.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 2.06%)</title><rect x="739.9" y="1363.0" width="24.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="742.9" y="1374.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.06%)</title><rect x="739.9" y="1347.0" width="24.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.9" y="1358.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.72%)</title><rect x="739.9" y="1331.0" width="20.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="742.9" y="1342.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.37%)</title><rect x="744.0" y="1315.0" width="16.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="747.0" y="1326.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.34%)</title><rect x="756.1" y="1299.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="759.1" y="1310.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.34%)</title><rect x="760.2" y="1331.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="763.2" y="1342.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.34%)</title><rect x="760.2" y="1315.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="763.2" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.34%)</title><rect x="760.2" y="1299.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="763.2" y="1310.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.34%)</title><rect x="760.2" y="1283.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="763.2" y="1294.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.34%)</title><rect x="760.2" y="1267.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="763.2" y="1278.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.34%)</title><rect x="760.2" y="1251.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="763.2" y="1262.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (105 samples, 36.08%)</title><rect x="764.2" y="1363.0" width="425.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="767.2" y="1374.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (104 samples, 35.74%)</title><rect x="764.2" y="1347.0" width="421.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="767.2" y="1358.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (104 samples, 35.74%)</title><rect x="764.2" y="1331.0" width="421.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="767.2" y="1342.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (100 samples, 34.36%)</title><rect x="764.2" y="1315.0" width="405.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.2" y="1326.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Dire..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (100 samples, 34.36%)</title><rect x="764.2" y="1299.0" width="405.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="767.2" y="1310.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (64 samples, 21.99%)</title><rect x="764.2" y="1283.0" width="259.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="767.2" y="1294.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.03%)</title><rect x="764.2" y="1267.0" width="12.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="767.2" y="1278.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.69%)</title><rect x="768.3" y="1251.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="771.3" y="1262.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.69%)</title><rect x="768.3" y="1235.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="771.3" y="1246.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.69%)</title><rect x="768.3" y="1219.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="771.3" y="1230.0"></text>
</g>
<g>
<title>loadConNKlassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.34%)</title><rect x="772.3" y="1203.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="775.3" y="1214.0"></text>
</g>
<g>
<title>MacroAssembler::set_narrow_klass(RegisterImpl*, Klass*) (1 samples, 0.34%)</title><rect x="772.3" y="1187.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="775.3" y="1198.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.34%)</title><rect x="772.3" y="1171.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="775.3" y="1182.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_initialize() (1 samples, 0.34%)</title><rect x="772.3" y="1155.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="775.3" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.69%)</title><rect x="776.4" y="1267.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="779.4" y="1278.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.34%)</title><rect x="776.4" y="1251.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="779.4" y="1262.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.34%)</title><rect x="780.4" y="1251.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="783.4" y="1262.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.34%)</title><rect x="780.4" y="1235.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="783.4" y="1246.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.72%)</title><rect x="784.5" y="1267.0" width="20.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="787.5" y="1278.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.72%)</title><rect x="784.5" y="1251.0" width="20.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="787.5" y="1262.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.69%)</title><rect x="784.5" y="1235.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.5" y="1246.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.69%)</title><rect x="792.6" y="1235.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="795.6" y="1246.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.34%)</title><rect x="796.7" y="1219.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="799.7" y="1230.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.34%)</title><rect x="796.7" y="1203.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.7" y="1214.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.34%)</title><rect x="800.7" y="1235.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="803.7" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.34%)</title><rect x="804.8" y="1267.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="807.8" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.34%)</title><rect x="804.8" y="1251.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="807.8" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.72%)</title><rect x="808.8" y="1267.0" width="20.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="811.8" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 1.72%)</title><rect x="808.8" y="1251.0" width="20.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="811.8" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.34%)</title><rect x="808.8" y="1235.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="811.8" y="1246.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.34%)</title><rect x="808.8" y="1219.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="811.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.34%)</title><rect x="812.9" y="1235.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="815.9" y="1246.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.34%)</title><rect x="812.9" y="1219.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.9" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.03%)</title><rect x="816.9" y="1235.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="819.9" y="1246.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.34%)</title><rect x="821.0" y="1219.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="824.0" y="1230.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.34%)</title><rect x="821.0" y="1203.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="824.0" y="1214.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.34%)</title><rect x="821.0" y="1187.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="824.0" y="1198.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.34%)</title><rect x="825.1" y="1219.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="828.1" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (48 samples, 16.49%)</title><rect x="829.1" y="1267.0" width="194.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="832.1" y="1278.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.34%)</title><rect x="829.1" y="1251.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="832.1" y="1262.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.34%)</title><rect x="829.1" y="1235.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="832.1" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.37%)</title><rect x="833.2" y="1251.0" width="16.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="836.2" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="837.2" y="1235.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="840.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.69%)</title><rect x="841.3" y="1235.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="844.3" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.69%)</title><rect x="841.3" y="1219.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="844.3" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 1.37%)</title><rect x="849.4" y="1251.0" width="16.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="852.4" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.34%)</title><rect x="853.4" y="1235.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="856.4" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.69%)</title><rect x="857.5" y="1235.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="860.5" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.06%)</title><rect x="865.6" y="1251.0" width="24.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="868.6" y="1262.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 2.75%)</title><rect x="889.9" y="1251.0" width="32.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="892.9" y="1262.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.69%)</title><rect x="894.0" y="1235.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="897.0" y="1246.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.34%)</title><rect x="894.0" y="1219.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="897.0" y="1230.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.34%)</title><rect x="898.0" y="1219.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.03%)</title><rect x="902.1" y="1235.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="905.1" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="910.2" y="1219.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="913.2" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.69%)</title><rect x="914.3" y="1235.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="917.3" y="1246.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.34%)</title><rect x="918.3" y="1219.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.3" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.34%)</title><rect x="922.4" y="1251.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="925.4" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.34%)</title><rect x="922.4" y="1235.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="925.4" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="922.4" y="1219.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="925.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.69%)</title><rect x="926.4" y="1251.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="929.4" y="1262.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.34%)</title><rect x="930.5" y="1235.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.5" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (2 samples, 0.69%)</title><rect x="934.5" y="1251.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.5" y="1262.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.34%)</title><rect x="934.5" y="1235.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="937.5" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.34%)</title><rect x="938.6" y="1235.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="941.6" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.69%)</title><rect x="942.6" y="1251.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="945.6" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 1.72%)</title><rect x="950.8" y="1251.0" width="20.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="953.8" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.03%)</title><rect x="958.9" y="1235.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="961.9" y="1246.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.34%)</title><rect x="971.0" y="1251.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.0" y="1262.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.34%)</title><rect x="971.0" y="1235.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.69%)</title><rect x="975.1" y="1251.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.69%)</title><rect x="983.2" y="1251.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.2" y="1262.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.34%)</title><rect x="987.3" y="1235.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.3" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 2.06%)</title><rect x="991.3" y="1251.0" width="24.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.3" y="1262.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 1.72%)</title><rect x="995.4" y="1235.0" width="20.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.4" y="1246.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.34%)</title><rect x="999.4" y="1219.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.4" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.03%)</title><rect x="1003.5" y="1219.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.5" y="1230.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.69%)</title><rect x="1015.6" y="1251.0" width="8.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1018.6" y="1262.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 9.28%)</title><rect x="1023.7" y="1283.0" width="109.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1026.7" y="1294.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.34%)</title><rect x="1023.7" y="1267.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1026.7" y="1278.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.34%)</title><rect x="1023.7" y="1251.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1026.7" y="1262.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (8 samples, 2.75%)</title><rect x="1027.8" y="1267.0" width="32.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.8" y="1278.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (8 samples, 2.75%)</title><rect x="1027.8" y="1251.0" width="32.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.8" y="1262.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.69%)</title><rect x="1027.8" y="1235.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.34%)</title><rect x="1031.9" y="1219.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.34%)</title><rect x="1031.9" y="1203.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 1.72%)</title><rect x="1035.9" y="1235.0" width="20.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.9" y="1246.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.34%)</title><rect x="1035.9" y="1219.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.9" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 1.37%)</title><rect x="1040.0" y="1219.0" width="16.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1043.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.34%)</title><rect x="1040.0" y="1203.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1043.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.03%)</title><rect x="1044.0" y="1203.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.0" y="1214.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.34%)</title><rect x="1044.0" y="1187.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.0" y="1198.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.34%)</title><rect x="1044.0" y="1171.0" width="4.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1047.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.69%)</title><rect x="1048.1" y="1187.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.34%)</title><rect x="1056.2" y="1235.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1059.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.34%)</title><rect x="1056.2" y="1219.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_after_loop(Node*) [clone .part.108] (1 samples, 0.34%)</title><rect x="1056.2" y="1203.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.34%)</title><rect x="1056.2" y="1187.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.2" y="1198.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.34%)</title><rect x="1060.2" y="1267.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.69%)</title><rect x="1064.3" y="1267.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1067.3" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.69%)</title><rect x="1064.3" y="1251.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.3" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.34%)</title><rect x="1064.3" y="1235.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.3" y="1246.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.34%)</title><rect x="1064.3" y="1219.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.3" y="1230.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.34%)</title><rect x="1064.3" y="1203.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.3" y="1214.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.34%)</title><rect x="1064.3" y="1187.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.3" y="1198.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.34%)</title><rect x="1064.3" y="1171.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1067.3" y="1182.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) [clone .constprop.70] (1 samples, 0.34%)</title><rect x="1064.3" y="1155.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1067.3" y="1166.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1064.3" y="1139.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1067.3" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1064.3" y="1123.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.3" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1064.3" y="1107.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1067.3" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1064.3" y="1091.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.3" y="1102.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.34%)</title><rect x="1064.3" y="1075.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1235.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.4" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1219.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.4" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1203.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.4" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1187.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1171.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1155.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1071.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1139.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1123.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1107.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1091.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1075.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1059.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1043.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1027.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="1011.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="995.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="979.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="963.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="947.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="931.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1071.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1068.4" y="915.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.4" y="926.0"></text>
</g>
<g>
<title>Compile::start() const (1 samples, 0.34%)</title><rect x="1068.4" y="899.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.4" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.34%)</title><rect x="1072.4" y="1267.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.4" y="1278.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.34%)</title><rect x="1072.4" y="1251.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.4" y="1262.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.34%)</title><rect x="1076.5" y="1267.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.5" y="1278.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.34%)</title><rect x="1076.5" y="1251.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 2.06%)</title><rect x="1080.5" y="1267.0" width="24.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1083.5" y="1278.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1080.5" y="1251.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.03%)</title><rect x="1084.6" y="1251.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.6" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.03%)</title><rect x="1084.6" y="1235.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.34%)</title><rect x="1084.6" y="1219.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.34%)</title><rect x="1084.6" y="1203.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1087.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.34%)</title><rect x="1088.6" y="1219.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.6" y="1230.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.34%)</title><rect x="1092.7" y="1219.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.7" y="1230.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.34%)</title><rect x="1092.7" y="1203.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.34%)</title><rect x="1096.7" y="1251.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.34%)</title><rect x="1100.8" y="1251.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.8" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.34%)</title><rect x="1100.8" y="1235.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.34%)</title><rect x="1100.8" y="1219.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.72%)</title><rect x="1104.8" y="1267.0" width="20.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.8" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.37%)</title><rect x="1104.8" y="1251.0" width="16.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.8" y="1262.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1104.8" y="1235.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.8" y="1246.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1104.8" y="1219.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.8" y="1230.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.34%)</title><rect x="1104.8" y="1203.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.8" y="1214.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.34%)</title><rect x="1104.8" y="1187.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.8" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1104.8" y="1171.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.8" y="1182.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.34%)</title><rect x="1104.8" y="1155.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.8" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.34%)</title><rect x="1108.9" y="1235.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.9" y="1246.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.34%)</title><rect x="1108.9" y="1219.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.9" y="1230.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.34%)</title><rect x="1113.0" y="1235.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.0" y="1246.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1117.0" y="1235.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.0" y="1246.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.34%)</title><rect x="1117.0" y="1219.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.0" y="1230.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.34%)</title><rect x="1117.0" y="1203.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.0" y="1214.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.34%)</title><rect x="1121.1" y="1251.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.1" y="1262.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.34%)</title><rect x="1125.1" y="1267.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.1" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.34%)</title><rect x="1125.1" y="1251.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.34%)</title><rect x="1125.1" y="1235.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.1" y="1246.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.34%)</title><rect x="1125.1" y="1219.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.1" y="1230.0"></text>
</g>
<g>
<title>TypeRawPtr::hash() const (1 samples, 0.34%)</title><rect x="1125.1" y="1203.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.1" y="1214.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="1129.2" y="1267.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1132.2" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.75%)</title><rect x="1133.2" y="1283.0" width="32.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.2" y="1294.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.75%)</title><rect x="1133.2" y="1267.0" width="32.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.2" y="1278.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.75%)</title><rect x="1133.2" y="1251.0" width="32.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.2" y="1262.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.75%)</title><rect x="1133.2" y="1235.0" width="32.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.2" y="1246.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.75%)</title><rect x="1133.2" y="1219.0" width="32.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.2" y="1230.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.41%)</title><rect x="1133.2" y="1203.0" width="28.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.2" y="1214.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.41%)</title><rect x="1133.2" y="1187.0" width="28.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.2" y="1198.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.41%)</title><rect x="1133.2" y="1171.0" width="28.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.2" y="1182.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.41%)</title><rect x="1133.2" y="1155.0" width="28.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.2" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.41%)</title><rect x="1133.2" y="1139.0" width="28.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.2" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.41%)</title><rect x="1133.2" y="1123.0" width="28.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.2" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.41%)</title><rect x="1133.2" y="1107.0" width="28.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.2" y="1118.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1133.2" y="1091.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.2" y="1102.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1133.2" y="1075.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.2" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1133.2" y="1059.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.2" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1133.2" y="1043.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.2" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1133.2" y="1027.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.2" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.34%)</title><rect x="1133.2" y="1011.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.2" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::JsrSet::copy_into(ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1133.2" y="995.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.2" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1137.3" y="1091.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.3" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.03%)</title><rect x="1137.3" y="1075.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1137.3" y="1059.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1137.3" y="1043.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.03%)</title><rect x="1137.3" y="1027.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.03%)</title><rect x="1137.3" y="1011.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.3" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1137.3" y="995.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.3" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1137.3" y="979.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1137.3" y="963.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1137.3" y="947.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1137.3" y="931.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1137.3" y="915.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.3" y="926.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1137.3" y="899.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.3" y="910.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1137.3" y="883.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.3" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1137.3" y="867.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.3" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1137.3" y="851.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.3" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1137.3" y="835.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.3" y="846.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.34%)</title><rect x="1137.3" y="819.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.3" y="830.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.34%)</title><rect x="1137.3" y="803.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.3" y="814.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.34%)</title><rect x="1137.3" y="787.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.3" y="798.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.34%)</title><rect x="1137.3" y="771.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.3" y="782.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.34%)</title><rect x="1137.3" y="755.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.3" y="766.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.34%)</title><rect x="1137.3" y="739.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.3" y="750.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.34%)</title><rect x="1137.3" y="723.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1141.3" y="899.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1141.3" y="883.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1141.3" y="867.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1141.3" y="851.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1141.3" y="835.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1141.3" y="819.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1141.3" y="803.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.3" y="814.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.34%)</title><rect x="1141.3" y="787.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="798.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.34%)</title><rect x="1141.3" y="771.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.3" y="782.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.34%)</title><rect x="1141.3" y="755.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.3" y="766.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (1 samples, 0.34%)</title><rect x="1141.3" y="739.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.3" y="750.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1141.3" y="723.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.3" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1141.3" y="707.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.3" y="718.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.34%)</title><rect x="1141.3" y="691.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="675.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.3" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="659.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.3" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="643.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.3" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="627.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.3" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="611.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.3" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="595.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.3" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="579.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.3" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="563.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="547.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.3" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="531.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="515.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.3" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="499.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.3" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="483.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.3" y="494.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.34%)</title><rect x="1141.3" y="467.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.3" y="478.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.34%)</title><rect x="1141.3" y="451.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.3" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1145.4" y="995.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.4" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1145.4" y="979.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.4" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1145.4" y="963.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1145.4" y="947.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1145.4" y="931.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1145.4" y="915.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1145.4" y="899.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1145.4" y="883.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1145.4" y="867.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1145.4" y="851.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1145.4" y="835.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1145.4" y="819.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.34%)</title><rect x="1145.4" y="803.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.4" y="814.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1145.4" y="787.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.4" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1149.5" y="1091.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1149.5" y="1075.0" width="12.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.03%)</title><rect x="1149.5" y="1059.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1149.5" y="1043.0" width="12.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1149.5" y="1027.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.03%)</title><rect x="1149.5" y="1011.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.03%)</title><rect x="1149.5" y="995.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.03%)</title><rect x="1149.5" y="979.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.03%)</title><rect x="1149.5" y="963.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1149.5" y="947.0" width="12.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1149.5" y="931.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.03%)</title><rect x="1149.5" y="915.0" width="12.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.5" y="899.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.5" y="883.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.5" y="867.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.5" y="851.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.5" y="835.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.5" y="819.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.5" y="803.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.5" y="787.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.5" y="771.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.5" y="755.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.5" y="739.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.5" y="723.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.5" y="707.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.5" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.5" y="691.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.5" y="675.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.5" y="659.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.5" y="643.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.5" y="627.0" width="8.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.5" y="611.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.5" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1149.5" y="595.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1149.5" y="579.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1149.5" y="563.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1149.5" y="547.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1149.5" y="531.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1149.5" y="515.0" width="8.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.5" y="499.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.5" y="483.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.5" y="467.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.5" y="451.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.5" y="435.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.5" y="419.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.5" y="403.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.5" y="387.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.5" y="371.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.5" y="355.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.5" y="339.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.5" y="323.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.5" y="307.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.5" y="291.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.5" y="275.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.5" y="259.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.5" y="243.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.5" y="227.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.5" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.5" y="211.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.5" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1149.5" y="195.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1149.5" y="179.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1149.5" y="163.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1149.5" y="147.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1149.5" y="131.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.5" y="142.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1149.5" y="115.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.5" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.34%)</title><rect x="1149.5" y="99.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="110.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_getClass() (1 samples, 0.34%)</title><rect x="1149.5" y="83.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.5" y="94.0"></text>
</g>
<g>
<title>LibraryCallKit::load_mirror_from_klass(Node*) (1 samples, 0.34%)</title><rect x="1149.5" y="67.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.5" y="78.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.34%)</title><rect x="1149.5" y="51.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.5" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.34%)</title><rect x="1149.5" y="35.0" width="4.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1152.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1153.5" y="499.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.5" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1153.5" y="483.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1153.5" y="467.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1153.5" y="451.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1153.5" y="435.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.5" y="446.0"></text>
</g>
<g>
<title>Parse::ensure_phis_everywhere() (1 samples, 0.34%)</title><rect x="1153.5" y="419.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.5" y="430.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.34%)</title><rect x="1153.5" y="403.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.5" y="414.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.34%)</title><rect x="1153.5" y="387.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.34%)</title><rect x="1157.6" y="899.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.6" y="910.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.34%)</title><rect x="1157.6" y="883.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.6" y="894.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.34%)</title><rect x="1157.6" y="867.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.6" y="878.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.34%)</title><rect x="1157.6" y="851.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.6" y="862.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.34%)</title><rect x="1157.6" y="835.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.6" y="846.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.34%)</title><rect x="1157.6" y="819.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.34%)</title><rect x="1161.6" y="1203.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="1214.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.34%)</title><rect x="1161.6" y="1187.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.6" y="1198.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.34%)</title><rect x="1161.6" y="1171.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.6" y="1182.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.34%)</title><rect x="1161.6" y="1155.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.6" y="1166.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.34%)</title><rect x="1161.6" y="1139.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="1150.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1161.6" y="1123.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="1134.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.34%)</title><rect x="1165.7" y="1283.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.7" y="1294.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 1.37%)</title><rect x="1169.7" y="1315.0" width="16.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="1326.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 1.37%)</title><rect x="1169.7" y="1299.0" width="16.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.7" y="1310.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.37%)</title><rect x="1169.7" y="1283.0" width="16.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.37%)</title><rect x="1169.7" y="1267.0" width="16.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="1278.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (2 samples, 0.69%)</title><rect x="1169.7" y="1251.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.7" y="1262.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.69%)</title><rect x="1169.7" y="1235.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="1246.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.69%)</title><rect x="1169.7" y="1219.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.69%)</title><rect x="1169.7" y="1203.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.7" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.69%)</title><rect x="1169.7" y="1187.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.7" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.69%)</title><rect x="1169.7" y="1171.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.69%)</title><rect x="1169.7" y="1155.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.69%)</title><rect x="1169.7" y="1139.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.69%)</title><rect x="1169.7" y="1123.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.69%)</title><rect x="1169.7" y="1107.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.69%)</title><rect x="1169.7" y="1091.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.7" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.69%)</title><rect x="1169.7" y="1075.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.69%)</title><rect x="1169.7" y="1059.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1169.7" y="1043.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1169.7" y="1027.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1169.7" y="1011.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.7" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1169.7" y="995.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.7" y="1006.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1169.7" y="979.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="990.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1169.7" y="963.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1169.7" y="947.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.7" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1169.7" y="931.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1169.7" y="915.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="926.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1169.7" y="899.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="910.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.34%)</title><rect x="1169.7" y="883.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.34%)</title><rect x="1173.8" y="1043.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1173.8" y="1027.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1173.8" y="1011.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1173.8" y="995.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1173.8" y="979.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1173.8" y="963.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1173.8" y="947.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1173.8" y="931.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1173.8" y="915.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="926.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.69%)</title><rect x="1177.8" y="1251.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="1262.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.69%)</title><rect x="1177.8" y="1235.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.8" y="1246.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.34%)</title><rect x="1177.8" y="1219.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="1230.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.34%)</title><rect x="1177.8" y="1203.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="1214.0"></text>
</g>
<g>
<title>LinearScan::compute_debug_info_for_scope(int, IRScope*, ValueStack*, ValueStack*) (1 samples, 0.34%)</title><rect x="1177.8" y="1187.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="1198.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.34%)</title><rect x="1181.9" y="1219.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="1230.0"></text>
</g>
<g>
<title>BitMap::is_same(BitMap const&amp;) const (1 samples, 0.34%)</title><rect x="1181.9" y="1203.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="1214.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.34%)</title><rect x="1185.9" y="1347.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="1358.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.34%)</title><rect x="1185.9" y="1331.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="1342.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.34%)</title><rect x="1185.9" y="1315.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="1326.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.34%)</title><rect x="1185.9" y="1299.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="1310.0"></text>
</g>
</g>
</svg>
