<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (267 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="2035.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="2019.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="2003.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1987.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1971.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1955.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1939.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1923.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1907.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1891.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1875.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1859.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1843.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1827.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1811.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1795.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1779.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1763.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1747.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1731.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1715.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1699.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1683.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1667.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1651.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1635.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1619.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1603.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1587.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1571.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1555.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1539.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1523.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1507.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1491.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1475.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1459.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1443.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1427.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1411.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1395.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1379.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1363.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1347.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1331.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1315.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1299.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1283.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1267.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1251.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1235.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1219.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1203.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1187.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1171.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1155.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1139.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1123.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1107.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1091.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1075.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1059.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1043.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1027.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="1011.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="995.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="979.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="963.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="947.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="931.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="915.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="899.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="883.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="867.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="851.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="835.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="819.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="803.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="787.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="771.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="755.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="739.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="723.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="707.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="691.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="675.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="659.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="643.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="627.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="611.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="595.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="579.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="563.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="547.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="531.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="515.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="499.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="483.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="467.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="451.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="435.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="419.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="403.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="387.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="371.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="355.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="339.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="323.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="307.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="291.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="275.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="259.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="243.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="227.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="211.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="195.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="179.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="163.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="147.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="131.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="115.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="99.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="83.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="67.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.37%)</title><rect x="10.0" y="51.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.37%)</title><rect x="10.0" y="35.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.75%)</title><rect x="14.4" y="2035.0" width="8.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="17.4" y="2046.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.37%)</title><rect x="14.4" y="2019.0" width="4.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="17.4" y="2030.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.37%)</title><rect x="14.4" y="2003.0" width="4.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="17.4" y="2014.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.37%)</title><rect x="18.8" y="2019.0" width="4.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="21.8" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 8.99%)</title><rect x="23.3" y="2035.0" width="106.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.3" y="2046.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (24 samples, 8.99%)</title><rect x="23.3" y="2019.0" width="106.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.3" y="2030.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (24 samples, 8.99%)</title><rect x="23.3" y="2003.0" width="106.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.3" y="2014.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.37%)</title><rect x="23.3" y="1987.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.3" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.37%)</title><rect x="23.3" y="1971.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.3" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.37%)</title><rect x="23.3" y="1955.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.3" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.37%)</title><rect x="23.3" y="1939.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.37%)</title><rect x="23.3" y="1923.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.37%)</title><rect x="23.3" y="1907.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.37%)</title><rect x="23.3" y="1891.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.3" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.37%)</title><rect x="23.3" y="1875.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.37%)</title><rect x="23.3" y="1859.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.37%)</title><rect x="23.3" y="1843.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$276/1323416042.test (1 samples, 0.37%)</title><rect x="23.3" y="1827.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsResume$73 (1 samples, 0.37%)</title><rect x="23.3" y="1811.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.pendingTasksCount (1 samples, 0.37%)</title><rect x="23.3" y="1795.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.37%)</title><rect x="23.3" y="1779.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.3" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.37%)</title><rect x="27.7" y="1987.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.7" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.37%)</title><rect x="27.7" y="1971.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.7" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.37%)</title><rect x="27.7" y="1955.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.7" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/27632145.accept (1 samples, 0.37%)</title><rect x="27.7" y="1939.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.7" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.37%)</title><rect x="27.7" y="1923.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.37%)</title><rect x="27.7" y="1907.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.7" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.37%)</title><rect x="27.7" y="1891.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.7" y="1902.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.37%)</title><rect x="27.7" y="1875.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.7" y="1886.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.37%)</title><rect x="27.7" y="1859.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.37%)</title><rect x="32.1" y="1987.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="35.1" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 3.37%)</title><rect x="36.5" y="1987.0" width="39.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.5" y="1998.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1217038096.accept (9 samples, 3.37%)</title><rect x="36.5" y="1971.0" width="39.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.5" y="1982.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (9 samples, 3.37%)</title><rect x="36.5" y="1955.0" width="39.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="39.5" y="1966.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (5 samples, 1.87%)</title><rect x="36.5" y="1939.0" width="22.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="39.5" y="1950.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (5 samples, 1.87%)</title><rect x="36.5" y="1923.0" width="22.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.5" y="1934.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (5 samples, 1.87%)</title><rect x="36.5" y="1907.0" width="22.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.5" y="1918.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 1.87%)</title><rect x="36.5" y="1891.0" width="22.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.5" y="1902.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 1.87%)</title><rect x="36.5" y="1875.0" width="22.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.5" y="1886.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.37%)</title><rect x="54.2" y="1859.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 1.12%)</title><rect x="58.6" y="1939.0" width="13.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 1.12%)</title><rect x="58.6" y="1923.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.37%)</title><rect x="67.5" y="1907.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.37%)</title><rect x="67.5" y="1891.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.37%)</title><rect x="67.5" y="1875.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.37%)</title><rect x="67.5" y="1859.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.37%)</title><rect x="67.5" y="1843.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.37%)</title><rect x="71.9" y="1939.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.9" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.37%)</title><rect x="71.9" y="1923.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.37%)</title><rect x="71.9" y="1907.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.49%)</title><rect x="76.3" y="1987.0" width="53.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.3" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.49%)</title><rect x="76.3" y="1971.0" width="53.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.3" y="1982.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.00%)</title><rect x="76.3" y="1955.0" width="35.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.3" y="1966.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.50%)</title><rect x="76.3" y="1939.0" width="17.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.50%)</title><rect x="76.3" y="1923.0" width="17.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.37%)</title><rect x="76.3" y="1907.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.37%)</title><rect x="76.3" y="1891.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.37%)</title><rect x="76.3" y="1875.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.3" y="1886.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.37%)</title><rect x="76.3" y="1859.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.3" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.37%)</title><rect x="76.3" y="1843.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.3" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.37%)</title><rect x="76.3" y="1827.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.3" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.37%)</title><rect x="76.3" y="1811.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.37%)</title><rect x="76.3" y="1795.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.37%)</title><rect x="76.3" y="1779.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.37%)</title><rect x="80.7" y="1907.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.37%)</title><rect x="80.7" y="1891.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.37%)</title><rect x="80.7" y="1875.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="83.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.37%)</title><rect x="80.7" y="1859.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.37%)</title><rect x="80.7" y="1843.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.37%)</title><rect x="80.7" y="1827.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.37%)</title><rect x="80.7" y="1811.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.37%)</title><rect x="80.7" y="1795.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.37%)</title><rect x="85.1" y="1907.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.1" y="1918.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.37%)</title><rect x="85.1" y="1891.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.1" y="1902.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.37%)</title><rect x="85.1" y="1875.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.1" y="1886.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.37%)</title><rect x="85.1" y="1859.0" width="4.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="88.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.37%)</title><rect x="89.6" y="1907.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="92.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.37%)</title><rect x="89.6" y="1891.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="89.6" y="1875.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.37%)</title><rect x="89.6" y="1859.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientRequest.makeHeader (1 samples, 0.37%)</title><rect x="89.6" y="1843.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ApiMessageType.requestHeaderVersion (1 samples, 0.37%)</title><rect x="89.6" y="1827.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.50%)</title><rect x="94.0" y="1939.0" width="17.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.50%)</title><rect x="94.0" y="1923.0" width="17.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.12%)</title><rect x="94.0" y="1907.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="97.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.12%)</title><rect x="94.0" y="1891.0" width="13.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.37%)</title><rect x="94.0" y="1875.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.75%)</title><rect x="98.4" y="1875.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.75%)</title><rect x="98.4" y="1859.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.75%)</title><rect x="98.4" y="1843.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.75%)</title><rect x="98.4" y="1827.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.37%)</title><rect x="107.2" y="1907.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.37%)</title><rect x="107.2" y="1891.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="110.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="107.2" y="1875.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="107.2" y="1859.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="107.2" y="1843.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.37%)</title><rect x="107.2" y="1827.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.37%)</title><rect x="107.2" y="1811.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.37%)</title><rect x="107.2" y="1795.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="110.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.37%)</title><rect x="111.6" y="1955.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.37%)</title><rect x="111.6" y="1939.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.37%)</title><rect x="111.6" y="1923.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.37%)</title><rect x="111.6" y="1907.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.37%)</title><rect x="111.6" y="1891.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="114.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.12%)</title><rect x="116.1" y="1955.0" width="13.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.12%)</title><rect x="116.1" y="1939.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.37%)</title><rect x="116.1" y="1923.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.37%)</title><rect x="116.1" y="1907.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="119.1" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.37%)</title><rect x="116.1" y="1891.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="119.1" y="1902.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.37%)</title><rect x="116.1" y="1875.0" width="4.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="119.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.75%)</title><rect x="120.5" y="1923.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="120.5" y="1907.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.37%)</title><rect x="120.5" y="1891.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.37%)</title><rect x="120.5" y="1875.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasStagedReceives (1 samples, 0.37%)</title><rect x="124.9" y="1907.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="127.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.37%)</title><rect x="124.9" y="1891.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="127.9" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.37%)</title><rect x="124.9" y="1875.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="127.9" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.37%)</title><rect x="124.9" y="1859.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="127.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/Thread.run (146 samples, 54.68%)</title><rect x="129.3" y="2035.0" width="645.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.3" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (146 samples, 54.68%)</title><rect x="129.3" y="2019.0" width="645.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.3" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (146 samples, 54.68%)</title><rect x="129.3" y="2003.0" width="645.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="132.3" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1804283182.run (141 samples, 52.81%)</title><rect x="129.3" y="1987.0" width="623.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.3" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1804283182.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (141 samples, 52.81%)</title><rect x="129.3" y="1971.0" width="623.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.3" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (141 samples, 52.81%)</title><rect x="129.3" y="1955.0" width="623.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.3" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (141 samples, 52.81%)</title><rect x="129.3" y="1939.0" width="623.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.3" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 1.50%)</title><rect x="147.0" y="1923.0" width="17.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="150.0" y="1934.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 1.50%)</title><rect x="147.0" y="1907.0" width="17.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="150.0" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 1.50%)</title><rect x="147.0" y="1891.0" width="17.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.0" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="147.0" y="1875.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.0" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 1.12%)</title><rect x="151.4" y="1875.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="154.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (5 samples, 1.87%)</title><rect x="164.7" y="1923.0" width="22.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="167.7" y="1934.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.12%)</title><rect x="173.5" y="1907.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.12%)</title><rect x="173.5" y="1891.0" width="13.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.12%)</title><rect x="173.5" y="1875.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.75%)</title><rect x="173.5" y="1859.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.37%)</title><rect x="173.5" y="1843.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.37%)</title><rect x="173.5" y="1827.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$312/572355030.accept (1 samples, 0.37%)</title><rect x="173.5" y="1811.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.37%)</title><rect x="177.9" y="1843.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.37%)</title><rect x="182.4" y="1859.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$312/572355030.accept (1 samples, 0.37%)</title><rect x="182.4" y="1843.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (1 samples, 0.37%)</title><rect x="182.4" y="1827.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.4" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.37%)</title><rect x="182.4" y="1811.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.37%)</title><rect x="182.4" y="1795.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="185.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.37%)</title><rect x="182.4" y="1779.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="185.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.37%)</title><rect x="182.4" y="1763.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.37%)</title><rect x="182.4" y="1747.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="185.4" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/1823953631.accept (1 samples, 0.37%)</title><rect x="182.4" y="1731.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.4" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (27 samples, 10.11%)</title><rect x="186.8" y="1923.0" width="119.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.8" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (27 samples, 10.11%)</title><rect x="186.8" y="1907.0" width="119.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.8" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (27 samples, 10.11%)</title><rect x="186.8" y="1891.0" width="119.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.8" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 10.11%)</title><rect x="186.8" y="1875.0" width="119.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="189.8" y="1886.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 10.11%)</title><rect x="186.8" y="1859.0" width="119.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.8" y="1870.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (27 samples, 10.11%)</title><rect x="186.8" y="1843.0" width="119.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.8" y="1854.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (16 samples, 5.99%)</title><rect x="186.8" y="1827.0" width="70.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="189.8" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 5.24%)</title><rect x="195.6" y="1811.0" width="61.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.6" y="1822.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (13 samples, 4.87%)</title><rect x="195.6" y="1795.0" width="57.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.6" y="1806.0">com/fa..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="213.3" y="1779.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="216.3" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="213.3" y="1763.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="216.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="213.3" y="1747.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="216.3" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="213.3" y="1731.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="216.3" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.37%)</title><rect x="213.3" y="1715.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="216.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.75%)</title><rect x="217.7" y="1779.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.7" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="217.7" y="1763.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="220.7" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="217.7" y="1747.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="220.7" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="217.7" y="1731.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="220.7" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="217.7" y="1715.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="220.7" y="1726.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.37%)</title><rect x="217.7" y="1699.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="220.7" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.37%)</title><rect x="217.7" y="1683.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="220.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.37%)</title><rect x="222.1" y="1763.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 2.25%)</title><rect x="226.6" y="1779.0" width="26.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.6" y="1790.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.75%)</title><rect x="226.6" y="1763.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="229.6" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.37%)</title><rect x="226.6" y="1747.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="229.6" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.37%)</title><rect x="226.6" y="1731.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="229.6" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="231.0" y="1747.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="234.0" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="231.0" y="1731.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="234.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.50%)</title><rect x="235.4" y="1763.0" width="17.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 1.50%)</title><rect x="235.4" y="1747.0" width="17.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.37%)</title><rect x="253.1" y="1795.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 3.75%)</title><rect x="257.5" y="1827.0" width="44.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.5" y="1838.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 1.12%)</title><rect x="257.5" y="1811.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.12%)</title><rect x="257.5" y="1795.0" width="13.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="260.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.75%)</title><rect x="261.9" y="1779.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (7 samples, 2.62%)</title><rect x="270.7" y="1811.0" width="31.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.7" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 2.62%)</title><rect x="270.7" y="1795.0" width="31.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.7" y="1806.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.12%)</title><rect x="270.7" y="1779.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.50%)</title><rect x="284.0" y="1779.0" width="17.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.50%)</title><rect x="284.0" y="1763.0" width="17.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.50%)</title><rect x="284.0" y="1747.0" width="17.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.75%)</title><rect x="288.4" y="1731.0" width="8.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.37%)</title><rect x="297.3" y="1731.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.3" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.37%)</title><rect x="297.3" y="1715.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.3" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.37%)</title><rect x="297.3" y="1699.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.3" y="1710.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.37%)</title><rect x="297.3" y="1683.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="300.3" y="1694.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.37%)</title><rect x="297.3" y="1667.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="300.3" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="297.3" y="1651.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="300.3" y="1662.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.37%)</title><rect x="297.3" y="1635.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="300.3" y="1646.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.37%)</title><rect x="297.3" y="1619.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="300.3" y="1630.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.37%)</title><rect x="297.3" y="1603.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="300.3" y="1614.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.37%)</title><rect x="297.3" y="1587.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="300.3" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.37%)</title><rect x="297.3" y="1571.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="300.3" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.37%)</title><rect x="297.3" y="1555.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="300.3" y="1566.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.37%)</title><rect x="297.3" y="1539.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="300.3" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.37%)</title><rect x="301.7" y="1827.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.7" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.37%)</title><rect x="301.7" y="1811.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="304.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.37%)</title><rect x="301.7" y="1795.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.37%)</title><rect x="301.7" y="1779.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.37%)</title><rect x="301.7" y="1763.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.7" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (101 samples, 37.83%)</title><rect x="306.1" y="1923.0" width="446.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.1" y="1934.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (4 samples, 1.50%)</title><rect x="328.2" y="1907.0" width="17.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.2" y="1918.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.12%)</title><rect x="332.6" y="1891.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.6" y="1902.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.12%)</title><rect x="332.6" y="1875.0" width="13.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="335.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.37%)</title><rect x="341.5" y="1859.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.5" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.37%)</title><rect x="341.5" y="1843.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.5" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.37%)</title><rect x="341.5" y="1827.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.37%)</title><rect x="345.9" y="1907.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.9" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.37%)</title><rect x="345.9" y="1891.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="348.9" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (21 samples, 7.87%)</title><rect x="350.3" y="1907.0" width="92.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="353.3" y="1918.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (19 samples, 7.12%)</title><rect x="350.3" y="1891.0" width="84.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.3" y="1902.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 4.49%)</title><rect x="359.1" y="1875.0" width="53.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.1" y="1886.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.50%)</title><rect x="394.5" y="1859.0" width="17.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.75%)</title><rect x="398.9" y="1843.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="401.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.37%)</title><rect x="403.3" y="1827.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="406.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.37%)</title><rect x="403.3" y="1811.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.37%)</title><rect x="403.3" y="1795.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.3" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.37%)</title><rect x="403.3" y="1779.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="406.3" y="1790.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.37%)</title><rect x="407.8" y="1843.0" width="4.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="410.8" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 1.87%)</title><rect x="412.2" y="1875.0" width="22.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="415.2" y="1886.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.87%)</title><rect x="412.2" y="1859.0" width="22.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="415.2" y="1870.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.37%)</title><rect x="412.2" y="1843.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.37%)</title><rect x="412.2" y="1827.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.37%)</title><rect x="412.2" y="1811.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.37%)</title><rect x="412.2" y="1795.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.2" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.50%)</title><rect x="416.6" y="1843.0" width="17.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="419.6" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.50%)</title><rect x="416.6" y="1827.0" width="17.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.6" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.50%)</title><rect x="416.6" y="1811.0" width="17.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.75%)</title><rect x="416.6" y="1795.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="419.6" y="1806.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.75%)</title><rect x="425.4" y="1795.0" width="8.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="428.4" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.75%)</title><rect x="434.3" y="1891.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="437.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.75%)</title><rect x="434.3" y="1875.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="437.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.75%)</title><rect x="434.3" y="1859.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="437.3" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.75%)</title><rect x="434.3" y="1843.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="437.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (69 samples, 25.84%)</title><rect x="443.1" y="1907.0" width="305.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="446.1" y="1918.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (69 samples, 25.84%)</title><rect x="443.1" y="1891.0" width="305.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="446.1" y="1902.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/1678716486.process (60 samples, 22.47%)</title><rect x="443.1" y="1875.0" width="265.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.1" y="1886.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (60 samples, 22.47%)</title><rect x="443.1" y="1859.0" width="265.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="446.1" y="1870.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (60 samples, 22.47%)</title><rect x="443.1" y="1843.0" width="265.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="446.1" y="1854.0">com/linecorp/decaton/benchmark/Reco..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.37%)</title><rect x="447.5" y="1827.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="450.5" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.37%)</title><rect x="447.5" y="1811.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="450.5" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.37%)</title><rect x="447.5" y="1795.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.5" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.37%)</title><rect x="447.5" y="1779.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (57 samples, 21.35%)</title><rect x="451.9" y="1827.0" width="252.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="454.9" y="1838.0">com/linecorp/decaton/benchmark/Re..</text>
</g>
<g>
<title>java/lang/Thread.sleep (53 samples, 19.85%)</title><rect x="451.9" y="1811.0" width="234.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="454.9" y="1822.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 2.25%)</title><rect x="469.6" y="1795.0" width="26.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="472.6" y="1806.0">H..</text>
</g>
<g>
<title>JVM_Sleep (40 samples, 14.98%)</title><rect x="496.1" y="1795.0" width="176.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="499.1" y="1806.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.37%)</title><rect x="496.1" y="1779.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="499.1" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.12%)</title><rect x="500.6" y="1779.0" width="13.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="503.6" y="1790.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.75%)</title><rect x="505.0" y="1763.0" width="8.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="508.0" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.75%)</title><rect x="513.8" y="1779.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="516.8" y="1790.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 12.73%)</title><rect x="522.7" y="1779.0" width="150.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="525.7" y="1790.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.75%)</title><rect x="553.6" y="1763.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="556.6" y="1774.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.37%)</title><rect x="558.0" y="1747.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="561.0" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 2.62%)</title><rect x="562.4" y="1763.0" width="31.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="565.4" y="1774.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 4.87%)</title><rect x="593.4" y="1763.0" width="57.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="596.4" y="1774.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.37%)</title><rect x="650.8" y="1763.0" width="4.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="653.8" y="1774.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.12%)</title><rect x="655.2" y="1763.0" width="13.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="658.2" y="1774.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.37%)</title><rect x="668.5" y="1763.0" width="4.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="671.5" y="1774.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.37%)</title><rect x="672.9" y="1795.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="675.9" y="1806.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.75%)</title><rect x="677.3" y="1795.0" width="8.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="680.3" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 1.50%)</title><rect x="686.2" y="1811.0" width="17.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="689.2" y="1822.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.12%)</title><rect x="690.6" y="1795.0" width="13.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="693.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.37%)</title><rect x="703.9" y="1827.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="706.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 1.12%)</title><rect x="708.3" y="1875.0" width="13.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.37%)</title><rect x="717.1" y="1859.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="720.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.37%)</title><rect x="721.5" y="1875.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="724.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.37%)</title><rect x="721.5" y="1859.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="724.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.37%)</title><rect x="726.0" y="1875.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="729.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.37%)</title><rect x="726.0" y="1859.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="729.0" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.37%)</title><rect x="730.4" y="1875.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="733.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 1.12%)</title><rect x="734.8" y="1875.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.75%)</title><rect x="739.2" y="1859.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="742.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.37%)</title><rect x="748.1" y="1907.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="751.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.37%)</title><rect x="748.1" y="1891.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="751.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.37%)</title><rect x="748.1" y="1875.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="751.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.37%)</title><rect x="748.1" y="1859.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="751.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$309/1511992063.accept (1 samples, 0.37%)</title><rect x="748.1" y="1843.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="751.1" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.37%)</title><rect x="748.1" y="1827.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="751.1" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.37%)</title><rect x="748.1" y="1811.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="751.1" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.37%)</title><rect x="748.1" y="1795.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="751.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.75%)</title><rect x="752.5" y="1987.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="755.5" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.75%)</title><rect x="752.5" y="1971.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="755.5" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.75%)</title><rect x="752.5" y="1955.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.75%)</title><rect x="752.5" y="1939.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="755.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.12%)</title><rect x="761.3" y="1987.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="764.3" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.75%)</title><rect x="765.7" y="1971.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="768.7" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.37%)</title><rect x="770.1" y="1955.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="773.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.37%)</title><rect x="770.1" y="1939.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.37%)</title><rect x="770.1" y="1923.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.37%)</title><rect x="770.1" y="1907.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.75%)</title><rect x="774.6" y="2035.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="777.6" y="2046.0"></text>
</g>
<g>
<title>java/lang/Object.wait (2 samples, 0.75%)</title><rect x="774.6" y="2019.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="777.6" y="2030.0"></text>
</g>
<g>
<title>JVM_MonitorWait (2 samples, 0.75%)</title><rect x="774.6" y="2003.0" width="8.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="777.6" y="2014.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (2 samples, 0.75%)</title><rect x="774.6" y="1987.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="777.6" y="1998.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.37%)</title><rect x="779.0" y="1971.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="782.0" y="1982.0"></text>
</g>
<g>
<title>start_thread (92 samples, 34.46%)</title><rect x="783.4" y="2035.0" width="406.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="786.4" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (92 samples, 34.46%)</title><rect x="783.4" y="2019.0" width="406.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="786.4" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 5.24%)</title><rect x="783.4" y="2003.0" width="61.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.4" y="2014.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 5.24%)</title><rect x="783.4" y="1987.0" width="61.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="786.4" y="1998.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 4.49%)</title><rect x="783.4" y="1971.0" width="53.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="786.4" y="1982.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 4.49%)</title><rect x="783.4" y="1955.0" width="53.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="786.4" y="1966.0">G1Par..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.37%)</title><rect x="805.5" y="1939.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="808.5" y="1950.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 2.25%)</title><rect x="809.9" y="1939.0" width="26.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="812.9" y="1950.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.75%)</title><rect x="827.6" y="1923.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="830.6" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.75%)</title><rect x="836.4" y="1971.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.4" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.75%)</title><rect x="836.4" y="1955.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="839.4" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.75%)</title><rect x="836.4" y="1939.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="839.4" y="1950.0"></text>
</g>
<g>
<title>JavaThread::run() (77 samples, 28.84%)</title><rect x="845.3" y="2003.0" width="340.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="848.3" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (77 samples, 28.84%)</title><rect x="845.3" y="1987.0" width="340.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="848.3" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (77 samples, 28.84%)</title><rect x="845.3" y="1971.0" width="340.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="848.3" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (77 samples, 28.84%)</title><rect x="845.3" y="1955.0" width="340.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="848.3" y="1966.0">CompileBroker::invoke_compiler_on_method(Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (75 samples, 28.09%)</title><rect x="845.3" y="1939.0" width="331.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="848.3" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (75 samples, 28.09%)</title><rect x="845.3" y="1923.0" width="331.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="848.3" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMetho..</text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 14.23%)</title><rect x="845.3" y="1907.0" width="167.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="848.3" y="1918.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.37%)</title><rect x="845.3" y="1891.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="848.3" y="1902.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.37%)</title><rect x="845.3" y="1875.0" width="4.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="848.3" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.75%)</title><rect x="849.7" y="1891.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="852.7" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.37%)</title><rect x="849.7" y="1875.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="852.7" y="1886.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.37%)</title><rect x="849.7" y="1859.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="852.7" y="1870.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.37%)</title><rect x="849.7" y="1843.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="852.7" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.37%)</title><rect x="854.1" y="1875.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="857.1" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.37%)</title><rect x="854.1" y="1859.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.1" y="1870.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 1.87%)</title><rect x="858.5" y="1891.0" width="22.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="861.5" y="1902.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.37%)</title><rect x="858.5" y="1875.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="861.5" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.50%)</title><rect x="863.0" y="1875.0" width="17.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="866.0" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.12%)</title><rect x="863.0" y="1859.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="866.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.37%)</title><rect x="876.2" y="1859.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.37%)</title><rect x="876.2" y="1843.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="879.2" y="1854.0"></text>
</g>
<g>
<title>Node::match_edge(unsigned int) const (1 samples, 0.37%)</title><rect x="876.2" y="1827.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="879.2" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.75%)</title><rect x="880.6" y="1891.0" width="8.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="883.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.75%)</title><rect x="880.6" y="1875.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="883.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.37%)</title><rect x="880.6" y="1859.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="883.6" y="1870.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.37%)</title><rect x="880.6" y="1843.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="883.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.37%)</title><rect x="885.1" y="1859.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="888.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 10.49%)</title><rect x="889.5" y="1891.0" width="123.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="892.5" y="1902.0">PhaseChaitin::R..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.37%)</title><rect x="889.5" y="1875.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="892.5" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.37%)</title><rect x="893.9" y="1875.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="896.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.75%)</title><rect x="898.3" y="1875.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="901.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.37%)</title><rect x="902.7" y="1859.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="905.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.12%)</title><rect x="907.2" y="1875.0" width="13.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="910.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.25%)</title><rect x="920.4" y="1875.0" width="26.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.4" y="1886.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.12%)</title><rect x="929.3" y="1859.0" width="13.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="932.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="938.1" y="1843.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="941.1" y="1854.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.37%)</title><rect x="942.5" y="1859.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="945.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.75%)</title><rect x="946.9" y="1875.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="949.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.37%)</title><rect x="955.8" y="1875.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="958.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.75%)</title><rect x="960.2" y="1875.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="963.2" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 2.25%)</title><rect x="969.0" y="1875.0" width="26.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.0" y="1886.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 2.25%)</title><rect x="969.0" y="1859.0" width="26.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.0" y="1870.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 2.25%)</title><rect x="969.0" y="1843.0" width="26.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.0" y="1854.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.37%)</title><rect x="969.0" y="1827.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="972.0" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 1.12%)</title><rect x="973.4" y="1827.0" width="13.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.4" y="1838.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.37%)</title><rect x="982.3" y="1811.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.3" y="1822.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.75%)</title><rect x="986.7" y="1827.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.37%)</title><rect x="995.5" y="1875.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.37%)</title><rect x="1000.0" y="1875.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1003.0" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.37%)</title><rect x="1000.0" y="1859.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1003.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.37%)</title><rect x="1004.4" y="1875.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1007.4" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.37%)</title><rect x="1004.4" y="1859.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.4" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.37%)</title><rect x="1008.8" y="1875.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1011.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.37%)</title><rect x="1008.8" y="1859.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1011.8" y="1870.0"></text>
</g>
<g>
<title>Compile::Optimize() (33 samples, 12.36%)</title><rect x="1013.2" y="1907.0" width="145.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1016.2" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.37%)</title><rect x="1013.2" y="1891.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.2" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.37%)</title><rect x="1013.2" y="1875.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1016.2" y="1886.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.37%)</title><rect x="1013.2" y="1859.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.2" y="1870.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.37%)</title><rect x="1013.2" y="1843.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.2" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.37%)</title><rect x="1017.6" y="1891.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.6" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.37%)</title><rect x="1017.6" y="1875.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1020.6" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.37%)</title><rect x="1017.6" y="1859.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1020.6" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.37%)</title><rect x="1017.6" y="1843.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1020.6" y="1854.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.37%)</title><rect x="1017.6" y="1827.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1020.6" y="1838.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.37%)</title><rect x="1017.6" y="1811.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1020.6" y="1822.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.37%)</title><rect x="1017.6" y="1795.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1020.6" y="1806.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.37%)</title><rect x="1017.6" y="1779.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.6" y="1790.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.37%)</title><rect x="1017.6" y="1763.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.6" y="1774.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.37%)</title><rect x="1017.6" y="1747.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1020.6" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1017.6" y="1731.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1020.6" y="1742.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.37%)</title><rect x="1017.6" y="1715.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.6" y="1726.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.37%)</title><rect x="1017.6" y="1699.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.6" y="1710.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.37%)</title><rect x="1017.6" y="1683.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1020.6" y="1694.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.37%)</title><rect x="1017.6" y="1667.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.6" y="1678.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, methodHandle, KlassHandle, KlassHandle, bool, Thread*) (1 samples, 0.37%)</title><rect x="1017.6" y="1651.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.6" y="1662.0"></text>
</g>
<g>
<title>CallInfo::set_static(KlassHandle, methodHandle, Thread*) (1 samples, 0.37%)</title><rect x="1017.6" y="1635.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1020.6" y="1646.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.37%)</title><rect x="1017.6" y="1619.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.6" y="1630.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.37%)</title><rect x="1017.6" y="1603.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.6" y="1614.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle, int) (1 samples, 0.37%)</title><rect x="1017.6" y="1587.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1020.6" y="1598.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.37%)</title><rect x="1017.6" y="1571.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1020.6" y="1582.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.37%)</title><rect x="1022.1" y="1891.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.1" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.37%)</title><rect x="1022.1" y="1875.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1025.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.37%)</title><rect x="1022.1" y="1859.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.37%)</title><rect x="1022.1" y="1843.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (23 samples, 8.61%)</title><rect x="1026.5" y="1891.0" width="101.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1029.5" y="1902.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.75%)</title><rect x="1026.5" y="1875.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 7.12%)</title><rect x="1035.3" y="1875.0" width="84.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.3" y="1886.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (19 samples, 7.12%)</title><rect x="1035.3" y="1859.0" width="84.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.3" y="1870.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.37%)</title><rect x="1035.3" y="1843.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1038.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 6.74%)</title><rect x="1039.7" y="1843.0" width="79.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.7" y="1854.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.12%)</title><rect x="1101.6" y="1827.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.37%)</title><rect x="1114.9" y="1827.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.37%)</title><rect x="1119.3" y="1875.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.37%)</title><rect x="1119.3" y="1859.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.37%)</title><rect x="1119.3" y="1843.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.3" y="1854.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.37%)</title><rect x="1123.7" y="1875.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.75%)</title><rect x="1128.1" y="1891.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.37%)</title><rect x="1132.5" y="1875.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.87%)</title><rect x="1137.0" y="1891.0" width="22.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.0" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.87%)</title><rect x="1137.0" y="1875.0" width="22.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.0" y="1886.0">P..</text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1137.0" y="1859.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.37%)</title><rect x="1141.4" y="1859.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.4" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.75%)</title><rect x="1145.8" y="1859.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.8" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.37%)</title><rect x="1145.8" y="1843.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.8" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.37%)</title><rect x="1150.2" y="1843.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.2" y="1854.0"></text>
</g>
<g>
<title>URShiftLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.37%)</title><rect x="1154.6" y="1859.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.6" y="1870.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.12%)</title><rect x="1159.1" y="1907.0" width="13.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.12%)</title><rect x="1159.1" y="1891.0" width="13.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.1" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.12%)</title><rect x="1159.1" y="1875.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.12%)</title><rect x="1159.1" y="1859.0" width="13.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.12%)</title><rect x="1159.1" y="1843.0" width="13.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.12%)</title><rect x="1159.1" y="1827.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.1" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.12%)</title><rect x="1159.1" y="1811.0" width="13.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.1" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.12%)</title><rect x="1159.1" y="1795.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.1" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.12%)</title><rect x="1159.1" y="1779.0" width="13.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.1" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.12%)</title><rect x="1159.1" y="1763.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.1" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.12%)</title><rect x="1159.1" y="1747.0" width="13.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.1" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.12%)</title><rect x="1159.1" y="1731.0" width="13.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.1" y="1742.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.12%)</title><rect x="1159.1" y="1715.0" width="13.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.1" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.12%)</title><rect x="1159.1" y="1699.0" width="13.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.1" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.12%)</title><rect x="1159.1" y="1683.0" width="13.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.12%)</title><rect x="1159.1" y="1667.0" width="13.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.1" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.12%)</title><rect x="1159.1" y="1651.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.1" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.12%)</title><rect x="1159.1" y="1635.0" width="13.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.1" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.12%)</title><rect x="1159.1" y="1619.0" width="13.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.1" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1159.1" y="1603.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1159.1" y="1587.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1159.1" y="1571.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1159.1" y="1555.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.1" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1159.1" y="1539.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.1" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1159.1" y="1523.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.1" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1159.1" y="1507.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.1" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1159.1" y="1491.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1159.1" y="1475.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.1" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1159.1" y="1459.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.1" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1159.1" y="1443.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1159.1" y="1427.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.1" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1159.1" y="1411.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.1" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1159.1" y="1395.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.1" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1159.1" y="1379.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1159.1" y="1363.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1159.1" y="1347.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1159.1" y="1331.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.1" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1159.1" y="1315.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.1" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1159.1" y="1299.0" width="8.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.1" y="1310.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.37%)</title><rect x="1159.1" y="1283.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.1" y="1294.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.37%)</title><rect x="1159.1" y="1267.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="1278.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.37%)</title><rect x="1159.1" y="1251.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.1" y="1262.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.37%)</title><rect x="1159.1" y="1235.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.1" y="1246.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.37%)</title><rect x="1159.1" y="1219.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.1" y="1230.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.37%)</title><rect x="1159.1" y="1203.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.1" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1163.5" y="1283.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1163.5" y="1267.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1163.5" y="1251.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1163.5" y="1235.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.5" y="1246.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1163.5" y="1219.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.5" y="1230.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.37%)</title><rect x="1163.5" y="1203.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.5" y="1214.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.37%)</title><rect x="1163.5" y="1187.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.5" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.37%)</title><rect x="1163.5" y="1171.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.5" y="1182.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.37%)</title><rect x="1163.5" y="1155.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.5" y="1166.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.37%)</title><rect x="1163.5" y="1139.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.5" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1167.9" y="1603.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.9" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1167.9" y="1587.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.9" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1167.9" y="1571.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1167.9" y="1555.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1167.9" y="1539.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.9" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1167.9" y="1523.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.9" y="1534.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1167.9" y="1507.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1167.9" y="1491.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1167.9" y="1475.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.9" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1167.9" y="1459.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1167.9" y="1443.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.9" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1167.9" y="1427.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.9" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1167.9" y="1411.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.9" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1167.9" y="1395.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1167.9" y="1379.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1167.9" y="1363.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1167.9" y="1347.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1167.9" y="1331.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.9" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1167.9" y="1315.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.9" y="1326.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1167.9" y="1299.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.9" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.37%)</title><rect x="1167.9" y="1283.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.9" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.37%)</title><rect x="1167.9" y="1267.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.37%)</title><rect x="1167.9" y="1251.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.37%)</title><rect x="1167.9" y="1235.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.37%)</title><rect x="1167.9" y="1219.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.37%)</title><rect x="1167.9" y="1203.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="1214.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.37%)</title><rect x="1167.9" y="1187.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="1198.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.37%)</title><rect x="1167.9" y="1171.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.9" y="1182.0"></text>
</g>
<g>
<title>Compile::make_vm_intrinsic(ciMethod*, bool) (1 samples, 0.37%)</title><rect x="1167.9" y="1155.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.9" y="1166.0"></text>
</g>
<g>
<title>bool ciMethod::has_option_value&lt;char const*&gt;(char const*, char const*&amp;) (1 samples, 0.37%)</title><rect x="1167.9" y="1139.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.9" y="1150.0"></text>
</g>
<g>
<title>bool CompilerOracle::has_option_value&lt;char const*&gt;(methodHandle, char const*, char const*&amp;) (1 samples, 0.37%)</title><rect x="1167.9" y="1123.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.9" y="1134.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.37%)</title><rect x="1172.3" y="1907.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="1918.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.37%)</title><rect x="1172.3" y="1891.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.37%)</title><rect x="1172.3" y="1875.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.3" y="1886.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.75%)</title><rect x="1176.7" y="1939.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.75%)</title><rect x="1176.7" y="1923.0" width="8.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.75%)</title><rect x="1176.7" y="1907.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.7" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.37%)</title><rect x="1176.7" y="1891.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.7" y="1902.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.37%)</title><rect x="1176.7" y="1875.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="1886.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.37%)</title><rect x="1176.7" y="1859.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="1870.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.37%)</title><rect x="1176.7" y="1843.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.7" y="1854.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.37%)</title><rect x="1176.7" y="1827.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="1838.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.37%)</title><rect x="1176.7" y="1811.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1179.7" y="1822.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.37%)</title><rect x="1181.2" y="1891.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="1902.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.37%)</title><rect x="1181.2" y="1875.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="1886.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.37%)</title><rect x="1181.2" y="1859.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="1870.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.37%)</title><rect x="1181.2" y="1843.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="1854.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.37%)</title><rect x="1181.2" y="1827.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="1838.0"></text>
</g>
<g>
<title>CodeBuffer::total_relocation_size() const (1 samples, 0.37%)</title><rect x="1181.2" y="1811.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="1822.0"></text>
</g>
<g>
<title>CodeBuffer::copy_relocations_to(CodeBlob*) const (1 samples, 0.37%)</title><rect x="1181.2" y="1795.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="1806.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.37%)</title><rect x="1185.6" y="2003.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.37%)</title><rect x="1185.6" y="1987.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.6" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.37%)</title><rect x="1185.6" y="1971.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="1982.0"></text>
</g>
</g>
</svg>
