<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (934 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (243 samples, 26.02%)</title><rect x="10.0" y="883.0" width="307.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="894.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (243 samples, 26.02%)</title><rect x="10.0" y="867.0" width="307.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.11%)</title><rect x="10.0" y="851.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.11%)</title><rect x="10.0" y="835.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.11%)</title><rect x="10.0" y="819.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.11%)</title><rect x="10.0" y="803.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="10.0" y="787.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="10.0" y="771.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.11%)</title><rect x="10.0" y="755.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.11%)</title><rect x="10.0" y="739.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="10.0" y="723.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="10.0" y="707.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.11%)</title><rect x="10.0" y="691.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.11%)</title><rect x="10.0" y="675.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.11%)</title><rect x="10.0" y="659.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.11%)</title><rect x="10.0" y="643.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.11%)</title><rect x="10.0" y="627.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.11%)</title><rect x="10.0" y="611.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.11%)</title><rect x="10.0" y="595.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.11%)</title><rect x="10.0" y="579.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.11%)</title><rect x="10.0" y="563.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (241 samples, 25.80%)</title><rect x="11.3" y="851.0" width="304.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.3" y="862.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.21%)</title><rect x="11.3" y="835.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="14.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.21%)</title><rect x="11.3" y="819.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.21%)</title><rect x="11.3" y="803.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.21%)</title><rect x="11.3" y="787.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.21%)</title><rect x="11.3" y="771.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.21%)</title><rect x="11.3" y="755.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.21%)</title><rect x="11.3" y="739.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="14.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="11.3" y="723.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="11.3" y="707.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.3" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.11%)</title><rect x="12.5" y="723.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.11%)</title><rect x="12.5" y="707.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.11%)</title><rect x="13.8" y="835.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.11%)</title><rect x="13.8" y="819.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="13.8" y="803.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="13.8" y="787.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="13.8" y="771.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="13.8" y="755.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="13.8" y="739.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="13.8" y="723.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="13.8" y="707.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="13.8" y="691.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.32%)</title><rect x="15.1" y="835.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.32%)</title><rect x="15.1" y="819.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.32%)</title><rect x="15.1" y="803.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/997657186.accept (3 samples, 0.32%)</title><rect x="15.1" y="787.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.21%)</title><rect x="16.3" y="771.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.21%)</title><rect x="16.3" y="755.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.3" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.11%)</title><rect x="17.6" y="739.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (196 samples, 20.99%)</title><rect x="18.8" y="835.0" width="247.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.8" y="846.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$274/1841381632.accept (188 samples, 20.13%)</title><rect x="20.1" y="819.0" width="237.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.1" y="830.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (188 samples, 20.13%)</title><rect x="20.1" y="803.0" width="237.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.1" y="814.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.11%)</title><rect x="20.1" y="787.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (170 samples, 18.20%)</title><rect x="21.4" y="787.0" width="214.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.4" y="798.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (170 samples, 18.20%)</title><rect x="21.4" y="771.0" width="214.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.4" y="782.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (170 samples, 18.20%)</title><rect x="21.4" y="755.0" width="214.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.4" y="766.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (170 samples, 18.20%)</title><rect x="21.4" y="739.0" width="214.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.4" y="750.0">java/util/concurrent/Executo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (170 samples, 18.20%)</title><rect x="21.4" y="723.0" width="214.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.4" y="734.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (170 samples, 18.20%)</title><rect x="21.4" y="707.0" width="214.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.4" y="718.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (127 samples, 13.60%)</title><rect x="68.1" y="691.0" width="160.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.1" y="702.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.11%)</title><rect x="68.1" y="675.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (20 samples, 2.14%)</title><rect x="69.4" y="675.0" width="25.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="72.4" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (20 samples, 2.14%)</title><rect x="69.4" y="659.0" width="25.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="72.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (20 samples, 2.14%)</title><rect x="69.4" y="643.0" width="25.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="72.4" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.54%)</title><rect x="94.6" y="675.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.54%)</title><rect x="94.6" y="659.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.11%)</title><rect x="95.9" y="643.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.9" y="654.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.11%)</title><rect x="95.9" y="627.0" width="1.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="98.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.32%)</title><rect x="97.2" y="643.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (101 samples, 10.81%)</title><rect x="101.0" y="675.0" width="127.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="104.0" y="686.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (101 samples, 10.81%)</title><rect x="101.0" y="659.0" width="127.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.0" y="670.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (100 samples, 10.71%)</title><rect x="101.0" y="643.0" width="126.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.0" y="654.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (100 samples, 10.71%)</title><rect x="101.0" y="627.0" width="126.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.0" y="638.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (100 samples, 10.71%)</title><rect x="101.0" y="611.0" width="126.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="104.0" y="622.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.11%)</title><rect x="103.5" y="595.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="106.5" y="606.0"></text>
</g>
<g>
<title>Unsafe_Unpark (82 samples, 8.78%)</title><rect x="104.8" y="595.0" width="103.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="107.8" y="606.0">Unsafe_Unpark</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.21%)</title><rect x="106.0" y="579.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="109.0" y="590.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.21%)</title><rect x="108.5" y="579.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="111.5" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (56 samples, 6.00%)</title><rect x="111.1" y="579.0" width="70.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="114.1" y="590.0">__pthrea..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.32%)</title><rect x="181.8" y="579.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="184.8" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 1.93%)</title><rect x="185.6" y="579.0" width="22.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="188.6" y="590.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (11 samples, 1.18%)</title><rect x="208.4" y="595.0" width="13.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="211.4" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.43%)</title><rect x="222.2" y="595.0" width="5.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="225.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.11%)</title><rect x="227.3" y="643.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.21%)</title><rect x="228.6" y="691.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.21%)</title><rect x="228.6" y="675.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.21%)</title><rect x="228.6" y="659.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.43%)</title><rect x="231.1" y="691.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.43%)</title><rect x="231.1" y="675.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.43%)</title><rect x="231.1" y="659.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.11%)</title><rect x="233.6" y="643.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.11%)</title><rect x="234.9" y="643.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (11 samples, 1.18%)</title><rect x="236.1" y="787.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 1.18%)</title><rect x="236.1" y="771.0" width="13.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.21%)</title><rect x="247.5" y="755.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.21%)</title><rect x="247.5" y="739.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.21%)</title><rect x="247.5" y="723.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.21%)</title><rect x="247.5" y="707.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.21%)</title><rect x="247.5" y="691.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.32%)</title><rect x="250.0" y="787.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.32%)</title><rect x="250.0" y="771.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.32%)</title><rect x="250.0" y="755.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.32%)</title><rect x="253.8" y="787.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.32%)</title><rect x="253.8" y="771.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.32%)</title><rect x="253.8" y="755.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.32%)</title><rect x="253.8" y="739.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.32%)</title><rect x="253.8" y="723.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.75%)</title><rect x="257.6" y="819.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.75%)</title><rect x="257.6" y="803.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.75%)</title><rect x="257.6" y="787.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.75%)</title><rect x="257.6" y="771.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.6" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (3 samples, 0.32%)</title><rect x="261.4" y="755.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.11%)</title><rect x="265.2" y="755.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (39 samples, 4.18%)</title><rect x="266.5" y="835.0" width="49.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.5" y="846.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (39 samples, 4.18%)</title><rect x="266.5" y="819.0" width="49.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.5" y="830.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (22 samples, 2.36%)</title><rect x="266.5" y="803.0" width="27.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.5" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (22 samples, 2.36%)</title><rect x="266.5" y="787.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.5" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 2.36%)</title><rect x="266.5" y="771.0" width="27.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.5" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (21 samples, 2.25%)</title><rect x="266.5" y="755.0" width="26.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.5" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (21 samples, 2.25%)</title><rect x="266.5" y="739.0" width="26.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.5" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.50%)</title><rect x="266.5" y="723.0" width="17.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (1 samples, 0.11%)</title><rect x="274.0" y="707.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.75%)</title><rect x="275.3" y="707.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.75%)</title><rect x="275.3" y="691.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.75%)</title><rect x="275.3" y="675.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.75%)</title><rect x="275.3" y="659.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.75%)</title><rect x="275.3" y="643.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.75%)</title><rect x="275.3" y="627.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.75%)</title><rect x="275.3" y="611.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.75%)</title><rect x="284.2" y="723.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.75%)</title><rect x="284.2" y="707.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.54%)</title><rect x="284.2" y="691.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.2" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.54%)</title><rect x="284.2" y="675.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.2" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="289.2" y="659.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="292.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.21%)</title><rect x="290.5" y="691.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.5" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.21%)</title><rect x="290.5" y="675.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.11%)</title><rect x="293.0" y="755.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.11%)</title><rect x="293.0" y="739.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="293.0" y="723.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="293.0" y="707.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="293.0" y="691.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.75%)</title><rect x="294.3" y="803.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.75%)</title><rect x="294.3" y="787.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.54%)</title><rect x="294.3" y="771.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="294.3" y="755.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="294.3" y="739.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="294.3" y="723.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="294.3" y="707.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="294.3" y="691.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.11%)</title><rect x="294.3" y="675.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.11%)</title><rect x="295.5" y="755.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.11%)</title><rect x="295.5" y="739.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.5" y="750.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.11%)</title><rect x="295.5" y="723.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.5" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.11%)</title><rect x="295.5" y="707.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.11%)</title><rect x="295.5" y="691.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.32%)</title><rect x="296.8" y="755.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.32%)</title><rect x="296.8" y="739.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/1109573766.accept (1 samples, 0.11%)</title><rect x="296.8" y="723.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.11%)</title><rect x="296.8" y="707.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.11%)</title><rect x="296.8" y="691.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.8" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="296.8" y="675.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.8" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.11%)</title><rect x="296.8" y="659.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.11%)</title><rect x="296.8" y="643.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (2 samples, 0.21%)</title><rect x="298.1" y="723.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.11%)</title><rect x="298.1" y="707.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.11%)</title><rect x="298.1" y="691.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.11%)</title><rect x="298.1" y="675.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1 samples, 0.11%)</title><rect x="299.3" y="707.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="299.3" y="691.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="302.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="299.3" y="675.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="302.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.11%)</title><rect x="299.3" y="659.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="302.3" y="670.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.11%)</title><rect x="299.3" y="643.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="302.3" y="654.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.11%)</title><rect x="299.3" y="627.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="302.3" y="638.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.11%)</title><rect x="299.3" y="611.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="302.3" y="622.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.11%)</title><rect x="299.3" y="595.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="302.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.21%)</title><rect x="300.6" y="771.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.21%)</title><rect x="300.6" y="755.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.21%)</title><rect x="300.6" y="739.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.21%)</title><rect x="300.6" y="723.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.21%)</title><rect x="300.6" y="707.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="303.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.21%)</title><rect x="300.6" y="691.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.21%)</title><rect x="300.6" y="675.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.21%)</title><rect x="300.6" y="659.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.21%)</title><rect x="300.6" y="643.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.6" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="301.8" y="627.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="304.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.64%)</title><rect x="303.1" y="803.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.11%)</title><rect x="303.1" y="787.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.43%)</title><rect x="304.4" y="787.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.11%)</title><rect x="304.4" y="771.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.11%)</title><rect x="304.4" y="755.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.11%)</title><rect x="304.4" y="739.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.11%)</title><rect x="304.4" y="723.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.11%)</title><rect x="304.4" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.32%)</title><rect x="305.6" y="771.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="305.6" y="755.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="305.6" y="739.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="305.6" y="723.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.11%)</title><rect x="306.9" y="723.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.11%)</title><rect x="306.9" y="707.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="306.9" y="691.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.11%)</title><rect x="306.9" y="675.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedCount.update (1 samples, 0.11%)</title><rect x="306.9" y="659.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.11%)</title><rect x="308.2" y="755.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.11%)</title><rect x="308.2" y="739.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.11%)</title><rect x="308.2" y="723.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.2" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="308.2" y="707.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="311.2" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="308.2" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="311.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.11%)</title><rect x="309.4" y="787.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.4" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="309.4" y="771.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="312.4" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="309.4" y="755.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="312.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.32%)</title><rect x="310.7" y="803.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.32%)</title><rect x="310.7" y="787.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.21%)</title><rect x="310.7" y="771.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.11%)</title><rect x="310.7" y="755.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="313.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.11%)</title><rect x="310.7" y="739.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="313.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.11%)</title><rect x="311.9" y="755.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="311.9" y="739.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="311.9" y="723.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="311.9" y="707.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="311.9" y="691.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="311.9" y="675.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="311.9" y="659.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="311.9" y="643.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.11%)</title><rect x="313.2" y="771.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.11%)</title><rect x="313.2" y="755.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="316.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.11%)</title><rect x="313.2" y="739.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.11%)</title><rect x="313.2" y="723.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.2" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.11%)</title><rect x="313.2" y="707.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="313.2" y="691.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="316.2" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.size (1 samples, 0.11%)</title><rect x="313.2" y="675.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.11%)</title><rect x="314.5" y="803.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="314.5" y="787.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="317.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="314.5" y="771.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="314.5" y="755.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="314.5" y="739.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="314.5" y="723.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.11%)</title><rect x="315.7" y="851.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.7" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.11%)</title><rect x="315.7" y="835.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="318.7" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="315.7" y="819.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="318.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (607 samples, 64.99%)</title><rect x="317.0" y="883.0" width="766.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.0" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (607 samples, 64.99%)</title><rect x="317.0" y="867.0" width="766.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.0" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (607 samples, 64.99%)</title><rect x="317.0" y="851.0" width="766.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.0" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1099056977.run (395 samples, 42.29%)</title><rect x="320.8" y="835.0" width="499.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="323.8" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (395 samples, 42.29%)</title><rect x="320.8" y="819.0" width="499.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="323.8" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (395 samples, 42.29%)</title><rect x="320.8" y="803.0" width="499.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.8" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (395 samples, 42.29%)</title><rect x="320.8" y="787.0" width="499.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.8" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.11%)</title><rect x="328.4" y="771.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.32%)</title><rect x="329.6" y="771.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.6" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.32%)</title><rect x="329.6" y="755.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.32%)</title><rect x="329.6" y="739.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.6" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.32%)</title><rect x="329.6" y="723.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="330.9" y="707.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="333.9" y="718.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="330.9" y="691.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="333.9" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.11%)</title><rect x="332.2" y="707.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="335.2" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="332.2" y="691.0" width="1.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="335.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (40 samples, 4.28%)</title><rect x="333.4" y="771.0" width="50.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.4" y="782.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (2 samples, 0.21%)</title><rect x="338.5" y="755.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (34 samples, 3.64%)</title><rect x="341.0" y="755.0" width="43.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="344.0" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (34 samples, 3.64%)</title><rect x="341.0" y="739.0" width="43.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="344.0" y="750.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (34 samples, 3.64%)</title><rect x="341.0" y="723.0" width="43.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.0" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.43%)</title><rect x="341.0" y="707.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="344.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.43%)</title><rect x="341.0" y="691.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.43%)</title><rect x="341.0" y="675.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$298/1212439228.accept (1 samples, 0.11%)</title><rect x="344.8" y="659.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (30 samples, 3.21%)</title><rect x="346.1" y="707.0" width="37.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="349.1" y="718.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$298/1212439228.accept (30 samples, 3.21%)</title><rect x="346.1" y="691.0" width="37.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.1" y="702.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (30 samples, 3.21%)</title><rect x="346.1" y="675.0" width="37.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.1" y="686.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (30 samples, 3.21%)</title><rect x="346.1" y="659.0" width="37.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="349.1" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (30 samples, 3.21%)</title><rect x="346.1" y="643.0" width="37.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.1" y="654.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (29 samples, 3.10%)</title><rect x="347.3" y="627.0" width="36.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="350.3" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (11 samples, 1.18%)</title><rect x="347.3" y="611.0" width="13.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (11 samples, 1.18%)</title><rect x="347.3" y="595.0" width="13.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/457845103.accept (2 samples, 0.21%)</title><rect x="358.7" y="579.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="361.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.93%)</title><rect x="361.2" y="611.0" width="22.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.2" y="622.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (124 samples, 13.28%)</title><rect x="384.0" y="771.0" width="156.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="387.0" y="782.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (124 samples, 13.28%)</title><rect x="384.0" y="755.0" width="156.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="387.0" y="766.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (124 samples, 13.28%)</title><rect x="384.0" y="739.0" width="156.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="387.0" y="750.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="384.0" y="723.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="387.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="384.0" y="707.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="387.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="384.0" y="691.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="387.0" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="384.0" y="675.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="387.0" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="384.0" y="659.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="387.0" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="384.0" y="643.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="387.0" y="654.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="384.0" y="627.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="387.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (123 samples, 13.17%)</title><rect x="385.2" y="723.0" width="155.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.2" y="734.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (123 samples, 13.17%)</title><rect x="385.2" y="707.0" width="155.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.2" y="718.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (123 samples, 13.17%)</title><rect x="385.2" y="691.0" width="155.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="388.2" y="702.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (39 samples, 4.18%)</title><rect x="386.5" y="675.0" width="49.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.5" y="686.0">com/f..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="397.9" y="659.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="400.9" y="670.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="397.9" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="400.9" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.64%)</title><rect x="399.1" y="659.0" width="7.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="402.1" y="670.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.64%)</title><rect x="399.1" y="643.0" width="7.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="402.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 0.54%)</title><rect x="406.7" y="659.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="409.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.43%)</title><rect x="408.0" y="643.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.21%)</title><rect x="410.5" y="627.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.5" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.21%)</title><rect x="410.5" y="611.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="413.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.21%)</title><rect x="410.5" y="595.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="413.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.21%)</title><rect x="410.5" y="579.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="413.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.21%)</title><rect x="410.5" y="563.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.93%)</title><rect x="413.0" y="659.0" width="22.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.0" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 0.64%)</title><rect x="428.2" y="643.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.2" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="428.2" y="627.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="431.2" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="428.2" y="611.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="431.2" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="428.2" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="431.2" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="428.2" y="579.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="431.2" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="428.2" y="563.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="431.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="428.2" y="547.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="431.2" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="428.2" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="431.2" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.11%)</title><rect x="428.2" y="515.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="431.2" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.11%)</title><rect x="428.2" y="499.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="431.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.32%)</title><rect x="429.4" y="627.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="432.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.32%)</title><rect x="429.4" y="611.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.21%)</title><rect x="433.2" y="627.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.21%)</title><rect x="433.2" y="611.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.11%)</title><rect x="433.2" y="595.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="436.2" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="433.2" y="579.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="436.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="433.2" y="563.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="436.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.11%)</title><rect x="433.2" y="547.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="436.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.11%)</title><rect x="434.5" y="595.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.5" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="434.5" y="579.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="437.5" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="434.5" y="563.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="437.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="434.5" y="547.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="437.5" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="434.5" y="531.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="437.5" y="542.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.11%)</title><rect x="434.5" y="515.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="437.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (64 samples, 6.85%)</title><rect x="435.8" y="675.0" width="80.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.8" y="686.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.21%)</title><rect x="435.8" y="659.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.21%)</title><rect x="435.8" y="643.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (2 samples, 0.21%)</title><rect x="435.8" y="627.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.11%)</title><rect x="437.0" y="611.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="440.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.54%)</title><rect x="438.3" y="659.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.54%)</title><rect x="438.3" y="643.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.75%)</title><rect x="444.6" y="659.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.54%)</title><rect x="447.1" y="643.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.43%)</title><rect x="448.4" y="627.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.32%)</title><rect x="449.7" y="611.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="452.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.21%)</title><rect x="450.9" y="595.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (50 samples, 5.35%)</title><rect x="453.4" y="659.0" width="63.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.4" y="670.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (50 samples, 5.35%)</title><rect x="453.4" y="643.0" width="63.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="456.4" y="654.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.07%)</title><rect x="454.7" y="627.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="457.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.32%)</title><rect x="454.7" y="611.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="457.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.32%)</title><rect x="454.7" y="595.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="457.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.32%)</title><rect x="454.7" y="579.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="457.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.75%)</title><rect x="458.5" y="611.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="461.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (39 samples, 4.18%)</title><rect x="467.3" y="627.0" width="49.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="470.3" y="638.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (39 samples, 4.18%)</title><rect x="467.3" y="611.0" width="49.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.3" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 4.18%)</title><rect x="467.3" y="595.0" width="49.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.3" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.71%)</title><rect x="468.6" y="579.0" width="20.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="471.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.54%)</title><rect x="468.6" y="563.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="471.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.86%)</title><rect x="474.9" y="563.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.86%)</title><rect x="474.9" y="547.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.86%)</title><rect x="474.9" y="531.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="477.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.64%)</title><rect x="477.5" y="515.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.54%)</title><rect x="477.5" y="499.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="480.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.54%)</title><rect x="477.5" y="483.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="480.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.11%)</title><rect x="482.5" y="467.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.11%)</title><rect x="483.8" y="499.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="486.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.21%)</title><rect x="485.0" y="563.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="487.6" y="563.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="490.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="487.6" y="547.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="490.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.54%)</title><rect x="488.8" y="579.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="491.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.43%)</title><rect x="490.1" y="563.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.43%)</title><rect x="490.1" y="547.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="493.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.43%)</title><rect x="490.1" y="531.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="493.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.43%)</title><rect x="490.1" y="515.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="493.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.21%)</title><rect x="495.1" y="579.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="498.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.86%)</title><rect x="497.7" y="579.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="500.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.86%)</title><rect x="497.7" y="563.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.86%)</title><rect x="497.7" y="547.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.86%)</title><rect x="497.7" y="531.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.7" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.86%)</title><rect x="497.7" y="515.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.11%)</title><rect x="498.9" y="499.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.9" y="510.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.64%)</title><rect x="500.2" y="499.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="503.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.11%)</title><rect x="506.5" y="483.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="509.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.75%)</title><rect x="507.8" y="579.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="510.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.75%)</title><rect x="507.8" y="563.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="510.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.75%)</title><rect x="507.8" y="547.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="510.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.11%)</title><rect x="516.6" y="675.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (18 samples, 1.93%)</title><rect x="517.9" y="675.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.9" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.11%)</title><rect x="517.9" y="659.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="520.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (17 samples, 1.82%)</title><rect x="519.1" y="659.0" width="21.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.1" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (17 samples, 1.82%)</title><rect x="519.1" y="643.0" width="21.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="522.1" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (17 samples, 1.82%)</title><rect x="519.1" y="627.0" width="21.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="522.1" y="638.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (17 samples, 1.82%)</title><rect x="519.1" y="611.0" width="21.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.1" y="622.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (216 samples, 23.13%)</title><rect x="540.6" y="771.0" width="272.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="543.6" y="782.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.43%)</title><rect x="544.4" y="755.0" width="5.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="547.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="544.4" y="739.0" width="5.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="547.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (33 samples, 3.53%)</title><rect x="549.5" y="755.0" width="41.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.5" y="766.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (33 samples, 3.53%)</title><rect x="549.5" y="739.0" width="41.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="552.5" y="750.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (32 samples, 3.43%)</title><rect x="550.7" y="723.0" width="40.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="553.7" y="734.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.54%)</title><rect x="550.7" y="707.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="553.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.54%)</title><rect x="550.7" y="691.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.54%)</title><rect x="550.7" y="675.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="553.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.54%)</title><rect x="550.7" y="659.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="553.7" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (27 samples, 2.89%)</title><rect x="557.0" y="707.0" width="34.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="560.0" y="718.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.96%)</title><rect x="579.8" y="691.0" width="11.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.8" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.21%)</title><rect x="581.0" y="675.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="584.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.32%)</title><rect x="583.6" y="675.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="586.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.32%)</title><rect x="587.4" y="675.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="590.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.43%)</title><rect x="591.2" y="755.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.2" y="766.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.43%)</title><rect x="591.2" y="739.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="594.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (111 samples, 11.88%)</title><rect x="596.2" y="755.0" width="140.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.2" y="766.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (106 samples, 11.35%)</title><rect x="600.0" y="739.0" width="133.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.0" y="750.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (29 samples, 3.10%)</title><rect x="619.0" y="723.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="622.0" y="734.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (17 samples, 1.82%)</title><rect x="626.5" y="707.0" width="21.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="629.5" y="718.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 1.61%)</title><rect x="629.1" y="691.0" width="18.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.1" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 1.18%)</title><rect x="629.1" y="675.0" width="13.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="632.1" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 1.18%)</title><rect x="629.1" y="659.0" width="13.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.1" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 1.18%)</title><rect x="629.1" y="643.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="632.1" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 1.18%)</title><rect x="629.1" y="627.0" width="13.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="632.1" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="629.1" y="611.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="632.1" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.11%)</title><rect x="629.1" y="595.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="632.1" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.43%)</title><rect x="630.3" y="611.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="633.3" y="622.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.21%)</title><rect x="630.3" y="595.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="633.3" y="606.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.21%)</title><rect x="630.3" y="579.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="633.3" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.11%)</title><rect x="632.8" y="595.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="635.8" y="606.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.11%)</title><rect x="632.8" y="579.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="635.8" y="590.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.11%)</title><rect x="632.8" y="563.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="635.8" y="574.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.11%)</title><rect x="634.1" y="595.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="637.1" y="606.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.11%)</title><rect x="635.4" y="611.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="638.4" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.54%)</title><rect x="636.6" y="611.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="639.6" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.43%)</title><rect x="637.9" y="595.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="640.9" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="637.9" y="579.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="640.9" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="637.9" y="563.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="640.9" y="574.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.11%)</title><rect x="637.9" y="547.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="640.9" y="558.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.11%)</title><rect x="637.9" y="531.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="640.9" y="542.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) (1 samples, 0.11%)</title><rect x="637.9" y="515.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="640.9" y="526.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.11%)</title><rect x="639.2" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="642.2" y="590.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.21%)</title><rect x="640.4" y="579.0" width="2.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="643.4" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.43%)</title><rect x="643.0" y="675.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.0" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.64%)</title><rect x="648.0" y="707.0" width="7.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="651.0" y="718.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (12 samples, 1.28%)</title><rect x="655.6" y="723.0" width="15.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="658.6" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (5 samples, 0.54%)</title><rect x="655.6" y="707.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="658.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.54%)</title><rect x="655.6" y="691.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="658.6" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.75%)</title><rect x="661.9" y="707.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.75%)</title><rect x="661.9" y="691.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="664.9" y="702.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.43%)</title><rect x="670.7" y="723.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="673.7" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.32%)</title><rect x="675.8" y="723.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="678.8" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (43 samples, 4.60%)</title><rect x="679.6" y="723.0" width="54.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.6" y="734.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (43 samples, 4.60%)</title><rect x="679.6" y="707.0" width="54.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.6" y="718.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.64%)</title><rect x="679.6" y="691.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="682.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.64%)</title><rect x="679.6" y="675.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="682.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.64%)</title><rect x="679.6" y="659.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="682.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.64%)</title><rect x="679.6" y="643.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="682.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="687.2" y="691.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="687.2" y="675.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="690.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="687.2" y="659.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="690.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.11%)</title><rect x="687.2" y="643.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (36 samples, 3.85%)</title><rect x="688.4" y="691.0" width="45.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="691.4" y="702.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (35 samples, 3.75%)</title><rect x="689.7" y="675.0" width="44.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="692.7" y="686.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (18 samples, 1.93%)</title><rect x="711.2" y="659.0" width="22.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="714.2" y="670.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.32%)</title><rect x="721.3" y="643.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="724.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.54%)</title><rect x="725.1" y="643.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="728.1" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="730.1" y="627.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="733.1" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="730.1" y="611.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="733.1" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.11%)</title><rect x="730.1" y="595.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="733.1" y="606.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.21%)</title><rect x="731.4" y="643.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="734.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.21%)</title><rect x="733.9" y="739.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="736.9" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.21%)</title><rect x="733.9" y="723.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="736.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.21%)</title><rect x="733.9" y="707.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="736.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.21%)</title><rect x="733.9" y="691.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="736.9" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.11%)</title><rect x="733.9" y="675.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="736.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.11%)</title><rect x="735.2" y="675.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (51 samples, 5.46%)</title><rect x="736.4" y="755.0" width="64.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.4" y="766.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (51 samples, 5.46%)</title><rect x="736.4" y="739.0" width="64.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.4" y="750.0">com/lin..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="737.7" y="723.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="740.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="737.7" y="707.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="740.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.11%)</title><rect x="737.7" y="691.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="740.7" y="702.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.11%)</title><rect x="739.0" y="723.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="742.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/2009657287.process (22 samples, 2.36%)</title><rect x="740.2" y="723.0" width="27.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="743.2" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (22 samples, 2.36%)</title><rect x="740.2" y="707.0" width="27.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="743.2" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (10 samples, 1.07%)</title><rect x="751.6" y="691.0" width="12.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="754.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (2 samples, 0.21%)</title><rect x="751.6" y="675.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="754.6" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="751.6" y="659.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="754.6" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="752.9" y="659.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="755.9" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="752.9" y="643.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="755.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.86%)</title><rect x="754.1" y="675.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="757.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.11%)</title><rect x="763.0" y="659.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="766.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.32%)</title><rect x="764.2" y="691.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.21%)</title><rect x="764.2" y="675.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.21%)</title><rect x="764.2" y="659.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.21%)</title><rect x="764.2" y="643.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="767.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.21%)</title><rect x="764.2" y="627.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="767.2" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.11%)</title><rect x="766.8" y="675.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="769.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.11%)</title><rect x="766.8" y="659.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="769.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.11%)</title><rect x="766.8" y="643.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="769.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.11%)</title><rect x="766.8" y="627.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="769.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.11%)</title><rect x="766.8" y="611.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.8" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="766.8" y="595.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="769.8" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="766.8" y="579.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="769.8" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="766.8" y="563.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="769.8" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="766.8" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="769.8" y="558.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.11%)</title><rect x="766.8" y="531.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="769.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.11%)</title><rect x="768.0" y="723.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="771.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (3 samples, 0.32%)</title><rect x="769.3" y="723.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="772.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (3 samples, 0.32%)</title><rect x="769.3" y="707.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="772.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 0.32%)</title><rect x="769.3" y="691.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="772.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.32%)</title><rect x="769.3" y="675.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="772.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.32%)</title><rect x="769.3" y="659.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.32%)</title><rect x="769.3" y="643.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.43%)</title><rect x="773.1" y="723.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.43%)</title><rect x="773.1" y="707.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.1" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.21%)</title><rect x="778.1" y="723.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.21%)</title><rect x="778.1" y="707.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="781.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.11%)</title><rect x="779.4" y="691.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.4" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.64%)</title><rect x="780.7" y="723.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="783.7" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.43%)</title><rect x="783.2" y="707.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="786.2" y="718.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.21%)</title><rect x="783.2" y="691.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="786.2" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.21%)</title><rect x="785.7" y="691.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.7" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="788.2" y="723.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.2" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="788.2" y="707.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="791.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.21%)</title><rect x="789.5" y="723.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="792.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.75%)</title><rect x="792.0" y="723.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.75%)</title><rect x="792.0" y="707.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="795.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.75%)</title><rect x="792.0" y="691.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.75%)</title><rect x="792.0" y="675.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.64%)</title><rect x="792.0" y="659.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.64%)</title><rect x="792.0" y="643.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$293/164854491.accept (3 samples, 0.32%)</title><rect x="793.3" y="627.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.3" y="638.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.21%)</title><rect x="797.1" y="627.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="800.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="799.6" y="659.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="802.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.96%)</title><rect x="800.9" y="755.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="803.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.96%)</title><rect x="800.9" y="739.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.96%)</title><rect x="800.9" y="723.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="800.9" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="803.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.21%)</title><rect x="802.1" y="707.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.11%)</title><rect x="802.1" y="691.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="805.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.11%)</title><rect x="802.1" y="675.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="805.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="803.4" y="691.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.64%)</title><rect x="804.7" y="707.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$294/1336120533.accept (6 samples, 0.64%)</title><rect x="804.7" y="691.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="807.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (6 samples, 0.64%)</title><rect x="804.7" y="675.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="807.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.64%)</title><rect x="804.7" y="659.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="807.7" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.64%)</title><rect x="804.7" y="643.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.7" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.64%)</title><rect x="804.7" y="627.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="807.7" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.43%)</title><rect x="807.2" y="611.0" width="5.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="810.2" y="622.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="807.2" y="595.0" width="5.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="810.2" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.11%)</title><rect x="812.2" y="755.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.2" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.54%)</title><rect x="813.5" y="771.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="816.5" y="782.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.54%)</title><rect x="813.5" y="755.0" width="6.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="816.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.54%)</title><rect x="819.8" y="835.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="822.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.54%)</title><rect x="819.8" y="819.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.54%)</title><rect x="819.8" y="803.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="822.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.54%)</title><rect x="819.8" y="787.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (204 samples, 21.84%)</title><rect x="826.1" y="835.0" width="257.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="829.1" y="846.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (202 samples, 21.63%)</title><rect x="828.7" y="819.0" width="255.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="831.7" y="830.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (175 samples, 18.74%)</title><rect x="848.9" y="803.0" width="221.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="851.9" y="814.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.75%)</title><rect x="857.7" y="787.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.75%)</title><rect x="857.7" y="771.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.75%)</title><rect x="857.7" y="755.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="860.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.75%)</title><rect x="857.7" y="739.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="860.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.75%)</title><rect x="866.6" y="787.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="869.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.75%)</title><rect x="866.6" y="771.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="869.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (154 samples, 16.49%)</title><rect x="875.4" y="787.0" width="194.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="878.4" y="798.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (154 samples, 16.49%)</title><rect x="875.4" y="771.0" width="194.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="878.4" y="782.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (150 samples, 16.06%)</title><rect x="879.2" y="755.0" width="189.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="882.2" y="766.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="883.0" y="739.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="886.0" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.21%)</title><rect x="884.3" y="739.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.3" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (15 samples, 1.61%)</title><rect x="886.8" y="739.0" width="18.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.8" y="750.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.64%)</title><rect x="894.4" y="723.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="897.4" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.43%)</title><rect x="896.9" y="707.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="899.9" y="718.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.43%)</title><rect x="896.9" y="691.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="899.9" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="901.9" y="723.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.9" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.21%)</title><rect x="903.2" y="723.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="906.2" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.54%)</title><rect x="905.7" y="739.0" width="6.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="908.7" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 3.53%)</title><rect x="912.1" y="739.0" width="41.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="915.1" y="750.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (77 samples, 8.24%)</title><rect x="953.7" y="739.0" width="97.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="956.7" y="750.0">__pthread_c..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.32%)</title><rect x="1051.0" y="739.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1054.0" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="1054.8" y="739.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1057.8" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.11%)</title><rect x="1056.1" y="739.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1059.1" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.21%)</title><rect x="1057.3" y="739.0" width="2.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1060.3" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.21%)</title><rect x="1059.9" y="739.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1062.9" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.11%)</title><rect x="1062.4" y="739.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1065.4" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.11%)</title><rect x="1063.7" y="739.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1066.7" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.21%)</title><rect x="1064.9" y="739.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.9" y="750.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.11%)</title><rect x="1067.5" y="739.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1070.5" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="1068.7" y="755.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.21%)</title><rect x="1070.0" y="803.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1073.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.21%)</title><rect x="1070.0" y="787.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1073.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.21%)</title><rect x="1070.0" y="771.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1073.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.21%)</title><rect x="1070.0" y="755.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1073.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.96%)</title><rect x="1072.5" y="803.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1075.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.96%)</title><rect x="1072.5" y="787.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1075.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.96%)</title><rect x="1072.5" y="771.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1075.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.96%)</title><rect x="1072.5" y="755.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1075.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.11%)</title><rect x="1083.9" y="883.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1086.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="1083.9" y="867.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1086.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="1083.9" y="851.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1086.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.11%)</title><rect x="1083.9" y="835.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1086.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.11%)</title><rect x="1083.9" y="819.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1086.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.11%)</title><rect x="1083.9" y="803.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1086.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.11%)</title><rect x="1083.9" y="787.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1086.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1083.9" y="771.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1086.9" y="782.0"></text>
</g>
<g>
<title>start_thread (83 samples, 8.89%)</title><rect x="1085.1" y="883.0" width="104.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1088.1" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (83 samples, 8.89%)</title><rect x="1085.1" y="867.0" width="104.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1088.1" y="878.0">java_start(T..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 2.25%)</title><rect x="1085.1" y="851.0" width="26.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.1" y="862.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.32%)</title><rect x="1085.1" y="835.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.1" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.32%)</title><rect x="1085.1" y="819.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.1" y="830.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.21%)</title><rect x="1085.1" y="803.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1088.1" y="814.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.11%)</title><rect x="1087.7" y="803.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1090.7" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.82%)</title><rect x="1088.9" y="835.0" width="21.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.9" y="846.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.11%)</title><rect x="1088.9" y="819.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.9" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.11%)</title><rect x="1088.9" y="803.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1091.9" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.64%)</title><rect x="1090.2" y="819.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.2" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.21%)</title><rect x="1090.2" y="803.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.2" y="814.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.21%)</title><rect x="1090.2" y="787.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1093.2" y="798.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.21%)</title><rect x="1090.2" y="771.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.2" y="782.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.21%)</title><rect x="1090.2" y="755.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.2" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.43%)</title><rect x="1092.7" y="803.0" width="5.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.7" y="814.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.32%)</title><rect x="1092.7" y="787.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.7" y="798.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.11%)</title><rect x="1096.5" y="787.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.5" y="798.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.11%)</title><rect x="1096.5" y="771.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.5" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (10 samples, 1.07%)</title><rect x="1097.8" y="819.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.8" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (10 samples, 1.07%)</title><rect x="1097.8" y="803.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.8" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (10 samples, 1.07%)</title><rect x="1097.8" y="787.0" width="12.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.8" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (10 samples, 1.07%)</title><rect x="1097.8" y="771.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1100.8" y="782.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (10 samples, 1.07%)</title><rect x="1097.8" y="755.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.8" y="766.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (10 samples, 1.07%)</title><rect x="1097.8" y="739.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.8" y="750.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.43%)</title><rect x="1104.1" y="723.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.11%)</title><rect x="1106.6" y="707.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.6" y="718.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.11%)</title><rect x="1106.6" y="691.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.6" y="702.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.11%)</title><rect x="1107.9" y="707.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.9" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.11%)</title><rect x="1109.1" y="723.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.1" y="734.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.11%)</title><rect x="1110.4" y="835.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.4" y="846.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.11%)</title><rect x="1110.4" y="819.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.4" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.11%)</title><rect x="1110.4" y="803.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1113.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (61 samples, 6.53%)</title><rect x="1111.7" y="851.0" width="77.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.7" y="862.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (61 samples, 6.53%)</title><rect x="1111.7" y="835.0" width="77.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.7" y="846.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (61 samples, 6.53%)</title><rect x="1111.7" y="819.0" width="77.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.7" y="830.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (61 samples, 6.53%)</title><rect x="1111.7" y="803.0" width="77.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.7" y="814.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (60 samples, 6.42%)</title><rect x="1111.7" y="787.0" width="75.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.7" y="798.0">C2Compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (60 samples, 6.42%)</title><rect x="1111.7" y="771.0" width="75.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.7" y="782.0">Compile:..</text>
</g>
<g>
<title>Compile::Code_Gen() (20 samples, 2.14%)</title><rect x="1111.7" y="755.0" width="25.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.7" y="766.0">C..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.11%)</title><rect x="1111.7" y="739.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.7" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.11%)</title><rect x="1111.7" y="723.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.7" y="734.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.11%)</title><rect x="1111.7" y="707.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.7" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.32%)</title><rect x="1112.9" y="739.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.9" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.32%)</title><rect x="1112.9" y="723.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.9" y="734.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.11%)</title><rect x="1112.9" y="707.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.9" y="718.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.21%)</title><rect x="1114.2" y="707.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.2" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.11%)</title><rect x="1115.5" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.5" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.11%)</title><rect x="1115.5" y="675.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.5" y="686.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.11%)</title><rect x="1115.5" y="659.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.5" y="670.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.11%)</title><rect x="1115.5" y="643.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.5" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.21%)</title><rect x="1116.7" y="739.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.7" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.21%)</title><rect x="1116.7" y="723.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.7" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1116.7" y="707.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.7" y="718.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.11%)</title><rect x="1116.7" y="691.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.7" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1118.0" y="707.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 1.50%)</title><rect x="1119.3" y="739.0" width="17.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.3" y="750.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.11%)</title><rect x="1119.3" y="723.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.54%)</title><rect x="1120.5" y="723.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.43%)</title><rect x="1126.8" y="723.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.8" y="734.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.11%)</title><rect x="1128.1" y="707.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.1" y="718.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.11%)</title><rect x="1128.1" y="691.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.21%)</title><rect x="1129.4" y="707.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.21%)</title><rect x="1131.9" y="723.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.9" y="734.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.11%)</title><rect x="1133.1" y="707.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.21%)</title><rect x="1134.4" y="723.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.11%)</title><rect x="1134.4" y="707.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.11%)</title><rect x="1135.7" y="707.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.11%)</title><rect x="1135.7" y="691.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.7" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (30 samples, 3.21%)</title><rect x="1136.9" y="755.0" width="37.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.9" y="766.0">Com..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.11%)</title><rect x="1136.9" y="739.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.11%)</title><rect x="1136.9" y="723.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1136.9" y="707.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1136.9" y="691.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.9" y="702.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.11%)</title><rect x="1136.9" y="675.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.9" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.11%)</title><rect x="1138.2" y="739.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.2" y="750.0"></text>
</g>
<g>
<title>EncodePNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1138.2" y="723.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.2" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1138.2" y="707.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.2" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1138.2" y="691.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.2" y="702.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.11%)</title><rect x="1138.2" y="675.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.2" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.11%)</title><rect x="1138.2" y="659.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.2" y="670.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.11%)</title><rect x="1138.2" y="643.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.11%)</title><rect x="1139.5" y="739.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.5" y="750.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="1139.5" y="723.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1142.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (21 samples, 2.25%)</title><rect x="1140.7" y="739.0" width="26.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.7" y="750.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.32%)</title><rect x="1140.7" y="723.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 1.61%)</title><rect x="1144.5" y="723.0" width="19.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 1.61%)</title><rect x="1144.5" y="707.0" width="19.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 1.61%)</title><rect x="1144.5" y="691.0" width="19.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 0.43%)</title><rect x="1158.4" y="675.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1163.5" y="723.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.11%)</title><rect x="1163.5" y="707.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.11%)</title><rect x="1163.5" y="691.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.11%)</title><rect x="1163.5" y="675.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.5" y="686.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.11%)</title><rect x="1164.7" y="723.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.7" y="734.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.11%)</title><rect x="1166.0" y="723.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.0" y="734.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.11%)</title><rect x="1166.0" y="707.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.0" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.11%)</title><rect x="1166.0" y="691.0" width="1.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1169.0" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.54%)</title><rect x="1167.3" y="739.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.3" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.54%)</title><rect x="1167.3" y="723.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.3" y="734.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1167.3" y="707.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.3" y="718.0"></text>
</g>
<g>
<title>IfNode::fold_compares(PhaseGVN*) (1 samples, 0.11%)</title><rect x="1167.3" y="691.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.3" y="702.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.11%)</title><rect x="1168.5" y="707.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.5" y="718.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1168.5" y="691.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.5" y="702.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1169.8" y="707.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.8" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1171.0" y="707.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1171.0" y="691.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.11%)</title><rect x="1171.0" y="675.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.0" y="686.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.11%)</title><rect x="1171.0" y="659.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.0" y="670.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1172.3" y="707.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.3" y="718.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.11%)</title><rect x="1172.3" y="691.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.3" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="675.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.3" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="659.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.3" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="643.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="627.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.3" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="611.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="595.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.3" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="579.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="563.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.3" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="547.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="531.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.3" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="515.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="499.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.3" y="510.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1172.3" y="483.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="494.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1172.3" y="467.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="478.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.11%)</title><rect x="1173.6" y="739.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.6" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.11%)</title><rect x="1173.6" y="723.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1173.6" y="707.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.6" y="718.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.11%)</title><rect x="1173.6" y="691.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.75%)</title><rect x="1174.8" y="755.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.75%)</title><rect x="1174.8" y="739.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.75%)</title><rect x="1174.8" y="723.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.75%)</title><rect x="1174.8" y="707.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.75%)</title><rect x="1174.8" y="691.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.75%)</title><rect x="1174.8" y="675.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.8" y="686.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.11%)</title><rect x="1174.8" y="659.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="670.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.11%)</title><rect x="1174.8" y="643.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.64%)</title><rect x="1176.1" y="659.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.64%)</title><rect x="1176.1" y="643.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.54%)</title><rect x="1176.1" y="627.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.54%)</title><rect x="1176.1" y="611.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.54%)</title><rect x="1176.1" y="595.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.54%)</title><rect x="1176.1" y="579.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1176.1" y="563.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1176.1" y="547.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1176.1" y="531.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1176.1" y="515.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1176.1" y="499.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1176.1" y="483.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.1" y="467.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1176.1" y="451.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1176.1" y="435.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1176.1" y="419.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1176.1" y="403.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1176.1" y="387.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.1" y="371.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1176.1" y="355.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1176.1" y="339.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1176.1" y="323.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1176.1" y="307.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1176.1" y="291.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1176.1" y="275.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="286.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.11%)</title><rect x="1176.1" y="259.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1176.1" y="243.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="254.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1176.1" y="227.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="238.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.11%)</title><rect x="1176.1" y="211.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.1" y="222.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1176.1" y="195.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1176.1" y="179.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1176.1" y="163.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1176.1" y="147.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1176.1" y="131.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.1" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1176.1" y="115.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="126.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1176.1" y="99.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="110.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1176.1" y="83.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1177.4" y="483.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1177.4" y="467.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="478.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.11%)</title><rect x="1177.4" y="451.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="462.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.11%)</title><rect x="1177.4" y="435.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1177.4" y="419.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="430.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.11%)</title><rect x="1177.4" y="403.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.32%)</title><rect x="1178.6" y="563.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.32%)</title><rect x="1178.6" y="547.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.32%)</title><rect x="1178.6" y="531.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.32%)</title><rect x="1178.6" y="515.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.32%)</title><rect x="1178.6" y="499.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.32%)</title><rect x="1178.6" y="483.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.32%)</title><rect x="1178.6" y="467.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.32%)</title><rect x="1178.6" y="451.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.32%)</title><rect x="1178.6" y="435.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.32%)</title><rect x="1178.6" y="419.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.32%)</title><rect x="1178.6" y="403.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.32%)</title><rect x="1178.6" y="387.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.32%)</title><rect x="1178.6" y="371.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.6" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1178.6" y="355.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.11%)</title><rect x="1178.6" y="339.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.11%)</title><rect x="1178.6" y="323.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.11%)</title><rect x="1178.6" y="307.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.11%)</title><rect x="1178.6" y="291.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.11%)</title><rect x="1178.6" y="275.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.11%)</title><rect x="1178.6" y="259.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::loader_data(oopDesc*) (1 samples, 0.11%)</title><rect x="1178.6" y="243.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1179.9" y="355.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1179.9" y="339.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1179.9" y="323.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1179.9" y="307.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1179.9" y="291.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1179.9" y="275.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1179.9" y="259.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1179.9" y="243.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1179.9" y="227.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1179.9" y="211.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1179.9" y="195.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1179.9" y="179.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1179.9" y="163.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1179.9" y="147.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="158.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.11%)</title><rect x="1179.9" y="131.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="142.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.11%)</title><rect x="1179.9" y="115.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="126.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.11%)</title><rect x="1179.9" y="99.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.11%)</title><rect x="1179.9" y="83.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.11%)</title><rect x="1179.9" y="67.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1179.9" y="51.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1179.9" y="35.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.11%)</title><rect x="1181.2" y="275.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="286.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.11%)</title><rect x="1181.2" y="259.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="270.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.11%)</title><rect x="1181.2" y="243.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="254.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.11%)</title><rect x="1181.2" y="227.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="238.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.11%)</title><rect x="1181.2" y="211.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1184.2" y="222.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.11%)</title><rect x="1182.4" y="627.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.4" y="638.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.11%)</title><rect x="1183.7" y="755.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="766.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.11%)</title><rect x="1183.7" y="739.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.7" y="750.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.11%)</title><rect x="1184.9" y="755.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.9" y="766.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.11%)</title><rect x="1184.9" y="739.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.9" y="750.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.11%)</title><rect x="1184.9" y="723.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="734.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="1184.9" y="707.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.9" y="718.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.11%)</title><rect x="1186.2" y="755.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="766.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.11%)</title><rect x="1186.2" y="739.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="750.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.11%)</title><rect x="1186.2" y="723.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="734.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.11%)</title><rect x="1186.2" y="707.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1186.2" y="691.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1186.2" y="675.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="686.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.11%)</title><rect x="1187.5" y="787.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.5" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.11%)</title><rect x="1187.5" y="771.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.5" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.11%)</title><rect x="1187.5" y="755.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.5" y="766.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.11%)</title><rect x="1187.5" y="739.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.5" y="750.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.11%)</title><rect x="1187.5" y="723.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.5" y="734.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.11%)</title><rect x="1187.5" y="707.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="718.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.11%)</title><rect x="1187.5" y="691.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.5" y="702.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="1187.5" y="675.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.5" y="686.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.11%)</title><rect x="1188.7" y="851.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.7" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.11%)</title><rect x="1188.7" y="835.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.7" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.11%)</title><rect x="1188.7" y="819.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.7" y="830.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.11%)</title><rect x="1188.7" y="803.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.7" y="814.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.11%)</title><rect x="1188.7" y="787.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.7" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.11%)</title><rect x="1188.7" y="771.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.7" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.11%)</title><rect x="1188.7" y="755.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.7" y="766.0"></text>
</g>
<g>
<title>G1DefaultAllocator::release_gc_alloc_regions(unsigned int, EvacuationInfo&amp;) (1 samples, 0.11%)</title><rect x="1188.7" y="739.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.7" y="750.0"></text>
</g>
<g>
<title>OldGCAllocRegion::release() (1 samples, 0.11%)</title><rect x="1188.7" y="723.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.11%)</title><rect x="1188.7" y="707.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.7" y="718.0"></text>
</g>
</g>
</svg>
