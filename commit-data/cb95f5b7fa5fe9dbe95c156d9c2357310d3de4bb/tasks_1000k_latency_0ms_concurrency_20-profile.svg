<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2006" onload="init(evt)" viewBox="0 0 1200 2006" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1989"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1989"> </text>
<g id="frames">
<g>
<title>all (1,130 samples, 100.00%)</title><rect x="10.0" y="1955.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1966.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="1939.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.09%)</title><rect x="10.0" y="1923.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (241 samples, 21.33%)</title><rect x="11.0" y="1939.0" width="251.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1950.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (241 samples, 21.33%)</title><rect x="11.0" y="1923.0" width="251.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1934.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (241 samples, 21.33%)</title><rect x="11.0" y="1907.0" width="251.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="1918.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (5 samples, 0.44%)</title><rect x="11.0" y="1891.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (5 samples, 0.44%)</title><rect x="11.0" y="1875.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="12.1" y="1859.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="12.1" y="1843.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="12.1" y="1827.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.27%)</title><rect x="13.1" y="1859.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.27%)</title><rect x="13.1" y="1843.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.27%)</title><rect x="13.1" y="1827.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.27%)</title><rect x="13.1" y="1811.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="13.1" y="1795.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.1" y="1806.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="13.1" y="1779.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.1" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="14.2" y="1779.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.2" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="14.2" y="1763.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.2" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="14.2" y="1747.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.09%)</title><rect x="14.2" y="1731.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.2" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="15.2" y="1795.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.2" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="15.2" y="1779.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="15.2" y="1763.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.2" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="15.2" y="1747.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="16.3" y="1891.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="16.3" y="1875.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.35%)</title><rect x="17.3" y="1891.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.3" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.35%)</title><rect x="17.3" y="1875.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.35%)</title><rect x="17.3" y="1859.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/2114292968.accept (4 samples, 0.35%)</title><rect x="17.3" y="1843.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.35%)</title><rect x="17.3" y="1827.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.18%)</title><rect x="19.4" y="1811.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.4" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.18%)</title><rect x="19.4" y="1795.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (178 samples, 15.75%)</title><rect x="21.5" y="1891.0" width="185.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.5" y="1902.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/227438945.accept (170 samples, 15.04%)</title><rect x="21.5" y="1875.0" width="177.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="1886.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (170 samples, 15.04%)</title><rect x="21.5" y="1859.0" width="177.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.5" y="1870.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.09%)</title><rect x="22.5" y="1843.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (156 samples, 13.81%)</title><rect x="23.6" y="1843.0" width="162.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.6" y="1854.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (156 samples, 13.81%)</title><rect x="23.6" y="1827.0" width="162.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.6" y="1838.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (156 samples, 13.81%)</title><rect x="23.6" y="1811.0" width="162.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="1822.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (156 samples, 13.81%)</title><rect x="23.6" y="1795.0" width="162.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.6" y="1806.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (156 samples, 13.81%)</title><rect x="23.6" y="1779.0" width="162.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.6" y="1790.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (156 samples, 13.81%)</title><rect x="23.6" y="1763.0" width="162.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.6" y="1774.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (118 samples, 10.44%)</title><rect x="23.6" y="1747.0" width="123.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.6" y="1758.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (34 samples, 3.01%)</title><rect x="23.6" y="1731.0" width="35.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.6" y="1742.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (34 samples, 3.01%)</title><rect x="23.6" y="1715.0" width="35.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.6" y="1726.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.18%)</title><rect x="39.2" y="1699.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.2" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.50%)</title><rect x="41.3" y="1699.0" width="17.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.3" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (17 samples, 1.50%)</title><rect x="41.3" y="1683.0" width="17.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.3" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.27%)</title><rect x="59.1" y="1731.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.1" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (3 samples, 0.27%)</title><rect x="59.1" y="1715.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.1" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="60.1" y="1699.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.1" y="1710.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="60.1" y="1683.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="63.1" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.09%)</title><rect x="61.2" y="1699.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.2" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (81 samples, 7.17%)</title><rect x="62.2" y="1731.0" width="84.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.2" y="1742.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (81 samples, 7.17%)</title><rect x="62.2" y="1715.0" width="84.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.2" y="1726.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (80 samples, 7.08%)</title><rect x="62.2" y="1699.0" width="83.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.2" y="1710.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (80 samples, 7.08%)</title><rect x="62.2" y="1683.0" width="83.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.2" y="1694.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 6.99%)</title><rect x="63.3" y="1667.0" width="82.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.3" y="1678.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (72 samples, 6.37%)</title><rect x="64.3" y="1651.0" width="75.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="67.3" y="1662.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="68.5" y="1635.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="71.5" y="1646.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="69.5" y="1635.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="72.5" y="1646.0"></text>
</g>
<g>
<title>__pthread_cond_signal (52 samples, 4.60%)</title><rect x="70.6" y="1635.0" width="54.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="73.6" y="1646.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="124.9" y="1635.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="127.9" y="1646.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.15%)</title><rect x="125.9" y="1635.0" width="13.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="128.9" y="1646.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.44%)</title><rect x="139.5" y="1651.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="142.5" y="1662.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="144.7" y="1651.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="147.7" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="145.8" y="1699.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.8" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (37 samples, 3.27%)</title><rect x="146.8" y="1747.0" width="38.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.8" y="1758.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (37 samples, 3.27%)</title><rect x="146.8" y="1731.0" width="38.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.8" y="1742.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (37 samples, 3.27%)</title><rect x="146.8" y="1715.0" width="38.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.8" y="1726.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="185.4" y="1747.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.4" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="185.4" y="1731.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.4" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="185.4" y="1715.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.4" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (11 samples, 0.97%)</title><rect x="186.5" y="1843.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 0.97%)</title><rect x="186.5" y="1827.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.35%)</title><rect x="193.8" y="1811.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.35%)</title><rect x="193.8" y="1795.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.35%)</title><rect x="193.8" y="1779.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.35%)</title><rect x="193.8" y="1763.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.8" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.35%)</title><rect x="193.8" y="1747.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.8" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.35%)</title><rect x="193.8" y="1731.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.8" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.09%)</title><rect x="198.0" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.0" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="198.0" y="1827.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.0" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="198.0" y="1811.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.0" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.18%)</title><rect x="199.0" y="1875.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.0" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.18%)</title><rect x="199.0" y="1859.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.44%)</title><rect x="201.1" y="1875.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.44%)</title><rect x="201.1" y="1859.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.44%)</title><rect x="201.1" y="1843.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.44%)</title><rect x="201.1" y="1827.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.1" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (5 samples, 0.44%)</title><rect x="201.1" y="1811.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.1" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (5 samples, 0.44%)</title><rect x="201.1" y="1795.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="204.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="206.3" y="1875.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="206.3" y="1859.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="206.3" y="1843.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="206.3" y="1827.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="206.3" y="1811.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="206.3" y="1795.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="209.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 4.69%)</title><rect x="207.4" y="1891.0" width="55.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.4" y="1902.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (53 samples, 4.69%)</title><rect x="207.4" y="1875.0" width="55.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.4" y="1886.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (2 samples, 0.18%)</title><rect x="207.4" y="1859.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.09%)</title><rect x="208.4" y="1843.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="208.4" y="1827.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (32 samples, 2.83%)</title><rect x="209.5" y="1859.0" width="33.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.5" y="1870.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="209.5" y="1843.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="209.5" y="1827.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="212.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="209.5" y="1811.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 2.74%)</title><rect x="210.5" y="1843.0" width="32.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.5" y="1854.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 2.48%)</title><rect x="213.6" y="1827.0" width="29.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.6" y="1838.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (22 samples, 1.95%)</title><rect x="214.7" y="1811.0" width="22.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.7" y="1822.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (22 samples, 1.95%)</title><rect x="214.7" y="1795.0" width="22.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.7" y="1806.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.88%)</title><rect x="214.7" y="1779.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.71%)</title><rect x="216.8" y="1763.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.62%)</title><rect x="217.8" y="1747.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.8" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.62%)</title><rect x="217.8" y="1731.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.8" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.62%)</title><rect x="217.8" y="1715.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="220.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.62%)</title><rect x="217.8" y="1699.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="220.8" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.62%)</title><rect x="217.8" y="1683.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.8" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.62%)</title><rect x="217.8" y="1667.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.8" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 1.06%)</title><rect x="225.1" y="1779.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.06%)</title><rect x="225.1" y="1763.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.1" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="225.1" y="1747.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="228.1" y="1758.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="225.1" y="1731.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="228.1" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="225.1" y="1715.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="228.1" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.44%)</title><rect x="226.2" y="1747.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.2" y="1758.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.44%)</title><rect x="226.2" y="1731.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.2" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.53%)</title><rect x="231.4" y="1747.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.4" y="1758.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.53%)</title><rect x="231.4" y="1731.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="237.6" y="1811.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="237.6" y="1795.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="237.6" y="1779.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="237.6" y="1763.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="238.7" y="1747.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="238.7" y="1731.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.7" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.18%)</title><rect x="239.7" y="1811.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.18%)</title><rect x="239.7" y="1795.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="242.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="239.7" y="1779.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="239.7" y="1763.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="239.7" y="1747.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="239.7" y="1731.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="242.7" y="1742.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.09%)</title><rect x="239.7" y="1715.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.7" y="1726.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="239.7" y="1699.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.7" y="1710.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="240.8" y="1747.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="243.8" y="1758.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="240.8" y="1731.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="243.8" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="241.8" y="1811.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.09%)</title><rect x="241.8" y="1795.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.53%)</title><rect x="242.9" y="1859.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.44%)</title><rect x="242.9" y="1843.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.44%)</title><rect x="242.9" y="1827.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="242.9" y="1811.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/1156563111.accept (1 samples, 0.09%)</title><rect x="242.9" y="1795.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="242.9" y="1779.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="242.9" y="1763.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.9" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="242.9" y="1747.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.9" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="242.9" y="1731.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.9" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="243.9" y="1811.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="243.9" y="1795.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.27%)</title><rect x="245.0" y="1811.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.27%)</title><rect x="245.0" y="1795.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.0" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="246.0" y="1779.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="246.0" y="1763.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="246.0" y="1747.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="246.0" y="1731.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="246.0" y="1715.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.0" y="1726.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="246.0" y="1699.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.0" y="1710.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="246.0" y="1683.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.0" y="1694.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="246.0" y="1667.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="1678.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="246.0" y="1651.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="1662.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="247.0" y="1699.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.0" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="248.1" y="1843.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="248.1" y="1827.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="251.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.09%)</title><rect x="249.1" y="1859.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.44%)</title><rect x="250.2" y="1859.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.27%)</title><rect x="250.2" y="1843.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.18%)</title><rect x="250.2" y="1827.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.18%)</title><rect x="250.2" y="1811.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.18%)</title><rect x="250.2" y="1795.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (2 samples, 0.18%)</title><rect x="250.2" y="1779.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="250.2" y="1763.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.2" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="250.2" y="1747.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.2" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="250.2" y="1731.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.2" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.09%)</title><rect x="250.2" y="1715.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.2" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.09%)</title><rect x="250.2" y="1699.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.2" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="250.2" y="1683.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="250.2" y="1667.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.2" y="1678.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="250.2" y="1651.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.2" y="1662.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.09%)</title><rect x="250.2" y="1635.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.2" y="1646.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.09%)</title><rect x="250.2" y="1619.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.2" y="1630.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="250.2" y="1603.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.2" y="1614.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="250.2" y="1587.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.2" y="1598.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="250.2" y="1571.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.2" y="1582.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="250.2" y="1555.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="253.2" y="1566.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (1 samples, 0.09%)</title><rect x="250.2" y="1539.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.2" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.09%)</title><rect x="251.2" y="1763.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.2" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="251.2" y="1747.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.2" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="251.2" y="1731.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.2" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 0.09%)</title><rect x="251.2" y="1715.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.2" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.read (1 samples, 0.09%)</title><rect x="251.2" y="1699.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.2" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="251.2" y="1683.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.2" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.09%)</title><rect x="251.2" y="1667.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.2" y="1678.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="251.2" y="1651.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.2" y="1662.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.09%)</title><rect x="251.2" y="1635.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.2" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="252.3" y="1827.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="252.3" y="1811.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="252.3" y="1795.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.3" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="252.3" y="1779.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="252.3" y="1763.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="255.3" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="252.3" y="1747.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="255.3" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.18%)</title><rect x="253.3" y="1843.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.18%)</title><rect x="253.3" y="1827.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.18%)</title><rect x="253.3" y="1811.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.18%)</title><rect x="253.3" y="1795.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.18%)</title><rect x="253.3" y="1779.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.18%)</title><rect x="253.3" y="1763.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.3" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.toStruct (1 samples, 0.09%)</title><rect x="253.3" y="1747.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.3" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.toStruct (1 samples, 0.09%)</title><rect x="253.3" y="1731.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.3" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.09%)</title><rect x="253.3" y="1715.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.3" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.09%)</title><rect x="253.3" y="1699.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.3" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="253.3" y="1683.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.3" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="253.3" y="1667.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.3" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="254.4" y="1747.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="254.4" y="1731.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="254.4" y="1715.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="257.4" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.09%)</title><rect x="254.4" y="1699.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.4" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getFieldOrDefault (1 samples, 0.09%)</title><rect x="254.4" y="1683.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.4" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.write (1 samples, 0.09%)</title><rect x="254.4" y="1667.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.4" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.44%)</title><rect x="255.4" y="1859.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.44%)</title><rect x="255.4" y="1843.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="255.4" y="1827.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="255.4" y="1811.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="255.4" y="1795.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="255.4" y="1779.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.4" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="255.4" y="1763.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.18%)</title><rect x="256.4" y="1827.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="259.4" y="1838.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="256.4" y="1811.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="257.5" y="1811.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="257.5" y="1795.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.5" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="257.5" y="1779.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.09%)</title><rect x="257.5" y="1763.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.5" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.09%)</title><rect x="258.5" y="1827.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.09%)</title><rect x="258.5" y="1811.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.09%)</title><rect x="258.5" y="1795.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.5" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="258.5" y="1779.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.5" y="1790.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="258.5" y="1763.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.5" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="258.5" y="1747.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.5" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="259.6" y="1827.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="262.6" y="1838.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="259.6" y="1811.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="262.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.18%)</title><rect x="260.6" y="1859.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="260.6" y="1843.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="260.6" y="1827.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="260.6" y="1811.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="263.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="260.6" y="1795.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.09%)</title><rect x="260.6" y="1779.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.6" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="261.7" y="1811.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="264.7" y="1822.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="261.7" y="1795.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="264.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/Thread.run (674 samples, 59.65%)</title><rect x="262.7" y="1939.0" width="703.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.7" y="1950.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (674 samples, 59.65%)</title><rect x="262.7" y="1923.0" width="703.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.7" y="1934.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (674 samples, 59.65%)</title><rect x="262.7" y="1907.0" width="703.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.7" y="1918.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="262.7" y="1891.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="265.7" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="262.7" y="1875.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="265.7" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="262.7" y="1859.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="265.7" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="262.7" y="1843.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="265.7" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="262.7" y="1827.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="265.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/649811818.run (447 samples, 39.56%)</title><rect x="263.8" y="1891.0" width="466.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.8" y="1902.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$L..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (447 samples, 39.56%)</title><rect x="263.8" y="1875.0" width="466.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.8" y="1886.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (447 samples, 39.56%)</title><rect x="263.8" y="1859.0" width="466.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.8" y="1870.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.pr..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="266.9" y="1843.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="269.9" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.62%)</title><rect x="269.0" y="1843.0" width="7.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="272.0" y="1854.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="270.0" y="1827.0" width="6.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="273.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (433 samples, 38.32%)</title><rect x="276.3" y="1843.0" width="452.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.3" y="1854.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipelin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 0.44%)</title><rect x="281.5" y="1827.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.44%)</title><rect x="281.5" y="1811.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.44%)</title><rect x="281.5" y="1795.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="281.5" y="1779.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.5" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.35%)</title><rect x="282.5" y="1779.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (43 samples, 3.81%)</title><rect x="286.7" y="1827.0" width="44.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.7" y="1838.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (29 samples, 2.57%)</title><rect x="301.3" y="1811.0" width="30.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.3" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (29 samples, 2.57%)</title><rect x="301.3" y="1795.0" width="30.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="304.3" y="1806.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (29 samples, 2.57%)</title><rect x="301.3" y="1779.0" width="30.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.3" y="1790.0">ja..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="301.3" y="1763.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="304.3" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="301.3" y="1747.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="304.3" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="302.4" y="1763.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="305.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="302.4" y="1747.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.4" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$299/181751120.accept (1 samples, 0.09%)</title><rect x="302.4" y="1731.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.4" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (27 samples, 2.39%)</title><rect x="303.4" y="1763.0" width="28.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.4" y="1774.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$299/181751120.accept (27 samples, 2.39%)</title><rect x="303.4" y="1747.0" width="28.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.4" y="1758.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (27 samples, 2.39%)</title><rect x="303.4" y="1731.0" width="28.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.4" y="1742.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (26 samples, 2.30%)</title><rect x="303.4" y="1715.0" width="27.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.4" y="1726.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (24 samples, 2.12%)</title><rect x="305.5" y="1699.0" width="25.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="308.5" y="1710.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (24 samples, 2.12%)</title><rect x="305.5" y="1683.0" width="25.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.5" y="1694.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.44%)</title><rect x="305.5" y="1667.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="308.5" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.44%)</title><rect x="305.5" y="1651.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="308.5" y="1662.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/567222079.accept (1 samples, 0.09%)</title><rect x="309.7" y="1635.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.7" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 1.68%)</title><rect x="310.7" y="1667.0" width="19.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.7" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (19 samples, 1.68%)</title><rect x="310.7" y="1651.0" width="19.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="313.7" y="1662.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (7 samples, 0.62%)</title><rect x="323.3" y="1635.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.3" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.09%)</title><rect x="330.6" y="1715.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="333.6" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (130 samples, 11.50%)</title><rect x="331.6" y="1827.0" width="135.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="334.6" y="1838.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (126 samples, 11.15%)</title><rect x="335.8" y="1811.0" width="131.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="338.8" y="1822.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (126 samples, 11.15%)</title><rect x="335.8" y="1795.0" width="131.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.8" y="1806.0">com/linecorp/dec..</text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="335.8" y="1779.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="338.8" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (125 samples, 11.06%)</title><rect x="336.8" y="1779.0" width="130.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="339.8" y="1790.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (125 samples, 11.06%)</title><rect x="336.8" y="1763.0" width="130.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.8" y="1774.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (125 samples, 11.06%)</title><rect x="336.8" y="1747.0" width="130.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="339.8" y="1758.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (29 samples, 2.57%)</title><rect x="340.0" y="1731.0" width="30.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="343.0" y="1742.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.18%)</title><rect x="340.0" y="1715.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="343.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.18%)</title><rect x="340.0" y="1699.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.18%)</title><rect x="340.0" y="1683.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.0" y="1694.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="340.0" y="1667.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="343.0" y="1678.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="340.0" y="1651.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.0" y="1662.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="340.0" y="1635.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.0" y="1646.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="340.0" y="1619.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="343.0" y="1630.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="340.0" y="1603.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="343.0" y="1614.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="340.0" y="1587.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="343.0" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="340.0" y="1571.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="343.0" y="1582.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="340.0" y="1555.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="343.0" y="1566.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="340.0" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="343.0" y="1550.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="340.0" y="1523.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="343.0" y="1534.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="340.0" y="1507.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.0" y="1518.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="341.0" y="1555.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="344.0" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (27 samples, 2.39%)</title><rect x="342.1" y="1715.0" width="28.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.1" y="1726.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (27 samples, 2.39%)</title><rect x="342.1" y="1699.0" width="28.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.1" y="1710.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (14 samples, 1.24%)</title><rect x="346.2" y="1683.0" width="14.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (14 samples, 1.24%)</title><rect x="346.2" y="1667.0" width="14.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="359.8" y="1651.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.8" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.80%)</title><rect x="360.9" y="1683.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="363.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.80%)</title><rect x="360.9" y="1667.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (8 samples, 0.71%)</title><rect x="360.9" y="1651.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="369.2" y="1651.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.2" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="369.2" y="1635.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="372.2" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (79 samples, 6.99%)</title><rect x="370.3" y="1731.0" width="82.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="373.3" y="1742.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="370.3" y="1715.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="373.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.09%)</title><rect x="370.3" y="1699.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.09%)</title><rect x="370.3" y="1683.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.09%)</title><rect x="370.3" y="1667.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="373.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.09%)</title><rect x="370.3" y="1651.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="373.3" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.44%)</title><rect x="371.3" y="1715.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="374.3" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.44%)</title><rect x="371.3" y="1699.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="374.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.71%)</title><rect x="376.5" y="1715.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="379.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.getReadCapabilities (1 samples, 0.09%)</title><rect x="380.7" y="1699.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="383.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.27%)</title><rect x="381.8" y="1699.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="384.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="381.8" y="1683.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.18%)</title><rect x="382.8" y="1683.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.18%)</title><rect x="382.8" y="1667.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="383.8" y="1651.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="386.8" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (65 samples, 5.75%)</title><rect x="384.9" y="1715.0" width="67.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="387.9" y="1726.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (65 samples, 5.75%)</title><rect x="384.9" y="1699.0" width="67.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="387.9" y="1710.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.42%)</title><rect x="385.9" y="1683.0" width="16.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.44%)</title><rect x="385.9" y="1667.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.44%)</title><rect x="385.9" y="1651.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.44%)</title><rect x="385.9" y="1635.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.9" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.44%)</title><rect x="385.9" y="1619.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="388.9" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.18%)</title><rect x="389.1" y="1603.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.1" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.62%)</title><rect x="391.2" y="1667.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (6 samples, 0.53%)</title><rect x="391.2" y="1651.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.2" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.09%)</title><rect x="397.4" y="1651.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="400.4" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.09%)</title><rect x="397.4" y="1635.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="400.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="397.4" y="1619.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.4" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.09%)</title><rect x="397.4" y="1603.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="400.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.27%)</title><rect x="398.5" y="1667.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="401.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.27%)</title><rect x="398.5" y="1651.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="401.5" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="401.6" y="1667.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="404.6" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (48 samples, 4.25%)</title><rect x="402.6" y="1683.0" width="50.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.6" y="1694.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (48 samples, 4.25%)</title><rect x="402.6" y="1667.0" width="50.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="405.6" y="1678.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (47 samples, 4.16%)</title><rect x="403.7" y="1651.0" width="49.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.7" y="1662.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.77%)</title><rect x="407.9" y="1635.0" width="20.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="410.9" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.18%)</title><rect x="408.9" y="1619.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="411.9" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.71%)</title><rect x="411.0" y="1619.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.0" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.71%)</title><rect x="411.0" y="1603.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.0" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.71%)</title><rect x="411.0" y="1587.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.0" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.18%)</title><rect x="411.0" y="1571.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="414.0" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.53%)</title><rect x="413.1" y="1571.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="416.1" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.53%)</title><rect x="413.1" y="1555.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.1" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (5 samples, 0.44%)</title><rect x="414.1" y="1539.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="417.1" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (3 samples, 0.27%)</title><rect x="416.2" y="1523.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.2" y="1534.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.27%)</title><rect x="419.3" y="1619.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.3" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.18%)</title><rect x="419.3" y="1603.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.3" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.09%)</title><rect x="421.4" y="1603.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="424.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.09%)</title><rect x="421.4" y="1587.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="424.4" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.44%)</title><rect x="422.5" y="1619.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="425.5" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.44%)</title><rect x="422.5" y="1603.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="425.5" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="425.6" y="1587.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.6" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="427.7" y="1619.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="430.7" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.62%)</title><rect x="428.7" y="1635.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="431.7" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.53%)</title><rect x="429.8" y="1619.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="432.8" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.53%)</title><rect x="429.8" y="1603.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.8" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.53%)</title><rect x="429.8" y="1587.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.8" y="1598.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.53%)</title><rect x="429.8" y="1571.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.8" y="1582.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.97%)</title><rect x="436.1" y="1635.0" width="11.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.1" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.97%)</title><rect x="436.1" y="1619.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.1" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.97%)</title><rect x="436.1" y="1603.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.1" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.97%)</title><rect x="436.1" y="1587.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.1" y="1598.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.97%)</title><rect x="436.1" y="1571.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="439.1" y="1582.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="438.1" y="1555.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="441.1" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="438.1" y="1539.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="441.1" y="1550.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="438.1" y="1523.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="441.1" y="1534.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="438.1" y="1507.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="441.1" y="1518.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="438.1" y="1491.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="441.1" y="1502.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.71%)</title><rect x="439.2" y="1555.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.2" y="1566.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="442.3" y="1539.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.3" y="1550.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor7.newInstance (4 samples, 0.35%)</title><rect x="443.4" y="1539.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="446.4" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.44%)</title><rect x="447.5" y="1635.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.5" y="1646.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.44%)</title><rect x="447.5" y="1619.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.5" y="1630.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.44%)</title><rect x="447.5" y="1603.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="450.5" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (14 samples, 1.24%)</title><rect x="452.8" y="1731.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (14 samples, 1.24%)</title><rect x="452.8" y="1715.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (14 samples, 1.24%)</title><rect x="452.8" y="1699.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (14 samples, 1.24%)</title><rect x="452.8" y="1683.0" width="14.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="455.8" y="1694.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (14 samples, 1.24%)</title><rect x="452.8" y="1667.0" width="14.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.8" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (248 samples, 21.95%)</title><rect x="467.4" y="1827.0" width="259.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.4" y="1838.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.53%)</title><rect x="470.5" y="1811.0" width="6.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="473.5" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.53%)</title><rect x="470.5" y="1795.0" width="6.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="473.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (40 samples, 3.54%)</title><rect x="476.8" y="1811.0" width="41.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="479.8" y="1822.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (40 samples, 3.54%)</title><rect x="476.8" y="1795.0" width="41.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.8" y="1806.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (39 samples, 3.45%)</title><rect x="477.8" y="1779.0" width="40.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.8" y="1790.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.44%)</title><rect x="479.9" y="1763.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.44%)</title><rect x="479.9" y="1747.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.9" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.44%)</title><rect x="479.9" y="1731.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="482.9" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.44%)</title><rect x="479.9" y="1715.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.9" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="485.1" y="1763.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="488.1" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="485.1" y="1747.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.1" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="485.1" y="1731.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.1" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="485.1" y="1715.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.1" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="486.2" y="1699.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.2" y="1710.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (30 samples, 2.65%)</title><rect x="487.2" y="1763.0" width="31.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.2" y="1774.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (24 samples, 2.12%)</title><rect x="493.5" y="1747.0" width="25.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="496.5" y="1758.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.35%)</title><rect x="514.4" y="1731.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="517.4" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.80%)</title><rect x="518.5" y="1811.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="521.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.80%)</title><rect x="518.5" y="1795.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="521.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (134 samples, 11.86%)</title><rect x="527.9" y="1811.0" width="140.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.9" y="1822.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (130 samples, 11.50%)</title><rect x="527.9" y="1795.0" width="135.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="530.9" y="1806.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (46 samples, 4.07%)</title><rect x="536.3" y="1779.0" width="48.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="539.3" y="1790.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 1.86%)</title><rect x="547.8" y="1763.0" width="21.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="550.8" y="1774.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 1.77%)</title><rect x="548.8" y="1747.0" width="20.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="551.8" y="1758.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.62%)</title><rect x="558.2" y="1731.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="561.2" y="1742.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.62%)</title><rect x="558.2" y="1715.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="561.2" y="1726.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.62%)</title><rect x="558.2" y="1699.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="561.2" y="1710.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.62%)</title><rect x="558.2" y="1683.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="561.2" y="1694.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.53%)</title><rect x="559.3" y="1667.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="562.3" y="1678.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.53%)</title><rect x="559.3" y="1651.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="562.3" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="560.3" y="1635.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="563.3" y="1646.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="560.3" y="1619.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="563.3" y="1630.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="560.3" y="1603.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="563.3" y="1614.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.09%)</title><rect x="560.3" y="1587.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="563.3" y="1598.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (2 samples, 0.18%)</title><rect x="561.4" y="1635.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="564.4" y="1646.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="563.5" y="1635.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="566.5" y="1646.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="564.5" y="1635.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="567.5" y="1646.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="565.5" y="1731.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="568.5" y="1742.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="567.6" y="1731.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="570.6" y="1742.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="568.7" y="1731.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="571.7" y="1742.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="569.7" y="1763.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="572.7" y="1774.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="569.7" y="1747.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="572.7" y="1758.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="569.7" y="1731.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="572.7" y="1742.0"></text>
</g>
<g>
<title>jshort_arraycopy (4 samples, 0.35%)</title><rect x="570.8" y="1763.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="573.8" y="1774.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.80%)</title><rect x="574.9" y="1763.0" width="9.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="577.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.71%)</title><rect x="584.3" y="1779.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="587.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.71%)</title><rect x="584.3" y="1763.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="587.3" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="584.3" y="1747.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="587.3" y="1758.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="584.3" y="1731.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="587.3" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="584.3" y="1715.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="587.3" y="1726.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.62%)</title><rect x="585.4" y="1747.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.4" y="1758.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (68 samples, 6.02%)</title><rect x="592.7" y="1779.0" width="71.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="595.7" y="1790.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (67 samples, 5.93%)</title><rect x="593.7" y="1763.0" width="70.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="596.7" y="1774.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.53%)</title><rect x="593.7" y="1747.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="596.7" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.53%)</title><rect x="593.7" y="1731.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="596.7" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.53%)</title><rect x="593.7" y="1715.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="596.7" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.53%)</title><rect x="593.7" y="1699.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="596.7" y="1710.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.27%)</title><rect x="600.0" y="1747.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.0" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.27%)</title><rect x="600.0" y="1731.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.0" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.27%)</title><rect x="600.0" y="1715.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="603.0" y="1726.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.27%)</title><rect x="600.0" y="1699.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="603.0" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="602.1" y="1683.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="605.1" y="1694.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (58 samples, 5.13%)</title><rect x="603.1" y="1747.0" width="60.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="606.1" y="1758.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (55 samples, 4.87%)</title><rect x="606.3" y="1731.0" width="57.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="609.3" y="1742.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (23 samples, 2.04%)</title><rect x="639.7" y="1715.0" width="24.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.7" y="1726.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.44%)</title><rect x="656.4" y="1699.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.4" y="1710.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.18%)</title><rect x="661.6" y="1699.0" width="2.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="664.6" y="1710.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 0.35%)</title><rect x="663.7" y="1795.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.7" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.35%)</title><rect x="663.7" y="1779.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.7" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.35%)</title><rect x="663.7" y="1763.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.7" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.35%)</title><rect x="663.7" y="1747.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.7" y="1758.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="664.7" y="1731.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="667.7" y="1742.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="664.7" y="1715.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="667.7" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="665.8" y="1731.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="668.8" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (44 samples, 3.89%)</title><rect x="667.9" y="1811.0" width="45.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="670.9" y="1822.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (43 samples, 3.81%)</title><rect x="667.9" y="1795.0" width="44.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="670.9" y="1806.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="672.1" y="1779.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="675.1" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="672.1" y="1763.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="675.1" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="672.1" y="1747.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="675.1" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/958742860.process (12 samples, 1.06%)</title><rect x="673.1" y="1779.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="676.1" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (12 samples, 1.06%)</title><rect x="673.1" y="1763.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="676.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (11 samples, 0.97%)</title><rect x="674.1" y="1747.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.1" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.27%)</title><rect x="680.4" y="1731.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.4" y="1742.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="681.5" y="1715.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="684.5" y="1726.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="681.5" y="1699.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="684.5" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (2 samples, 0.18%)</title><rect x="683.5" y="1731.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="686.5" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (4 samples, 0.35%)</title><rect x="685.6" y="1779.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.6" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.09%)</title><rect x="689.8" y="1779.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="692.8" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="689.8" y="1763.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="692.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="690.8" y="1779.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="693.8" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.27%)</title><rect x="690.8" y="1763.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.8" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.53%)</title><rect x="694.0" y="1779.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="697.0" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.44%)</title><rect x="695.0" y="1763.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="698.0" y="1774.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.27%)</title><rect x="695.0" y="1747.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="698.0" y="1758.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.18%)</title><rect x="698.2" y="1747.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="701.2" y="1758.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="700.2" y="1779.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="703.2" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="700.2" y="1763.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="703.2" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.27%)</title><rect x="701.3" y="1779.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.3" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.27%)</title><rect x="701.3" y="1763.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="704.3" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.71%)</title><rect x="704.4" y="1779.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="707.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.71%)</title><rect x="704.4" y="1763.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="707.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.71%)</title><rect x="704.4" y="1747.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="707.4" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.71%)</title><rect x="704.4" y="1731.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.4" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.71%)</title><rect x="704.4" y="1715.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="707.4" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$296/332991177.accept (2 samples, 0.18%)</title><rect x="706.5" y="1699.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="709.5" y="1710.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.35%)</title><rect x="708.6" y="1699.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="711.6" y="1710.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="712.8" y="1795.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="715.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.06%)</title><rect x="713.8" y="1811.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.06%)</title><rect x="713.8" y="1795.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="716.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.06%)</title><rect x="713.8" y="1779.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="716.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.27%)</title><rect x="713.8" y="1763.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="716.8" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.27%)</title><rect x="713.8" y="1747.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="716.8" y="1758.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="714.9" y="1731.0" width="2.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="717.9" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.80%)</title><rect x="717.0" y="1763.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="720.0" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/1945564550.accept (8 samples, 0.71%)</title><rect x="718.0" y="1747.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.0" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (8 samples, 0.71%)</title><rect x="718.0" y="1731.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="721.0" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (8 samples, 0.71%)</title><rect x="718.0" y="1715.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.0" y="1726.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.71%)</title><rect x="718.0" y="1699.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.0" y="1710.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.71%)</title><rect x="718.0" y="1683.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="721.0" y="1694.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.44%)</title><rect x="721.1" y="1667.0" width="5.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="724.1" y="1678.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="721.1" y="1651.0" width="5.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="724.1" y="1662.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="726.4" y="1827.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="729.4" y="1838.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="726.4" y="1811.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="729.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (2 samples, 0.18%)</title><rect x="728.4" y="1843.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="731.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.62%)</title><rect x="730.5" y="1891.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="733.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.62%)</title><rect x="730.5" y="1875.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="733.5" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.62%)</title><rect x="730.5" y="1859.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="733.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.62%)</title><rect x="730.5" y="1843.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="733.5" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="733.7" y="1827.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="736.7" y="1838.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="733.7" y="1811.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="736.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (219 samples, 19.38%)</title><rect x="737.8" y="1891.0" width="228.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.8" y="1902.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (218 samples, 19.29%)</title><rect x="738.9" y="1875.0" width="227.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="741.9" y="1886.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (207 samples, 18.32%)</title><rect x="738.9" y="1859.0" width="216.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="741.9" y="1870.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.33%)</title><rect x="750.4" y="1843.0" width="15.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="753.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.18%)</title><rect x="766.0" y="1843.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="769.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.18%)</title><rect x="766.0" y="1827.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="769.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (179 samples, 15.84%)</title><rect x="768.1" y="1843.0" width="186.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="771.1" y="1854.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 14.78%)</title><rect x="780.7" y="1827.0" width="174.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="783.7" y="1838.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="782.7" y="1811.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="785.7" y="1822.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="784.8" y="1811.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.8" y="1822.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="785.9" y="1811.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="788.9" y="1822.0"></text>
</g>
<g>
<title>Unsafe_Park (157 samples, 13.89%)</title><rect x="788.0" y="1811.0" width="163.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="791.0" y="1822.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="792.1" y="1795.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="795.1" y="1806.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="794.2" y="1795.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="797.2" y="1806.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.48%)</title><rect x="795.3" y="1795.0" width="29.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="798.3" y="1806.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.62%)</title><rect x="803.6" y="1779.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="806.6" y="1790.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.35%)</title><rect x="803.6" y="1763.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="806.6" y="1774.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="806.8" y="1747.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="809.8" y="1758.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="807.8" y="1763.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="810.8" y="1774.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="808.8" y="1763.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="811.8" y="1774.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="810.9" y="1779.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="813.9" y="1790.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (11 samples, 0.97%)</title><rect x="812.0" y="1779.0" width="11.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.0" y="1790.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="823.5" y="1779.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="826.5" y="1790.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.18%)</title><rect x="824.5" y="1795.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="827.5" y="1806.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="826.6" y="1795.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="829.6" y="1806.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.71%)</title><rect x="828.7" y="1795.0" width="8.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="831.7" y="1806.0"></text>
</g>
<g>
<title>__lll_unlock_wake (40 samples, 3.54%)</title><rect x="837.0" y="1795.0" width="41.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="840.0" y="1806.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (59 samples, 5.22%)</title><rect x="878.8" y="1795.0" width="61.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="881.8" y="1806.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.27%)</title><rect x="940.4" y="1795.0" width="3.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="943.4" y="1806.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="943.6" y="1795.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="946.6" y="1806.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="944.6" y="1795.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="947.6" y="1806.0"></text>
</g>
<g>
<title>_init (3 samples, 0.27%)</title><rect x="946.7" y="1795.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="949.7" y="1806.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="949.8" y="1795.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.8" y="1806.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="950.9" y="1795.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="953.9" y="1806.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="951.9" y="1811.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="954.9" y="1822.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="953.0" y="1811.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="956.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.97%)</title><rect x="955.0" y="1859.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="958.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.97%)</title><rect x="955.0" y="1843.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.97%)</title><rect x="955.0" y="1827.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.97%)</title><rect x="955.0" y="1811.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="958.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="966.5" y="1939.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="969.5" y="1950.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.09%)</title><rect x="966.5" y="1923.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="969.5" y="1934.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.09%)</title><rect x="966.5" y="1907.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="969.5" y="1918.0"></text>
</g>
<g>
<title>Thread::SpinAcquire(int volatile*, char const*) (1 samples, 0.09%)</title><rect x="966.5" y="1891.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="969.5" y="1902.0"></text>
</g>
<g>
<title>start_thread (213 samples, 18.85%)</title><rect x="967.6" y="1939.0" width="222.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="970.6" y="1950.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (213 samples, 18.85%)</title><rect x="967.6" y="1923.0" width="222.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="970.6" y="1934.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.86%)</title><rect x="967.6" y="1907.0" width="21.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="970.6" y="1918.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.71%)</title><rect x="967.6" y="1891.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="970.6" y="1902.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.71%)</title><rect x="967.6" y="1875.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.6" y="1886.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="967.6" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.6" y="1870.0"></text>
</g>
<g>
<title>SpinPause (7 samples, 0.62%)</title><rect x="968.6" y="1859.0" width="7.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="971.6" y="1870.0"></text>
</g>
<g>
<title>G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap*, unsigned int, ReferenceProcessor*) (1 samples, 0.09%)</title><rect x="975.9" y="1891.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="978.9" y="1902.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 0.97%)</title><rect x="977.0" y="1891.0" width="11.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.0" y="1902.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="977.0" y="1875.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.0" y="1886.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="977.0" y="1859.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.0" y="1870.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="977.0" y="1843.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="980.0" y="1854.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (3 samples, 0.27%)</title><rect x="978.0" y="1875.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.0" y="1886.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="978.0" y="1859.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.0" y="1870.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="978.0" y="1843.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.0" y="1854.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="978.0" y="1827.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.0" y="1838.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="978.0" y="1811.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.0" y="1822.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="979.1" y="1859.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.1" y="1870.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.18%)</title><rect x="979.1" y="1843.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.1" y="1854.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.62%)</title><rect x="981.2" y="1875.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="984.2" y="1886.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.62%)</title><rect x="981.2" y="1859.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="984.2" y="1870.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.62%)</title><rect x="981.2" y="1843.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.2" y="1854.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.62%)</title><rect x="981.2" y="1827.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.2" y="1838.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.53%)</title><rect x="982.2" y="1811.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.2" y="1822.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.53%)</title><rect x="982.2" y="1795.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.2" y="1806.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.53%)</title><rect x="982.2" y="1779.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.2" y="1790.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="984.3" y="1763.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.3" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.18%)</title><rect x="985.3" y="1763.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.3" y="1774.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="986.4" y="1747.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="989.4" y="1758.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="987.4" y="1763.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="990.4" y="1774.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="988.5" y="1891.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="991.5" y="1902.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::par_apply_closure_to_all_completed_buffers(CardTableEntryClosure*) (1 samples, 0.09%)</title><rect x="988.5" y="1875.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.5" y="1886.0"></text>
</g>
<g>
<title>JavaThread::run() (190 samples, 16.81%)</title><rect x="989.5" y="1907.0" width="198.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.5" y="1918.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (190 samples, 16.81%)</title><rect x="989.5" y="1891.0" width="198.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.5" y="1902.0">JavaThread::thread_main_in..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (190 samples, 16.81%)</title><rect x="989.5" y="1875.0" width="198.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.5" y="1886.0">CompileBroker::compiler_th..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (190 samples, 16.81%)</title><rect x="989.5" y="1859.0" width="198.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.5" y="1870.0">CompileBroker::invoke_comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (189 samples, 16.73%)</title><rect x="989.5" y="1843.0" width="197.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="992.5" y="1854.0">C2Compiler::compile_method..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (189 samples, 16.73%)</title><rect x="989.5" y="1827.0" width="197.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.5" y="1838.0">Compile::Compile(ciEnv*, C..</text>
</g>
<g>
<title>Compile::Code_Gen() (51 samples, 4.51%)</title><rect x="989.5" y="1811.0" width="53.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.5" y="1822.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.27%)</title><rect x="989.5" y="1795.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="992.5" y="1806.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.18%)</title><rect x="989.5" y="1779.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.5" y="1790.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="991.6" y="1779.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="994.6" y="1790.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="991.6" y="1763.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.6" y="1774.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="991.6" y="1747.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="994.6" y="1758.0"></text>
</g>
<g>
<title>indPosIndexScaleOffsetOper::disp(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.09%)</title><rect x="991.6" y="1731.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="994.6" y="1742.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.18%)</title><rect x="992.6" y="1795.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.6" y="1806.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="992.6" y="1779.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.6" y="1790.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="992.6" y="1763.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.6" y="1774.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="992.6" y="1747.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="995.6" y="1758.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="993.7" y="1779.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="996.7" y="1790.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="993.7" y="1763.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.7" y="1774.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.53%)</title><rect x="994.7" y="1795.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="997.7" y="1806.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="994.7" y="1779.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.7" y="1790.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.35%)</title><rect x="995.8" y="1779.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.8" y="1790.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.27%)</title><rect x="995.8" y="1763.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="998.8" y="1774.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="998.9" y="1763.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1001.9" y="1774.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="999.9" y="1779.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1002.9" y="1790.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.27%)</title><rect x="1001.0" y="1795.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.0" y="1806.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.27%)</title><rect x="1001.0" y="1779.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1004.0" y="1790.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1001.0" y="1763.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1004.0" y="1774.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1001.0" y="1747.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1004.0" y="1758.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.18%)</title><rect x="1002.0" y="1763.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1005.0" y="1774.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1003.1" y="1747.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.1" y="1758.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.09%)</title><rect x="1004.1" y="1795.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.1" y="1806.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 3.19%)</title><rect x="1005.2" y="1795.0" width="37.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1008.2" y="1806.0">Pha..</text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.09%)</title><rect x="1005.2" y="1779.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.2" y="1790.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1006.2" y="1779.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1009.2" y="1790.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.27%)</title><rect x="1007.3" y="1779.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.3" y="1790.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1009.3" y="1763.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1012.3" y="1774.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1009.3" y="1747.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1012.3" y="1758.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.27%)</title><rect x="1010.4" y="1779.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.4" y="1790.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1011.4" y="1763.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.4" y="1774.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.35%)</title><rect x="1013.5" y="1779.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.5" y="1790.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.09%)</title><rect x="1016.7" y="1763.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1019.7" y="1774.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.71%)</title><rect x="1017.7" y="1779.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.7" y="1790.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.44%)</title><rect x="1019.8" y="1763.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.8" y="1774.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1019.8" y="1747.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1022.8" y="1758.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.35%)</title><rect x="1020.8" y="1747.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1023.8" y="1758.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1025.0" y="1763.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1028.0" y="1774.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.35%)</title><rect x="1026.1" y="1779.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.1" y="1790.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1029.2" y="1763.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1032.2" y="1774.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1030.2" y="1779.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.2" y="1790.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.18%)</title><rect x="1032.3" y="1779.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.3" y="1790.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1032.3" y="1763.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.3" y="1774.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.09%)</title><rect x="1032.3" y="1747.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1035.3" y="1758.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.09%)</title><rect x="1032.3" y="1731.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1035.3" y="1742.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1033.4" y="1763.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.4" y="1774.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1033.4" y="1747.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.4" y="1758.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1033.4" y="1731.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.4" y="1742.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.18%)</title><rect x="1034.4" y="1779.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1037.4" y="1790.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1035.5" y="1763.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1038.5" y="1774.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1036.5" y="1779.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1039.5" y="1790.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1036.5" y="1763.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1039.5" y="1774.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.18%)</title><rect x="1037.5" y="1779.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.5" y="1790.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1037.5" y="1763.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1040.5" y="1774.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1038.6" y="1763.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1041.6" y="1774.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.18%)</title><rect x="1039.6" y="1779.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.6" y="1790.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="1041.7" y="1779.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1044.7" y="1790.0"></text>
</g>
<g>
<title>Compile::Optimize() (133 samples, 11.77%)</title><rect x="1042.8" y="1811.0" width="138.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.8" y="1822.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.35%)</title><rect x="1042.8" y="1795.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1045.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.35%)</title><rect x="1042.8" y="1779.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.8" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.27%)</title><rect x="1043.8" y="1763.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.8" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1044.8" y="1747.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1044.8" y="1731.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1044.8" y="1715.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1044.8" y="1699.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1044.8" y="1683.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1044.8" y="1667.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1651.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1635.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1619.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1603.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.8" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1587.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.8" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1571.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1555.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1539.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1523.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1507.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1491.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1475.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.8" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1459.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1443.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1427.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1047.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1411.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1395.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1379.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1363.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1347.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1331.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1315.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1047.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1299.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1283.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1267.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1251.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1235.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1219.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1203.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1187.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1171.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1155.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1139.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1123.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1107.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1091.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1075.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1059.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1043.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1047.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1027.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1047.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="1011.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="979.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="963.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="947.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1047.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="931.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="883.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1047.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="851.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="835.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="819.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1047.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="803.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="787.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="755.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1047.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="707.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1047.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1047.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="643.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="611.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="595.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="579.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="563.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="547.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1047.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="531.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1047.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="483.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="467.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="451.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1047.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="435.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="419.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1047.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="403.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1047.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="387.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="371.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="355.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="339.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="323.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="307.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="291.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="275.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="259.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="243.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1047.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="227.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="211.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="195.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1047.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="179.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="163.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1047.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="147.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="131.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1047.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="115.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="99.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="83.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1047.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="67.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.8" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="51.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1047.8" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1044.8" y="35.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1047.8" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1651.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.9" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1635.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.9" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1619.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.9" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1603.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1048.9" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1587.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.9" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1571.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.9" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1555.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1048.9" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1539.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.9" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1523.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.9" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1507.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.9" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1491.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.9" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1475.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.9" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1459.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.9" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1443.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.9" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1427.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.9" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1411.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1048.9" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1395.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.9" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1379.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.9" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1363.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1048.9" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1347.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.9" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1048.9" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1315.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.9" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1299.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.9" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1283.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.9" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1267.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.9" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1251.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.9" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1235.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.9" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1219.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.9" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1203.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.9" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1187.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1048.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1171.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.9" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1155.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1139.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1048.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1123.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1045.9" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.9" y="1118.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.09%)</title><rect x="1045.9" y="1091.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.9" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.18%)</title><rect x="1046.9" y="1795.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.9" y="1806.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1046.9" y="1779.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1049.9" y="1790.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1048.0" y="1779.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.0" y="1790.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1049.0" y="1795.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1052.0" y="1806.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1049.0" y="1779.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.0" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (113 samples, 10.00%)</title><rect x="1050.1" y="1795.0" width="118.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.1" y="1806.0">PhaseIdealLoop..</text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1050.1" y="1779.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.1" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1050.1" y="1763.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.1" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1050.1" y="1747.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.1" y="1758.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1050.1" y="1731.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.1" y="1742.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1050.1" y="1715.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.1" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1050.1" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1053.1" y="1710.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1051.1" y="1779.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.1" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1051.1" y="1763.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.1" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1051.1" y="1747.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.1" y="1758.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1051.1" y="1731.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.1" y="1742.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1051.1" y="1715.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.1" y="1726.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1051.1" y="1699.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.1" y="1710.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1051.1" y="1683.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1054.1" y="1694.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1051.1" y="1667.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.1" y="1678.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1051.1" y="1651.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.1" y="1662.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1051.1" y="1635.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.1" y="1646.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1051.1" y="1619.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.1" y="1630.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.09%)</title><rect x="1051.1" y="1603.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.1" y="1614.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1051.1" y="1587.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.1" y="1598.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1051.1" y="1571.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1054.1" y="1582.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1052.2" y="1715.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.2" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1052.2" y="1699.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.2" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.09%)</title><rect x="1052.2" y="1683.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.2" y="1694.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1053.2" y="1779.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.2" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.27%)</title><rect x="1054.2" y="1779.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.2" y="1790.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1056.3" y="1763.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.3" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1057.4" y="1779.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.4" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (99 samples, 8.76%)</title><rect x="1058.4" y="1779.0" width="103.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.4" y="1790.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (99 samples, 8.76%)</title><rect x="1058.4" y="1763.0" width="103.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.4" y="1774.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.44%)</title><rect x="1059.5" y="1747.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1062.5" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (93 samples, 8.23%)</title><rect x="1064.7" y="1747.0" width="97.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.7" y="1758.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (16 samples, 1.42%)</title><rect x="1140.9" y="1731.0" width="16.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.9" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.35%)</title><rect x="1157.6" y="1731.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.6" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1160.8" y="1715.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.8" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.27%)</title><rect x="1161.8" y="1779.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.8" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1163.9" y="1763.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.9" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1163.9" y="1747.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.9" y="1758.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1163.9" y="1731.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.9" y="1742.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1163.9" y="1715.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.9" y="1726.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.27%)</title><rect x="1164.9" y="1779.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.9" y="1790.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.27%)</title><rect x="1164.9" y="1763.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.9" y="1774.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1164.9" y="1747.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.9" y="1758.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1164.9" y="1731.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.9" y="1742.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1164.9" y="1715.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.9" y="1726.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.09%)</title><rect x="1164.9" y="1699.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.9" y="1710.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.09%)</title><rect x="1164.9" y="1683.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="1694.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1164.9" y="1667.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1167.9" y="1678.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1166.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.0" y="1758.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1167.0" y="1747.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.0" y="1758.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1167.0" y="1731.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.0" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.80%)</title><rect x="1168.1" y="1795.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.1" y="1806.0"></text>
</g>
<g>
<title>CmpINode::sub(Type const*, Type const*) const (1 samples, 0.09%)</title><rect x="1168.1" y="1779.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.1" y="1790.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.71%)</title><rect x="1169.1" y="1779.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.1" y="1790.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.1" y="1763.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.1" y="1774.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.1" y="1747.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.1" y="1758.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1170.2" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.2" y="1774.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.27%)</title><rect x="1171.2" y="1763.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="1774.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1172.2" y="1747.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.2" y="1758.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1172.2" y="1731.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.2" y="1742.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1173.3" y="1747.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.3" y="1758.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1173.3" y="1731.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="1742.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="1763.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.3" y="1774.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1175.4" y="1763.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.4" y="1774.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.4" y="1747.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="1758.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1175.4" y="1731.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="1742.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1175.4" y="1715.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="1726.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1175.4" y="1699.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="1710.0"></text>
</g>
<g>
<title>StoreNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1176.4" y="1763.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1177.5" y="1795.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1177.5" y="1779.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::can_eliminate_allocation(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1177.5" y="1763.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.18%)</title><rect x="1178.5" y="1795.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.5" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.18%)</title><rect x="1178.5" y="1779.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (2 samples, 0.18%)</title><rect x="1178.5" y="1763.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1178.5" y="1747.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="1758.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (2 samples, 0.18%)</title><rect x="1178.5" y="1731.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.5" y="1742.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (2 samples, 0.18%)</title><rect x="1178.5" y="1715.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="1726.0"></text>
</g>
<g>
<title>Node::init_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1178.5" y="1699.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.5" y="1710.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1178.5" y="1683.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1181.5" y="1694.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1699.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="1710.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1683.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1694.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1667.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="1678.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1651.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1662.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1635.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1646.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1619.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="1630.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1603.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="1614.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1587.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="1598.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1571.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="1582.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1555.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="1566.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1550.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1523.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="1534.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1507.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="1518.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.09%)</title><rect x="1179.6" y="1491.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="1502.0"></text>
</g>
<g>
<title>PhaseMacroExpand::transform_later(Node*) (1 samples, 0.09%)</title><rect x="1179.6" y="1475.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="1486.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.09%)</title><rect x="1179.6" y="1459.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1470.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1180.6" y="1795.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1183.6" y="1806.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1181.6" y="1811.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1181.6" y="1795.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1181.6" y="1779.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1181.6" y="1763.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1181.6" y="1747.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1181.6" y="1731.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1181.6" y="1715.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.6" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1181.6" y="1699.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1181.6" y="1683.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1181.6" y="1667.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1181.6" y="1651.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1181.6" y="1635.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1181.6" y="1619.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.6" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1181.6" y="1603.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.6" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1181.6" y="1587.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1181.6" y="1571.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1181.6" y="1555.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1181.6" y="1539.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.6" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="1523.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="1534.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="1507.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.6" y="1518.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.6" y="1491.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.6" y="1502.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1181.6" y="1475.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1181.6" y="1459.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1181.6" y="1443.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.6" y="1427.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.6" y="1411.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.6" y="1395.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="1406.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="1379.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="1390.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1181.6" y="1363.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.6" y="1374.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.6" y="1347.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.6" y="1358.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.6" y="1331.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="1342.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1181.6" y="1315.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="1326.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1181.6" y="1299.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="1310.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.6" y="1283.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="1294.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1181.6" y="1267.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="1278.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.09%)</title><rect x="1181.6" y="1251.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.6" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1182.7" y="1523.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1182.7" y="1507.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1182.7" y="1491.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1182.7" y="1475.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.27%)</title><rect x="1182.7" y="1459.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1182.7" y="1443.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1182.7" y="1427.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1182.7" y="1411.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1182.7" y="1395.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1182.7" y="1379.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1182.7" y="1363.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1182.7" y="1347.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="1331.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.7" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.7" y="1315.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.7" y="1299.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.7" y="1283.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.7" y="1267.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.7" y="1251.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="1235.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.7" y="1219.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.7" y="1203.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.7" y="1187.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.7" y="1171.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.7" y="1155.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="1166.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1182.7" y="1139.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="1150.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1182.7" y="1123.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.7" y="1134.0"></text>
</g>
<g>
<title>ciSignature::return_type() const (1 samples, 0.09%)</title><rect x="1182.7" y="1107.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="1331.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="1315.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.7" y="1299.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.7" y="1283.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.7" y="1267.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.7" y="1251.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.7" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="1219.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.7" y="1203.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.7" y="1187.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.7" y="1171.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.7" y="1155.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.7" y="1139.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="1123.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="1107.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.7" y="1091.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.7" y="1075.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.7" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.7" y="1043.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.7" y="1027.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="1011.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.7" y="995.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.7" y="979.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.7" y="963.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.7" y="947.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1183.7" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="942.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.7" y="915.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="926.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_string_equals() (1 samples, 0.09%)</title><rect x="1183.7" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="910.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1183.7" y="883.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="894.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.09%)</title><rect x="1183.7" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="878.0"></text>
</g>
<g>
<title>CmpNode::CmpNode(Node*, Node*) (1 samples, 0.09%)</title><rect x="1183.7" y="851.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="862.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1183.7" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="1411.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="1395.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="1363.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="1347.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.8" y="1331.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.8" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="1315.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.8" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="1299.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="1283.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="1267.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="1251.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.8" y="1235.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="1219.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="1203.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="1171.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="1155.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.8" y="1139.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.8" y="1123.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.8" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.8" y="1091.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.8" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.8" y="1059.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="1043.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="1027.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.8" y="1038.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1184.8" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="1022.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1185.8" y="1811.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="1822.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1185.8" y="1795.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="1806.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.9" y="1843.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.9" y="1854.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1186.9" y="1827.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="1838.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1186.9" y="1811.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.9" y="1822.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1186.9" y="1795.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="1806.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1186.9" y="1779.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.9" y="1790.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.9" y="1763.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.9" y="1774.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1186.9" y="1747.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.9" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1186.9" y="1731.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1186.9" y="1715.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1186.9" y="1699.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.9" y="1710.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1186.9" y="1683.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.9" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1186.9" y="1667.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.9" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1186.9" y="1651.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.9" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1186.9" y="1635.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.9" y="1646.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1186.9" y="1619.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.9" y="1630.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1186.9" y="1603.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1614.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1186.9" y="1587.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1598.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1186.9" y="1571.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.9" y="1582.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.09%)</title><rect x="1186.9" y="1555.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1566.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="1907.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="1918.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="1891.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1902.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.18%)</title><rect x="1187.9" y="1875.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="1886.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.18%)</title><rect x="1187.9" y="1859.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="1870.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.18%)</title><rect x="1187.9" y="1843.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.18%)</title><rect x="1187.9" y="1827.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1187.9" y="1811.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.9" y="1822.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.09%)</title><rect x="1187.9" y="1795.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="1806.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.09%)</title><rect x="1187.9" y="1779.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.9" y="1790.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.09%)</title><rect x="1187.9" y="1763.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_in_cset_fast_test() (1 samples, 0.09%)</title><rect x="1189.0" y="1811.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1822.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.09%)</title><rect x="1189.0" y="1795.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="1806.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="1189.0" y="1779.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="1790.0"></text>
</g>
</g>
</svg>
