<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (324 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.31%)</title><rect x="10.0" y="1027.0" width="3.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.31%)</title><rect x="10.0" y="1011.0" width="3.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 7.41%)</title><rect x="13.6" y="1027.0" width="87.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.6" y="1038.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (24 samples, 7.41%)</title><rect x="13.6" y="1011.0" width="87.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.6" y="1022.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (24 samples, 7.41%)</title><rect x="13.6" y="995.0" width="87.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.6" y="1006.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.93%)</title><rect x="13.6" y="979.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.62%)</title><rect x="13.6" y="963.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.62%)</title><rect x="13.6" y="947.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.62%)</title><rect x="13.6" y="931.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.62%)</title><rect x="13.6" y="915.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.62%)</title><rect x="13.6" y="899.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.62%)</title><rect x="13.6" y="883.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.31%)</title><rect x="13.6" y="867.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.31%)</title><rect x="13.6" y="851.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.31%)</title><rect x="13.6" y="835.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$272/1234977365.test (1 samples, 0.31%)</title><rect x="13.6" y="819.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.31%)</title><rect x="17.3" y="867.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.3" y="878.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.31%)</title><rect x="17.3" y="851.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.31%)</title><rect x="17.3" y="835.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.3" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.31%)</title><rect x="17.3" y="819.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.31%)</title><rect x="20.9" y="963.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.31%)</title><rect x="20.9" y="947.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.62%)</title><rect x="24.6" y="979.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (2 samples, 0.62%)</title><rect x="24.6" y="963.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (2 samples, 0.62%)</title><rect x="24.6" y="947.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.6" y="958.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.31%)</title><rect x="28.2" y="931.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.2" y="942.0"></text>
</g>
<g>
<title>JVM_NanoTime (1 samples, 0.31%)</title><rect x="28.2" y="915.0" width="3.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="31.2" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.93%)</title><rect x="31.9" y="979.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1353122448.accept (2 samples, 0.62%)</title><rect x="31.9" y="963.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (2 samples, 0.62%)</title><rect x="31.9" y="947.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.62%)</title><rect x="31.9" y="931.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.62%)</title><rect x="31.9" y="915.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.62%)</title><rect x="31.9" y="899.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.62%)</title><rect x="31.9" y="883.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.62%)</title><rect x="31.9" y="867.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.31%)</title><rect x="35.5" y="851.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.31%)</title><rect x="35.5" y="835.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.31%)</title><rect x="35.5" y="819.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.31%)</title><rect x="35.5" y="803.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.31%)</title><rect x="35.5" y="787.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.31%)</title><rect x="39.1" y="963.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.31%)</title><rect x="39.1" y="947.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.31%)</title><rect x="39.1" y="931.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.31%)</title><rect x="39.1" y="915.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.31%)</title><rect x="39.1" y="899.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.31%)</title><rect x="39.1" y="883.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.94%)</title><rect x="42.8" y="979.0" width="58.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.8" y="990.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (16 samples, 4.94%)</title><rect x="42.8" y="963.0" width="58.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.8" y="974.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.31%)</title><rect x="42.8" y="947.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (13 samples, 4.01%)</title><rect x="46.4" y="947.0" width="47.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.4" y="958.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.93%)</title><rect x="46.4" y="931.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.93%)</title><rect x="46.4" y="915.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.62%)</title><rect x="46.4" y="899.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.4" y="910.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (1 samples, 0.31%)</title><rect x="46.4" y="883.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.31%)</title><rect x="50.1" y="883.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.31%)</title><rect x="50.1" y="867.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.31%)</title><rect x="50.1" y="851.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.31%)</title><rect x="50.1" y="835.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.1" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.31%)</title><rect x="50.1" y="819.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="53.1" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="50.1" y="803.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="53.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.31%)</title><rect x="53.7" y="899.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.31%)</title><rect x="53.7" y="883.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.31%)</title><rect x="53.7" y="867.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.31%)</title><rect x="53.7" y="851.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.31%)</title><rect x="53.7" y="835.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.31%)</title><rect x="53.7" y="819.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.7" y="830.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (1 samples, 0.31%)</title><rect x="53.7" y="803.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 2.16%)</title><rect x="57.3" y="931.0" width="25.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.3" y="942.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.31%)</title><rect x="57.3" y="915.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.85%)</title><rect x="61.0" y="915.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.0" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.54%)</title><rect x="61.0" y="899.0" width="18.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.54%)</title><rect x="61.0" y="883.0" width="18.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 1.54%)</title><rect x="61.0" y="867.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 1.54%)</title><rect x="61.0" y="851.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 1.54%)</title><rect x="61.0" y="835.0" width="18.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.0" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 1.54%)</title><rect x="61.0" y="819.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.0" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.31%)</title><rect x="71.9" y="803.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.31%)</title><rect x="71.9" y="787.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.31%)</title><rect x="71.9" y="771.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.31%)</title><rect x="71.9" y="755.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.9" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays$ArrayList.toArray (1 samples, 0.31%)</title><rect x="75.6" y="803.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="75.6" y="787.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="78.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.31%)</title><rect x="75.6" y="771.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="78.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.31%)</title><rect x="75.6" y="755.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="78.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.31%)</title><rect x="79.2" y="899.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.31%)</title><rect x="79.2" y="883.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.31%)</title><rect x="79.2" y="867.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.31%)</title><rect x="79.2" y="851.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.93%)</title><rect x="82.8" y="931.0" width="11.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.93%)</title><rect x="82.8" y="915.0" width="11.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.62%)</title><rect x="82.8" y="899.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="85.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.31%)</title><rect x="82.8" y="883.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.31%)</title><rect x="82.8" y="867.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="85.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.31%)</title><rect x="86.5" y="883.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.31%)</title><rect x="86.5" y="867.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.5" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.31%)</title><rect x="86.5" y="851.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.5" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (1 samples, 0.31%)</title><rect x="86.5" y="835.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="89.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.31%)</title><rect x="90.1" y="899.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.31%)</title><rect x="90.1" y="883.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.1" y="894.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.31%)</title><rect x="90.1" y="867.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.31%)</title><rect x="90.1" y="851.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.1" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.31%)</title><rect x="90.1" y="835.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.1" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.31%)</title><rect x="90.1" y="819.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.31%)</title><rect x="93.8" y="947.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.31%)</title><rect x="93.8" y="931.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.31%)</title><rect x="93.8" y="915.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.31%)</title><rect x="93.8" y="899.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/262593772.accept (1 samples, 0.31%)</title><rect x="93.8" y="883.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.31%)</title><rect x="93.8" y="867.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.31%)</title><rect x="93.8" y="851.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.31%)</title><rect x="93.8" y="835.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.31%)</title><rect x="97.4" y="947.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.31%)</title><rect x="97.4" y="931.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.31%)</title><rect x="97.4" y="915.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.31%)</title><rect x="97.4" y="899.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.31%)</title><rect x="97.4" y="883.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseSchema (1 samples, 0.31%)</title><rect x="97.4" y="867.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.schemaFor (1 samples, 0.31%)</title><rect x="97.4" y="851.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.4" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.31%)</title><rect x="97.4" y="835.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.4" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.31%)</title><rect x="97.4" y="819.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (157 samples, 48.46%)</title><rect x="101.0" y="1027.0" width="571.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="104.0" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (157 samples, 48.46%)</title><rect x="101.0" y="1011.0" width="571.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="104.0" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (157 samples, 48.46%)</title><rect x="101.0" y="995.0" width="571.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.0" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/302039048.run (142 samples, 43.83%)</title><rect x="101.0" y="979.0" width="517.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="104.0" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$2..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (142 samples, 43.83%)</title><rect x="101.0" y="963.0" width="517.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.0" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$pu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (142 samples, 43.83%)</title><rect x="101.0" y="947.0" width="517.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.0" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="101.0" y="931.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="104.0" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="101.0" y="915.0" width="3.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="104.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (140 samples, 43.21%)</title><rect x="104.7" y="931.0" width="509.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.7" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (9 samples, 2.78%)</title><rect x="112.0" y="915.0" width="32.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.0" y="926.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.16%)</title><rect x="119.3" y="899.0" width="25.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.3" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 2.16%)</title><rect x="119.3" y="883.0" width="25.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.3" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.16%)</title><rect x="119.3" y="867.0" width="25.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.3" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.16%)</title><rect x="119.3" y="851.0" width="25.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.3" y="862.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$298/1018756550.accept (7 samples, 2.16%)</title><rect x="119.3" y="835.0" width="25.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="122.3" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (7 samples, 2.16%)</title><rect x="119.3" y="819.0" width="25.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.3" y="830.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 2.16%)</title><rect x="119.3" y="803.0" width="25.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.3" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 1.54%)</title><rect x="126.5" y="787.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.23%)</title><rect x="130.2" y="771.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.62%)</title><rect x="130.2" y="755.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.62%)</title><rect x="130.2" y="739.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/165941758.accept (1 samples, 0.31%)</title><rect x="130.2" y="723.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/659321748.accept (1 samples, 0.31%)</title><rect x="133.8" y="723.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.62%)</title><rect x="137.5" y="755.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/659321748.accept (1 samples, 0.31%)</title><rect x="137.5" y="739.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="140.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.31%)</title><rect x="141.1" y="739.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="144.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (28 samples, 8.64%)</title><rect x="144.8" y="915.0" width="101.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="147.8" y="926.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (28 samples, 8.64%)</title><rect x="144.8" y="899.0" width="101.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.8" y="910.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (28 samples, 8.64%)</title><rect x="144.8" y="883.0" width="101.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.8" y="894.0">com/linecorp..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="144.8" y="867.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="147.8" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="144.8" y="851.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="147.8" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="144.8" y="835.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="147.8" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="144.8" y="819.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="147.8" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.31%)</title><rect x="144.8" y="803.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="147.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 8.33%)</title><rect x="148.4" y="867.0" width="98.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.4" y="878.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 8.33%)</title><rect x="148.4" y="851.0" width="98.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.4" y="862.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (27 samples, 8.33%)</title><rect x="148.4" y="835.0" width="98.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.4" y="846.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (13 samples, 4.01%)</title><rect x="148.4" y="819.0" width="47.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.4" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (9 samples, 2.78%)</title><rect x="148.4" y="803.0" width="32.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.4" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 2.78%)</title><rect x="148.4" y="787.0" width="32.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.4" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (6 samples, 1.85%)</title><rect x="148.4" y="771.0" width="21.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.4" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.93%)</title><rect x="170.2" y="771.0" width="11.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.2" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.31%)</title><rect x="177.5" y="755.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.23%)</title><rect x="181.2" y="803.0" width="14.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.2" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="181.2" y="787.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="184.2" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="181.2" y="771.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="184.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="181.2" y="755.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="184.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.93%)</title><rect x="184.8" y="787.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="184.8" y="771.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="187.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="184.8" y="755.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="187.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="184.8" y="739.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="187.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="184.8" y="723.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="187.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.62%)</title><rect x="188.5" y="771.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (12 samples, 3.70%)</title><rect x="195.7" y="819.0" width="43.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.7" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.62%)</title><rect x="195.7" y="803.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.62%)</title><rect x="195.7" y="787.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.62%)</title><rect x="195.7" y="771.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.62%)</title><rect x="195.7" y="755.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.62%)</title><rect x="195.7" y="739.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.62%)</title><rect x="203.0" y="803.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.62%)</title><rect x="203.0" y="787.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.62%)</title><rect x="203.0" y="771.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.31%)</title><rect x="206.7" y="755.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.31%)</title><rect x="206.7" y="739.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (8 samples, 2.47%)</title><rect x="210.3" y="803.0" width="29.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.3" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 2.47%)</title><rect x="210.3" y="787.0" width="29.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.3" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.47%)</title><rect x="210.3" y="771.0" width="29.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.3" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.47%)</title><rect x="210.3" y="755.0" width="29.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.3" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.47%)</title><rect x="210.3" y="739.0" width="29.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.3" y="750.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.23%)</title><rect x="214.0" y="723.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.31%)</title><rect x="224.9" y="707.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.31%)</title><rect x="224.9" y="691.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.31%)</title><rect x="224.9" y="675.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.31%)</title><rect x="224.9" y="659.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.31%)</title><rect x="228.5" y="723.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.31%)</title><rect x="228.5" y="707.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.31%)</title><rect x="228.5" y="691.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.31%)</title><rect x="228.5" y="675.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.5" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.31%)</title><rect x="228.5" y="659.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.31%)</title><rect x="232.2" y="723.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.31%)</title><rect x="232.2" y="707.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.31%)</title><rect x="232.2" y="691.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.31%)</title><rect x="235.8" y="723.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.62%)</title><rect x="239.4" y="819.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.62%)</title><rect x="239.4" y="803.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.62%)</title><rect x="239.4" y="787.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.62%)</title><rect x="239.4" y="771.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.31%)</title><rect x="243.1" y="755.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (101 samples, 31.17%)</title><rect x="246.7" y="915.0" width="367.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.7" y="926.0">com/linecorp/decaton/processor/runtime/internal/Pr..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="257.7" y="899.0" width="3.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="260.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (7 samples, 2.16%)</title><rect x="261.3" y="899.0" width="25.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.3" y="910.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 1.85%)</title><rect x="264.9" y="883.0" width="21.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.9" y="894.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 1.85%)</title><rect x="264.9" y="867.0" width="21.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.9" y="878.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.62%)</title><rect x="279.5" y="851.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.62%)</title><rect x="279.5" y="835.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.62%)</title><rect x="279.5" y="819.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.62%)</title><rect x="286.8" y="899.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.8" y="910.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.62%)</title><rect x="286.8" y="883.0" width="7.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (21 samples, 6.48%)</title><rect x="294.1" y="899.0" width="76.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.1" y="910.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (20 samples, 6.17%)</title><rect x="294.1" y="883.0" width="72.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.1" y="894.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 3.09%)</title><rect x="301.4" y="867.0" width="36.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.4" y="878.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.23%)</title><rect x="308.6" y="851.0" width="14.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.6" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.23%)</title><rect x="308.6" y="835.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.6" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.62%)</title><rect x="312.3" y="819.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="315.3" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.62%)</title><rect x="312.3" y="803.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.3" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.62%)</title><rect x="312.3" y="787.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.62%)</title><rect x="312.3" y="771.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="315.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.31%)</title><rect x="312.3" y="755.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="315.3" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.31%)</title><rect x="312.3" y="739.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="315.3" y="750.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.31%)</title><rect x="312.3" y="723.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="315.3" y="734.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.31%)</title><rect x="312.3" y="707.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="315.3" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.31%)</title><rect x="315.9" y="755.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="318.9" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.31%)</title><rect x="319.6" y="819.0" width="3.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="322.6" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 1.23%)</title><rect x="323.2" y="851.0" width="14.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="326.2" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.47%)</title><rect x="337.8" y="867.0" width="29.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.8" y="878.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.47%)</title><rect x="337.8" y="851.0" width="29.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.8" y="862.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 2.47%)</title><rect x="337.8" y="835.0" width="29.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.8" y="846.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 1.85%)</title><rect x="345.1" y="819.0" width="21.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.1" y="830.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.93%)</title><rect x="356.0" y="803.0" width="10.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="359.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.62%)</title><rect x="356.0" y="787.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.0" y="798.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.31%)</title><rect x="363.3" y="787.0" width="3.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="366.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.31%)</title><rect x="366.9" y="883.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="369.9" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.31%)</title><rect x="366.9" y="867.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="369.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.31%)</title><rect x="366.9" y="851.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.31%)</title><rect x="366.9" y="835.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (63 samples, 19.44%)</title><rect x="370.6" y="899.0" width="229.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="373.6" y="910.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (63 samples, 19.44%)</title><rect x="370.6" y="883.0" width="229.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="373.6" y="894.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.31%)</title><rect x="374.2" y="867.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="377.2" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.31%)</title><rect x="374.2" y="851.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="377.2" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.31%)</title><rect x="374.2" y="835.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="377.2" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.31%)</title><rect x="374.2" y="819.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="377.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/893555317.process (51 samples, 15.74%)</title><rect x="377.8" y="867.0" width="185.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.8" y="878.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (50 samples, 15.43%)</title><rect x="381.5" y="851.0" width="182.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="384.5" y="862.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (49 samples, 15.12%)</title><rect x="385.1" y="835.0" width="178.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.1" y="846.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.23%)</title><rect x="385.1" y="819.0" width="14.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.1" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.23%)</title><rect x="385.1" y="803.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.1" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.23%)</title><rect x="385.1" y="787.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.1" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.62%)</title><rect x="392.4" y="771.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (45 samples, 13.89%)</title><rect x="399.7" y="819.0" width="163.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="402.7" y="830.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (45 samples, 13.89%)</title><rect x="399.7" y="803.0" width="163.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.7" y="814.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (40 samples, 12.35%)</title><rect x="410.6" y="787.0" width="145.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="413.6" y="798.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.31%)</title><rect x="428.8" y="771.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="431.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.93%)</title><rect x="432.5" y="771.0" width="10.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="435.5" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.62%)</title><rect x="443.4" y="771.0" width="7.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="446.4" y="782.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.62%)</title><rect x="443.4" y="755.0" width="7.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="446.4" y="766.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 8.95%)</title><rect x="450.7" y="771.0" width="105.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="453.7" y="782.0">os::sleep(Thr..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.62%)</title><rect x="468.9" y="755.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="471.9" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="476.2" y="755.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="479.2" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="476.2" y="739.0" width="3.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="479.2" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 2.16%)</title><rect x="479.8" y="755.0" width="25.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="482.8" y="766.0">_..</text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.31%)</title><rect x="505.3" y="755.0" width="3.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="508.3" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 3.09%)</title><rect x="509.0" y="755.0" width="36.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="512.0" y="766.0">__p..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.31%)</title><rect x="545.4" y="755.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="548.4" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.62%)</title><rect x="549.0" y="755.0" width="7.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="552.0" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.31%)</title><rect x="556.3" y="787.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="559.3" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.31%)</title><rect x="559.9" y="787.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="562.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 1.54%)</title><rect x="563.6" y="867.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="566.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.93%)</title><rect x="570.9" y="851.0" width="10.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.23%)</title><rect x="581.8" y="867.0" width="14.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="584.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.23%)</title><rect x="581.8" y="851.0" width="14.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="584.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.23%)</title><rect x="581.8" y="835.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="584.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.23%)</title><rect x="581.8" y="819.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="584.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.23%)</title><rect x="581.8" y="803.0" width="14.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="584.8" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.31%)</title><rect x="592.7" y="787.0" width="3.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="595.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.31%)</title><rect x="596.4" y="867.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="599.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.23%)</title><rect x="600.0" y="899.0" width="14.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="603.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.23%)</title><rect x="600.0" y="883.0" width="14.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="603.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.23%)</title><rect x="600.0" y="867.0" width="14.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="603.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.31%)</title><rect x="600.0" y="851.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.31%)</title><rect x="600.0" y="835.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/2059447330.accept (1 samples, 0.31%)</title><rect x="600.0" y="819.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.93%)</title><rect x="603.6" y="851.0" width="11.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="606.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/2059447330.accept (2 samples, 0.62%)</title><rect x="607.3" y="835.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="610.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (2 samples, 0.62%)</title><rect x="607.3" y="819.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="610.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.62%)</title><rect x="607.3" y="803.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.3" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.62%)</title><rect x="607.3" y="787.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="610.3" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.62%)</title><rect x="607.3" y="771.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.3" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.31%)</title><rect x="610.9" y="755.0" width="3.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="613.9" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.31%)</title><rect x="610.9" y="739.0" width="3.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="613.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.31%)</title><rect x="614.6" y="931.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="617.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.93%)</title><rect x="618.2" y="979.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="621.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.93%)</title><rect x="618.2" y="963.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="621.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.93%)</title><rect x="618.2" y="947.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="621.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.93%)</title><rect x="618.2" y="931.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="621.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 3.70%)</title><rect x="629.1" y="979.0" width="43.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.1" y="990.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 3.70%)</title><rect x="629.1" y="963.0" width="43.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="632.1" y="974.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.62%)</title><rect x="629.1" y="947.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="632.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.62%)</title><rect x="629.1" y="931.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.62%)</title><rect x="629.1" y="915.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.62%)</title><rect x="629.1" y="899.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.62%)</title><rect x="629.1" y="883.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 3.09%)</title><rect x="636.4" y="947.0" width="36.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="639.4" y="958.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 3.09%)</title><rect x="636.4" y="931.0" width="36.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.4" y="942.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 3.09%)</title><rect x="636.4" y="915.0" width="36.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.4" y="926.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 3.09%)</title><rect x="636.4" y="899.0" width="36.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.4" y="910.0">jav..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.62%)</title><rect x="672.8" y="1027.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="675.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.access$500 (1 samples, 0.31%)</title><rect x="672.8" y="1011.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.31%)</title><rect x="676.5" y="1011.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="679.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.31%)</title><rect x="676.5" y="995.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="679.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.31%)</title><rect x="676.5" y="979.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.31%)</title><rect x="676.5" y="963.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="679.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.31%)</title><rect x="676.5" y="947.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="679.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.31%)</title><rect x="676.5" y="931.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.31%)</title><rect x="676.5" y="915.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="679.5" y="926.0"></text>
</g>
<g>
<title>start_thread (140 samples, 43.21%)</title><rect x="680.1" y="1027.0" width="509.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="683.1" y="1038.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (140 samples, 43.21%)</title><rect x="680.1" y="1011.0" width="509.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="683.1" y="1022.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 3.09%)</title><rect x="680.1" y="995.0" width="36.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="683.1" y="1006.0">Gan..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.62%)</title><rect x="680.1" y="979.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="683.1" y="990.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.62%)</title><rect x="680.1" y="963.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="683.1" y="974.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.31%)</title><rect x="680.1" y="947.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="683.1" y="958.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.31%)</title><rect x="683.8" y="947.0" width="3.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="686.8" y="958.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 2.47%)</title><rect x="687.4" y="979.0" width="29.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="690.4" y="990.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 2.47%)</title><rect x="687.4" y="963.0" width="29.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="690.4" y="974.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 2.47%)</title><rect x="687.4" y="947.0" width="29.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="690.4" y="958.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.54%)</title><rect x="698.3" y="931.0" width="18.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="701.3" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.31%)</title><rect x="712.9" y="915.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="715.9" y="926.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.31%)</title><rect x="712.9" y="899.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="715.9" y="910.0"></text>
</g>
<g>
<title>JavaThread::run() (130 samples, 40.12%)</title><rect x="716.5" y="995.0" width="473.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="719.5" y="1006.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (130 samples, 40.12%)</title><rect x="716.5" y="979.0" width="473.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="719.5" y="990.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (130 samples, 40.12%)</title><rect x="716.5" y="963.0" width="473.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="719.5" y="974.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (129 samples, 39.81%)</title><rect x="716.5" y="947.0" width="469.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="719.5" y="958.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (126 samples, 38.89%)</title><rect x="716.5" y="931.0" width="458.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="719.5" y="942.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (126 samples, 38.89%)</title><rect x="716.5" y="915.0" width="458.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="719.5" y="926.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, boo..</text>
</g>
<g>
<title>Compile::Code_Gen() (36 samples, 11.11%)</title><rect x="716.5" y="899.0" width="131.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="719.5" y="910.0">Compile::Code_Ge..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.62%)</title><rect x="716.5" y="883.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="719.5" y="894.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.31%)</title><rect x="716.5" y="867.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="719.5" y="878.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.31%)</title><rect x="720.2" y="867.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="723.2" y="878.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.31%)</title><rect x="720.2" y="851.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="723.2" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.62%)</title><rect x="723.8" y="883.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="726.8" y="894.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.31%)</title><rect x="723.8" y="867.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.8" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.31%)</title><rect x="723.8" y="851.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="726.8" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.31%)</title><rect x="723.8" y="835.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="726.8" y="846.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.31%)</title><rect x="727.5" y="867.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="730.5" y="878.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.31%)</title><rect x="727.5" y="851.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="730.5" y="862.0"></text>
</g>
<g>
<title>Relocation::type() (1 samples, 0.31%)</title><rect x="727.5" y="835.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="730.5" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.23%)</title><rect x="731.1" y="883.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="734.1" y="894.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.23%)</title><rect x="731.1" y="867.0" width="14.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.1" y="878.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.62%)</title><rect x="734.8" y="851.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="737.8" y="862.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.31%)</title><rect x="742.0" y="851.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="745.0" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.31%)</title><rect x="742.0" y="835.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="745.0" y="846.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.31%)</title><rect x="742.0" y="819.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="745.0" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.31%)</title><rect x="742.0" y="803.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="745.0" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.31%)</title><rect x="742.0" y="787.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="745.0" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.62%)</title><rect x="745.7" y="883.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="748.7" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.62%)</title><rect x="745.7" y="867.0" width="7.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="748.7" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.31%)</title><rect x="745.7" y="851.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="748.7" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.31%)</title><rect x="745.7" y="835.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="748.7" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.31%)</title><rect x="749.3" y="851.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="752.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 8.02%)</title><rect x="753.0" y="883.0" width="94.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="756.0" y="894.0">PhaseChaiti..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.62%)</title><rect x="753.0" y="867.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="756.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.62%)</title><rect x="760.2" y="867.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="763.2" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.62%)</title><rect x="760.2" y="851.0" width="7.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="763.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.93%)</title><rect x="767.5" y="867.0" width="11.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="770.5" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.62%)</title><rect x="771.2" y="851.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="774.2" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="774.8" y="835.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.62%)</title><rect x="778.5" y="867.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="781.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.54%)</title><rect x="785.7" y="867.0" width="18.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="788.7" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="796.7" y="851.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="799.7" y="862.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.31%)</title><rect x="800.3" y="851.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="803.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.31%)</title><rect x="804.0" y="867.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="807.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.31%)</title><rect x="804.0" y="851.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="807.0" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="804.0" y="835.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="807.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.31%)</title><rect x="807.6" y="867.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="810.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.31%)</title><rect x="811.2" y="867.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="814.2" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.62%)</title><rect x="814.9" y="867.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="817.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.31%)</title><rect x="818.5" y="851.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="821.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.31%)</title><rect x="818.5" y="835.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="821.5" y="846.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.31%)</title><rect x="822.2" y="867.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="825.2" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.31%)</title><rect x="822.2" y="851.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="825.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.31%)</title><rect x="822.2" y="835.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="825.2" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.31%)</title><rect x="825.8" y="867.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="828.8" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.31%)</title><rect x="825.8" y="851.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="828.8" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.31%)</title><rect x="829.4" y="867.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="832.4" y="878.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.31%)</title><rect x="829.4" y="851.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="832.4" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.31%)</title><rect x="833.1" y="867.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="836.1" y="878.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.31%)</title><rect x="833.1" y="851.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="836.1" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.93%)</title><rect x="836.7" y="867.0" width="11.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.7" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.31%)</title><rect x="840.4" y="851.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="843.4" y="862.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.31%)</title><rect x="844.0" y="851.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="847.0" y="862.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.31%)</title><rect x="844.0" y="835.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="847.0" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (81 samples, 25.00%)</title><rect x="847.7" y="899.0" width="295.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="850.7" y="910.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.31%)</title><rect x="847.7" y="883.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="850.7" y="894.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.31%)</title><rect x="847.7" y="867.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="850.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 1.54%)</title><rect x="851.3" y="883.0" width="18.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="854.3" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 1.54%)</title><rect x="851.3" y="867.0" width="18.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="854.3" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 1.23%)</title><rect x="854.9" y="851.0" width="14.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="857.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 1.23%)</title><rect x="854.9" y="835.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="857.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.62%)</title><rect x="854.9" y="819.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="857.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.62%)</title><rect x="854.9" y="803.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="857.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.62%)</title><rect x="854.9" y="787.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="854.9" y="771.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="857.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="854.9" y="755.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="857.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="854.9" y="739.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="854.9" y="723.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="857.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="854.9" y="707.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="857.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.31%)</title><rect x="854.9" y="691.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="857.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="771.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="861.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="755.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="861.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="739.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="723.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="707.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="861.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="691.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="861.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="675.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="861.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="659.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="643.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="861.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="627.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="611.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="861.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="595.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="861.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="579.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="861.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="563.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="861.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="547.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="861.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="531.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="861.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="515.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="861.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="499.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="861.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="483.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="861.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="467.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.31%)</title><rect x="858.6" y="451.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="861.6" y="462.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.31%)</title><rect x="858.6" y="435.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="861.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.62%)</title><rect x="862.2" y="819.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="865.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.31%)</title><rect x="862.2" y="803.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="865.2" y="814.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.31%)</title><rect x="862.2" y="787.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="865.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="803.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="868.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="787.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="868.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="771.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="868.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="755.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="868.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="739.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="868.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="723.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="868.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="707.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="868.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="691.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="675.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="868.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="659.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="868.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="643.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="868.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="627.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="868.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="611.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="868.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="595.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="868.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.31%)</title><rect x="865.9" y="579.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="868.9" y="590.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.31%)</title><rect x="865.9" y="563.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="868.9" y="574.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.31%)</title><rect x="869.5" y="883.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="872.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (62 samples, 19.14%)</title><rect x="873.1" y="883.0" width="225.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="876.1" y="894.0">PhaseIdealLoop::build_and_opti..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.93%)</title><rect x="873.1" y="867.0" width="11.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="876.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.31%)</title><rect x="884.1" y="867.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="887.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (55 samples, 16.98%)</title><rect x="887.7" y="867.0" width="200.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.7" y="878.0">PhaseIdealLoop::build_loop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (54 samples, 16.67%)</title><rect x="891.4" y="851.0" width="196.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="894.4" y="862.0">PhaseIdealLoop::build_loop..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (54 samples, 16.67%)</title><rect x="891.4" y="835.0" width="196.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.4" y="846.0">PhaseIdealLoop::get_late_c..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (14 samples, 4.32%)</title><rect x="1037.0" y="819.0" width="51.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.0" y="830.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.31%)</title><rect x="1088.0" y="867.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.31%)</title><rect x="1091.7" y="867.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.31%)</title><rect x="1091.7" y="851.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.7" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.31%)</title><rect x="1095.3" y="867.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.3" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.31%)</title><rect x="1095.3" y="851.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.3" y="862.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1095.3" y="835.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.3" y="846.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.31%)</title><rect x="1095.3" y="819.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.3" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.31%)</title><rect x="1095.3" y="803.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.3" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.31%)</title><rect x="1095.3" y="787.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.3" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 3.09%)</title><rect x="1099.0" y="883.0" width="36.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.0" y="894.0">Pha..</text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.31%)</title><rect x="1099.0" y="867.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.0" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 2.47%)</title><rect x="1102.6" y="867.0" width="29.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.6" y="878.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1102.6" y="851.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.6" y="862.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1102.6" y="835.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.6" y="846.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1106.2" y="851.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.2" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.31%)</title><rect x="1106.2" y="835.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.2" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.31%)</title><rect x="1106.2" y="819.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.2" y="830.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.31%)</title><rect x="1106.2" y="803.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.2" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.93%)</title><rect x="1109.9" y="851.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.9" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.31%)</title><rect x="1117.2" y="835.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.2" y="846.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.31%)</title><rect x="1117.2" y="819.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.2" y="830.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1120.8" y="851.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.8" y="862.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.31%)</title><rect x="1124.4" y="851.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.4" y="862.0"></text>
</g>
<g>
<title>TypeNarrowPtr::filter_helper(Type const*, bool) const (1 samples, 0.31%)</title><rect x="1124.4" y="835.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.4" y="846.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.31%)</title><rect x="1124.4" y="819.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.4" y="830.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.31%)</title><rect x="1124.4" y="803.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.4" y="814.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.31%)</title><rect x="1124.4" y="787.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.4" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.31%)</title><rect x="1124.4" y="771.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.4" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1128.1" y="851.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.1" y="862.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.31%)</title><rect x="1128.1" y="835.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.1" y="846.0"></text>
</g>
<g>
<title>PhiNode::simple_data_loop_check(Node*) const (1 samples, 0.31%)</title><rect x="1128.1" y="819.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.1" y="830.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.31%)</title><rect x="1131.7" y="867.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.7" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.62%)</title><rect x="1135.4" y="883.0" width="7.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.4" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.31%)</title><rect x="1135.4" y="867.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.31%)</title><rect x="1135.4" y="851.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.4" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.31%)</title><rect x="1135.4" y="835.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.4" y="846.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.31%)</title><rect x="1135.4" y="819.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.4" y="830.0"></text>
</g>
<g>
<title>TypeRawPtr::hash() const (1 samples, 0.31%)</title><rect x="1135.4" y="803.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.4" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.31%)</title><rect x="1139.0" y="867.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.0" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.31%)</title><rect x="1139.0" y="851.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.0" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.31%)</title><rect x="1139.0" y="835.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.0" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.31%)</title><rect x="1139.0" y="819.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.0" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.31%)</title><rect x="1139.0" y="803.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.0" y="814.0"></text>
</g>
<g>
<title>Node::init_req(unsigned int, Node*) (1 samples, 0.31%)</title><rect x="1139.0" y="787.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.0" y="798.0"></text>
</g>
<g>
<title>Compile::print_method(CompilerPhaseType, int) (1 samples, 0.31%)</title><rect x="1142.7" y="899.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.7" y="910.0"></text>
</g>
<g>
<title>Ticks::stamp() (1 samples, 0.31%)</title><rect x="1142.7" y="883.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.7" y="894.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.31%)</title><rect x="1142.7" y="867.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.54%)</title><rect x="1146.3" y="899.0" width="18.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.54%)</title><rect x="1146.3" y="883.0" width="18.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.54%)</title><rect x="1146.3" y="867.0" width="18.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.54%)</title><rect x="1146.3" y="851.0" width="18.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.54%)</title><rect x="1146.3" y="835.0" width="18.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.23%)</title><rect x="1146.3" y="819.0" width="14.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.3" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.23%)</title><rect x="1146.3" y="803.0" width="14.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.23%)</title><rect x="1146.3" y="787.0" width="14.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.23%)</title><rect x="1146.3" y="771.0" width="14.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.23%)</title><rect x="1146.3" y="755.0" width="14.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.23%)</title><rect x="1146.3" y="739.0" width="14.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.23%)</title><rect x="1146.3" y="723.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.3" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.62%)</title><rect x="1146.3" y="707.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.3" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.62%)</title><rect x="1146.3" y="691.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.62%)</title><rect x="1146.3" y="675.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.62%)</title><rect x="1146.3" y="659.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.62%)</title><rect x="1146.3" y="643.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.62%)</title><rect x="1146.3" y="627.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.3" y="638.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.31%)</title><rect x="1146.3" y="611.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.3" y="622.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.31%)</title><rect x="1146.3" y="595.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.3" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.31%)</title><rect x="1146.3" y="579.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1149.9" y="611.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1149.9" y="595.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1149.9" y="579.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1149.9" y="563.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1149.9" y="547.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1149.9" y="531.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1149.9" y="515.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1149.9" y="499.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1149.9" y="483.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1149.9" y="467.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1149.9" y="451.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1149.9" y="435.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1149.9" y="419.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1149.9" y="403.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1149.9" y="387.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1149.9" y="371.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1149.9" y="355.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1149.9" y="339.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1149.9" y="323.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1149.9" y="307.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1149.9" y="291.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1149.9" y="275.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1149.9" y="259.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1149.9" y="243.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1149.9" y="227.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1149.9" y="211.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1149.9" y="195.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1149.9" y="179.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1149.9" y="163.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1149.9" y="147.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.9" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1149.9" y="131.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.9" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1149.9" y="115.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1149.9" y="99.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1149.9" y="83.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1149.9" y="67.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.9" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.62%)</title><rect x="1153.6" y="707.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.62%)</title><rect x="1153.6" y="691.0" width="7.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.62%)</title><rect x="1153.6" y="675.0" width="7.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.62%)</title><rect x="1153.6" y="659.0" width="7.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.62%)</title><rect x="1153.6" y="643.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.62%)</title><rect x="1153.6" y="627.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.62%)</title><rect x="1153.6" y="611.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.62%)</title><rect x="1153.6" y="595.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.62%)</title><rect x="1153.6" y="579.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.62%)</title><rect x="1153.6" y="563.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.62%)</title><rect x="1153.6" y="547.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.62%)</title><rect x="1153.6" y="531.0" width="7.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.62%)</title><rect x="1153.6" y="515.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.62%)</title><rect x="1153.6" y="499.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.62%)</title><rect x="1153.6" y="483.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.62%)</title><rect x="1153.6" y="467.0" width="7.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.62%)</title><rect x="1153.6" y="451.0" width="7.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.62%)</title><rect x="1153.6" y="435.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.62%)</title><rect x="1153.6" y="419.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1153.6" y="403.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.6" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1153.6" y="387.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1153.6" y="371.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1153.6" y="355.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1153.6" y="339.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.31%)</title><rect x="1153.6" y="323.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.31%)</title><rect x="1153.6" y="307.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.6" y="318.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.31%)</title><rect x="1153.6" y="291.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="302.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.31%)</title><rect x="1153.6" y="275.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.31%)</title><rect x="1153.6" y="259.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.6" y="270.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.31%)</title><rect x="1153.6" y="243.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="254.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.31%)</title><rect x="1153.6" y="227.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.6" y="238.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.31%)</title><rect x="1153.6" y="211.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.6" y="222.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.31%)</title><rect x="1153.6" y="195.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.6" y="206.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.31%)</title><rect x="1153.6" y="179.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.6" y="190.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.31%)</title><rect x="1153.6" y="163.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.6" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1157.2" y="403.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1157.2" y="387.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1157.2" y="371.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1157.2" y="355.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1157.2" y="339.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1157.2" y="323.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1157.2" y="307.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1157.2" y="291.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.2" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1157.2" y="275.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1157.2" y="259.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1157.2" y="243.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1157.2" y="227.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.31%)</title><rect x="1157.2" y="211.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.2" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1157.2" y="195.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.2" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.31%)</title><rect x="1157.2" y="179.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.31%)</title><rect x="1157.2" y="163.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.31%)</title><rect x="1157.2" y="147.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.31%)</title><rect x="1157.2" y="131.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.31%)</title><rect x="1157.2" y="115.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.31%)</title><rect x="1157.2" y="99.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="110.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.31%)</title><rect x="1157.2" y="83.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.2" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.31%)</title><rect x="1157.2" y="67.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.2" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.31%)</title><rect x="1157.2" y="51.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.2" y="62.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.31%)</title><rect x="1157.2" y="35.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_monitor_enter() (1 samples, 0.31%)</title><rect x="1160.9" y="819.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="830.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.31%)</title><rect x="1160.9" y="803.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="814.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.31%)</title><rect x="1160.9" y="787.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.9" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.31%)</title><rect x="1160.9" y="771.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.9" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.31%)</title><rect x="1160.9" y="755.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="766.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.62%)</title><rect x="1164.5" y="899.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.5" y="910.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.31%)</title><rect x="1164.5" y="883.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="894.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.31%)</title><rect x="1168.1" y="883.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.1" y="894.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.31%)</title><rect x="1171.8" y="899.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="910.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.31%)</title><rect x="1171.8" y="883.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="894.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.31%)</title><rect x="1171.8" y="867.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.8" y="878.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.31%)</title><rect x="1171.8" y="851.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.8" y="862.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.31%)</title><rect x="1171.8" y="835.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.31%)</title><rect x="1171.8" y="819.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.93%)</title><rect x="1175.4" y="931.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="942.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.93%)</title><rect x="1175.4" y="915.0" width="11.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.4" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.93%)</title><rect x="1175.4" y="899.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.4" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.93%)</title><rect x="1175.4" y="883.0" width="11.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="894.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.62%)</title><rect x="1175.4" y="867.0" width="7.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="878.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.62%)</title><rect x="1175.4" y="851.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.4" y="862.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.62%)</title><rect x="1175.4" y="835.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.4" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.62%)</title><rect x="1175.4" y="819.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.31%)</title><rect x="1175.4" y="803.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.4" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.31%)</title><rect x="1175.4" y="787.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.4" y="798.0"></text>
</g>
<g>
<title>Instruction::operator new(unsigned long) (1 samples, 0.31%)</title><rect x="1179.1" y="803.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.31%)</title><rect x="1182.7" y="867.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.7" y="878.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.31%)</title><rect x="1182.7" y="851.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="862.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_handlers() (1 samples, 0.31%)</title><rect x="1182.7" y="835.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.7" y="846.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_edge(XHandler*, int, MoveResolver&amp;) (1 samples, 0.31%)</title><rect x="1182.7" y="819.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>LinearScan::resolve_exception_edge(XHandler*, int, int, Phi*, MoveResolver&amp;) (1 samples, 0.31%)</title><rect x="1182.7" y="803.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.31%)</title><rect x="1182.7" y="787.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="798.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.31%)</title><rect x="1186.4" y="947.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.4" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.31%)</title><rect x="1186.4" y="931.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.4" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.31%)</title><rect x="1186.4" y="915.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.4" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.31%)</title><rect x="1186.4" y="899.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.4" y="910.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.31%)</title><rect x="1186.4" y="883.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.4" y="894.0"></text>
</g>
</g>
</svg>
