<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="885"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="885"> </text>
<g id="frames">
<g>
<title>all (1,055 samples, 100.00%)</title><rect x="10.0" y="851.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="862.0">all</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="10.0" y="835.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="10.0" y="819.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (270 samples, 25.59%)</title><rect x="11.1" y="835.0" width="302.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="846.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (270 samples, 25.59%)</title><rect x="11.1" y="819.0" width="302.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="830.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (268 samples, 25.40%)</title><rect x="12.2" y="803.0" width="299.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="814.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.38%)</title><rect x="12.2" y="787.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.38%)</title><rect x="12.2" y="771.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.28%)</title><rect x="13.4" y="755.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.28%)</title><rect x="13.4" y="739.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.19%)</title><rect x="14.5" y="723.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.5" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.19%)</title><rect x="14.5" y="707.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.19%)</title><rect x="14.5" y="691.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="14.5" y="675.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.5" y="686.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="15.6" y="675.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="16.7" y="787.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="16.7" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.38%)</title><rect x="17.8" y="787.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.38%)</title><rect x="17.8" y="771.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.38%)</title><rect x="17.8" y="755.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/1379490540.accept (3 samples, 0.28%)</title><rect x="18.9" y="739.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.28%)</title><rect x="18.9" y="723.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.28%)</title><rect x="18.9" y="707.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.28%)</title><rect x="18.9" y="691.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.9" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="21.2" y="675.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.2" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="21.2" y="659.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (207 samples, 19.62%)</title><rect x="22.3" y="787.0" width="231.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.3" y="798.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$274/1353122448.accept (200 samples, 18.96%)</title><rect x="22.3" y="771.0" width="223.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.3" y="782.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (200 samples, 18.96%)</title><rect x="22.3" y="755.0" width="223.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.3" y="766.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (181 samples, 17.16%)</title><rect x="22.3" y="739.0" width="202.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.3" y="750.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (181 samples, 17.16%)</title><rect x="22.3" y="723.0" width="202.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.3" y="734.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (181 samples, 17.16%)</title><rect x="22.3" y="707.0" width="202.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.3" y="718.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (181 samples, 17.16%)</title><rect x="22.3" y="691.0" width="202.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.3" y="702.0">java/util/concurrent/Execu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (181 samples, 17.16%)</title><rect x="22.3" y="675.0" width="202.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.3" y="686.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (181 samples, 17.16%)</title><rect x="22.3" y="659.0" width="202.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.3" y="670.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (128 samples, 12.13%)</title><rect x="76.0" y="643.0" width="143.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.0" y="654.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (17 samples, 1.61%)</title><rect x="77.1" y="627.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (17 samples, 1.61%)</title><rect x="77.1" y="611.0" width="19.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.61%)</title><rect x="77.1" y="595.0" width="19.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.95%)</title><rect x="96.1" y="627.0" width="11.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (10 samples, 0.95%)</title><rect x="96.1" y="611.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.28%)</title><rect x="99.5" y="595.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.5" y="606.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.28%)</title><rect x="99.5" y="579.0" width="3.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="102.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.38%)</title><rect x="102.8" y="595.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (100 samples, 9.48%)</title><rect x="107.3" y="627.0" width="111.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.3" y="638.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (100 samples, 9.48%)</title><rect x="107.3" y="611.0" width="111.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.3" y="622.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (97 samples, 9.19%)</title><rect x="108.4" y="595.0" width="108.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.4" y="606.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (97 samples, 9.19%)</title><rect x="108.4" y="579.0" width="108.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.4" y="590.0">java/util/con..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (95 samples, 9.00%)</title><rect x="110.7" y="563.0" width="106.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="113.7" y="574.0">sun/misc/Unsa..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="111.8" y="547.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="114.8" y="558.0"></text>
</g>
<g>
<title>Unsafe_Unpark (89 samples, 8.44%)</title><rect x="112.9" y="547.0" width="99.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="115.9" y="558.0">Unsafe_Unpark</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="116.3" y="531.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="119.3" y="542.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.38%)</title><rect x="117.4" y="531.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="120.4" y="542.0"></text>
</g>
<g>
<title>__pthread_cond_signal (57 samples, 5.40%)</title><rect x="121.8" y="531.0" width="63.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="124.8" y="542.0">__pthre..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (7 samples, 0.66%)</title><rect x="185.6" y="531.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="188.6" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.61%)</title><rect x="193.4" y="531.0" width="19.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="196.4" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.19%)</title><rect x="212.4" y="547.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="215.4" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="214.7" y="547.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="217.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.19%)</title><rect x="216.9" y="595.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.19%)</title><rect x="219.2" y="643.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.19%)</title><rect x="219.2" y="627.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.19%)</title><rect x="219.2" y="611.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.28%)</title><rect x="221.4" y="643.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.28%)</title><rect x="221.4" y="627.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.28%)</title><rect x="221.4" y="611.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.09%)</title><rect x="222.5" y="595.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="223.6" y="595.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (14 samples, 1.33%)</title><rect x="224.7" y="739.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.33%)</title><rect x="224.7" y="723.0" width="15.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OffsetState.&lt;init&gt; (1 samples, 0.09%)</title><rect x="237.1" y="707.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="237.1" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="240.1" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="237.1" y="675.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="240.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.19%)</title><rect x="238.2" y="707.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.19%)</title><rect x="238.2" y="691.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.19%)</title><rect x="238.2" y="675.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.19%)</title><rect x="238.2" y="659.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.19%)</title><rect x="238.2" y="643.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.28%)</title><rect x="240.4" y="739.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.28%)</title><rect x="240.4" y="723.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.28%)</title><rect x="240.4" y="707.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.19%)</title><rect x="243.8" y="739.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.19%)</title><rect x="243.8" y="723.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.19%)</title><rect x="243.8" y="707.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.19%)</title><rect x="243.8" y="691.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.19%)</title><rect x="243.8" y="675.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.19%)</title><rect x="246.0" y="771.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.values (2 samples, 0.19%)</title><rect x="246.0" y="755.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.38%)</title><rect x="248.2" y="771.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.38%)</title><rect x="248.2" y="755.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.38%)</title><rect x="248.2" y="739.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.38%)</title><rect x="248.2" y="723.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="252.7" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="252.7" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (52 samples, 4.93%)</title><rect x="253.8" y="787.0" width="58.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.8" y="798.0">org/ap..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="253.8" y="771.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="256.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="253.8" y="755.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="256.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (51 samples, 4.83%)</title><rect x="254.9" y="771.0" width="57.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.9" y="782.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (29 samples, 2.75%)</title><rect x="254.9" y="755.0" width="32.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.9" y="766.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (29 samples, 2.75%)</title><rect x="254.9" y="739.0" width="32.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.9" y="750.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.75%)</title><rect x="254.9" y="723.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.9" y="734.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.46%)</title><rect x="254.9" y="707.0" width="29.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.9" y="718.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.46%)</title><rect x="254.9" y="691.0" width="29.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.9" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.95%)</title><rect x="257.2" y="675.0" width="11.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.47%)</title><rect x="261.7" y="659.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.47%)</title><rect x="261.7" y="643.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.47%)</title><rect x="261.7" y="627.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.47%)</title><rect x="261.7" y="611.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.47%)</title><rect x="261.7" y="595.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.47%)</title><rect x="261.7" y="579.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.47%)</title><rect x="261.7" y="563.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="267.3" y="659.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="267.3" y="643.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="267.3" y="627.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="267.3" y="611.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.3" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="267.3" y="595.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.33%)</title><rect x="268.4" y="675.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.33%)</title><rect x="268.4" y="659.0" width="15.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.57%)</title><rect x="268.4" y="643.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.4" y="654.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.57%)</title><rect x="268.4" y="627.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (8 samples, 0.76%)</title><rect x="275.1" y="643.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.1" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (8 samples, 0.76%)</title><rect x="275.1" y="627.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.09%)</title><rect x="284.0" y="707.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="284.0" y="691.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="287.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.0" y="675.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.0" y="659.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.19%)</title><rect x="285.1" y="707.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="288.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.19%)</title><rect x="285.1" y="691.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.09%)</title><rect x="285.1" y="675.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="285.1" y="659.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.1" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="285.1" y="643.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.3" y="675.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.3" y="659.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="286.3" y="643.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="286.3" y="627.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="286.3" y="611.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.09%)</title><rect x="286.3" y="595.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.95%)</title><rect x="287.4" y="755.0" width="11.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.85%)</title><rect x="287.4" y="739.0" width="10.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.66%)</title><rect x="287.4" y="723.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="288.5" y="707.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/262593772.accept (1 samples, 0.09%)</title><rect x="288.5" y="691.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="288.5" y="675.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="288.5" y="659.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="288.5" y="643.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="288.5" y="627.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="288.5" y="611.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="288.5" y="595.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="289.6" y="707.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="289.6" y="691.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.09%)</title><rect x="289.6" y="675.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="290.7" y="707.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="290.7" y="691.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.28%)</title><rect x="291.9" y="707.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.19%)</title><rect x="291.9" y="691.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.9" y="702.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="291.9" y="675.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="293.0" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="293.0" y="659.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="293.0" y="643.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="293.0" y="627.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="293.0" y="611.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="293.0" y="595.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="293.0" y="579.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="293.0" y="563.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="293.0" y="547.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/551479935.get (1 samples, 0.09%)</title><rect x="293.0" y="531.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.0" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="294.1" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="297.1" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="294.1" y="675.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="297.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.19%)</title><rect x="295.2" y="723.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.19%)</title><rect x="295.2" y="707.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.19%)</title><rect x="295.2" y="691.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.19%)</title><rect x="295.2" y="675.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.19%)</title><rect x="295.2" y="659.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$52/1541857308.get (1 samples, 0.09%)</title><rect x="296.3" y="643.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="299.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.09%)</title><rect x="296.3" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="297.5" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="297.5" y="723.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="297.5" y="707.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.57%)</title><rect x="298.6" y="755.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.38%)</title><rect x="298.6" y="739.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="298.6" y="723.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="298.6" y="707.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="298.6" y="691.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="301.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="298.6" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="298.6" y="659.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="298.6" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="298.6" y="627.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="298.6" y="611.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="298.6" y="595.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="298.6" y="579.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="298.6" y="563.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="298.6" y="547.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.read (1 samples, 0.09%)</title><rect x="298.6" y="531.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.6" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (1 samples, 0.09%)</title><rect x="298.6" y="515.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.6" y="526.0"></text>
</g>
<g>
<title>java/nio/Bits.getLong (1 samples, 0.09%)</title><rect x="298.6" y="499.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.6" y="510.0"></text>
</g>
<g>
<title>java/nio/Bits.getLongB (1 samples, 0.09%)</title><rect x="298.6" y="483.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.6" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer._get (1 samples, 0.09%)</title><rect x="298.6" y="467.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.28%)</title><rect x="299.7" y="723.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.28%)</title><rect x="299.7" y="707.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="302.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.19%)</title><rect x="299.7" y="691.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.19%)</title><rect x="299.7" y="675.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.19%)</title><rect x="299.7" y="659.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="302.7" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.19%)</title><rect x="299.7" y="643.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="302.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="301.9" y="691.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="301.9" y="675.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="301.9" y="659.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="301.9" y="643.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="301.9" y="627.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.9" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="301.9" y="611.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.9" y="622.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="301.9" y="595.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="304.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.19%)</title><rect x="303.0" y="739.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.19%)</title><rect x="303.0" y="723.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.19%)</title><rect x="303.0" y="707.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.19%)</title><rect x="303.0" y="691.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.19%)</title><rect x="303.0" y="675.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.19%)</title><rect x="303.0" y="659.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="303.0" y="643.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.0" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.09%)</title><rect x="303.0" y="627.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.0" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="303.0" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.09%)</title><rect x="304.2" y="643.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.09%)</title><rect x="304.2" y="627.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="304.2" y="611.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.write (1 samples, 0.09%)</title><rect x="304.2" y="595.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.09%)</title><rect x="304.2" y="579.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="307.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.09%)</title><rect x="304.2" y="563.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.09%)</title><rect x="304.2" y="547.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="307.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.09%)</title><rect x="304.2" y="531.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="307.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.09%)</title><rect x="304.2" y="515.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.09%)</title><rect x="304.2" y="499.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.38%)</title><rect x="305.3" y="755.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.38%)</title><rect x="305.3" y="739.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="305.3" y="723.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="308.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.28%)</title><rect x="306.4" y="723.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="309.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.09%)</title><rect x="306.4" y="707.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.09%)</title><rect x="306.4" y="691.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="309.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="306.4" y="675.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="309.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="306.4" y="659.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="309.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.19%)</title><rect x="307.5" y="707.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="308.6" y="691.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="308.6" y="675.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="308.6" y="659.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="308.6" y="643.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="308.6" y="627.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.6" y="638.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="308.6" y="611.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.6" y="622.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="308.6" y="595.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="311.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="308.6" y="579.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="308.6" y="563.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="308.6" y="547.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.6" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.09%)</title><rect x="308.6" y="531.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.6" y="542.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$187/554664133.accept (1 samples, 0.09%)</title><rect x="308.6" y="515.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="311.6" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="308.6" y="499.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.6" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="308.6" y="483.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.6" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="308.6" y="467.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.6" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="308.6" y="451.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.6" y="462.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="308.6" y="435.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="309.8" y="755.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="309.8" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="309.8" y="723.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="309.8" y="707.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="309.8" y="691.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="310.9" y="755.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="310.9" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="310.9" y="723.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="310.9" y="707.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.9" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="312.0" y="803.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.0" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.09%)</title><rect x="312.0" y="787.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (706 samples, 66.92%)</title><rect x="313.1" y="835.0" width="789.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.1" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (706 samples, 66.92%)</title><rect x="313.1" y="819.0" width="789.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.1" y="830.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (706 samples, 66.92%)</title><rect x="313.1" y="803.0" width="789.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.1" y="814.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/165941758.run (471 samples, 44.64%)</title><rect x="322.1" y="787.0" width="526.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.1" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (471 samples, 44.64%)</title><rect x="322.1" y="771.0" width="526.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.1" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (471 samples, 44.64%)</title><rect x="322.1" y="755.0" width="526.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.1" y="766.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (471 samples, 44.64%)</title><rect x="322.1" y="739.0" width="526.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.1" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="335.5" y="723.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="338.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="337.7" y="723.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 0.76%)</title><rect x="338.8" y="723.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 0.76%)</title><rect x="338.8" y="707.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.76%)</title><rect x="338.8" y="691.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="341.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.76%)</title><rect x="338.8" y="675.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.8" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.57%)</title><rect x="341.1" y="659.0" width="6.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="344.1" y="670.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.57%)</title><rect x="341.1" y="643.0" width="6.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="344.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (37 samples, 3.51%)</title><rect x="347.8" y="723.0" width="41.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.8" y="734.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (27 samples, 2.56%)</title><rect x="359.0" y="707.0" width="30.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="362.0" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (27 samples, 2.56%)</title><rect x="359.0" y="691.0" width="30.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="362.0" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (27 samples, 2.56%)</title><rect x="359.0" y="675.0" width="30.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.0" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="359.0" y="659.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.09%)</title><rect x="359.0" y="643.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="362.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.09%)</title><rect x="359.0" y="627.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (26 samples, 2.46%)</title><rect x="360.1" y="659.0" width="29.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.1" y="670.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/1557319018.accept (26 samples, 2.46%)</title><rect x="360.1" y="643.0" width="29.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.1" y="654.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (26 samples, 2.46%)</title><rect x="360.1" y="627.0" width="29.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.1" y="638.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (26 samples, 2.46%)</title><rect x="360.1" y="611.0" width="29.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="363.1" y="622.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (26 samples, 2.46%)</title><rect x="360.1" y="595.0" width="29.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.1" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (24 samples, 2.27%)</title><rect x="362.3" y="579.0" width="26.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.3" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.57%)</title><rect x="362.3" y="563.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.57%)</title><rect x="362.3" y="547.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="365.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/1168461221.accept (1 samples, 0.09%)</title><rect x="366.8" y="531.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.8" y="542.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="367.9" y="531.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="370.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.71%)</title><rect x="369.0" y="563.0" width="20.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/213449309.accept (1 samples, 0.09%)</title><rect x="388.0" y="547.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="391.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (146 samples, 13.84%)</title><rect x="389.2" y="723.0" width="163.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="392.2" y="734.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (146 samples, 13.84%)</title><rect x="389.2" y="707.0" width="163.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.2" y="718.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (146 samples, 13.84%)</title><rect x="389.2" y="691.0" width="163.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.2" y="702.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (146 samples, 13.84%)</title><rect x="389.2" y="675.0" width="163.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.2" y="686.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (146 samples, 13.84%)</title><rect x="389.2" y="659.0" width="163.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="392.2" y="670.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (146 samples, 13.84%)</title><rect x="389.2" y="643.0" width="163.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.2" y="654.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (47 samples, 4.45%)</title><rect x="389.2" y="627.0" width="52.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="392.2" y="638.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.76%)</title><rect x="398.1" y="611.0" width="9.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="401.1" y="622.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.76%)</title><rect x="398.1" y="595.0" width="9.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="401.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.19%)</title><rect x="407.1" y="611.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.19%)</title><rect x="407.1" y="595.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.19%)</title><rect x="407.1" y="579.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.1" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="407.1" y="563.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.1" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="407.1" y="547.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.1" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="407.1" y="531.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.1" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.19%)</title><rect x="407.1" y="515.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (29 samples, 2.75%)</title><rect x="409.3" y="611.0" width="32.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="412.3" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (29 samples, 2.75%)</title><rect x="409.3" y="595.0" width="32.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.3" y="606.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.09%)</title><rect x="414.9" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.9" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="414.9" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="417.9" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="414.9" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="417.9" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="414.9" y="531.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="417.9" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="414.9" y="515.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="417.9" y="526.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="414.9" y="499.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="417.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (22 samples, 2.09%)</title><rect x="416.0" y="579.0" width="24.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.0" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (22 samples, 2.09%)</title><rect x="416.0" y="563.0" width="24.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.0" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="416.0" y="547.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="419.0" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="416.0" y="531.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="419.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (21 samples, 1.99%)</title><rect x="417.1" y="547.0" width="23.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.1" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.09%)</title><rect x="440.6" y="579.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="443.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (86 samples, 8.15%)</title><rect x="441.7" y="627.0" width="96.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="444.7" y="638.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.28%)</title><rect x="444.0" y="611.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="447.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="447.3" y="611.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="450.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.57%)</title><rect x="448.4" y="611.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="451.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.47%)</title><rect x="449.6" y="595.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.23%)</title><rect x="455.2" y="611.0" width="14.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.04%)</title><rect x="457.4" y="595.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.66%)</title><rect x="461.9" y="579.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="464.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.38%)</title><rect x="465.2" y="563.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.2" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="465.2" y="547.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="468.2" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="465.2" y="531.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="468.2" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="465.2" y="515.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="468.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.28%)</title><rect x="466.3" y="547.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.19%)</title><rect x="469.7" y="611.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.7" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="469.7" y="595.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="472.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.09%)</title><rect x="470.8" y="595.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="473.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (59 samples, 5.59%)</title><rect x="471.9" y="611.0" width="66.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="474.9" y="622.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.19%)</title><rect x="471.9" y="595.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (57 samples, 5.40%)</title><rect x="474.2" y="595.0" width="63.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.2" y="606.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.71%)</title><rect x="474.2" y="579.0" width="20.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.76%)</title><rect x="474.2" y="563.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="477.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.76%)</title><rect x="474.2" y="547.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.76%)</title><rect x="474.2" y="531.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.85%)</title><rect x="483.1" y="563.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="493.2" y="563.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="493.2" y="547.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (39 samples, 3.70%)</title><rect x="494.3" y="579.0" width="43.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.3" y="590.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (39 samples, 3.70%)</title><rect x="494.3" y="563.0" width="43.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="497.3" y="574.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (39 samples, 3.70%)</title><rect x="494.3" y="547.0" width="43.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="497.3" y="558.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.23%)</title><rect x="498.8" y="531.0" width="14.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="501.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.47%)</title><rect x="503.3" y="515.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="506.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.47%)</title><rect x="503.3" y="499.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.47%)</title><rect x="503.3" y="483.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="506.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.28%)</title><rect x="505.5" y="467.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="508.8" y="515.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="511.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.19%)</title><rect x="510.0" y="515.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="513.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.19%)</title><rect x="510.0" y="499.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="512.2" y="515.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="515.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.76%)</title><rect x="513.3" y="531.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="516.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.38%)</title><rect x="517.8" y="515.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.38%)</title><rect x="517.8" y="499.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="520.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.38%)</title><rect x="517.8" y="483.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="520.8" y="494.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.38%)</title><rect x="517.8" y="467.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="520.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="522.3" y="531.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="525.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.76%)</title><rect x="523.4" y="531.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="526.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.76%)</title><rect x="523.4" y="515.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.76%)</title><rect x="523.4" y="499.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.76%)</title><rect x="523.4" y="483.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.4" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.76%)</title><rect x="523.4" y="467.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="526.4" y="478.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.66%)</title><rect x="524.5" y="451.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="527.5" y="462.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (2 samples, 0.19%)</title><rect x="530.1" y="435.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="533.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.47%)</title><rect x="532.3" y="531.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.47%)</title><rect x="532.3" y="515.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="535.3" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.47%)</title><rect x="532.3" y="499.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="535.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.23%)</title><rect x="537.9" y="627.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="540.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.23%)</title><rect x="537.9" y="611.0" width="14.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="540.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.23%)</title><rect x="537.9" y="595.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="540.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (13 samples, 1.23%)</title><rect x="537.9" y="579.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="540.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (13 samples, 1.23%)</title><rect x="537.9" y="563.0" width="14.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="540.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (262 samples, 24.83%)</title><rect x="552.5" y="723.0" width="293.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="555.5" y="734.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.76%)</title><rect x="556.9" y="707.0" width="9.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="559.9" y="718.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.76%)</title><rect x="556.9" y="691.0" width="9.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="559.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (31 samples, 2.94%)</title><rect x="565.9" y="707.0" width="34.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.9" y="718.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (31 samples, 2.94%)</title><rect x="565.9" y="691.0" width="34.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="568.9" y="702.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (29 samples, 2.75%)</title><rect x="568.1" y="675.0" width="32.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="571.1" y="686.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.47%)</title><rect x="568.1" y="659.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="571.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.47%)</title><rect x="568.1" y="643.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="571.1" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.47%)</title><rect x="568.1" y="627.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.47%)</title><rect x="568.1" y="611.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="571.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (24 samples, 2.27%)</title><rect x="573.7" y="659.0" width="26.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.7" y="670.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.14%)</title><rect x="587.1" y="643.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="590.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.28%)</title><rect x="587.1" y="627.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="590.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.47%)</title><rect x="590.5" y="627.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="593.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.19%)</title><rect x="593.8" y="611.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="596.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.38%)</title><rect x="596.1" y="627.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="599.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (4 samples, 0.38%)</title><rect x="596.1" y="611.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.28%)</title><rect x="600.6" y="707.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="603.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.28%)</title><rect x="600.6" y="691.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.6" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="602.8" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="605.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (154 samples, 14.60%)</title><rect x="603.9" y="707.0" width="172.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.9" y="718.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="603.9" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="606.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="603.9" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="606.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="603.9" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="606.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="603.9" y="643.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="606.9" y="654.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="603.9" y="627.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="606.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (143 samples, 13.55%)</title><rect x="605.0" y="691.0" width="160.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="608.0" y="702.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (62 samples, 5.88%)</title><rect x="618.5" y="675.0" width="69.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="621.5" y="686.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.75%)</title><rect x="636.4" y="659.0" width="32.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.4" y="670.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (26 samples, 2.46%)</title><rect x="639.7" y="643.0" width="29.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="642.7" y="654.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.57%)</title><rect x="654.2" y="627.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.2" y="638.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.57%)</title><rect x="654.2" y="611.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.2" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.57%)</title><rect x="654.2" y="595.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.2" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="654.2" y="579.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="657.2" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.47%)</title><rect x="655.4" y="579.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="658.4" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="655.4" y="563.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="658.4" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="655.4" y="547.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="658.4" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.28%)</title><rect x="656.5" y="563.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="659.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.28%)</title><rect x="656.5" y="547.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="659.5" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.19%)</title><rect x="656.5" y="531.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="659.5" y="542.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="658.7" y="531.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="661.7" y="542.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.09%)</title><rect x="659.8" y="563.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="662.8" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="661.0" y="627.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="664.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="662.1" y="627.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.1" y="638.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.28%)</title><rect x="663.2" y="627.0" width="3.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="666.2" y="638.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="666.5" y="627.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="669.5" y="638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="667.7" y="627.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="670.7" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.19%)</title><rect x="668.8" y="659.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="671.8" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="668.8" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="671.8" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="668.8" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="671.8" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="668.8" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="671.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="669.9" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.9" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="669.9" y="627.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="672.9" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="669.9" y="611.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="672.9" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="669.9" y="595.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="672.9" y="606.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.19%)</title><rect x="671.0" y="659.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="674.0" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (13 samples, 1.23%)</title><rect x="673.3" y="659.0" width="14.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="676.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.38%)</title><rect x="687.8" y="675.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.38%)</title><rect x="687.8" y="659.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="690.8" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.38%)</title><rect x="687.8" y="643.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="690.8" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (65 samples, 6.16%)</title><rect x="692.3" y="675.0" width="72.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.3" y="686.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (65 samples, 6.16%)</title><rect x="692.3" y="659.0" width="72.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="695.3" y="670.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.38%)</title><rect x="692.3" y="643.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.38%)</title><rect x="692.3" y="627.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="695.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.38%)</title><rect x="692.3" y="611.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="695.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.38%)</title><rect x="692.3" y="595.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="695.3" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="696.7" y="643.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="699.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="696.7" y="627.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="699.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="696.7" y="611.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="699.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.19%)</title><rect x="696.7" y="595.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="699.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="697.9" y="579.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.9" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (59 samples, 5.59%)</title><rect x="699.0" y="643.0" width="66.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.0" y="654.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (55 samples, 5.21%)</title><rect x="703.5" y="627.0" width="61.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="706.5" y="638.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (23 samples, 2.18%)</title><rect x="739.3" y="611.0" width="25.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="742.3" y="622.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.19%)</title><rect x="752.7" y="595.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="755.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.85%)</title><rect x="754.9" y="595.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.19%)</title><rect x="762.7" y="579.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="765.7" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.19%)</title><rect x="762.7" y="563.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="765.7" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.19%)</title><rect x="762.7" y="547.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="765.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="763.9" y="531.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="766.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="763.9" y="515.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="766.9" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="763.9" y="499.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="766.9" y="510.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::used() const (1 samples, 0.09%)</title><rect x="763.9" y="483.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="766.9" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (10 samples, 0.95%)</title><rect x="765.0" y="691.0" width="11.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="768.0" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (10 samples, 0.95%)</title><rect x="765.0" y="675.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="768.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.95%)</title><rect x="765.0" y="659.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="768.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.95%)</title><rect x="765.0" y="643.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="768.0" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="768.3" y="627.0" width="5.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="771.3" y="638.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="768.3" y="611.0" width="5.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="771.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="773.9" y="627.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="776.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (50 samples, 4.74%)</title><rect x="776.2" y="707.0" width="55.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="779.2" y="718.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (49 samples, 4.64%)</title><rect x="776.2" y="691.0" width="54.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.2" y="702.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="780.6" y="675.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="783.6" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="780.6" y="659.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="783.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="780.6" y="643.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="783.6" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="780.6" y="627.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="783.6" y="638.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="780.6" y="611.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="783.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/893555317.process (27 samples, 2.56%)</title><rect x="781.8" y="675.0" width="30.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="784.8" y="686.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (24 samples, 2.27%)</title><rect x="785.1" y="659.0" width="26.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.1" y="670.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 2.09%)</title><rect x="785.1" y="643.0" width="24.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.1" y="654.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.38%)</title><rect x="788.5" y="627.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.5" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.38%)</title><rect x="788.5" y="611.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.5" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.38%)</title><rect x="788.5" y="595.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.5" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.38%)</title><rect x="788.5" y="579.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="791.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.19%)</title><rect x="790.7" y="563.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="793.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="791.8" y="547.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="794.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.28%)</title><rect x="792.9" y="627.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.9" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.19%)</title><rect x="794.1" y="611.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="797.1" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.19%)</title><rect x="794.1" y="595.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="797.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.14%)</title><rect x="796.3" y="627.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.19%)</title><rect x="809.7" y="643.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="810.8" y="627.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="810.8" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="813.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="810.8" y="595.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="813.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.09%)</title><rect x="812.0" y="675.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="812.0" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="815.0" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="812.0" y="643.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="815.0" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="812.0" y="627.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="815.0" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="812.0" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="815.0" y="622.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="812.0" y="595.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="815.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="812.0" y="579.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="815.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.19%)</title><rect x="813.1" y="675.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="816.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="813.1" y="659.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="816.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.09%)</title><rect x="814.2" y="659.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.09%)</title><rect x="814.2" y="643.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.09%)</title><rect x="814.2" y="627.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.28%)</title><rect x="815.3" y="675.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="818.3" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="815.3" y="659.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="818.3" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="815.3" y="643.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="818.3" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="815.3" y="627.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="818.3" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.19%)</title><rect x="816.4" y="659.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="819.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.09%)</title><rect x="818.7" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/969013478.get (1 samples, 0.09%)</title><rect x="818.7" y="659.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="821.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$77 (1 samples, 0.09%)</title><rect x="818.7" y="643.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.7" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="819.8" y="675.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.8" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="819.8" y="659.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.8" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.28%)</title><rect x="820.9" y="675.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="823.9" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.19%)</title><rect x="822.0" y="659.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.0" y="670.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.19%)</title><rect x="822.0" y="643.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="825.0" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="824.3" y="675.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="827.3" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="824.3" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="827.3" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="824.3" y="643.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="827.3" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="824.3" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="827.3" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="824.3" y="611.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.47%)</title><rect x="825.4" y="675.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="828.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.38%)</title><rect x="826.5" y="659.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="829.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.38%)</title><rect x="826.5" y="643.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="829.5" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="826.5" y="627.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="829.5" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="826.5" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="829.5" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="826.5" y="595.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="829.5" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="826.5" y="579.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="829.5" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="826.5" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.28%)</title><rect x="827.6" y="627.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="830.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.19%)</title><rect x="827.6" y="611.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="830.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.19%)</title><rect x="827.6" y="595.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="830.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$296/1666708892.accept (1 samples, 0.09%)</title><rect x="827.6" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="830.6" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="828.7" y="579.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="831.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="829.8" y="611.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="832.8" y="622.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="831.0" y="691.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="834.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.14%)</title><rect x="832.1" y="707.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.14%)</title><rect x="832.1" y="691.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="835.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.14%)</title><rect x="832.1" y="675.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.38%)</title><rect x="832.1" y="659.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="835.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.38%)</title><rect x="832.1" y="643.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="835.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.38%)</title><rect x="832.1" y="627.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.1" y="638.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.19%)</title><rect x="834.3" y="611.0" width="2.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="837.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.76%)</title><rect x="836.6" y="659.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$301/502253393.accept (8 samples, 0.76%)</title><rect x="836.6" y="643.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="839.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (8 samples, 0.76%)</title><rect x="836.6" y="627.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="839.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (8 samples, 0.76%)</title><rect x="836.6" y="611.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="839.6" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.76%)</title><rect x="836.6" y="595.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="839.6" y="606.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.76%)</title><rect x="836.6" y="579.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="839.6" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.47%)</title><rect x="839.9" y="563.0" width="5.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="842.9" y="574.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.47%)</title><rect x="839.9" y="547.0" width="5.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="842.9" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.28%)</title><rect x="845.5" y="723.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="848.5" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.28%)</title><rect x="845.5" y="707.0" width="3.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="848.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (227 samples, 21.52%)</title><rect x="848.9" y="787.0" width="253.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="851.9" y="798.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (226 samples, 21.42%)</title><rect x="850.0" y="771.0" width="252.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="853.0" y="782.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (211 samples, 20.00%)</title><rect x="865.6" y="755.0" width="236.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.6" y="766.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.09%)</title><rect x="881.3" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="884.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="881.3" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="884.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="881.3" y="707.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="884.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="881.3" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="884.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="881.3" y="675.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="884.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (24 samples, 2.27%)</title><rect x="882.4" y="739.0" width="26.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="885.4" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.09%)</title><rect x="909.3" y="739.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="912.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="909.3" y="723.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="912.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="909.3" y="707.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="912.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="909.3" y="691.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="912.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="909.3" y="675.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="912.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.38%)</title><rect x="910.4" y="739.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="913.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.38%)</title><rect x="910.4" y="723.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="913.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 15.83%)</title><rect x="914.9" y="739.0" width="186.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="917.9" y="750.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 15.83%)</title><rect x="914.9" y="723.0" width="186.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="917.9" y="734.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="921.6" y="707.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="924.6" y="718.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.38%)</title><rect x="922.7" y="707.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="925.7" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="927.2" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.2" y="718.0"></text>
</g>
<g>
<title>Unsafe_Park (153 samples, 14.50%)</title><rect x="928.3" y="707.0" width="171.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="931.3" y="718.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="930.5" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="933.5" y="702.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="931.6" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.6" y="702.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 1.80%)</title><rect x="932.7" y="691.0" width="21.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="935.7" y="702.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.47%)</title><rect x="937.2" y="675.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.2" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.28%)</title><rect x="937.2" y="659.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.2" y="670.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="940.6" y="659.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="943.6" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="941.7" y="659.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="944.7" y="670.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="942.8" y="675.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="945.8" y="686.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.19%)</title><rect x="943.9" y="675.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.9" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.66%)</title><rect x="946.2" y="675.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="949.2" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="954.0" y="691.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.0" y="702.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.57%)</title><rect x="955.1" y="691.0" width="6.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="958.1" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (41 samples, 3.89%)</title><rect x="961.8" y="691.0" width="45.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="964.8" y="702.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (69 samples, 6.54%)</title><rect x="1007.7" y="691.0" width="77.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1010.7" y="702.0">__pthread..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.47%)</title><rect x="1084.9" y="691.0" width="5.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1087.9" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="1090.5" y="691.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1093.5" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.38%)</title><rect x="1091.6" y="691.0" width="4.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1094.6" y="702.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="1096.0" y="691.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1099.0" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1097.2" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.2" y="702.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="1098.3" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.3" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1099.4" y="707.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1102.4" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1100.5" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="1101.6" y="755.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1104.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="1101.6" y="739.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1104.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="1101.6" y="723.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1104.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="1101.6" y="707.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1104.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="1101.6" y="691.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1104.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1102.8" y="835.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1105.8" y="846.0"></text>
</g>
<g>
<title>start_thread (77 samples, 7.30%)</title><rect x="1103.9" y="835.0" width="86.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1106.9" y="846.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (77 samples, 7.30%)</title><rect x="1103.9" y="819.0" width="86.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1106.9" y="830.0">java_start..</text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 2.09%)</title><rect x="1103.9" y="803.0" width="24.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.9" y="814.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.19%)</title><rect x="1103.9" y="787.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.9" y="798.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.19%)</title><rect x="1103.9" y="771.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.9" y="782.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.19%)</title><rect x="1103.9" y="755.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.9" y="766.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.90%)</title><rect x="1106.1" y="787.0" width="22.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.1" y="798.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.28%)</title><rect x="1106.1" y="771.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.1" y="782.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.19%)</title><rect x="1106.1" y="755.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.1" y="766.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1108.4" y="755.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1111.4" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.38%)</title><rect x="1109.5" y="771.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.5" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.28%)</title><rect x="1109.5" y="755.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.5" y="766.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.19%)</title><rect x="1109.5" y="739.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.5" y="750.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.19%)</title><rect x="1109.5" y="723.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.5" y="734.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1109.5" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.5" y="718.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1110.6" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.6" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1110.6" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.6" y="702.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.09%)</title><rect x="1110.6" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.6" y="686.0"></text>
</g>
<g>
<title>G1DefaultAllocator::survivor_gc_alloc_region(unsigned char) (1 samples, 0.09%)</title><rect x="1110.6" y="659.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.6" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1111.7" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.7" y="750.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1111.7" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.7" y="734.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.09%)</title><rect x="1111.7" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.7" y="718.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.09%)</title><rect x="1111.7" y="691.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.7" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="1112.8" y="755.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.8" y="766.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1112.8" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.8" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (13 samples, 1.23%)</title><rect x="1113.9" y="771.0" width="14.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.9" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (13 samples, 1.23%)</title><rect x="1113.9" y="755.0" width="14.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.9" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (13 samples, 1.23%)</title><rect x="1113.9" y="739.0" width="14.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.9" y="750.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (13 samples, 1.23%)</title><rect x="1113.9" y="723.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.9" y="734.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (13 samples, 1.23%)</title><rect x="1113.9" y="707.0" width="14.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.9" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (13 samples, 1.23%)</title><rect x="1113.9" y="691.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.9" y="702.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (9 samples, 0.85%)</title><rect x="1118.4" y="675.0" width="10.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.4" y="686.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.28%)</title><rect x="1122.9" y="659.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.9" y="670.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.19%)</title><rect x="1126.2" y="659.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.2" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.09%)</title><rect x="1127.4" y="643.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.4" y="654.0"></text>
</g>
<g>
<title>JavaThread::run() (53 samples, 5.02%)</title><rect x="1128.5" y="803.0" width="59.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="814.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (53 samples, 5.02%)</title><rect x="1128.5" y="787.0" width="59.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.5" y="798.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (53 samples, 5.02%)</title><rect x="1128.5" y="771.0" width="59.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.5" y="782.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (53 samples, 5.02%)</title><rect x="1128.5" y="755.0" width="59.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.5" y="766.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (52 samples, 4.93%)</title><rect x="1128.5" y="739.0" width="58.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.5" y="750.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (52 samples, 4.93%)</title><rect x="1128.5" y="723.0" width="58.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="734.0">Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="1128.5" y="707.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.5" y="718.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="1128.5" y="691.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1128.5" y="675.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1128.5" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.5" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1128.5" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1128.5" y="627.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1128.5" y="611.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1128.5" y="595.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.5" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1128.5" y="579.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.5" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1128.5" y="563.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.5" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1128.5" y="547.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1128.5" y="531.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.5" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1128.5" y="515.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.5" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1128.5" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.5" y="510.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1128.5" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="494.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1128.5" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.5" y="478.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.09%)</title><rect x="1128.5" y="451.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.5" y="462.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.09%)</title><rect x="1128.5" y="435.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.5" y="446.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (30 samples, 2.84%)</title><rect x="1129.6" y="707.0" width="33.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.6" y="718.0">Co..</text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.09%)</title><rect x="1129.6" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.6" y="702.0"></text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.19%)</title><rect x="1130.7" y="691.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.7" y="702.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1131.8" y="675.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.8" y="686.0"></text>
</g>
<g>
<title>OopFlow::make(Arena*, int, Compile*) (1 samples, 0.09%)</title><rect x="1131.8" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.8" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.28%)</title><rect x="1133.0" y="691.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.0" y="702.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1133.0" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.0" y="686.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.19%)</title><rect x="1134.1" y="675.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.1" y="686.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1134.1" y="659.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.1" y="670.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1135.2" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.2" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="643.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.2" y="654.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.09%)</title><rect x="1135.2" y="627.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.2" y="638.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="1135.2" y="611.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.2" y="622.0"></text>
</g>
<g>
<title>MachNode::MachNode() (1 samples, 0.09%)</title><rect x="1135.2" y="595.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.2" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.28%)</title><rect x="1136.3" y="691.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.3" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.28%)</title><rect x="1136.3" y="675.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.3" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.28%)</title><rect x="1136.3" y="659.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.3" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (3 samples, 0.28%)</title><rect x="1136.3" y="643.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.3" y="654.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.09%)</title><rect x="1137.4" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.4" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.09%)</title><rect x="1137.4" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.4" y="622.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1138.5" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.5" y="638.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1138.5" y="611.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 1.99%)</title><rect x="1139.7" y="691.0" width="23.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.7" y="702.0">P..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1139.7" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.7" y="686.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1140.8" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1141.9" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.9" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1141.9" y="659.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.9" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1141.9" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.9" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1143.0" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.0" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1143.0" y="659.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.19%)</title><rect x="1144.1" y="675.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.1" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.47%)</title><rect x="1146.4" y="675.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.19%)</title><rect x="1147.5" y="659.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.5" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1148.6" y="643.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.6" y="654.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="1149.7" y="659.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.7" y="670.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1150.9" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.9" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.19%)</title><rect x="1152.0" y="675.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.19%)</title><rect x="1152.0" y="659.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.28%)</title><rect x="1154.2" y="675.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.2" y="686.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1156.4" y="659.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.4" y="670.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1156.4" y="643.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.4" y="654.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1157.6" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.6" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1157.6" y="659.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.6" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.09%)</title><rect x="1157.6" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.6" y="654.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.28%)</title><rect x="1158.7" y="675.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.7" y="686.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.28%)</title><rect x="1158.7" y="659.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.7" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1160.9" y="643.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.9" y="654.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.09%)</title><rect x="1162.0" y="675.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.0" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 1.04%)</title><rect x="1163.2" y="707.0" width="12.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1163.2" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1163.2" y="675.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1163.2" y="659.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1163.2" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.2" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1164.3" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.3" y="702.0"></text>
</g>
<g>
<title>CallNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1164.3" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 0.76%)</title><rect x="1165.4" y="691.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.4" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.38%)</title><rect x="1165.4" y="675.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.4" y="686.0"></text>
</g>
<g>
<title>NTarjan::COMPRESS() (1 samples, 0.09%)</title><rect x="1168.7" y="659.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.7" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.28%)</title><rect x="1169.9" y="675.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.28%)</title><rect x="1169.9" y="659.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.19%)</title><rect x="1171.0" y="643.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.19%)</title><rect x="1171.0" y="627.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.19%)</title><rect x="1171.0" y="611.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.0" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1173.2" y="675.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.2" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.09%)</title><rect x="1173.2" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.2" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1174.3" y="691.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.3" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1174.3" y="675.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.3" y="686.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="659.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.76%)</title><rect x="1175.5" y="707.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.76%)</title><rect x="1175.5" y="691.0" width="8.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.76%)</title><rect x="1175.5" y="675.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.76%)</title><rect x="1175.5" y="659.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.76%)</title><rect x="1175.5" y="643.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.66%)</title><rect x="1175.5" y="627.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.5" y="611.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="622.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.09%)</title><rect x="1175.5" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1175.5" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1175.5" y="563.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="574.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.5" y="547.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="558.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.09%)</title><rect x="1175.5" y="531.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="542.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1176.6" y="611.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.6" y="622.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1176.6" y="595.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="606.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.09%)</title><rect x="1176.6" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="590.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.6" y="563.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1176.6" y="547.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1179.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.47%)</title><rect x="1177.7" y="611.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.47%)</title><rect x="1177.7" y="595.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.47%)</title><rect x="1177.7" y="579.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.47%)</title><rect x="1177.7" y="563.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.47%)</title><rect x="1177.7" y="547.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.38%)</title><rect x="1177.7" y="531.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.7" y="515.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.7" y="499.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1177.7" y="483.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1177.7" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1178.8" y="515.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1178.8" y="499.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1178.8" y="483.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1178.8" y="467.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.19%)</title><rect x="1178.8" y="451.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.19%)</title><rect x="1178.8" y="435.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="419.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="430.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1178.8" y="403.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="414.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1178.8" y="387.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1178.8" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1178.8" y="355.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1178.8" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1178.8" y="323.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1178.8" y="307.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="291.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1178.8" y="275.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.8" y="259.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1178.8" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1178.8" y="227.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="211.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1178.8" y="195.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="206.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1178.8" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.09%)</title><rect x="1178.8" y="163.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="174.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="147.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="419.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="403.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="387.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="371.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="355.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="339.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="323.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="307.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="291.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="275.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="259.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="243.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="227.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="211.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="195.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="179.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="163.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="147.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="131.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="115.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="99.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="83.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="67.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1179.9" y="51.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="62.0"></text>
</g>
<g>
<title>CheckCastPPNode::Opcode() const (1 samples, 0.09%)</title><rect x="1179.9" y="35.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="515.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.1" y="483.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.1" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.1" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.1" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.1" y="419.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.1" y="403.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.1" y="387.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.1" y="371.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.1" y="355.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.1" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1181.1" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="334.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.09%)</title><rect x="1181.1" y="307.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="318.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1181.1" y="291.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="302.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1181.1" y="275.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="286.0"></text>
</g>
<g>
<title>TypePtr::make(Type::TYPES, TypePtr::PTR, int) (1 samples, 0.09%)</title><rect x="1181.1" y="259.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.2" y="531.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1182.2" y="515.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="526.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1182.2" y="499.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1182.2" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1182.2" y="467.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1182.2" y="451.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1182.2" y="435.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.09%)</title><rect x="1182.2" y="419.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.09%)</title><rect x="1182.2" y="403.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.09%)</title><rect x="1182.2" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1182.2" y="371.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1183.3" y="627.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="638.0"></text>
</g>
<g>
<title>Node::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1183.3" y="611.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.19%)</title><rect x="1184.4" y="707.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.4" y="718.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1184.4" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="702.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1185.5" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="702.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1186.6" y="739.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="750.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1186.6" y="723.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1186.6" y="707.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="718.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.09%)</title><rect x="1186.6" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="702.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1186.6" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="686.0"></text>
</g>
<g>
<title>MethodCounters::highest_comp_level() const (1 samples, 0.09%)</title><rect x="1186.6" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.6" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.19%)</title><rect x="1187.8" y="803.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.8" y="814.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.19%)</title><rect x="1187.8" y="787.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.8" y="798.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.19%)</title><rect x="1187.8" y="771.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="782.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.19%)</title><rect x="1187.8" y="755.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.8" y="766.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.19%)</title><rect x="1187.8" y="739.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.19%)</title><rect x="1187.8" y="723.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1187.8" y="707.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.09%)</title><rect x="1187.8" y="691.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.8" y="702.0"></text>
</g>
<g>
<title>java_lang_ref_SoftReference::clock() (1 samples, 0.09%)</title><rect x="1187.8" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="707.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
</g>
</svg>
