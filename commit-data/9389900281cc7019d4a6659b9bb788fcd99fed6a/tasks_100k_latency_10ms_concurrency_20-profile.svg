<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (345 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (33 samples, 9.57%)</title><rect x="10.0" y="1235.0" width="112.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (33 samples, 9.57%)</title><rect x="10.0" y="1219.0" width="112.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (33 samples, 9.57%)</title><rect x="10.0" y="1203.0" width="112.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1214.0">com/linecorp/d..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.74%)</title><rect x="10.0" y="1187.0" width="20.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1841381632.accept (6 samples, 1.74%)</title><rect x="10.0" y="1171.0" width="20.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (6 samples, 1.74%)</title><rect x="10.0" y="1155.0" width="20.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.29%)</title><rect x="10.0" y="1139.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.58%)</title><rect x="13.4" y="1139.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.58%)</title><rect x="13.4" y="1123.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.58%)</title><rect x="13.4" y="1107.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.58%)</title><rect x="13.4" y="1091.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.58%)</title><rect x="13.4" y="1075.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.29%)</title><rect x="16.8" y="1059.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 0.87%)</title><rect x="20.3" y="1139.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.87%)</title><rect x="20.3" y="1123.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.29%)</title><rect x="27.1" y="1107.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.1" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.29%)</title><rect x="27.1" y="1091.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.29%)</title><rect x="27.1" y="1075.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.29%)</title><rect x="27.1" y="1059.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="27.1" y="1043.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (27 samples, 7.83%)</title><rect x="30.5" y="1187.0" width="92.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.5" y="1198.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (27 samples, 7.83%)</title><rect x="30.5" y="1171.0" width="92.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.5" y="1182.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (19 samples, 5.51%)</title><rect x="30.5" y="1155.0" width="65.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.5" y="1166.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 2.03%)</title><rect x="30.5" y="1139.0" width="24.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.5" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 2.03%)</title><rect x="30.5" y="1123.0" width="24.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.5" y="1134.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 1.45%)</title><rect x="30.5" y="1107.0" width="17.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.29%)</title><rect x="30.5" y="1091.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.29%)</title><rect x="30.5" y="1075.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.29%)</title><rect x="30.5" y="1059.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Errors.forCode (1 samples, 0.29%)</title><rect x="30.5" y="1043.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="30.5" y="1027.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="30.5" y="1011.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Short.hashCode (1 samples, 0.29%)</title><rect x="30.5" y="995.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.29%)</title><rect x="33.9" y="1091.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.29%)</title><rect x="33.9" y="1075.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.87%)</title><rect x="37.4" y="1091.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="37.4" y="1075.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="37.4" y="1059.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.29%)</title><rect x="37.4" y="1043.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.29%)</title><rect x="37.4" y="1027.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.58%)</title><rect x="40.8" y="1075.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.29%)</title><rect x="40.8" y="1059.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.29%)</title><rect x="40.8" y="1043.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.29%)</title><rect x="40.8" y="1027.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="43.8" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="40.8" y="1011.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="43.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.29%)</title><rect x="44.2" y="1059.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.29%)</title><rect x="44.2" y="1043.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.29%)</title><rect x="44.2" y="1027.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.29%)</title><rect x="44.2" y="1011.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.29%)</title><rect x="44.2" y="995.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.2" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.29%)</title><rect x="44.2" y="979.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.2" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="44.2" y="963.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="47.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.29%)</title><rect x="47.6" y="1107.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.29%)</title><rect x="47.6" y="1091.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.29%)</title><rect x="47.6" y="1075.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.29%)</title><rect x="47.6" y="1059.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.29%)</title><rect x="51.0" y="1107.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (12 samples, 3.48%)</title><rect x="54.5" y="1139.0" width="41.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="57.5" y="1150.0">org..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.29%)</title><rect x="54.5" y="1123.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (11 samples, 3.19%)</title><rect x="57.9" y="1123.0" width="37.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.9" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (10 samples, 2.90%)</title><rect x="57.9" y="1107.0" width="34.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.9" y="1118.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (10 samples, 2.90%)</title><rect x="57.9" y="1091.0" width="34.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.9" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (5 samples, 1.45%)</title><rect x="57.9" y="1075.0" width="17.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.87%)</title><rect x="64.7" y="1059.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.87%)</title><rect x="64.7" y="1043.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.87%)</title><rect x="64.7" y="1027.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.87%)</title><rect x="64.7" y="1011.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.87%)</title><rect x="64.7" y="995.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.87%)</title><rect x="64.7" y="979.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.87%)</title><rect x="64.7" y="963.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 1.45%)</title><rect x="75.0" y="1075.0" width="17.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 1.45%)</title><rect x="75.0" y="1059.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (3 samples, 0.87%)</title><rect x="75.0" y="1043.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Optional.of (3 samples, 0.87%)</title><rect x="75.0" y="1027.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (2 samples, 0.58%)</title><rect x="85.2" y="1043.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.2" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (2 samples, 0.58%)</title><rect x="85.2" y="1027.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.29%)</title><rect x="92.1" y="1107.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.58%)</title><rect x="95.5" y="1155.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.58%)</title><rect x="95.5" y="1139.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.58%)</title><rect x="95.5" y="1123.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.58%)</title><rect x="95.5" y="1107.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.58%)</title><rect x="95.5" y="1091.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.5" y="1102.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.29%)</title><rect x="95.5" y="1075.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.29%)</title><rect x="95.5" y="1059.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.29%)</title><rect x="95.5" y="1043.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.29%)</title><rect x="95.5" y="1027.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.5" y="1038.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.29%)</title><rect x="95.5" y="1011.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="98.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.29%)</title><rect x="98.9" y="1075.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.87%)</title><rect x="102.3" y="1155.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.29%)</title><rect x="102.3" y="1139.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.29%)</title><rect x="102.3" y="1123.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.29%)</title><rect x="102.3" y="1107.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.29%)</title><rect x="102.3" y="1091.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.29%)</title><rect x="105.8" y="1139.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="108.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.29%)</title><rect x="105.8" y="1123.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.29%)</title><rect x="105.8" y="1107.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.29%)</title><rect x="105.8" y="1091.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.29%)</title><rect x="105.8" y="1075.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.29%)</title><rect x="105.8" y="1059.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.29%)</title><rect x="105.8" y="1043.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.29%)</title><rect x="105.8" y="1027.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.8" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.29%)</title><rect x="105.8" y="1011.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.8" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.29%)</title><rect x="105.8" y="995.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.29%)</title><rect x="109.2" y="1139.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.29%)</title><rect x="109.2" y="1123.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="109.2" y="1107.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="109.2" y="1091.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="112.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.29%)</title><rect x="109.2" y="1075.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.openOrClosingChannelOrFail (1 samples, 0.29%)</title><rect x="109.2" y="1059.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.29%)</title><rect x="109.2" y="1043.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.29%)</title><rect x="109.2" y="1027.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="112.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.29%)</title><rect x="112.6" y="1155.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.29%)</title><rect x="112.6" y="1139.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.29%)</title><rect x="112.6" y="1123.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$262/2043019173.accept (1 samples, 0.29%)</title><rect x="112.6" y="1107.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.29%)</title><rect x="112.6" y="1091.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="115.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.29%)</title><rect x="112.6" y="1075.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.29%)</title><rect x="112.6" y="1059.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="115.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="112.6" y="1043.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="112.6" y="1027.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="115.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.29%)</title><rect x="116.0" y="1155.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="119.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="116.0" y="1139.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="119.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.29%)</title><rect x="119.4" y="1155.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="119.4" y="1139.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="119.4" y="1123.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="119.4" y="1107.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.29%)</title><rect x="119.4" y="1091.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.4" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.29%)</title><rect x="119.4" y="1075.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (192 samples, 55.65%)</title><rect x="122.9" y="1235.0" width="656.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="125.9" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (192 samples, 55.65%)</title><rect x="122.9" y="1219.0" width="656.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.9" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (192 samples, 55.65%)</title><rect x="122.9" y="1203.0" width="656.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.9" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/686324900.run (185 samples, 53.62%)</title><rect x="122.9" y="1187.0" width="632.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="125.9" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/686324900.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (185 samples, 53.62%)</title><rect x="122.9" y="1171.0" width="632.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="125.9" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (185 samples, 53.62%)</title><rect x="122.9" y="1155.0" width="632.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.9" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (185 samples, 53.62%)</title><rect x="122.9" y="1139.0" width="632.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="125.9" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 2.32%)</title><rect x="133.1" y="1123.0" width="27.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.1" y="1134.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 2.32%)</title><rect x="133.1" y="1107.0" width="27.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="136.1" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 2.32%)</title><rect x="133.1" y="1091.0" width="27.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.1" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.87%)</title><rect x="133.1" y="1075.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 1.45%)</title><rect x="143.4" y="1075.0" width="17.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.4" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.58%)</title><rect x="153.7" y="1059.0" width="6.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="156.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.58%)</title><rect x="153.7" y="1043.0" width="6.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="156.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (13 samples, 3.77%)</title><rect x="160.5" y="1123.0" width="44.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.5" y="1134.0">com/..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.29%)</title><rect x="191.3" y="1107.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.29%)</title><rect x="191.3" y="1091.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$303/190892703.get$Lambda (1 samples, 0.29%)</title><rect x="191.3" y="1075.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="191.3" y="1059.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="194.3" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="191.3" y="1043.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="194.3" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="191.3" y="1027.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="194.3" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="191.3" y="1011.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="194.3" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.29%)</title><rect x="191.3" y="995.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="194.3" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.29%)</title><rect x="191.3" y="979.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="194.3" y="990.0"></text>
</g>
<g>
<title>VM_Operation::evaluate_concurrently() const (1 samples, 0.29%)</title><rect x="191.3" y="963.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="194.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.87%)</title><rect x="194.7" y="1107.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.87%)</title><rect x="194.7" y="1091.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.87%)</title><rect x="194.7" y="1075.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.87%)</title><rect x="194.7" y="1059.0" width="10.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$303/190892703.accept (3 samples, 0.87%)</title><rect x="194.7" y="1043.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (3 samples, 0.87%)</title><rect x="194.7" y="1027.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 0.87%)</title><rect x="194.7" y="1011.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.87%)</title><rect x="194.7" y="995.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.87%)</title><rect x="194.7" y="979.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.58%)</title><rect x="194.7" y="963.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.58%)</title><rect x="194.7" y="947.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="201.5" y="963.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (37 samples, 10.72%)</title><rect x="205.0" y="1123.0" width="126.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.0" y="1134.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (37 samples, 10.72%)</title><rect x="205.0" y="1107.0" width="126.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.0" y="1118.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (37 samples, 10.72%)</title><rect x="205.0" y="1091.0" width="126.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.0" y="1102.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 10.72%)</title><rect x="205.0" y="1075.0" width="126.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.0" y="1086.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (37 samples, 10.72%)</title><rect x="205.0" y="1059.0" width="126.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.0" y="1070.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (37 samples, 10.72%)</title><rect x="205.0" y="1043.0" width="126.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.0" y="1054.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 3.48%)</title><rect x="205.0" y="1027.0" width="41.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="208.0" y="1038.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.87%)</title><rect x="208.4" y="1011.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.87%)</title><rect x="208.4" y="995.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.87%)</title><rect x="208.4" y="979.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.87%)</title><rect x="208.4" y="963.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.87%)</title><rect x="208.4" y="947.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.87%)</title><rect x="208.4" y="931.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.87%)</title><rect x="208.4" y="915.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 2.32%)</title><rect x="218.6" y="1011.0" width="27.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.6" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 2.32%)</title><rect x="218.6" y="995.0" width="27.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.6" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.29%)</title><rect x="222.1" y="979.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.29%)</title><rect x="222.1" y="963.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 1.74%)</title><rect x="225.5" y="979.0" width="20.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 1.74%)</title><rect x="225.5" y="963.0" width="20.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 1.74%)</title><rect x="225.5" y="947.0" width="20.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (24 samples, 6.96%)</title><rect x="246.0" y="1027.0" width="82.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="1038.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.58%)</title><rect x="246.0" y="1011.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.58%)</title><rect x="246.0" y="995.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.58%)</title><rect x="252.8" y="1011.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.58%)</title><rect x="252.8" y="995.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.58%)</title><rect x="252.8" y="979.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.58%)</title><rect x="252.8" y="963.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.87%)</title><rect x="259.7" y="1011.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.87%)</title><rect x="259.7" y="995.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (17 samples, 4.93%)</title><rect x="269.9" y="1011.0" width="58.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.9" y="1022.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (17 samples, 4.93%)</title><rect x="269.9" y="995.0" width="58.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.9" y="1006.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.45%)</title><rect x="269.9" y="979.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 3.48%)</title><rect x="287.0" y="979.0" width="41.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.0" y="990.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 3.48%)</title><rect x="287.0" y="963.0" width="41.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.0" y="974.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (11 samples, 3.19%)</title><rect x="290.5" y="947.0" width="37.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.5" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.58%)</title><rect x="290.5" y="931.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.29%)</title><rect x="290.5" y="915.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.29%)</title><rect x="290.5" y="899.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.29%)</title><rect x="290.5" y="883.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.29%)</title><rect x="290.5" y="867.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.29%)</title><rect x="290.5" y="851.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.29%)</title><rect x="290.5" y="835.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.29%)</title><rect x="293.9" y="915.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.87%)</title><rect x="297.3" y="931.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.58%)</title><rect x="300.7" y="915.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.7" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="300.7" y="899.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="303.7" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="300.7" y="883.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="303.7" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="300.7" y="867.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="303.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="300.7" y="851.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="303.7" y="862.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.29%)</title><rect x="300.7" y="835.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="303.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.29%)</title><rect x="304.1" y="899.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.29%)</title><rect x="304.1" y="883.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.1" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.29%)</title><rect x="304.1" y="867.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.58%)</title><rect x="307.6" y="931.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.58%)</title><rect x="307.6" y="915.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.58%)</title><rect x="307.6" y="899.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.29%)</title><rect x="311.0" y="883.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.0" y="894.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.29%)</title><rect x="311.0" y="867.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.0" y="878.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.29%)</title><rect x="311.0" y="851.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="314.0" y="862.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.29%)</title><rect x="311.0" y="835.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.58%)</title><rect x="314.4" y="931.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.58%)</title><rect x="314.4" y="915.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.58%)</title><rect x="314.4" y="899.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.29%)</title><rect x="317.8" y="883.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="320.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.58%)</title><rect x="321.2" y="931.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.29%)</title><rect x="324.7" y="915.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.7" y="926.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.29%)</title><rect x="324.7" y="899.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="327.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.29%)</title><rect x="328.1" y="1027.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.29%)</title><rect x="328.1" y="1011.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="331.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.29%)</title><rect x="328.1" y="995.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.29%)</title><rect x="328.1" y="979.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.29%)</title><rect x="328.1" y="963.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (124 samples, 35.94%)</title><rect x="331.5" y="1123.0" width="424.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.5" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessPip..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="376.0" y="1107.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="379.0" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="376.0" y="1091.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="379.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (14 samples, 4.06%)</title><rect x="379.4" y="1107.0" width="47.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.4" y="1118.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (12 samples, 3.48%)</title><rect x="386.2" y="1091.0" width="41.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="389.2" y="1102.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (11 samples, 3.19%)</title><rect x="389.7" y="1075.0" width="37.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.7" y="1086.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.29%)</title><rect x="389.7" y="1059.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="389.7" y="1043.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="392.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.29%)</title><rect x="389.7" y="1027.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.29%)</title><rect x="389.7" y="1011.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="392.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.29%)</title><rect x="389.7" y="995.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.87%)</title><rect x="393.1" y="1059.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="396.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.87%)</title><rect x="393.1" y="1043.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.87%)</title><rect x="393.1" y="1027.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.03%)</title><rect x="403.3" y="1059.0" width="24.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="1070.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 1.74%)</title><rect x="406.8" y="1043.0" width="20.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.74%)</title><rect x="406.8" y="1027.0" width="20.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (6 samples, 1.74%)</title><rect x="406.8" y="1011.0" width="20.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (30 samples, 8.70%)</title><rect x="427.3" y="1107.0" width="102.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="430.3" y="1118.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (28 samples, 8.12%)</title><rect x="427.3" y="1091.0" width="95.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.3" y="1102.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (13 samples, 3.77%)</title><rect x="430.7" y="1075.0" width="44.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.7" y="1086.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (13 samples, 3.77%)</title><rect x="430.7" y="1059.0" width="44.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="433.7" y="1070.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.16%)</title><rect x="451.2" y="1043.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.16%)</title><rect x="451.2" y="1027.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="454.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.16%)</title><rect x="451.2" y="1011.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.16%)</title><rect x="451.2" y="995.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="454.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.16%)</title><rect x="451.2" y="979.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="454.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.29%)</title><rect x="451.2" y="963.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="454.2" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.29%)</title><rect x="451.2" y="947.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="454.2" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.29%)</title><rect x="454.6" y="963.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="457.6" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.29%)</title><rect x="454.6" y="947.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="457.6" y="958.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.29%)</title><rect x="454.6" y="931.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="457.6" y="942.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.29%)</title><rect x="454.6" y="915.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="457.6" y="926.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.29%)</title><rect x="458.1" y="963.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="461.1" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="461.5" y="963.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="464.5" y="974.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.29%)</title><rect x="464.9" y="1043.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="467.9" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.58%)</title><rect x="468.3" y="1043.0" width="6.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="471.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.87%)</title><rect x="475.2" y="1075.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="478.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.58%)</title><rect x="475.2" y="1059.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="478.2" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.29%)</title><rect x="475.2" y="1043.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="478.2" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.29%)</title><rect x="475.2" y="1027.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="478.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.29%)</title><rect x="478.6" y="1043.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="481.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.29%)</title><rect x="482.0" y="1059.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.29%)</title><rect x="482.0" y="1043.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.0" y="1054.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="485.4" y="1075.0" width="3.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="488.4" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="488.8" y="1075.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="491.8" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 2.61%)</title><rect x="492.3" y="1075.0" width="30.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.3" y="1086.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 2.61%)</title><rect x="492.3" y="1059.0" width="30.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="495.3" y="1070.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.58%)</title><rect x="499.1" y="1043.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="502.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.58%)</title><rect x="499.1" y="1027.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="502.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.58%)</title><rect x="499.1" y="1011.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.58%)</title><rect x="499.1" y="995.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="502.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.58%)</title><rect x="499.1" y="979.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.1" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 1.45%)</title><rect x="505.9" y="1043.0" width="17.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="508.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.16%)</title><rect x="509.4" y="1027.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.16%)</title><rect x="509.4" y="1011.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="512.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.29%)</title><rect x="512.8" y="995.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="515.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.58%)</title><rect x="516.2" y="995.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.58%)</title><rect x="523.0" y="1091.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="526.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.58%)</title><rect x="523.0" y="1075.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="526.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.58%)</title><rect x="523.0" y="1059.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="526.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.58%)</title><rect x="523.0" y="1043.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="526.0" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="526.5" y="1027.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="529.5" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="526.5" y="1011.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="529.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (64 samples, 18.55%)</title><rect x="529.9" y="1107.0" width="218.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="532.9" y="1118.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (64 samples, 18.55%)</title><rect x="529.9" y="1091.0" width="218.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.9" y="1102.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/2009657287.process (53 samples, 15.36%)</title><rect x="540.1" y="1075.0" width="181.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="543.1" y="1086.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (53 samples, 15.36%)</title><rect x="540.1" y="1059.0" width="181.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.1" y="1070.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (52 samples, 15.07%)</title><rect x="543.6" y="1043.0" width="177.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="546.6" y="1054.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 14.20%)</title><rect x="550.4" y="1027.0" width="167.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.4" y="1038.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (49 samples, 14.20%)</title><rect x="550.4" y="1011.0" width="167.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.4" y="1022.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.58%)</title><rect x="553.8" y="995.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="556.8" y="1006.0"></text>
</g>
<g>
<title>JVM_Sleep (44 samples, 12.75%)</title><rect x="560.7" y="995.0" width="150.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="563.7" y="1006.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.87%)</title><rect x="584.6" y="979.0" width="10.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="587.6" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="594.9" y="979.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="597.9" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="598.3" y="979.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="601.3" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="598.3" y="963.0" width="3.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="601.3" y="974.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (32 samples, 9.28%)</title><rect x="601.7" y="979.0" width="109.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="604.7" y="990.0">os::sleep(Thr..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.29%)</title><rect x="615.4" y="963.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="618.4" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.29%)</title><rect x="615.4" y="947.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="618.4" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="618.8" y="963.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="621.8" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="618.8" y="947.0" width="3.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="621.8" y="958.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 1.74%)</title><rect x="622.2" y="963.0" width="20.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="625.2" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 4.35%)</title><rect x="642.8" y="963.0" width="51.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="645.8" y="974.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.29%)</title><rect x="694.1" y="963.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="697.1" y="974.0"></text>
</g>
<g>
<title>_init (1 samples, 0.29%)</title><rect x="697.5" y="963.0" width="3.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="700.5" y="974.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.29%)</title><rect x="700.9" y="963.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="703.9" y="974.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.29%)</title><rect x="704.3" y="963.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="707.3" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.29%)</title><rect x="707.7" y="963.0" width="3.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="710.7" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.29%)</title><rect x="711.2" y="995.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="714.2" y="1006.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.29%)</title><rect x="714.6" y="995.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="717.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="718.0" y="1027.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="721.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.29%)</title><rect x="718.0" y="1011.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.29%)</title><rect x="718.0" y="995.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="721.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.58%)</title><rect x="721.4" y="1075.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="724.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.58%)</title><rect x="721.4" y="1059.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.29%)</title><rect x="728.3" y="1075.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.29%)</title><rect x="728.3" y="1059.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="731.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.45%)</title><rect x="731.7" y="1075.0" width="17.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.45%)</title><rect x="731.7" y="1059.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="734.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.45%)</title><rect x="731.7" y="1043.0" width="17.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 1.45%)</title><rect x="731.7" y="1027.0" width="17.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="734.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.16%)</title><rect x="731.7" y="1011.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="734.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 1.16%)</title><rect x="731.7" y="995.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="734.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/1490399164.accept (3 samples, 0.87%)</title><rect x="731.7" y="979.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="734.7" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.29%)</title><rect x="741.9" y="979.0" width="3.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="744.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="745.4" y="1011.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="748.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.58%)</title><rect x="748.8" y="1107.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.58%)</title><rect x="748.8" y="1091.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="751.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.58%)</title><rect x="748.8" y="1075.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="751.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="748.8" y="1059.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="751.8" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="748.8" y="1043.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="751.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="748.8" y="1027.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="751.8" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="748.8" y="1011.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="751.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="752.2" y="1059.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="755.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/196145286.accept (1 samples, 0.29%)</title><rect x="752.2" y="1043.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (1 samples, 0.29%)</title><rect x="752.2" y="1027.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="755.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.29%)</title><rect x="752.2" y="1011.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="755.2" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.29%)</title><rect x="752.2" y="995.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="755.2" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.29%)</title><rect x="752.2" y="979.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="755.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.29%)</title><rect x="755.6" y="1187.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="758.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.29%)</title><rect x="755.6" y="1171.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="758.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.29%)</title><rect x="755.6" y="1155.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="758.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.29%)</title><rect x="755.6" y="1139.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.74%)</title><rect x="759.0" y="1187.0" width="20.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="762.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 1.74%)</title><rect x="759.0" y="1171.0" width="20.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (3 samples, 0.87%)</title><rect x="762.5" y="1155.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="765.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.29%)</title><rect x="772.7" y="1155.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="775.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.29%)</title><rect x="772.7" y="1139.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.29%)</title><rect x="772.7" y="1123.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="775.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.29%)</title><rect x="772.7" y="1107.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="775.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.29%)</title><rect x="772.7" y="1091.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="775.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.29%)</title><rect x="776.1" y="1155.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="779.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.29%)</title><rect x="776.1" y="1139.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="779.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.58%)</title><rect x="779.6" y="1235.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.58%)</title><rect x="779.6" y="1219.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="782.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.58%)</title><rect x="779.6" y="1203.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="782.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.29%)</title><rect x="779.6" y="1187.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="782.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.29%)</title><rect x="779.6" y="1171.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="782.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.29%)</title><rect x="779.6" y="1155.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="782.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.29%)</title><rect x="779.6" y="1139.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.29%)</title><rect x="783.0" y="1187.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="786.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.29%)</title><rect x="783.0" y="1171.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.0" y="1182.0"></text>
</g>
<g>
<title>start_thread (118 samples, 34.20%)</title><rect x="786.4" y="1235.0" width="403.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="789.4" y="1246.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (118 samples, 34.20%)</title><rect x="786.4" y="1219.0" width="403.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="789.4" y="1230.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 4.35%)</title><rect x="786.4" y="1203.0" width="51.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="789.4" y="1214.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 4.35%)</title><rect x="786.4" y="1187.0" width="51.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="789.4" y="1198.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (15 samples, 4.35%)</title><rect x="786.4" y="1171.0" width="51.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="789.4" y="1182.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 4.35%)</title><rect x="786.4" y="1155.0" width="51.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="789.4" y="1166.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 2.03%)</title><rect x="813.8" y="1139.0" width="23.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="816.8" y="1150.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (6 samples, 1.74%)</title><rect x="817.2" y="1123.0" width="20.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="820.2" y="1134.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (2 samples, 0.58%)</title><rect x="830.9" y="1107.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="833.9" y="1118.0"></text>
</g>
<g>
<title>JavaThread::run() (102 samples, 29.57%)</title><rect x="837.7" y="1203.0" width="348.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.7" y="1214.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (102 samples, 29.57%)</title><rect x="837.7" y="1187.0" width="348.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.7" y="1198.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (102 samples, 29.57%)</title><rect x="837.7" y="1171.0" width="348.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="840.7" y="1182.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (102 samples, 29.57%)</title><rect x="837.7" y="1155.0" width="348.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="840.7" y="1166.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (99 samples, 28.70%)</title><rect x="837.7" y="1139.0" width="338.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="840.7" y="1150.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (99 samples, 28.70%)</title><rect x="837.7" y="1123.0" width="338.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="840.7" y="1134.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>Compile::Code_Gen() (43 samples, 12.46%)</title><rect x="837.7" y="1107.0" width="147.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="840.7" y="1118.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.87%)</title><rect x="837.7" y="1091.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="840.7" y="1102.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.29%)</title><rect x="841.1" y="1075.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="844.1" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.29%)</title><rect x="841.1" y="1059.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="844.1" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.29%)</title><rect x="841.1" y="1043.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="844.1" y="1054.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.29%)</title><rect x="844.6" y="1075.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="847.6" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.29%)</title><rect x="844.6" y="1059.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="847.6" y="1070.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.16%)</title><rect x="848.0" y="1091.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="851.0" y="1102.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.29%)</title><rect x="848.0" y="1075.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="851.0" y="1086.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.29%)</title><rect x="851.4" y="1075.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="854.4" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.58%)</title><rect x="854.8" y="1075.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="857.8" y="1086.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.58%)</title><rect x="854.8" y="1059.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="857.8" y="1070.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.29%)</title><rect x="861.7" y="1091.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.7" y="1102.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.29%)</title><rect x="861.7" y="1075.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="864.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.87%)</title><rect x="865.1" y="1091.0" width="10.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="868.1" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.29%)</title><rect x="865.1" y="1075.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="868.1" y="1086.0"></text>
</g>
<g>
<title>CFGElement::is_block() (1 samples, 0.29%)</title><rect x="865.1" y="1059.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="868.1" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.58%)</title><rect x="868.5" y="1075.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="871.5" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.58%)</title><rect x="868.5" y="1059.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="871.5" y="1070.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.29%)</title><rect x="868.5" y="1043.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="871.5" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.29%)</title><rect x="871.9" y="1043.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.9" y="1054.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.29%)</title><rect x="871.9" y="1027.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="874.9" y="1038.0"></text>
</g>
<g>
<title>_init (1 samples, 0.29%)</title><rect x="871.9" y="1011.0" width="3.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="874.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 8.70%)</title><rect x="875.3" y="1091.0" width="102.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="878.3" y="1102.0">PhaseChaitin..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="875.3" y="1075.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="878.3" y="1086.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.87%)</title><rect x="878.8" y="1075.0" width="10.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.58%)</title><rect x="889.0" y="1075.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="892.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.58%)</title><rect x="889.0" y="1059.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="892.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.74%)</title><rect x="895.9" y="1075.0" width="20.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="898.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.45%)</title><rect x="916.4" y="1075.0" width="17.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="919.4" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="926.6" y="1059.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="929.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.29%)</title><rect x="930.1" y="1059.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.58%)</title><rect x="933.5" y="1075.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.5" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.29%)</title><rect x="936.9" y="1059.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.9" y="1070.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.16%)</title><rect x="940.3" y="1075.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="943.3" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.16%)</title><rect x="940.3" y="1059.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="943.3" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.16%)</title><rect x="940.3" y="1043.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="943.3" y="1054.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.58%)</title><rect x="940.3" y="1027.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.3" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.58%)</title><rect x="947.2" y="1027.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="950.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.58%)</title><rect x="954.0" y="1075.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="957.0" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="957.4" y="1059.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.4" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.45%)</title><rect x="960.8" y="1075.0" width="17.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="963.8" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.29%)</title><rect x="964.3" y="1059.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="967.3" y="1070.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.29%)</title><rect x="967.7" y="1059.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.7" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.58%)</title><rect x="971.1" y="1059.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="974.1" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="974.5" y="1043.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="977.5" y="1054.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.29%)</title><rect x="977.9" y="1091.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.9" y="1102.0"></text>
</g>
<g>
<title>checkCastPPNode::ideal_Opcode() const (1 samples, 0.29%)</title><rect x="981.4" y="1091.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.4" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (49 samples, 14.20%)</title><rect x="984.8" y="1107.0" width="167.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.8" y="1118.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.29%)</title><rect x="984.8" y="1091.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.29%)</title><rect x="984.8" y="1075.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="987.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="1059.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="1043.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="1027.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="987.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="1011.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="995.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="987.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="979.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="987.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="963.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="947.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="987.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="931.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="987.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="915.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="899.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="987.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="883.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="867.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="851.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="835.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="819.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.29%)</title><rect x="984.8" y="803.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.8" y="814.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.29%)</title><rect x="984.8" y="787.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.8" y="798.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.29%)</title><rect x="984.8" y="771.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.8" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.29%)</title><rect x="988.2" y="1091.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="991.2" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.29%)</title><rect x="988.2" y="1075.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.2" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.29%)</title><rect x="988.2" y="1059.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="991.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (39 samples, 11.30%)</title><rect x="991.6" y="1091.0" width="133.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.6" y="1102.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.29%)</title><rect x="991.6" y="1075.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="994.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (34 samples, 9.86%)</title><rect x="995.0" y="1075.0" width="116.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.0" y="1086.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (32 samples, 9.28%)</title><rect x="1001.9" y="1059.0" width="109.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1004.9" y="1070.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (30 samples, 8.70%)</title><rect x="1008.7" y="1043.0" width="102.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1011.7" y="1054.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.58%)</title><rect x="1084.0" y="1027.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.58%)</title><rect x="1084.0" y="1011.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 1.74%)</title><rect x="1090.8" y="1027.0" width="20.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.29%)</title><rect x="1111.3" y="1075.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.87%)</title><rect x="1114.8" y="1075.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="1086.0"></text>
</g>
<g>
<title>HaltNode::Opcode() const (1 samples, 0.29%)</title><rect x="1114.8" y="1059.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.29%)</title><rect x="1118.2" y="1059.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.29%)</title><rect x="1118.2" y="1043.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.29%)</title><rect x="1121.6" y="1059.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.29%)</title><rect x="1121.6" y="1043.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.29%)</title><rect x="1121.6" y="1027.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 2.03%)</title><rect x="1125.0" y="1091.0" width="24.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.0" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 2.03%)</title><rect x="1125.0" y="1075.0" width="24.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.0" y="1086.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1128.4" y="1059.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.4" y="1070.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1128.4" y="1043.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.4" y="1054.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1131.9" y="1059.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.29%)</title><rect x="1135.3" y="1059.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.29%)</title><rect x="1135.3" y="1043.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.3" y="1054.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.29%)</title><rect x="1135.3" y="1027.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.3" y="1038.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1138.7" y="1059.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="1070.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1142.1" y="1059.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.1" y="1070.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.29%)</title><rect x="1142.1" y="1043.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.1" y="1054.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1145.5" y="1059.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.5" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.29%)</title><rect x="1145.5" y="1043.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.5" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="1027.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.5" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="1011.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.5" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="995.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.5" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="979.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="963.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="947.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="931.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="915.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="899.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="883.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.5" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="867.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="851.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.5" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1145.5" y="835.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.5" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1145.5" y="819.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.5" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.29%)</title><rect x="1149.0" y="1091.0" width="3.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1152.0" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.74%)</title><rect x="1152.4" y="1107.0" width="20.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.74%)</title><rect x="1152.4" y="1091.0" width="20.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.74%)</title><rect x="1152.4" y="1075.0" width="20.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.74%)</title><rect x="1152.4" y="1059.0" width="20.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.74%)</title><rect x="1152.4" y="1043.0" width="20.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.45%)</title><rect x="1152.4" y="1027.0" width="17.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.16%)</title><rect x="1152.4" y="1011.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.16%)</title><rect x="1152.4" y="995.0" width="13.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.16%)</title><rect x="1152.4" y="979.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.16%)</title><rect x="1152.4" y="963.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.16%)</title><rect x="1152.4" y="947.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.16%)</title><rect x="1152.4" y="931.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1152.4" y="915.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1152.4" y="899.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1152.4" y="883.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1152.4" y="867.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1152.4" y="851.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1152.4" y="835.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1152.4" y="819.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1152.4" y="803.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1152.4" y="787.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1152.4" y="771.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1152.4" y="755.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1152.4" y="739.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1152.4" y="723.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1152.4" y="707.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1152.4" y="691.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1152.4" y="675.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1152.4" y="659.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1152.4" y="643.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1152.4" y="627.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1152.4" y="611.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1152.4" y="595.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1152.4" y="579.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1152.4" y="563.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1152.4" y="547.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1152.4" y="531.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1152.4" y="515.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1152.4" y="499.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1152.4" y="483.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1152.4" y="467.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1152.4" y="451.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.4" y="462.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1152.4" y="435.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="446.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_string_equals() (1 samples, 0.29%)</title><rect x="1152.4" y="419.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.4" y="430.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.29%)</title><rect x="1152.4" y="403.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.4" y="414.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.29%)</title><rect x="1152.4" y="387.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.4" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.87%)</title><rect x="1155.8" y="915.0" width="10.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.87%)</title><rect x="1155.8" y="899.0" width="10.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.87%)</title><rect x="1155.8" y="883.0" width="10.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.87%)</title><rect x="1155.8" y="867.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.87%)</title><rect x="1155.8" y="851.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.87%)</title><rect x="1155.8" y="835.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.87%)</title><rect x="1155.8" y="819.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.87%)</title><rect x="1155.8" y="803.0" width="10.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.87%)</title><rect x="1155.8" y="787.0" width="10.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.87%)</title><rect x="1155.8" y="771.0" width="10.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.87%)</title><rect x="1155.8" y="755.0" width="10.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.87%)</title><rect x="1155.8" y="739.0" width="10.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.87%)</title><rect x="1155.8" y="723.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.87%)</title><rect x="1155.8" y="707.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.87%)</title><rect x="1155.8" y="691.0" width="10.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.87%)</title><rect x="1155.8" y="675.0" width="10.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.87%)</title><rect x="1155.8" y="659.0" width="10.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.87%)</title><rect x="1155.8" y="643.0" width="10.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.87%)</title><rect x="1155.8" y="627.0" width="10.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.8" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1155.8" y="611.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.8" y="622.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1155.8" y="595.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.8" y="606.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="1155.8" y="579.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.8" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.29%)</title><rect x="1155.8" y="563.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.8" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.29%)</title><rect x="1155.8" y="547.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.8" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1155.8" y="531.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.8" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1155.8" y="515.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.8" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.29%)</title><rect x="1155.8" y="499.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.29%)</title><rect x="1155.8" y="483.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.8" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.29%)</title><rect x="1155.8" y="467.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.8" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="1155.8" y="451.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.8" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="1155.8" y="435.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.8" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.29%)</title><rect x="1155.8" y="419.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1159.2" y="611.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1159.2" y="595.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.2" y="606.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.29%)</title><rect x="1159.2" y="579.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.29%)</title><rect x="1159.2" y="563.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.2" y="574.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.29%)</title><rect x="1159.2" y="547.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.2" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.29%)</title><rect x="1159.2" y="531.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.2" y="542.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.29%)</title><rect x="1159.2" y="515.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.2" y="526.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.29%)</title><rect x="1159.2" y="499.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.2" y="510.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.29%)</title><rect x="1159.2" y="483.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.2" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.29%)</title><rect x="1159.2" y="467.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.2" y="478.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="1159.2" y="451.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.2" y="462.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.29%)</title><rect x="1159.2" y="435.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.6" y="579.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.6" y="563.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.6" y="547.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.6" y="531.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.6" y="515.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.6" y="499.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.6" y="483.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.6" y="467.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.6" y="451.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.6" y="435.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.6" y="419.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.6" y="403.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.6" y="387.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.6" y="371.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.6" y="355.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.6" y="339.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.6" y="323.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.6" y="307.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.6" y="291.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.6" y="275.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.6" y="259.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.6" y="243.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.6" y="227.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.6" y="211.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.6" y="195.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.6" y="179.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.6" y="163.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.6" y="147.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.6" y="131.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.6" y="115.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.6" y="99.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.29%)</title><rect x="1162.6" y="83.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.29%)</title><rect x="1162.6" y="67.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.29%)</title><rect x="1162.6" y="51.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.29%)</title><rect x="1162.6" y="35.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1166.1" y="1011.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.1" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1166.1" y="995.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1166.1" y="979.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1166.1" y="963.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1166.1" y="947.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1166.1" y="931.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1166.1" y="915.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.1" y="926.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1166.1" y="899.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1166.1" y="883.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1166.1" y="867.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1166.1" y="851.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1166.1" y="835.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1166.1" y="819.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1166.1" y="803.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.1" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1166.1" y="787.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1166.1" y="771.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1166.1" y="755.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1166.1" y="739.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1166.1" y="723.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1166.1" y="707.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1166.1" y="691.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1166.1" y="675.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1166.1" y="659.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1166.1" y="643.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1166.1" y="627.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1166.1" y="611.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.29%)</title><rect x="1166.1" y="595.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="606.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.29%)</title><rect x="1166.1" y="579.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.29%)</title><rect x="1169.5" y="1027.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.29%)</title><rect x="1169.5" y="1011.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.5" y="1022.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.29%)</title><rect x="1169.5" y="995.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.5" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.29%)</title><rect x="1169.5" y="979.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.5" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.29%)</title><rect x="1169.5" y="963.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="974.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.29%)</title><rect x="1169.5" y="947.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.5" y="958.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.29%)</title><rect x="1169.5" y="931.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.5" y="942.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.29%)</title><rect x="1169.5" y="915.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.5" y="926.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.29%)</title><rect x="1172.9" y="1107.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.9" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.29%)</title><rect x="1172.9" y="1091.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.87%)</title><rect x="1176.3" y="1139.0" width="10.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1150.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.87%)</title><rect x="1176.3" y="1123.0" width="10.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.87%)</title><rect x="1176.3" y="1107.0" width="10.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.87%)</title><rect x="1176.3" y="1091.0" width="10.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="1102.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.29%)</title><rect x="1176.3" y="1075.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.3" y="1086.0"></text>
</g>
<g>
<title>IR::compute_code() (1 samples, 0.29%)</title><rect x="1176.3" y="1059.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="1070.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (1 samples, 0.29%)</title><rect x="1176.3" y="1043.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="1054.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_order(BlockBegin*) (1 samples, 0.29%)</title><rect x="1176.3" y="1027.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.58%)</title><rect x="1179.7" y="1075.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.7" y="1086.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.29%)</title><rect x="1179.7" y="1059.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.29%)</title><rect x="1179.7" y="1043.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::do_Return(Return*) (1 samples, 0.29%)</title><rect x="1179.7" y="1027.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="1038.0"></text>
</g>
<g>
<title>LIRGenerator::result_register_for(ValueType*, bool) (1 samples, 0.29%)</title><rect x="1179.7" y="1011.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="1022.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.29%)</title><rect x="1183.2" y="1059.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="1070.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.29%)</title><rect x="1183.2" y="1043.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="1054.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.29%)</title><rect x="1183.2" y="1027.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="1038.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.29%)</title><rect x="1186.6" y="1203.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="1214.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.29%)</title><rect x="1186.6" y="1187.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="1198.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.29%)</title><rect x="1186.6" y="1171.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.6" y="1182.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.29%)</title><rect x="1186.6" y="1155.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="1166.0"></text>
</g>
<g>
<title>_init (1 samples, 0.29%)</title><rect x="1186.6" y="1139.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1189.6" y="1150.0"></text>
</g>
</g>
</svg>
