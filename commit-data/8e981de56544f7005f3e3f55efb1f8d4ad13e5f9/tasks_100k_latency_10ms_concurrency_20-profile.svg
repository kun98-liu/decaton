<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (337 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.30%)</title><rect x="10.0" y="1043.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.30%)</title><rect x="13.5" y="1043.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.5" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.30%)</title><rect x="13.5" y="1027.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.30%)</title><rect x="13.5" y="1011.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.5" y="1022.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.30%)</title><rect x="13.5" y="995.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="16.5" y="1006.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.59%)</title><rect x="17.0" y="1043.0" width="7.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="20.0" y="1054.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.59%)</title><rect x="17.0" y="1027.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 5.93%)</title><rect x="24.0" y="1043.0" width="70.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.0" y="1054.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (20 samples, 5.93%)</title><rect x="24.0" y="1027.0" width="70.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.0" y="1038.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (20 samples, 5.93%)</title><rect x="24.0" y="1011.0" width="70.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.0" y="1022.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (3 samples, 0.89%)</title><rect x="24.0" y="995.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (3 samples, 0.89%)</title><rect x="24.0" y="979.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (3 samples, 0.89%)</title><rect x="24.0" y="963.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.30%)</title><rect x="31.0" y="947.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.30%)</title><rect x="31.0" y="931.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.0" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.30%)</title><rect x="31.0" y="915.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.30%)</title><rect x="31.0" y="899.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.30%)</title><rect x="31.0" y="883.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.30%)</title><rect x="34.5" y="995.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.30%)</title><rect x="34.5" y="979.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.30%)</title><rect x="34.5" y="963.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$272/330486860.accept (1 samples, 0.30%)</title><rect x="34.5" y="947.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.30%)</title><rect x="34.5" y="931.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.30%)</title><rect x="34.5" y="915.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.5" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.30%)</title><rect x="34.5" y="899.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.48%)</title><rect x="38.0" y="995.0" width="17.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/2061867191.accept (5 samples, 1.48%)</title><rect x="38.0" y="979.0" width="17.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.48%)</title><rect x="38.0" y="963.0" width="17.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (3 samples, 0.89%)</title><rect x="38.0" y="947.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 0.89%)</title><rect x="38.0" y="931.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 0.89%)</title><rect x="38.0" y="915.0" width="10.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="41.0" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (3 samples, 0.89%)</title><rect x="38.0" y="899.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.0" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (3 samples, 0.89%)</title><rect x="38.0" y="883.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.0" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepCounter.increment (1 samples, 0.30%)</title><rect x="38.0" y="867.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/DoubleAdder.add (1 samples, 0.30%)</title><rect x="38.0" y="851.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.0" y="862.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (2 samples, 0.59%)</title><rect x="41.5" y="867.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.30%)</title><rect x="48.5" y="947.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.30%)</title><rect x="48.5" y="931.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.30%)</title><rect x="48.5" y="915.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.30%)</title><rect x="48.5" y="899.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.30%)</title><rect x="52.0" y="947.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.30%)</title><rect x="52.0" y="931.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.30%)</title><rect x="52.0" y="915.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.30%)</title><rect x="52.0" y="899.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.0" y="910.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.30%)</title><rect x="52.0" y="883.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.0" y="894.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.30%)</title><rect x="52.0" y="867.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.0" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.30%)</title><rect x="52.0" y="851.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.26%)</title><rect x="55.5" y="995.0" width="38.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.5" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 3.26%)</title><rect x="55.5" y="979.0" width="38.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.5" y="990.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.26%)</title><rect x="55.5" y="963.0" width="38.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.5" y="974.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.19%)</title><rect x="55.5" y="947.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.19%)</title><rect x="55.5" y="931.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.30%)</title><rect x="55.5" y="915.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.30%)</title><rect x="55.5" y="899.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.30%)</title><rect x="55.5" y="883.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.hasExpiredRequest (1 samples, 0.30%)</title><rect x="55.5" y="867.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (3 samples, 0.89%)</title><rect x="59.0" y="915.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (3 samples, 0.89%)</title><rect x="59.0" y="899.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (3 samples, 0.89%)</title><rect x="59.0" y="883.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.30%)</title><rect x="59.0" y="867.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.30%)</title><rect x="59.0" y="851.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (2 samples, 0.59%)</title><rect x="62.5" y="867.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (2 samples, 0.59%)</title><rect x="62.5" y="851.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (2 samples, 0.59%)</title><rect x="62.5" y="835.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.30%)</title><rect x="62.5" y="819.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.responseData (1 samples, 0.30%)</title><rect x="62.5" y="803.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.30%)</title><rect x="66.0" y="819.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.30%)</title><rect x="66.0" y="803.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (5 samples, 1.48%)</title><rect x="69.5" y="947.0" width="17.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.19%)</title><rect x="69.5" y="931.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (4 samples, 1.19%)</title><rect x="69.5" y="915.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.19%)</title><rect x="69.5" y="899.0" width="14.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.59%)</title><rect x="69.5" y="883.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.30%)</title><rect x="73.0" y="867.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.30%)</title><rect x="73.0" y="851.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="76.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.30%)</title><rect x="73.0" y="835.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.30%)</title><rect x="73.0" y="819.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.30%)</title><rect x="73.0" y="803.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (2 samples, 0.59%)</title><rect x="76.5" y="883.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.59%)</title><rect x="76.5" y="867.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.59%)</title><rect x="76.5" y="851.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.5" y="862.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.59%)</title><rect x="76.5" y="835.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.30%)</title><rect x="83.5" y="931.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.5" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.30%)</title><rect x="83.5" y="915.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="86.5" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.30%)</title><rect x="83.5" y="899.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="86.5" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.30%)</title><rect x="83.5" y="883.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="86.5" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.30%)</title><rect x="83.5" y="867.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="86.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.30%)</title><rect x="87.0" y="947.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.30%)</title><rect x="87.0" y="931.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.add (1 samples, 0.30%)</title><rect x="87.0" y="915.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.putIfAbsent (1 samples, 0.30%)</title><rect x="87.0" y="899.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.30%)</title><rect x="87.0" y="883.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.trace (1 samples, 0.30%)</title><rect x="90.5" y="947.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.5" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.30%)</title><rect x="90.5" y="931.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.5" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (238 samples, 70.62%)</title><rect x="94.0" y="1043.0" width="833.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.0" y="1054.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (238 samples, 70.62%)</title><rect x="94.0" y="1027.0" width="833.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.0" y="1038.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (238 samples, 70.62%)</title><rect x="94.0" y="1011.0" width="833.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.0" y="1022.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$504/940006857.run (225 samples, 66.77%)</title><rect x="94.0" y="995.0" width="787.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.0" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$504/940006857.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (225 samples, 66.77%)</title><rect x="94.0" y="979.0" width="787.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.0" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (225 samples, 66.77%)</title><rect x="94.0" y="963.0" width="787.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="97.0" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (216 samples, 64.09%)</title><rect x="94.0" y="947.0" width="756.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.0" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (12 samples, 3.56%)</title><rect x="94.0" y="931.0" width="42.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="97.0" y="942.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.56%)</title><rect x="94.0" y="915.0" width="42.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.0" y="926.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 3.56%)</title><rect x="94.0" y="899.0" width="42.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.0" y="910.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.48%)</title><rect x="118.5" y="883.0" width="17.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.30%)</title><rect x="118.5" y="867.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$516/479741367.accept (1 samples, 0.30%)</title><rect x="118.5" y="851.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="121.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.19%)</title><rect x="122.0" y="867.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="125.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$516/479741367.accept (4 samples, 1.19%)</title><rect x="122.0" y="851.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (4 samples, 1.19%)</title><rect x="122.0" y="835.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="125.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 1.19%)</title><rect x="122.0" y="819.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 1.19%)</title><rect x="122.0" y="803.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="125.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.19%)</title><rect x="122.0" y="787.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.19%)</title><rect x="122.0" y="771.0" width="14.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="125.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (2 samples, 0.59%)</title><rect x="136.1" y="931.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="139.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (2 samples, 0.59%)</title><rect x="136.1" y="915.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.59%)</title><rect x="136.1" y="899.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.59%)</title><rect x="136.1" y="883.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.59%)</title><rect x="136.1" y="867.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (17 samples, 5.04%)</title><rect x="143.1" y="931.0" width="59.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.1" y="942.0">com/li..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (17 samples, 5.04%)</title><rect x="143.1" y="915.0" width="59.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.1" y="926.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (14 samples, 4.15%)</title><rect x="143.1" y="899.0" width="49.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.1" y="910.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (9 samples, 2.67%)</title><rect x="143.1" y="883.0" width="31.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.1" y="894.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (9 samples, 2.67%)</title><rect x="143.1" y="867.0" width="31.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="146.1" y="878.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (7 samples, 2.08%)</title><rect x="146.6" y="851.0" width="24.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.6" y="862.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (7 samples, 2.08%)</title><rect x="146.6" y="835.0" width="24.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.6" y="846.0">i..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (7 samples, 2.08%)</title><rect x="146.6" y="819.0" width="24.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.6" y="830.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (7 samples, 2.08%)</title><rect x="146.6" y="803.0" width="24.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.6" y="814.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (7 samples, 2.08%)</title><rect x="146.6" y="787.0" width="24.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.6" y="798.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (4 samples, 1.19%)</title><rect x="146.6" y="771.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.6" y="782.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (3 samples, 0.89%)</title><rect x="146.6" y="755.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="149.6" y="766.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (1 samples, 0.30%)</title><rect x="157.1" y="755.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (1 samples, 0.30%)</title><rect x="157.1" y="739.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="160.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (1 samples, 0.30%)</title><rect x="157.1" y="723.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (1 samples, 0.30%)</title><rect x="157.1" y="707.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="160.1" y="718.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (3 samples, 0.89%)</title><rect x="160.6" y="771.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.6" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.30%)</title><rect x="171.1" y="851.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="174.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="171.1" y="835.0" width="3.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="174.1" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (5 samples, 1.48%)</title><rect x="174.6" y="883.0" width="17.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.6" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (5 samples, 1.48%)</title><rect x="174.6" y="867.0" width="17.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.6" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 1.19%)</title><rect x="178.1" y="851.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="188.6" y="835.0" width="3.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="191.6" y="846.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (3 samples, 0.89%)</title><rect x="192.1" y="899.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.1" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.30%)</title><rect x="199.1" y="883.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="202.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="199.1" y="867.0" width="3.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="202.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (29 samples, 8.61%)</title><rect x="202.6" y="931.0" width="101.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.6" y="942.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1504937617.extract (29 samples, 8.61%)</title><rect x="202.6" y="915.0" width="101.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.6" y="926.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (29 samples, 8.61%)</title><rect x="202.6" y="899.0" width="101.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.6" y="910.0">com/linecorp..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="202.6" y="883.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="205.6" y="894.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.30%)</title><rect x="202.6" y="867.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="205.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 8.31%)</title><rect x="206.1" y="883.0" width="98.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.1" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 8.31%)</title><rect x="206.1" y="867.0" width="98.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.1" y="878.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (28 samples, 8.31%)</title><rect x="206.1" y="851.0" width="98.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.1" y="862.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.30%)</title><rect x="206.1" y="835.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.30%)</title><rect x="206.1" y="819.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.30%)</title><rect x="206.1" y="803.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.1" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="206.1" y="787.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="209.1" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.30%)</title><rect x="206.1" y="771.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="209.1" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.30%)</title><rect x="206.1" y="755.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="209.1" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.30%)</title><rect x="206.1" y="739.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="209.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (16 samples, 4.75%)</title><rect x="209.6" y="835.0" width="56.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.6" y="846.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.30%)</title><rect x="209.6" y="819.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.30%)</title><rect x="209.6" y="803.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.59%)</title><rect x="213.1" y="819.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.30%)</title><rect x="216.6" y="803.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.30%)</title><rect x="216.6" y="787.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.30%)</title><rect x="216.6" y="771.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.30%)</title><rect x="220.1" y="819.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.30%)</title><rect x="220.1" y="803.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="223.1" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.30%)</title><rect x="220.1" y="787.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="223.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (12 samples, 3.56%)</title><rect x="223.6" y="819.0" width="42.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.6" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 3.56%)</title><rect x="223.6" y="803.0" width="42.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.6" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.19%)</title><rect x="223.6" y="787.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.89%)</title><rect x="223.6" y="771.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.30%)</title><rect x="227.1" y="755.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.30%)</title><rect x="227.1" y="739.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.30%)</title><rect x="230.6" y="755.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.30%)</title><rect x="230.6" y="739.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.30%)</title><rect x="230.6" y="723.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.30%)</title><rect x="230.6" y="707.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.30%)</title><rect x="234.1" y="771.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.30%)</title><rect x="234.1" y="755.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.37%)</title><rect x="237.6" y="787.0" width="28.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.6" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.37%)</title><rect x="237.6" y="771.0" width="28.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.6" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.37%)</title><rect x="237.6" y="755.0" width="28.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.6" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.89%)</title><rect x="237.6" y="739.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="240.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.30%)</title><rect x="237.6" y="723.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.30%)</title><rect x="237.6" y="707.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.30%)</title><rect x="237.6" y="691.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.30%)</title><rect x="237.6" y="675.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.30%)</title><rect x="237.6" y="659.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.59%)</title><rect x="241.1" y="723.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.59%)</title><rect x="241.1" y="707.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.30%)</title><rect x="244.6" y="691.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/JavaType.getRawClass (1 samples, 0.30%)</title><rect x="248.1" y="739.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.30%)</title><rect x="251.6" y="739.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.30%)</title><rect x="251.6" y="723.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.30%)</title><rect x="251.6" y="707.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.30%)</title><rect x="251.6" y="691.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.6" y="702.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.30%)</title><rect x="251.6" y="675.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.6" y="686.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.30%)</title><rect x="251.6" y="659.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.30%)</title><rect x="255.1" y="739.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.30%)</title><rect x="255.1" y="723.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.30%)</title><rect x="255.1" y="707.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.30%)</title><rect x="255.1" y="691.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.30%)</title><rect x="258.6" y="739.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.6" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.30%)</title><rect x="258.6" y="723.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="261.6" y="734.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.30%)</title><rect x="258.6" y="707.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="261.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.assignParameter (1 samples, 0.30%)</title><rect x="262.1" y="739.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 3.26%)</title><rect x="265.6" y="835.0" width="38.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.6" y="846.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 3.26%)</title><rect x="265.6" y="819.0" width="38.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.6" y="830.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 3.26%)</title><rect x="265.6" y="803.0" width="38.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.6" y="814.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 3.26%)</title><rect x="265.6" y="787.0" width="38.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.6" y="798.0">com..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 3.26%)</title><rect x="265.6" y="771.0" width="38.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.6" y="782.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (156 samples, 46.29%)</title><rect x="304.1" y="931.0" width="546.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.1" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (11 samples, 3.26%)</title><rect x="304.1" y="915.0" width="38.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.1" y="926.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (11 samples, 3.26%)</title><rect x="304.1" y="899.0" width="38.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.1" y="910.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (9 samples, 2.67%)</title><rect x="311.1" y="883.0" width="31.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.1" y="894.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.30%)</title><rect x="314.6" y="867.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.30%)</title><rect x="314.6" y="851.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.30%)</title><rect x="314.6" y="835.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.6" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.89%)</title><rect x="318.1" y="867.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="321.1" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.59%)</title><rect x="318.1" y="851.0" width="7.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="321.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="321.6" y="835.0" width="3.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="324.6" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.30%)</title><rect x="325.1" y="851.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.30%)</title><rect x="325.1" y="835.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.1" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.19%)</title><rect x="328.6" y="867.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="331.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.19%)</title><rect x="328.6" y="851.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.30%)</title><rect x="328.6" y="835.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.89%)</title><rect x="332.1" y="835.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="335.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.59%)</title><rect x="342.6" y="915.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="345.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.59%)</title><rect x="342.6" y="899.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="345.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (14 samples, 4.15%)</title><rect x="349.6" y="915.0" width="49.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="352.6" y="926.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (11 samples, 3.26%)</title><rect x="349.6" y="899.0" width="38.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="352.6" y="910.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 1.48%)</title><rect x="349.6" y="883.0" width="17.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="352.6" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.59%)</title><rect x="353.1" y="867.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="356.1" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.59%)</title><rect x="353.1" y="851.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.1" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.59%)</title><rect x="353.1" y="835.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.1" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.59%)</title><rect x="353.1" y="819.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.1" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.59%)</title><rect x="353.1" y="803.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="356.1" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.59%)</title><rect x="353.1" y="787.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="356.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.59%)</title><rect x="353.1" y="771.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="356.1" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.59%)</title><rect x="353.1" y="755.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="356.1" y="766.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.59%)</title><rect x="353.1" y="739.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="356.1" y="750.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.30%)</title><rect x="356.6" y="723.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="359.6" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.59%)</title><rect x="360.1" y="867.0" width="7.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="363.1" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 1.78%)</title><rect x="367.2" y="883.0" width="21.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.2" y="894.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.48%)</title><rect x="370.7" y="867.0" width="17.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="373.7" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.59%)</title><rect x="370.7" y="851.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.7" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 0.89%)</title><rect x="377.7" y="851.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.89%)</title><rect x="377.7" y="835.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="380.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.89%)</title><rect x="377.7" y="819.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.30%)</title><rect x="381.2" y="803.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="384.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.30%)</title><rect x="384.7" y="803.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="387.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (3 samples, 0.89%)</title><rect x="388.2" y="899.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (3 samples, 0.89%)</title><rect x="388.2" y="883.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.2" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.89%)</title><rect x="388.2" y="867.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="391.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.30%)</title><rect x="388.2" y="851.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="391.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.30%)</title><rect x="388.2" y="835.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.2" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 0.59%)</title><rect x="391.7" y="851.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.59%)</title><rect x="391.7" y="835.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.7" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.30%)</title><rect x="395.2" y="819.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="398.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (87 samples, 25.82%)</title><rect x="398.7" y="915.0" width="304.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="401.7" y="926.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (86 samples, 25.52%)</title><rect x="402.2" y="899.0" width="301.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="405.2" y="910.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$430/1419431066.process (73 samples, 21.66%)</title><rect x="409.2" y="883.0" width="255.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.2" y="894.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (73 samples, 21.66%)</title><rect x="409.2" y="867.0" width="255.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.2" y="878.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (70 samples, 20.77%)</title><rect x="409.2" y="851.0" width="245.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.2" y="862.0">com/linecorp/decaton/benchmark/Re..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ExecutionRecord.process (57 samples, 16.91%)</title><rect x="419.7" y="835.0" width="199.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.7" y="846.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (54 samples, 16.02%)</title><rect x="419.7" y="819.0" width="189.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.7" y="830.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (49 samples, 14.54%)</title><rect x="430.2" y="803.0" width="171.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="433.2" y="814.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 1.19%)</title><rect x="437.2" y="787.0" width="14.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="440.2" y="798.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.30%)</title><rect x="451.2" y="787.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="454.2" y="798.0"></text>
</g>
<g>
<title>__lll_unlock_wake (9 samples, 2.67%)</title><rect x="454.7" y="787.0" width="31.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="457.7" y="798.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 3.56%)</title><rect x="486.2" y="787.0" width="42.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="489.2" y="798.0">__pt..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.30%)</title><rect x="528.2" y="787.0" width="3.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="531.2" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.30%)</title><rect x="531.7" y="787.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="534.7" y="798.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (18 samples, 5.34%)</title><rect x="535.2" y="787.0" width="63.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="538.2" y="798.0">os::sle..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.19%)</title><rect x="552.7" y="771.0" width="14.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="555.7" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="566.7" y="771.0" width="3.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="569.7" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.59%)</title><rect x="570.2" y="771.0" width="7.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="573.2" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 1.78%)</title><rect x="577.2" y="771.0" width="21.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="580.2" y="782.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.30%)</title><rect x="598.2" y="787.0" width="3.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="601.2" y="798.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.30%)</title><rect x="601.8" y="803.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="604.8" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.30%)</title><rect x="605.3" y="803.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="608.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.compareAndSet (3 samples, 0.89%)</title><rect x="608.8" y="819.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="611.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 2.37%)</title><rect x="619.3" y="835.0" width="28.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.3" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (2 samples, 0.59%)</title><rect x="647.3" y="835.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.59%)</title><rect x="647.3" y="819.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="650.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (2 samples, 0.59%)</title><rect x="647.3" y="803.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.59%)</title><rect x="647.3" y="787.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.3" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.59%)</title><rect x="647.3" y="771.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.3" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.59%)</title><rect x="647.3" y="755.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="650.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.89%)</title><rect x="654.3" y="851.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="657.3" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.89%)</title><rect x="654.3" y="835.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="657.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.89%)</title><rect x="654.3" y="819.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.30%)</title><rect x="661.3" y="803.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="664.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.30%)</title><rect x="664.8" y="883.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="667.8" y="894.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.30%)</title><rect x="664.8" y="867.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="667.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.30%)</title><rect x="664.8" y="851.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="667.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.30%)</title><rect x="668.3" y="883.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="671.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.30%)</title><rect x="668.3" y="867.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (6 samples, 1.78%)</title><rect x="671.8" y="883.0" width="21.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="674.8" y="894.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.89%)</title><rect x="692.8" y="883.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="695.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.89%)</title><rect x="692.8" y="867.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="695.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.89%)</title><rect x="692.8" y="851.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="695.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.59%)</title><rect x="692.8" y="835.0" width="7.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="695.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$506/1137409634.accept (1 samples, 0.30%)</title><rect x="696.3" y="819.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="699.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.30%)</title><rect x="699.8" y="835.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.8" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (26 samples, 7.72%)</title><rect x="703.3" y="915.0" width="91.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="706.3" y="926.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (26 samples, 7.72%)</title><rect x="703.3" y="899.0" width="91.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="706.3" y="910.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (26 samples, 7.72%)</title><rect x="703.3" y="883.0" width="91.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="706.3" y="894.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (21 samples, 6.23%)</title><rect x="710.3" y="867.0" width="73.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.3" y="878.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (21 samples, 6.23%)</title><rect x="710.3" y="851.0" width="73.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="713.3" y="862.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (19 samples, 5.64%)</title><rect x="710.3" y="835.0" width="66.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.3" y="846.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (19 samples, 5.64%)</title><rect x="710.3" y="819.0" width="66.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="713.3" y="830.0">io/micr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (19 samples, 5.64%)</title><rect x="710.3" y="803.0" width="66.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="713.3" y="814.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (19 samples, 5.64%)</title><rect x="710.3" y="787.0" width="66.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="713.3" y="798.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (19 samples, 5.64%)</title><rect x="710.3" y="771.0" width="66.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.3" y="782.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (13 samples, 3.86%)</title><rect x="710.3" y="755.0" width="45.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.3" y="766.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (10 samples, 2.97%)</title><rect x="710.3" y="739.0" width="35.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="713.3" y="750.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (3 samples, 0.89%)</title><rect x="745.3" y="739.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="748.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (3 samples, 0.89%)</title><rect x="745.3" y="723.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="748.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (3 samples, 0.89%)</title><rect x="745.3" y="707.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="748.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (3 samples, 0.89%)</title><rect x="745.3" y="691.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="748.3" y="702.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (6 samples, 1.78%)</title><rect x="755.8" y="755.0" width="21.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.8" y="766.0">o..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.59%)</title><rect x="776.8" y="835.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="779.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.59%)</title><rect x="776.8" y="819.0" width="7.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="779.8" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (3 samples, 0.89%)</title><rect x="783.8" y="867.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="786.8" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 0.89%)</title><rect x="783.8" y="851.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="786.8" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.30%)</title><rect x="790.8" y="835.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="793.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 4.75%)</title><rect x="794.3" y="915.0" width="56.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="797.3" y="926.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 4.75%)</title><rect x="794.3" y="899.0" width="56.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="797.3" y="910.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 4.75%)</title><rect x="794.3" y="883.0" width="56.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="797.3" y="894.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 4.75%)</title><rect x="794.3" y="867.0" width="56.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="797.3" y="878.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$514/308259212.accept (16 samples, 4.75%)</title><rect x="794.3" y="851.0" width="56.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.3" y="862.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (16 samples, 4.75%)</title><rect x="794.3" y="835.0" width="56.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="797.3" y="846.0">com/li..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (16 samples, 4.75%)</title><rect x="794.3" y="819.0" width="56.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.3" y="830.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (16 samples, 4.75%)</title><rect x="794.3" y="803.0" width="56.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="797.3" y="814.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (16 samples, 4.75%)</title><rect x="794.3" y="787.0" width="56.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="797.3" y="798.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (13 samples, 3.86%)</title><rect x="794.3" y="771.0" width="45.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.3" y="782.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (13 samples, 3.86%)</title><rect x="794.3" y="755.0" width="45.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="797.3" y="766.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (12 samples, 3.56%)</title><rect x="797.8" y="739.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="800.8" y="750.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (12 samples, 3.56%)</title><rect x="797.8" y="723.0" width="42.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="800.8" y="734.0">io/m..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (12 samples, 3.56%)</title><rect x="797.8" y="707.0" width="42.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="800.8" y="718.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (12 samples, 3.56%)</title><rect x="797.8" y="691.0" width="42.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="800.8" y="702.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (12 samples, 3.56%)</title><rect x="797.8" y="675.0" width="42.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="800.8" y="686.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (11 samples, 3.26%)</title><rect x="797.8" y="659.0" width="38.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="800.8" y="670.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (7 samples, 2.08%)</title><rect x="797.8" y="643.0" width="24.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="800.8" y="654.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (4 samples, 1.19%)</title><rect x="822.3" y="643.0" width="14.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="825.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (4 samples, 1.19%)</title><rect x="822.3" y="627.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (4 samples, 1.19%)</title><rect x="822.3" y="611.0" width="14.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="825.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (4 samples, 1.19%)</title><rect x="822.3" y="595.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.3" y="606.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.30%)</title><rect x="836.4" y="659.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.4" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (3 samples, 0.89%)</title><rect x="839.9" y="771.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="842.9" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 0.89%)</title><rect x="839.9" y="755.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="842.9" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.30%)</title><rect x="846.9" y="739.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="849.9" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.30%)</title><rect x="846.9" y="723.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="849.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="846.9" y="707.0" width="3.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="849.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.59%)</title><rect x="850.4" y="947.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="853.4" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.59%)</title><rect x="850.4" y="931.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="853.4" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.59%)</title><rect x="850.4" y="915.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="853.4" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (7 samples, 2.08%)</title><rect x="857.4" y="947.0" width="24.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.4" y="958.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (7 samples, 2.08%)</title><rect x="857.4" y="931.0" width="24.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.4" y="942.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (7 samples, 2.08%)</title><rect x="857.4" y="915.0" width="24.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="860.4" y="926.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (2 samples, 0.59%)</title><rect x="874.9" y="899.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="877.9" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.59%)</title><rect x="874.9" y="883.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="877.9" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.59%)</title><rect x="874.9" y="867.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="877.9" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.30%)</title><rect x="878.4" y="851.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="881.4" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.30%)</title><rect x="878.4" y="835.0" width="3.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="881.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.30%)</title><rect x="881.9" y="995.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="884.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (1 samples, 0.30%)</title><rect x="885.4" y="995.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="888.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset (1 samples, 0.30%)</title><rect x="885.4" y="979.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="888.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1 samples, 0.30%)</title><rect x="885.4" y="963.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="888.4" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry$$Lambda$164/2035381640.run (1 samples, 0.30%)</title><rect x="885.4" y="947.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="888.4" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry.publishSafely (1 samples, 0.30%)</title><rect x="885.4" y="931.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="888.4" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.publish (1 samples, 0.30%)</title><rect x="885.4" y="915.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="888.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (1 samples, 0.30%)</title><rect x="885.4" y="899.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="888.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.30%)</title><rect x="885.4" y="883.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="888.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (1 samples, 0.30%)</title><rect x="885.4" y="867.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="888.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (1 samples, 0.30%)</title><rect x="885.4" y="851.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="888.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.30%)</title><rect x="885.4" y="835.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="888.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.30%)</title><rect x="885.4" y="819.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="888.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$SizedRefSortingSink.end (1 samples, 0.30%)</title><rect x="885.4" y="803.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="888.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (1 samples, 0.30%)</title><rect x="885.4" y="787.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="888.4" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$522/607995382.accept (1 samples, 0.30%)</title><rect x="885.4" y="771.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="888.4" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$12 (1 samples, 0.30%)</title><rect x="885.4" y="755.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="888.4" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Meter.use (1 samples, 0.30%)</title><rect x="885.4" y="739.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="888.4" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$525/1079771674.accept (1 samples, 0.30%)</title><rect x="885.4" y="723.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="888.4" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$5 (1 samples, 0.30%)</title><rect x="885.4" y="707.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="888.4" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.takeSnapshot (1 samples, 0.30%)</title><rect x="885.4" y="691.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="888.4" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.takeSnapshot (1 samples, 0.30%)</title><rect x="885.4" y="675.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="888.4" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.accumulateIfStale (1 samples, 0.30%)</title><rect x="885.4" y="659.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="888.4" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.accumulate (1 samples, 0.30%)</title><rect x="885.4" y="643.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="888.4" y="654.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.getIntervalHistogramInto (1 samples, 0.30%)</title><rect x="885.4" y="627.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="888.4" y="638.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.copyInto (1 samples, 0.30%)</title><rect x="885.4" y="611.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="888.4" y="622.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.add (1 samples, 0.30%)</title><rect x="885.4" y="595.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="888.4" y="606.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValueWithCount (1 samples, 0.30%)</title><rect x="885.4" y="579.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="888.4" y="590.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordCountAtValue (1 samples, 0.30%)</title><rect x="885.4" y="563.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="888.4" y="574.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.30%)</title><rect x="885.4" y="547.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="888.4" y="558.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValueSlowPath (1 samples, 0.30%)</title><rect x="885.4" y="531.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="888.4" y="542.0"></text>
</g>
<g>
<title>libmLog (1 samples, 0.30%)</title><rect x="885.4" y="515.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="888.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (11 samples, 3.26%)</title><rect x="888.9" y="995.0" width="38.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="891.9" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 2.37%)</title><rect x="899.4" y="979.0" width="28.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="902.4" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.30%)</title><rect x="899.4" y="963.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.30%)</title><rect x="899.4" y="947.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="902.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.30%)</title><rect x="899.4" y="931.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 2.08%)</title><rect x="902.9" y="963.0" width="24.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="905.9" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 2.08%)</title><rect x="902.9" y="947.0" width="24.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="905.9" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 2.08%)</title><rect x="902.9" y="931.0" width="24.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="905.9" y="942.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.30%)</title><rect x="927.4" y="1043.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="930.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.sendHeartbeatRequest (1 samples, 0.30%)</title><rect x="927.4" y="1027.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="930.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.30%)</title><rect x="927.4" y="1011.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="930.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.30%)</title><rect x="927.4" y="995.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="930.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.30%)</title><rect x="927.4" y="979.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="930.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (1 samples, 0.30%)</title><rect x="927.4" y="963.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="930.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitCompletion.&lt;init&gt; (1 samples, 0.30%)</title><rect x="930.9" y="1043.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="933.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (1 samples, 0.30%)</title><rect x="930.9" y="1027.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="933.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.30%)</title><rect x="930.9" y="1011.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="933.9" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (1 samples, 0.30%)</title><rect x="930.9" y="995.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.9" y="1006.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.30%)</title><rect x="930.9" y="979.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="933.9" y="990.0"></text>
</g>
<g>
<title>start_thread (73 samples, 21.66%)</title><rect x="934.4" y="1043.0" width="255.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="937.4" y="1054.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (73 samples, 21.66%)</title><rect x="934.4" y="1027.0" width="255.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="937.4" y="1038.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (73 samples, 21.66%)</title><rect x="934.4" y="1011.0" width="255.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="937.4" y="1022.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.08%)</title><rect x="934.4" y="995.0" width="24.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.4" y="1006.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.89%)</title><rect x="934.4" y="979.0" width="10.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="937.4" y="990.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.59%)</title><rect x="934.4" y="963.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.4" y="974.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.59%)</title><rect x="934.4" y="947.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="937.4" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.59%)</title><rect x="934.4" y="931.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.4" y="942.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.59%)</title><rect x="934.4" y="915.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="937.4" y="926.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.59%)</title><rect x="934.4" y="899.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.4" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.59%)</title><rect x="934.4" y="883.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="937.4" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.30%)</title><rect x="937.9" y="867.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.9" y="878.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.30%)</title><rect x="937.9" y="851.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="940.9" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.30%)</title><rect x="941.4" y="963.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.4" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.30%)</title><rect x="941.4" y="947.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="944.4" y="958.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.30%)</title><rect x="941.4" y="931.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.4" y="942.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.30%)</title><rect x="941.4" y="915.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.4" y="926.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.30%)</title><rect x="941.4" y="899.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.4" y="910.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (1 samples, 0.30%)</title><rect x="941.4" y="883.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="944.4" y="894.0"></text>
</g>
<g>
<title>GCIdMark::GCIdMark(unsigned int) (1 samples, 0.30%)</title><rect x="944.9" y="979.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.9" y="990.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 0.89%)</title><rect x="948.4" y="979.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="951.4" y="990.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 0.89%)</title><rect x="948.4" y="963.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.4" y="974.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.59%)</title><rect x="948.4" y="947.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="951.4" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.59%)</title><rect x="948.4" y="931.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.4" y="942.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.30%)</title><rect x="951.9" y="915.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="954.9" y="926.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.30%)</title><rect x="951.9" y="899.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.9" y="910.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.30%)</title><rect x="955.4" y="947.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.4" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (66 samples, 19.58%)</title><rect x="958.9" y="995.0" width="231.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="961.9" y="1006.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (65 samples, 19.29%)</title><rect x="958.9" y="979.0" width="227.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="961.9" y="990.0">CompileBroker::compiler_thread..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (65 samples, 19.29%)</title><rect x="958.9" y="963.0" width="227.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="961.9" y="974.0">CompileBroker::invoke_compiler..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (62 samples, 18.40%)</title><rect x="958.9" y="947.0" width="217.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.9" y="958.0">C2Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (62 samples, 18.40%)</title><rect x="958.9" y="931.0" width="217.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="961.9" y="942.0">Compile::Compile(ciEnv*, C2Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 11.57%)</title><rect x="958.9" y="915.0" width="136.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="961.9" y="926.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.59%)</title><rect x="958.9" y="899.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.9" y="910.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.30%)</title><rect x="958.9" y="883.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.9" y="894.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.30%)</title><rect x="958.9" y="867.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="961.9" y="878.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.30%)</title><rect x="958.9" y="851.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.9" y="862.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.30%)</title><rect x="962.4" y="883.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="965.4" y="894.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.30%)</title><rect x="962.4" y="867.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.4" y="878.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.30%)</title><rect x="962.4" y="851.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.4" y="862.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.30%)</title><rect x="962.4" y="835.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.4" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.30%)</title><rect x="965.9" y="899.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="968.9" y="910.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.30%)</title><rect x="965.9" y="883.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="968.9" y="894.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.30%)</title><rect x="965.9" y="867.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="968.9" y="878.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.30%)</title><rect x="969.4" y="899.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.4" y="910.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.30%)</title><rect x="969.4" y="883.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="972.4" y="894.0"></text>
</g>
<g>
<title>Block::succ_fall_through(unsigned int) (1 samples, 0.30%)</title><rect x="969.4" y="867.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="972.4" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.30%)</title><rect x="972.9" y="899.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="975.9" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.30%)</title><rect x="972.9" y="883.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.9" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.30%)</title><rect x="976.4" y="899.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.4" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.30%)</title><rect x="976.4" y="883.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="979.4" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.30%)</title><rect x="976.4" y="867.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 9.79%)</title><rect x="979.9" y="899.0" width="115.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="982.9" y="910.0">PhaseChaitin::..</text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.30%)</title><rect x="979.9" y="883.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.59%)</title><rect x="983.4" y="883.0" width="7.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.4" y="894.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.30%)</title><rect x="986.9" y="867.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.59%)</title><rect x="990.4" y="883.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.4" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.30%)</title><rect x="990.4" y="867.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="993.4" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.30%)</title><rect x="993.9" y="867.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.19%)</title><rect x="997.4" y="883.0" width="14.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.08%)</title><rect x="1011.4" y="883.0" width="24.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1014.4" y="894.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.30%)</title><rect x="1011.4" y="867.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1014.4" y="878.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.30%)</title><rect x="1011.4" y="851.0" width="3.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1014.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.30%)</title><rect x="1014.9" y="867.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1017.9" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.19%)</title><rect x="1018.4" y="867.0" width="14.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1021.4" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.59%)</title><rect x="1025.4" y="851.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.30%)</title><rect x="1032.4" y="867.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.4" y="878.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.30%)</title><rect x="1032.4" y="851.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.4" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.30%)</title><rect x="1035.9" y="883.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.30%)</title><rect x="1039.4" y="883.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1042.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.59%)</title><rect x="1042.9" y="883.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.9" y="894.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.30%)</title><rect x="1046.4" y="867.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.4" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.89%)</title><rect x="1049.9" y="883.0" width="10.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.9" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.89%)</title><rect x="1060.4" y="883.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1063.4" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.59%)</title><rect x="1070.9" y="883.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.9" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.30%)</title><rect x="1074.5" y="867.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1077.5" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.89%)</title><rect x="1078.0" y="883.0" width="10.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.0" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.59%)</title><rect x="1081.5" y="867.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.5" y="878.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.30%)</title><rect x="1085.0" y="851.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.0" y="862.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (2 samples, 0.59%)</title><rect x="1088.5" y="883.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.5" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (18 samples, 5.34%)</title><rect x="1095.5" y="915.0" width="63.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.5" y="926.0">Compile..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.30%)</title><rect x="1095.5" y="899.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.5" y="910.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.30%)</title><rect x="1095.5" y="883.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.5" y="894.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (3 samples, 0.89%)</title><rect x="1099.0" y="899.0" width="10.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (3 samples, 0.89%)</title><rect x="1099.0" y="883.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.30%)</title><rect x="1099.0" y="867.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.0" y="878.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.30%)</title><rect x="1099.0" y="851.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.0" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.59%)</title><rect x="1102.5" y="867.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.5" y="878.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.30%)</title><rect x="1106.0" y="851.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.0" y="862.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.30%)</title><rect x="1109.5" y="899.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.5" y="910.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.30%)</title><rect x="1109.5" y="883.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.89%)</title><rect x="1113.0" y="899.0" width="10.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.89%)</title><rect x="1113.0" y="883.0" width="10.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) [clone .part.175] (1 samples, 0.30%)</title><rect x="1116.5" y="867.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.30%)</title><rect x="1116.5" y="851.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.5" y="862.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.30%)</title><rect x="1116.5" y="835.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ideal_graph(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.30%)</title><rect x="1120.0" y="867.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ptr_compare(Node*) (1 samples, 0.30%)</title><rect x="1120.0" y="851.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.0" y="862.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.59%)</title><rect x="1123.5" y="899.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.5" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.30%)</title><rect x="1127.0" y="883.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.0" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.30%)</title><rect x="1127.0" y="867.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.0" y="878.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.30%)</title><rect x="1127.0" y="851.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.0" y="862.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.30%)</title><rect x="1127.0" y="835.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.0" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::find_field_from_offset(int, bool, fieldDescriptor*) const (1 samples, 0.30%)</title><rect x="1127.0" y="819.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.0" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field_from_offset(int, bool, fieldDescriptor*) const (1 samples, 0.30%)</title><rect x="1127.0" y="803.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 1.19%)</title><rect x="1130.5" y="899.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.30%)</title><rect x="1130.5" y="883.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.5" y="894.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.30%)</title><rect x="1130.5" y="867.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.59%)</title><rect x="1134.0" y="883.0" width="7.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.30%)</title><rect x="1137.5" y="867.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.30%)</title><rect x="1137.5" y="851.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.30%)</title><rect x="1137.5" y="835.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.5" y="846.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.30%)</title><rect x="1141.0" y="883.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.0" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.89%)</title><rect x="1144.5" y="899.0" width="10.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.5" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.89%)</title><rect x="1144.5" y="883.0" width="10.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.5" y="894.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.59%)</title><rect x="1144.5" y="867.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.5" y="878.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.30%)</title><rect x="1144.5" y="851.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.5" y="862.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.30%)</title><rect x="1148.0" y="851.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.0" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.30%)</title><rect x="1148.0" y="835.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.0" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.30%)</title><rect x="1148.0" y="819.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.0" y="830.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.30%)</title><rect x="1151.5" y="867.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.5" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.30%)</title><rect x="1151.5" y="851.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.5" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.30%)</title><rect x="1151.5" y="835.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.5" y="846.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.30%)</title><rect x="1151.5" y="819.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="830.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.30%)</title><rect x="1155.0" y="899.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="910.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.30%)</title><rect x="1155.0" y="883.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="894.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.30%)</title><rect x="1155.0" y="867.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.48%)</title><rect x="1158.5" y="915.0" width="17.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.5" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.48%)</title><rect x="1158.5" y="899.0" width="17.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.48%)</title><rect x="1158.5" y="883.0" width="17.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.48%)</title><rect x="1158.5" y="867.0" width="17.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.48%)</title><rect x="1158.5" y="851.0" width="17.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.48%)</title><rect x="1158.5" y="835.0" width="17.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.48%)</title><rect x="1158.5" y="819.0" width="17.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.48%)</title><rect x="1158.5" y="803.0" width="17.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.48%)</title><rect x="1158.5" y="787.0" width="17.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.48%)</title><rect x="1158.5" y="771.0" width="17.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.48%)</title><rect x="1158.5" y="755.0" width="17.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.19%)</title><rect x="1158.5" y="739.0" width="14.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.5" y="750.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.30%)</title><rect x="1158.5" y="723.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.5" y="734.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.30%)</title><rect x="1158.5" y="707.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.5" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.30%)</title><rect x="1158.5" y="691.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.89%)</title><rect x="1162.0" y="723.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.89%)</title><rect x="1162.0" y="707.0" width="10.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.59%)</title><rect x="1162.0" y="691.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.59%)</title><rect x="1162.0" y="675.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.59%)</title><rect x="1162.0" y="659.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.59%)</title><rect x="1162.0" y="643.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1162.0" y="627.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1162.0" y="611.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1162.0" y="595.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1162.0" y="579.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1162.0" y="563.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1162.0" y="547.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1162.0" y="531.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1162.0" y="515.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1162.0" y="499.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1162.0" y="483.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1162.0" y="467.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1162.0" y="451.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1162.0" y="435.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1162.0" y="419.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1162.0" y="403.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1162.0" y="387.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1162.0" y="371.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1162.0" y="355.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1162.0" y="339.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1162.0" y="323.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1162.0" y="307.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1162.0" y="291.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1162.0" y="275.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1162.0" y="259.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1162.0" y="243.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.0" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1162.0" y="227.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1162.0" y="211.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1162.0" y="195.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1162.0" y="179.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1162.0" y="163.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.0" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1162.0" y="147.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.0" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1162.0" y="131.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1162.0" y="115.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1162.0" y="99.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1162.0" y="83.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.0" y="94.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.30%)</title><rect x="1162.0" y="67.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.30%)</title><rect x="1162.0" y="51.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="62.0"></text>
</g>
<g>
<title>LoadNode::cmp(Node const&amp;) const (1 samples, 0.30%)</title><rect x="1162.0" y="35.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1165.5" y="627.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1165.5" y="611.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1165.5" y="595.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1165.5" y="579.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1165.5" y="563.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1165.5" y="547.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1165.5" y="531.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1165.5" y="515.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1165.5" y="499.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1165.5" y="483.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1165.5" y="467.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1165.5" y="451.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1165.5" y="435.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1165.5" y="419.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1165.5" y="403.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1165.5" y="387.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1165.5" y="371.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1165.5" y="355.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1165.5" y="339.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1165.5" y="323.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.30%)</title><rect x="1165.5" y="307.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.30%)</title><rect x="1165.5" y="291.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.30%)</title><rect x="1165.5" y="275.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.30%)</title><rect x="1165.5" y="259.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.30%)</title><rect x="1165.5" y="243.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.5" y="254.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.30%)</title><rect x="1165.5" y="227.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.5" y="238.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.30%)</title><rect x="1165.5" y="211.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="222.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.30%)</title><rect x="1165.5" y="195.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="206.0"></text>
</g>
<g>
<title>ciSymbol::make(char const*) (1 samples, 0.30%)</title><rect x="1165.5" y="179.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.5" y="190.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.30%)</title><rect x="1165.5" y="163.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.5" y="174.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.30%)</title><rect x="1165.5" y="147.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.5" y="158.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.30%)</title><rect x="1169.0" y="691.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.30%)</title><rect x="1172.5" y="739.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.30%)</title><rect x="1172.5" y="723.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="734.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.30%)</title><rect x="1172.5" y="707.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.5" y="718.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.30%)</title><rect x="1172.5" y="691.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="702.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.30%)</title><rect x="1172.5" y="675.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.5" y="686.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.30%)</title><rect x="1172.5" y="659.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.5" y="670.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.89%)</title><rect x="1176.0" y="947.0" width="10.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.89%)</title><rect x="1176.0" y="931.0" width="10.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.89%)</title><rect x="1176.0" y="915.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.89%)</title><rect x="1176.0" y="899.0" width="10.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="910.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.30%)</title><rect x="1176.0" y="883.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="894.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.30%)</title><rect x="1176.0" y="867.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.0" y="878.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.30%)</title><rect x="1176.0" y="851.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.30%)</title><rect x="1176.0" y="835.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.0" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.30%)</title><rect x="1176.0" y="819.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.30%)</title><rect x="1176.0" y="803.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.30%)</title><rect x="1176.0" y="787.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.30%)</title><rect x="1176.0" y="771.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.30%)</title><rect x="1176.0" y="755.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.30%)</title><rect x="1176.0" y="739.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.0" y="750.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.30%)</title><rect x="1176.0" y="723.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="734.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.30%)</title><rect x="1176.0" y="707.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.30%)</title><rect x="1176.0" y="691.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="702.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.30%)</title><rect x="1176.0" y="675.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="686.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.30%)</title><rect x="1176.0" y="659.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.59%)</title><rect x="1179.5" y="883.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="894.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.30%)</title><rect x="1179.5" y="867.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="878.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.30%)</title><rect x="1179.5" y="851.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="862.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.30%)</title><rect x="1179.5" y="835.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="846.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.30%)</title><rect x="1179.5" y="819.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="830.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.30%)</title><rect x="1179.5" y="803.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="814.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.30%)</title><rect x="1183.0" y="867.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="878.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.30%)</title><rect x="1183.0" y="851.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="862.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.30%)</title><rect x="1186.5" y="979.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="990.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.30%)</title><rect x="1186.5" y="963.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.5" y="974.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.30%)</title><rect x="1186.5" y="947.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.5" y="958.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.30%)</title><rect x="1186.5" y="931.0" width="3.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1189.5" y="942.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.30%)</title><rect x="1186.5" y="915.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.5" y="926.0"></text>
</g>
</g>
</svg>
