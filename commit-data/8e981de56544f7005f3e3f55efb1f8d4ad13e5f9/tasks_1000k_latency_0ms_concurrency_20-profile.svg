<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (1,425 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.14%)</title><rect x="10.0" y="691.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*, bool) (1 samples, 0.07%)</title><rect x="10.8" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.07%)</title><rect x="10.8" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="670.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.07%)</title><rect x="11.7" y="691.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.7" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.07%)</title><rect x="11.7" y="675.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (239 samples, 16.77%)</title><rect x="12.5" y="691.0" width="197.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.5" y="702.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (239 samples, 16.77%)</title><rect x="12.5" y="675.0" width="197.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.5" y="686.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (235 samples, 16.49%)</title><rect x="12.5" y="659.0" width="194.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.5" y="670.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.14%)</title><rect x="13.3" y="643.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.14%)</title><rect x="13.3" y="627.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="13.3" y="611.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="14.1" y="595.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="14.1" y="579.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="14.1" y="563.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="14.1" y="547.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="14.1" y="531.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="14.1" y="515.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="14.1" y="499.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="14.1" y="483.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="17.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.28%)</title><rect x="15.0" y="643.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.28%)</title><rect x="15.0" y="627.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.0" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.28%)</title><rect x="15.0" y="611.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$285/717534614.accept (4 samples, 0.28%)</title><rect x="15.0" y="595.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.28%)</title><rect x="15.0" y="579.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.28%)</title><rect x="15.0" y="563.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.0" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.14%)</title><rect x="15.0" y="547.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OffsetStateReaper.maybeReapOffset (1 samples, 0.07%)</title><rect x="16.6" y="547.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.6" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.07%)</title><rect x="16.6" y="531.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.07%)</title><rect x="17.5" y="547.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.5" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (1 samples, 0.07%)</title><rect x="17.5" y="531.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.5" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.14%)</title><rect x="18.3" y="643.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (2 samples, 0.14%)</title><rect x="18.3" y="627.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.3" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (2 samples, 0.14%)</title><rect x="18.3" y="611.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.3" y="622.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="18.3" y="595.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.3" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (2 samples, 0.14%)</title><rect x="18.3" y="579.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="590.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="18.3" y="563.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.3" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="18.3" y="547.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.3" y="558.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (2 samples, 0.14%)</title><rect x="18.3" y="531.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.3" y="542.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (2 samples, 0.14%)</title><rect x="18.3" y="515.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.3" y="526.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (2 samples, 0.14%)</title><rect x="18.3" y="499.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.3" y="510.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (1 samples, 0.07%)</title><rect x="18.3" y="483.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.3" y="494.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (1 samples, 0.07%)</title><rect x="18.3" y="467.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.3" y="478.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (1 samples, 0.07%)</title><rect x="18.3" y="451.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.3" y="462.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.07%)</title><rect x="19.1" y="483.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.1" y="494.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (189 samples, 13.26%)</title><rect x="19.9" y="643.0" width="156.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.9" y="654.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$284/1232369658.accept (180 samples, 12.63%)</title><rect x="20.8" y="627.0" width="149.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="638.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (180 samples, 12.63%)</title><rect x="20.8" y="611.0" width="149.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.8" y="622.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (157 samples, 11.02%)</title><rect x="21.6" y="595.0" width="130.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.6" y="606.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (157 samples, 11.02%)</title><rect x="21.6" y="579.0" width="130.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.6" y="590.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (157 samples, 11.02%)</title><rect x="21.6" y="563.0" width="130.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.6" y="574.0">com/linecorp/dec..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (25 samples, 1.75%)</title><rect x="21.6" y="547.0" width="20.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.6" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (25 samples, 1.75%)</title><rect x="21.6" y="531.0" width="20.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.6" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepCounter.increment (2 samples, 0.14%)</title><rect x="24.9" y="515.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/DoubleAdder.add (2 samples, 0.14%)</title><rect x="24.9" y="499.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.9" y="510.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (19 samples, 1.33%)</title><rect x="26.6" y="515.0" width="15.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (132 samples, 9.26%)</title><rect x="42.3" y="547.0" width="109.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.3" y="558.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (132 samples, 9.26%)</title><rect x="42.3" y="531.0" width="109.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.3" y="542.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (132 samples, 9.26%)</title><rect x="42.3" y="515.0" width="109.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.3" y="526.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (130 samples, 9.12%)</title><rect x="42.3" y="499.0" width="107.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.3" y="510.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.12%)</title><rect x="62.2" y="483.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.12%)</title><rect x="62.2" y="467.0" width="13.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.12%)</title><rect x="62.2" y="451.0" width="13.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (16 samples, 1.12%)</title><rect x="62.2" y="435.0" width="13.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (90 samples, 6.32%)</title><rect x="75.4" y="483.0" width="74.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.4" y="494.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (90 samples, 6.32%)</title><rect x="75.4" y="467.0" width="74.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.4" y="478.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="77.1" y="451.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (87 samples, 6.11%)</title><rect x="77.9" y="451.0" width="72.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.9" y="462.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (87 samples, 6.11%)</title><rect x="77.9" y="435.0" width="72.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.9" y="446.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (86 samples, 6.04%)</title><rect x="78.7" y="419.0" width="71.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.7" y="430.0">jdk/inte..</text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.07%)</title><rect x="79.6" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="82.6" y="414.0"></text>
</g>
<g>
<title>Unsafe_Unpark (28 samples, 1.96%)</title><rect x="80.4" y="403.0" width="23.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="83.4" y="414.0">U..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.14%)</title><rect x="86.2" y="387.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="89.2" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.07%)</title><rect x="87.8" y="387.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="90.8" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.14%)</title><rect x="88.7" y="387.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="91.7" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.28%)</title><rect x="90.3" y="387.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="93.3" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.07%)</title><rect x="93.6" y="387.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="96.6" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="94.5" y="387.0" width="1.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="97.5" y="398.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.07%)</title><rect x="96.1" y="387.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="99.1" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.56%)</title><rect x="96.9" y="387.0" width="6.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="99.9" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_signal (56 samples, 3.93%)</title><rect x="103.6" y="403.0" width="46.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="106.6" y="414.0">__pt..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.14%)</title><rect x="149.9" y="499.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.14%)</title><rect x="149.9" y="483.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.9" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (13 samples, 0.91%)</title><rect x="151.6" y="595.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (13 samples, 0.91%)</title><rect x="151.6" y="579.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="154.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.77%)</title><rect x="153.3" y="563.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="156.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.77%)</title><rect x="153.3" y="547.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="156.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.21%)</title><rect x="159.9" y="531.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="162.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.21%)</title><rect x="159.9" y="515.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.9" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (8 samples, 0.56%)</title><rect x="162.4" y="595.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="165.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.56%)</title><rect x="162.4" y="579.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.35%)</title><rect x="162.4" y="563.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="165.7" y="547.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.21%)</title><rect x="166.5" y="563.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (3 samples, 0.21%)</title><rect x="166.5" y="547.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.5" y="558.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (3 samples, 0.21%)</title><rect x="166.5" y="531.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.5" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.21%)</title><rect x="166.5" y="515.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="169.5" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.21%)</title><rect x="166.5" y="499.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.07%)</title><rect x="169.0" y="595.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="172.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.07%)</title><rect x="169.0" y="579.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.56%)</title><rect x="169.8" y="627.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.56%)</title><rect x="169.8" y="611.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="172.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.56%)</title><rect x="169.8" y="595.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.56%)</title><rect x="169.8" y="579.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="172.8" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (2 samples, 0.14%)</title><rect x="174.8" y="563.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="177.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (37 samples, 2.60%)</title><rect x="176.4" y="643.0" width="30.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.4" y="654.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (37 samples, 2.60%)</title><rect x="176.4" y="627.0" width="30.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.4" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (24 samples, 1.68%)</title><rect x="176.4" y="611.0" width="19.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="176.4" y="595.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="176.4" y="579.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="176.4" y="563.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="176.4" y="547.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="176.4" y="531.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="176.4" y="515.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="176.4" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="176.4" y="483.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="176.4" y="467.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="176.4" y="451.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="176.4" y="435.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="176.4" y="419.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="176.4" y="403.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.4" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.07%)</title><rect x="176.4" y="387.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.4" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.07%)</title><rect x="176.4" y="371.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.07%)</title><rect x="176.4" y="355.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.4" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.07%)</title><rect x="176.4" y="339.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.07%)</title><rect x="176.4" y="323.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.07%)</title><rect x="176.4" y="307.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.4" y="318.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.07%)</title><rect x="176.4" y="291.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.4" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="176.4" y="275.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="179.4" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (23 samples, 1.61%)</title><rect x="177.3" y="595.0" width="19.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (2 samples, 0.14%)</title><rect x="178.1" y="579.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (2 samples, 0.14%)</title><rect x="178.1" y="563.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.1" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (2 samples, 0.14%)</title><rect x="178.1" y="547.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="181.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$514/1872969993.accept (2 samples, 0.14%)</title><rect x="178.1" y="531.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="181.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (2 samples, 0.14%)</title><rect x="178.1" y="515.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.1" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="178.1" y="499.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="178.1" y="483.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="178.9" y="499.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="178.9" y="483.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.07%)</title><rect x="178.9" y="467.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (20 samples, 1.40%)</title><rect x="179.8" y="579.0" width="16.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.07%)</title><rect x="179.8" y="563.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (1 samples, 0.07%)</title><rect x="179.8" y="547.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="182.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="179.8" y="531.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="179.8" y="515.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (14 samples, 0.98%)</title><rect x="180.6" y="563.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (14 samples, 0.98%)</title><rect x="180.6" y="547.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.6" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.14%)</title><rect x="180.6" y="531.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.6" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.14%)</title><rect x="180.6" y="515.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.6" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.14%)</title><rect x="180.6" y="499.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.6" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.14%)</title><rect x="180.6" y="483.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.6" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.14%)</title><rect x="180.6" y="467.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 0.56%)</title><rect x="182.2" y="531.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.14%)</title><rect x="183.1" y="515.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.14%)</title><rect x="183.1" y="499.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.14%)</title><rect x="183.1" y="483.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.14%)</title><rect x="183.1" y="467.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.14%)</title><rect x="183.1" y="451.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (2 samples, 0.14%)</title><rect x="183.1" y="435.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (2 samples, 0.14%)</title><rect x="183.1" y="419.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.1" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (2 samples, 0.14%)</title><rect x="183.1" y="403.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.1" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.07%)</title><rect x="183.9" y="387.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.9" y="398.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.07%)</title><rect x="183.9" y="371.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="186.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.35%)</title><rect x="184.7" y="515.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="187.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.35%)</title><rect x="184.7" y="499.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (5 samples, 0.35%)</title><rect x="184.7" y="483.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (5 samples, 0.35%)</title><rect x="184.7" y="467.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (4 samples, 0.28%)</title><rect x="185.6" y="451.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (4 samples, 0.28%)</title><rect x="188.9" y="531.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="191.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.07%)</title><rect x="188.9" y="515.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 0.21%)</title><rect x="189.7" y="515.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.7" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="189.7" y="499.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="192.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.14%)</title><rect x="190.5" y="499.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.5" y="510.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.14%)</title><rect x="190.5" y="483.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.5" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="191.3" y="467.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="194.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.07%)</title><rect x="192.2" y="563.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="192.2" y="547.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="192.2" y="531.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="192.2" y="515.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="192.2" y="499.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.2" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.07%)</title><rect x="192.2" y="483.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (3 samples, 0.21%)</title><rect x="193.0" y="563.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.21%)</title><rect x="193.0" y="547.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.21%)</title><rect x="193.0" y="531.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.14%)</title><rect x="193.0" y="515.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="193.8" y="499.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.07%)</title><rect x="193.8" y="483.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.8" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="194.7" y="515.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="197.7" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="194.7" y="499.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="197.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="195.5" y="563.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="198.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="195.5" y="547.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="195.5" y="531.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.5" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="195.5" y="515.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.5" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="195.5" y="499.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.07%)</title><rect x="196.3" y="611.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.07%)</title><rect x="196.3" y="595.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="196.3" y="579.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.3" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="196.3" y="563.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="199.3" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="196.3" y="547.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="199.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.63%)</title><rect x="197.1" y="611.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.42%)</title><rect x="197.1" y="595.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.42%)</title><rect x="197.1" y="579.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.28%)</title><rect x="197.1" y="563.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="200.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.21%)</title><rect x="197.1" y="547.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.21%)</title><rect x="197.1" y="531.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.21%)</title><rect x="197.1" y="515.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.21%)</title><rect x="197.1" y="499.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.21%)</title><rect x="197.1" y="483.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.21%)</title><rect x="197.1" y="467.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.1" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.21%)</title><rect x="197.1" y="451.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.21%)</title><rect x="197.1" y="435.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.1" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.14%)</title><rect x="197.1" y="419.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.1" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.14%)</title><rect x="197.1" y="403.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.14%)</title><rect x="197.1" y="387.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.14%)</title><rect x="197.1" y="371.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.14%)</title><rect x="197.1" y="355.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.14%)</title><rect x="197.1" y="339.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.1" y="350.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.14%)</title><rect x="197.1" y="323.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.1" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="197.1" y="307.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="200.1" y="318.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="198.0" y="307.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="201.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.07%)</title><rect x="198.8" y="419.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.07%)</title><rect x="198.8" y="403.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="201.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.07%)</title><rect x="198.8" y="387.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.07%)</title><rect x="199.6" y="547.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="199.6" y="531.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.07%)</title><rect x="199.6" y="515.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="199.6" y="499.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="199.6" y="483.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.07%)</title><rect x="199.6" y="467.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.14%)</title><rect x="200.5" y="563.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.5" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (2 samples, 0.14%)</title><rect x="200.5" y="547.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.14%)</title><rect x="200.5" y="531.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="203.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.14%)</title><rect x="200.5" y="515.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (1 samples, 0.07%)</title><rect x="200.5" y="499.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.5" y="510.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.07%)</title><rect x="200.5" y="483.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="203.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.07%)</title><rect x="201.3" y="499.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="201.3" y="483.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="201.3" y="467.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (3 samples, 0.21%)</title><rect x="202.1" y="595.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.07%)</title><rect x="202.1" y="579.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.07%)</title><rect x="202.1" y="563.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.canSendRequest (1 samples, 0.07%)</title><rect x="202.1" y="547.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.canSendMore (1 samples, 0.07%)</title><rect x="202.1" y="531.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="202.9" y="579.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="202.9" y="563.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="205.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="202.9" y="547.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="202.9" y="531.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.07%)</title><rect x="202.9" y="515.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.07%)</title><rect x="202.9" y="499.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.addSize (1 samples, 0.07%)</title><rect x="202.9" y="483.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchTopic.addSize (1 samples, 0.07%)</title><rect x="202.9" y="467.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.07%)</title><rect x="203.8" y="579.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="206.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.07%)</title><rect x="203.8" y="563.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.07%)</title><rect x="204.6" y="611.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.07%)</title><rect x="204.6" y="595.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 0.07%)</title><rect x="204.6" y="579.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="205.4" y="611.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.4" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="205.4" y="595.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="208.4" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="205.4" y="579.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="208.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="206.3" y="611.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="206.3" y="595.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="209.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.07%)</title><rect x="206.3" y="579.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="206.3" y="563.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.07%)</title><rect x="207.1" y="659.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="207.1" y="643.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="207.1" y="627.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="207.1" y="611.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="207.1" y="595.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="207.1" y="579.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="207.1" y="563.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.1" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.14%)</title><rect x="207.9" y="659.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.9" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (2 samples, 0.14%)</title><rect x="207.9" y="643.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.9" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (2 samples, 0.14%)</title><rect x="207.9" y="627.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="210.9" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="207.9" y="611.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.9" y="622.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (2 samples, 0.14%)</title><rect x="207.9" y="595.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.9" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="208.7" y="579.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.7" y="590.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="208.7" y="563.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.7" y="574.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (1 samples, 0.07%)</title><rect x="208.7" y="547.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="211.7" y="558.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (1 samples, 0.07%)</title><rect x="208.7" y="531.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.7" y="542.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (1 samples, 0.07%)</title><rect x="208.7" y="515.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.7" y="526.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (1 samples, 0.07%)</title><rect x="208.7" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.7" y="510.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (1 samples, 0.07%)</title><rect x="208.7" y="483.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.7" y="494.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (1 samples, 0.07%)</title><rect x="208.7" y="467.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.7" y="478.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="209.6" y="659.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.6" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,147 samples, 80.49%)</title><rect x="210.4" y="691.0" width="949.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.4" y="702.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,147 samples, 80.49%)</title><rect x="210.4" y="675.0" width="949.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.4" y="686.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,147 samples, 80.49%)</title><rect x="210.4" y="659.0" width="949.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.4" y="670.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$517/1435813788.run (919 samples, 64.49%)</title><rect x="213.7" y="643.0" width="761.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.7" y="654.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$517/1435813788.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (918 samples, 64.42%)</title><rect x="214.5" y="627.0" width="760.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="217.5" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (918 samples, 64.42%)</title><rect x="214.5" y="611.0" width="760.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.5" y="622.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.28%)</title><rect x="218.7" y="595.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="221.7" y="606.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="218.7" y="579.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="221.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (896 samples, 62.88%)</title><rect x="222.0" y="595.0" width="741.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="225.0" y="606.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (59 samples, 4.14%)</title><rect x="222.0" y="579.0" width="48.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.0" y="590.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (59 samples, 4.14%)</title><rect x="222.0" y="563.0" width="48.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.0" y="574.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (59 samples, 4.14%)</title><rect x="222.0" y="547.0" width="48.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.0" y="558.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="238.5" y="531.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (38 samples, 2.67%)</title><rect x="239.4" y="531.0" width="31.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.4" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.35%)</title><rect x="239.4" y="515.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$525/1519080251.accept (2 samples, 0.14%)</title><rect x="240.2" y="499.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.2" y="510.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="241.9" y="499.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="244.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (33 samples, 2.32%)</title><rect x="243.5" y="515.0" width="27.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.5" y="526.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$525/1519080251.accept (33 samples, 2.32%)</title><rect x="243.5" y="499.0" width="27.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.5" y="510.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (33 samples, 2.32%)</title><rect x="243.5" y="483.0" width="27.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.5" y="494.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (33 samples, 2.32%)</title><rect x="243.5" y="467.0" width="27.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.5" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (33 samples, 2.32%)</title><rect x="243.5" y="451.0" width="27.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.5" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (30 samples, 2.11%)</title><rect x="246.0" y="435.0" width="24.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.0" y="446.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.42%)</title><rect x="246.0" y="419.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$515/1903473266.accept (1 samples, 0.07%)</title><rect x="249.3" y="403.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.3" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="250.1" y="403.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="253.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (24 samples, 1.68%)</title><rect x="251.0" y="419.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (3 samples, 0.21%)</title><rect x="270.8" y="579.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (3 samples, 0.21%)</title><rect x="270.8" y="563.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.8" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.21%)</title><rect x="270.8" y="547.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.21%)</title><rect x="270.8" y="531.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.21%)</title><rect x="270.8" y="515.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (173 samples, 12.14%)</title><rect x="273.3" y="579.0" width="143.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.3" y="590.0">com/linecorp/decat..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (151 samples, 10.60%)</title><rect x="286.6" y="563.0" width="125.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.6" y="574.0">io/micrometer/c..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (137 samples, 9.61%)</title><rect x="286.6" y="547.0" width="113.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.6" y="558.0">io/micrometer/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (96 samples, 6.74%)</title><rect x="286.6" y="531.0" width="79.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.6" y="542.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (96 samples, 6.74%)</title><rect x="286.6" y="515.0" width="79.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.6" y="526.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (74 samples, 5.19%)</title><rect x="300.7" y="499.0" width="61.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.7" y="510.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (74 samples, 5.19%)</title><rect x="300.7" y="483.0" width="61.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.7" y="494.0">io/mic..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (74 samples, 5.19%)</title><rect x="300.7" y="467.0" width="61.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.7" y="478.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (74 samples, 5.19%)</title><rect x="300.7" y="451.0" width="61.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.7" y="462.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (74 samples, 5.19%)</title><rect x="300.7" y="435.0" width="61.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.7" y="446.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (51 samples, 3.58%)</title><rect x="300.7" y="419.0" width="42.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.7" y="430.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (34 samples, 2.39%)</title><rect x="300.7" y="403.0" width="28.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.7" y="414.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (34 samples, 2.39%)</title><rect x="300.7" y="387.0" width="28.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="303.7" y="398.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (17 samples, 1.19%)</title><rect x="328.8" y="403.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (17 samples, 1.19%)</title><rect x="328.8" y="387.0" width="14.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="331.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (17 samples, 1.19%)</title><rect x="328.8" y="371.0" width="14.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (17 samples, 1.19%)</title><rect x="328.8" y="355.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.8" y="366.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (23 samples, 1.61%)</title><rect x="342.9" y="419.0" width="19.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.9" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.35%)</title><rect x="361.9" y="499.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="364.9" y="510.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="361.9" y="483.0" width="4.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="364.9" y="494.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (41 samples, 2.88%)</title><rect x="366.1" y="531.0" width="33.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="369.1" y="542.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (40 samples, 2.81%)</title><rect x="366.1" y="515.0" width="33.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="369.1" y="526.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (7 samples, 0.49%)</title><rect x="390.9" y="499.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.9" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.21%)</title><rect x="394.2" y="483.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="397.2" y="494.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="394.2" y="467.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="397.2" y="478.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (3 samples, 0.21%)</title><rect x="396.7" y="499.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="399.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (1 samples, 0.07%)</title><rect x="399.2" y="515.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="402.2" y="526.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.07%)</title><rect x="399.2" y="499.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="402.2" y="510.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (14 samples, 0.98%)</title><rect x="400.0" y="547.0" width="11.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="403.0" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (2 samples, 0.14%)</title><rect x="410.0" y="531.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="413.0" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.42%)</title><rect x="411.6" y="563.0" width="5.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="414.6" y="574.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="412.4" y="547.0" width="4.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="415.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (136 samples, 9.54%)</title><rect x="416.6" y="579.0" width="112.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.6" y="590.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (136 samples, 9.54%)</title><rect x="416.6" y="563.0" width="112.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="419.6" y="574.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (136 samples, 9.54%)</title><rect x="416.6" y="547.0" width="112.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.6" y="558.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 9.54%)</title><rect x="416.6" y="531.0" width="112.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="419.6" y="542.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (136 samples, 9.54%)</title><rect x="416.6" y="515.0" width="112.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="419.6" y="526.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (136 samples, 9.54%)</title><rect x="416.6" y="499.0" width="112.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.6" y="510.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (36 samples, 2.53%)</title><rect x="416.6" y="483.0" width="29.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="419.6" y="494.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.07%)</title><rect x="416.6" y="467.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="419.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.07%)</title><rect x="416.6" y="451.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="419.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.07%)</title><rect x="416.6" y="435.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.6" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="416.6" y="419.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.6" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="416.6" y="403.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="419.6" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="416.6" y="387.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (35 samples, 2.46%)</title><rect x="417.4" y="467.0" width="29.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="420.4" y="478.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (35 samples, 2.46%)</title><rect x="417.4" y="451.0" width="29.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.4" y="462.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="417.4" y="435.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="420.4" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="417.4" y="419.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="420.4" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="417.4" y="403.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="420.4" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="417.4" y="387.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="420.4" y="398.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.07%)</title><rect x="417.4" y="371.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="420.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (34 samples, 2.39%)</title><rect x="418.2" y="435.0" width="28.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="421.2" y="446.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="418.2" y="419.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="421.2" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="418.2" y="403.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="421.2" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="418.2" y="387.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="421.2" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="418.2" y="371.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="421.2" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="418.2" y="355.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="421.2" y="366.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.07%)</title><rect x="418.2" y="339.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="421.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (33 samples, 2.32%)</title><rect x="419.1" y="419.0" width="27.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.1" y="430.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (28 samples, 1.96%)</title><rect x="419.9" y="403.0" width="23.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="422.9" y="414.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (28 samples, 1.96%)</title><rect x="419.9" y="387.0" width="23.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="422.9" y="398.0">c..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="437.3" y="371.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="440.3" y="382.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.42%)</title><rect x="438.1" y="371.0" width="5.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="441.1" y="382.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="440.6" y="355.0" width="2.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="443.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.07%)</title><rect x="443.1" y="403.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="443.1" y="387.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.21%)</title><rect x="443.9" y="403.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="446.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (94 samples, 6.60%)</title><rect x="446.4" y="483.0" width="77.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.4" y="494.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.49%)</title><rect x="446.4" y="467.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.49%)</title><rect x="446.4" y="451.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.21%)</title><rect x="449.7" y="435.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.70%)</title><rect x="452.2" y="467.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="455.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.35%)</title><rect x="456.3" y="451.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="459.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.14%)</title><rect x="456.3" y="435.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.14%)</title><rect x="456.3" y="419.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.21%)</title><rect x="458.0" y="435.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.21%)</title><rect x="458.0" y="419.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="461.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.21%)</title><rect x="458.0" y="403.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="458.8" y="387.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.28%)</title><rect x="460.5" y="467.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.28%)</title><rect x="460.5" y="451.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 0.28%)</title><rect x="460.5" y="435.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 0.28%)</title><rect x="460.5" y="419.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="463.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.28%)</title><rect x="460.5" y="403.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (4 samples, 0.28%)</title><rect x="460.5" y="387.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (73 samples, 5.12%)</title><rect x="463.8" y="467.0" width="60.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.8" y="478.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (73 samples, 5.12%)</title><rect x="463.8" y="451.0" width="60.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="466.8" y="462.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.40%)</title><rect x="466.3" y="435.0" width="16.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="467.1" y="419.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="470.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="467.1" y="403.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.28%)</title><rect x="467.9" y="419.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.28%)</title><rect x="467.9" y="403.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.28%)</title><rect x="467.9" y="387.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.9" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (14 samples, 0.98%)</title><rect x="471.2" y="419.0" width="11.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="474.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 3.51%)</title><rect x="482.8" y="435.0" width="41.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.8" y="446.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 3.51%)</title><rect x="482.8" y="419.0" width="41.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.8" y="430.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 3.44%)</title><rect x="483.7" y="403.0" width="40.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="486.7" y="414.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.54%)</title><rect x="490.3" y="387.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="493.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (6 samples, 0.42%)</title><rect x="490.3" y="371.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="493.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.21%)</title><rect x="495.2" y="371.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.21%)</title><rect x="495.2" y="355.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.42%)</title><rect x="497.7" y="371.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.42%)</title><rect x="497.7" y="355.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.42%)</title><rect x="497.7" y="339.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.14%)</title><rect x="501.0" y="323.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.0" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.14%)</title><rect x="502.7" y="371.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.35%)</title><rect x="504.4" y="371.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.35%)</title><rect x="504.4" y="355.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="507.7" y="339.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="510.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.84%)</title><rect x="508.5" y="387.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="511.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.49%)</title><rect x="512.6" y="371.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (4 samples, 0.28%)</title><rect x="512.6" y="355.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="515.6" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (4 samples, 0.28%)</title><rect x="512.6" y="339.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="515.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (4 samples, 0.28%)</title><rect x="512.6" y="323.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="515.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (4 samples, 0.28%)</title><rect x="512.6" y="307.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="515.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (4 samples, 0.28%)</title><rect x="512.6" y="291.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (4 samples, 0.28%)</title><rect x="512.6" y="275.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="515.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.21%)</title><rect x="516.0" y="355.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.21%)</title><rect x="516.0" y="339.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="519.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (3 samples, 0.21%)</title><rect x="516.0" y="323.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.0" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (3 samples, 0.21%)</title><rect x="516.0" y="307.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (3 samples, 0.21%)</title><rect x="516.0" y="291.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.0" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (3 samples, 0.21%)</title><rect x="516.0" y="275.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.0" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.21%)</title><rect x="516.0" y="259.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="519.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.21%)</title><rect x="518.4" y="387.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="521.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.21%)</title><rect x="518.4" y="371.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="521.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.21%)</title><rect x="518.4" y="355.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="521.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.21%)</title><rect x="518.4" y="339.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="521.4" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.21%)</title><rect x="518.4" y="323.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.21%)</title><rect x="518.4" y="307.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="521.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.28%)</title><rect x="520.9" y="387.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="523.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.28%)</title><rect x="520.9" y="371.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="523.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="520.9" y="355.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="523.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.21%)</title><rect x="521.7" y="355.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.21%)</title><rect x="521.7" y="339.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="524.7" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.21%)</title><rect x="521.7" y="323.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="524.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.42%)</title><rect x="524.2" y="483.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="527.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.42%)</title><rect x="524.2" y="467.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.42%)</title><rect x="524.2" y="451.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.42%)</title><rect x="524.2" y="435.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="527.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.42%)</title><rect x="524.2" y="419.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="527.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="528.4" y="403.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.4" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (524 samples, 36.77%)</title><rect x="529.2" y="579.0" width="433.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="532.2" y="590.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipe..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="530.0" y="563.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="533.0" y="574.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="530.0" y="547.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="533.0" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.21%)</title><rect x="530.9" y="563.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="533.9" y="574.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="530.9" y="547.0" width="2.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="533.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (27 samples, 1.89%)</title><rect x="533.3" y="563.0" width="22.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="536.3" y="574.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (27 samples, 1.89%)</title><rect x="533.3" y="547.0" width="22.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="536.3" y="558.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (23 samples, 1.61%)</title><rect x="536.7" y="531.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.7" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (15 samples, 1.05%)</title><rect x="536.7" y="515.0" width="12.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="539.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (15 samples, 1.05%)</title><rect x="536.7" y="499.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="539.7" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.49%)</title><rect x="543.3" y="483.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="546.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.42%)</title><rect x="549.1" y="515.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="552.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.42%)</title><rect x="549.1" y="499.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.1" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.14%)</title><rect x="554.0" y="515.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="557.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.14%)</title><rect x="554.0" y="499.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="557.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.14%)</title><rect x="554.0" y="483.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="557.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.14%)</title><rect x="554.0" y="467.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.0" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.14%)</title><rect x="554.0" y="451.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="557.0" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.63%)</title><rect x="555.7" y="563.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="558.7" y="574.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.63%)</title><rect x="555.7" y="547.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="558.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (165 samples, 11.58%)</title><rect x="563.2" y="563.0" width="136.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.2" y="574.0">com/linecorp/deca..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.07%)</title><rect x="563.2" y="547.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="566.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (122 samples, 8.56%)</title><rect x="564.0" y="547.0" width="101.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="567.0" y="558.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (49 samples, 3.44%)</title><rect x="564.0" y="531.0" width="40.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.0" y="542.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (35 samples, 2.46%)</title><rect x="571.4" y="515.0" width="29.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="574.4" y="526.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (34 samples, 2.39%)</title><rect x="572.3" y="499.0" width="28.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="575.3" y="510.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.70%)</title><rect x="582.2" y="483.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="585.2" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.70%)</title><rect x="582.2" y="467.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="585.2" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="589.6" y="451.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="592.6" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (12 samples, 0.84%)</title><rect x="590.5" y="483.0" width="9.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="593.5" y="494.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.14%)</title><rect x="600.4" y="515.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="603.4" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.14%)</title><rect x="600.4" y="499.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.4" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="600.4" y="483.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="603.4" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="600.4" y="467.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="603.4" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="600.4" y="451.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="603.4" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="600.4" y="435.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="603.4" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="600.4" y="419.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="603.4" y="430.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="600.4" y="403.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="603.4" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.07%)</title><rect x="600.4" y="387.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.4" y="398.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.07%)</title><rect x="600.4" y="371.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="603.4" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.07%)</title><rect x="601.2" y="483.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.2" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="601.2" y="467.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.2" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="601.2" y="451.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="604.2" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="601.2" y="435.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.2" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="601.2" y="419.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="604.2" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="601.2" y="403.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="604.2" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.07%)</title><rect x="601.2" y="387.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="604.2" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.07%)</title><rect x="601.2" y="371.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="604.2" y="382.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="601.2" y="355.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="604.2" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="601.2" y="339.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="604.2" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="601.2" y="323.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="604.2" y="334.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.07%)</title><rect x="601.2" y="307.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="604.2" y="318.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="602.1" y="515.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="605.1" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="602.9" y="515.0" width="1.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="605.9" y="526.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="604.6" y="531.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="607.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.07%)</title><rect x="604.6" y="515.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="607.6" y="526.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (72 samples, 5.05%)</title><rect x="605.4" y="531.0" width="59.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="608.4" y="542.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (61 samples, 4.28%)</title><rect x="612.8" y="515.0" width="50.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="615.8" y="526.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (27 samples, 1.89%)</title><rect x="614.5" y="499.0" width="22.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="617.5" y="510.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (27 samples, 1.89%)</title><rect x="614.5" y="483.0" width="22.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="617.5" y="494.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 0.84%)</title><rect x="626.9" y="467.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="629.9" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="636.8" y="499.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.8" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.21%)</title><rect x="636.8" y="483.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.21%)</title><rect x="636.8" y="467.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.8" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.21%)</title><rect x="636.8" y="451.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="639.8" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (29 samples, 2.04%)</title><rect x="639.3" y="499.0" width="24.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.3" y="510.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (29 samples, 2.04%)</title><rect x="639.3" y="483.0" width="24.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.3" y="494.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.28%)</title><rect x="641.0" y="467.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.0" y="478.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.28%)</title><rect x="641.0" y="451.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="644.0" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.28%)</title><rect x="641.0" y="435.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.0" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="643.5" y="419.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (23 samples, 1.61%)</title><rect x="644.3" y="467.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.3" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="662.5" y="451.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="665.5" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="662.5" y="435.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="665.5" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="662.5" y="419.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="665.5" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="662.5" y="403.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="665.5" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="662.5" y="387.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="665.5" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="662.5" y="371.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="665.5" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.07%)</title><rect x="662.5" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="665.5" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.07%)</title><rect x="662.5" y="339.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="665.5" y="350.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="662.5" y="323.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="665.5" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="662.5" y="307.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="665.5" y="318.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="662.5" y="291.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="665.5" y="302.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.07%)</title><rect x="662.5" y="275.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="665.5" y="286.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.07%)</title><rect x="662.5" y="259.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="665.5" y="270.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="663.3" y="515.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.3" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="664.2" y="515.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="667.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (42 samples, 2.95%)</title><rect x="665.0" y="547.0" width="34.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.0" y="558.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (39 samples, 2.74%)</title><rect x="665.0" y="531.0" width="32.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.0" y="542.0">co..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (37 samples, 2.60%)</title><rect x="666.7" y="515.0" width="30.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="669.7" y="526.0">ja..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="666.7" y="499.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="669.7" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.56%)</title><rect x="667.5" y="499.0" width="6.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="670.5" y="510.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.49%)</title><rect x="668.3" y="483.0" width="5.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="671.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (21 samples, 1.47%)</title><rect x="674.1" y="499.0" width="17.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (21 samples, 1.47%)</title><rect x="674.1" y="483.0" width="17.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="677.1" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 0.14%)</title><rect x="688.2" y="467.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="691.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="689.8" y="467.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.07%)</title><rect x="690.7" y="467.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="693.7" y="478.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (7 samples, 0.49%)</title><rect x="691.5" y="499.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="694.5" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.49%)</title><rect x="691.5" y="483.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="694.5" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.07%)</title><rect x="697.3" y="531.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="700.3" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.07%)</title><rect x="697.3" y="515.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="700.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties$$Lambda$233/1598898814.get$Lambda (1 samples, 0.07%)</title><rect x="697.3" y="499.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="700.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties$$Lambda$233/1598898814.&lt;init&gt; (1 samples, 0.07%)</title><rect x="697.3" y="483.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="700.3" y="494.0"></text>
</g>
<g>
<title>java/util/Optional.orElseThrow (2 samples, 0.14%)</title><rect x="698.1" y="531.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="701.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (57 samples, 4.00%)</title><rect x="699.8" y="563.0" width="47.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.8" y="574.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (57 samples, 4.00%)</title><rect x="699.8" y="547.0" width="47.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="702.8" y="558.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$443/206870077.process (33 samples, 2.32%)</title><rect x="699.8" y="531.0" width="27.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="702.8" y="542.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (30 samples, 2.11%)</title><rect x="702.3" y="515.0" width="24.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="705.3" y="526.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (26 samples, 1.82%)</title><rect x="703.9" y="499.0" width="21.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.9" y="510.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ExecutionRecord.process (20 samples, 1.40%)</title><rect x="708.1" y="483.0" width="16.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="711.1" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.28%)</title><rect x="721.3" y="467.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="724.3" y="478.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="721.3" y="451.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="724.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.07%)</title><rect x="724.6" y="483.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="727.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.14%)</title><rect x="725.5" y="499.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="728.5" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="726.3" y="483.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="729.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="726.3" y="467.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.07%)</title><rect x="727.1" y="531.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="730.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.07%)</title><rect x="727.1" y="515.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.07%)</title><rect x="727.1" y="499.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="730.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.07%)</title><rect x="727.1" y="483.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="730.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.07%)</title><rect x="727.1" y="467.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="727.1" y="451.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.1" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="727.9" y="531.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="730.9" y="542.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.07%)</title><rect x="727.9" y="515.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.9" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.14%)</title><rect x="728.8" y="531.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="731.8" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.14%)</title><rect x="728.8" y="515.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.8" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (9 samples, 0.63%)</title><rect x="730.4" y="531.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="733.4" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="733.7" y="515.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="736.7" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="733.7" y="499.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="736.7" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="733.7" y="483.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="736.7" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="733.7" y="467.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="736.7" y="478.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.07%)</title><rect x="733.7" y="451.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="736.7" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.28%)</title><rect x="734.6" y="515.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.6" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="736.2" y="499.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="739.2" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="736.2" y="483.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="739.2" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="737.0" y="499.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="740.0" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="737.0" y="483.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="740.0" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="737.0" y="467.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="740.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="737.0" y="451.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.0" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="737.0" y="435.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="740.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.77%)</title><rect x="737.9" y="531.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.77%)</title><rect x="737.9" y="515.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="740.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.70%)</title><rect x="738.7" y="499.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (7 samples, 0.49%)</title><rect x="738.7" y="483.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="741.7" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$520/1698176083.accept (2 samples, 0.14%)</title><rect x="739.5" y="467.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="742.5" y="478.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.28%)</title><rect x="741.2" y="467.0" width="3.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="744.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.14%)</title><rect x="744.5" y="483.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.07%)</title><rect x="746.2" y="483.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="749.2" y="494.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (5 samples, 0.35%)</title><rect x="747.0" y="563.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="750.0" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (5 samples, 0.35%)</title><rect x="747.0" y="547.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="750.0" y="558.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.07%)</title><rect x="749.5" y="531.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.5" y="542.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$ValueIterator.next (1 samples, 0.07%)</title><rect x="750.3" y="531.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="753.3" y="542.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.nextIndex (1 samples, 0.07%)</title><rect x="750.3" y="515.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="753.3" y="526.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (119 samples, 8.35%)</title><rect x="751.1" y="563.0" width="98.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.1" y="574.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (118 samples, 8.28%)</title><rect x="751.1" y="547.0" width="97.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="754.1" y="558.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (118 samples, 8.28%)</title><rect x="751.1" y="531.0" width="97.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.1" y="542.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (90 samples, 6.32%)</title><rect x="755.3" y="515.0" width="74.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.3" y="526.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (90 samples, 6.32%)</title><rect x="755.3" y="499.0" width="74.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.3" y="510.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (76 samples, 5.33%)</title><rect x="759.4" y="483.0" width="62.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="762.4" y="494.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (76 samples, 5.33%)</title><rect x="759.4" y="467.0" width="62.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.4" y="478.0">io/mic..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (76 samples, 5.33%)</title><rect x="759.4" y="451.0" width="62.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="762.4" y="462.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (76 samples, 5.33%)</title><rect x="759.4" y="435.0" width="62.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.4" y="446.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (76 samples, 5.33%)</title><rect x="759.4" y="419.0" width="62.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="762.4" y="430.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (51 samples, 3.58%)</title><rect x="759.4" y="403.0" width="42.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.4" y="414.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (30 samples, 2.11%)</title><rect x="759.4" y="387.0" width="24.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="762.4" y="398.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (30 samples, 2.11%)</title><rect x="759.4" y="371.0" width="24.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="762.4" y="382.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (21 samples, 1.47%)</title><rect x="784.2" y="387.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="787.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (21 samples, 1.47%)</title><rect x="784.2" y="371.0" width="17.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (21 samples, 1.47%)</title><rect x="784.2" y="355.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="787.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (21 samples, 1.47%)</title><rect x="784.2" y="339.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="787.2" y="350.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (25 samples, 1.75%)</title><rect x="801.6" y="403.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="804.6" y="414.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.63%)</title><rect x="822.3" y="483.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="825.3" y="494.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.63%)</title><rect x="822.3" y="467.0" width="7.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="825.3" y="478.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (23 samples, 1.61%)</title><rect x="829.8" y="515.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="832.8" y="526.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (15 samples, 1.05%)</title><rect x="829.8" y="499.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="832.8" y="510.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 0.28%)</title><rect x="838.9" y="483.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="841.9" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.28%)</title><rect x="838.9" y="467.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="841.9" y="478.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="838.9" y="451.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="841.9" y="462.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/util/TimeUtils.convert (8 samples, 0.56%)</title><rect x="842.2" y="499.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.2" y="510.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="848.0" y="483.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="851.0" y="494.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.07%)</title><rect x="848.8" y="547.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="851.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (136 samples, 9.54%)</title><rect x="849.7" y="563.0" width="112.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="852.7" y="574.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (136 samples, 9.54%)</title><rect x="849.7" y="547.0" width="112.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.7" y="558.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (136 samples, 9.54%)</title><rect x="849.7" y="531.0" width="112.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.7" y="542.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (7 samples, 0.49%)</title><rect x="849.7" y="515.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="852.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$522/916967137.accept (3 samples, 0.21%)</title><rect x="852.1" y="499.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.1" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="854.6" y="499.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="857.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (129 samples, 9.05%)</title><rect x="855.5" y="515.0" width="106.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="858.5" y="526.0">java/util/con..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$522/916967137.accept (129 samples, 9.05%)</title><rect x="855.5" y="499.0" width="106.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="858.5" y="510.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (129 samples, 9.05%)</title><rect x="855.5" y="483.0" width="106.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="858.5" y="494.0">com/linecorp/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="856.3" y="467.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="859.3" y="478.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="856.3" y="451.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="859.3" y="462.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (126 samples, 8.84%)</title><rect x="857.9" y="467.0" width="104.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="860.9" y="478.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (126 samples, 8.84%)</title><rect x="857.9" y="451.0" width="104.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="860.9" y="462.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (126 samples, 8.84%)</title><rect x="857.9" y="435.0" width="104.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="860.9" y="446.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (95 samples, 6.67%)</title><rect x="861.3" y="419.0" width="78.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="864.3" y="430.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (95 samples, 6.67%)</title><rect x="861.3" y="403.0" width="78.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="864.3" y="414.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (85 samples, 5.96%)</title><rect x="863.7" y="387.0" width="70.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.7" y="398.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (85 samples, 5.96%)</title><rect x="863.7" y="371.0" width="70.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="866.7" y="382.0">io/micro..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (85 samples, 5.96%)</title><rect x="863.7" y="355.0" width="70.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="866.7" y="366.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (85 samples, 5.96%)</title><rect x="863.7" y="339.0" width="70.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.7" y="350.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (85 samples, 5.96%)</title><rect x="863.7" y="323.0" width="70.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="866.7" y="334.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (63 samples, 4.42%)</title><rect x="863.7" y="307.0" width="52.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="866.7" y="318.0">org/H..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (41 samples, 2.88%)</title><rect x="863.7" y="291.0" width="34.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="866.7" y="302.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (40 samples, 2.81%)</title><rect x="864.6" y="275.0" width="33.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="867.6" y="286.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (22 samples, 1.54%)</title><rect x="897.7" y="291.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="900.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (22 samples, 1.54%)</title><rect x="897.7" y="275.0" width="18.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="900.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (22 samples, 1.54%)</title><rect x="897.7" y="259.0" width="18.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="900.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (22 samples, 1.54%)</title><rect x="897.7" y="243.0" width="18.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="900.7" y="254.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (22 samples, 1.54%)</title><rect x="915.9" y="307.0" width="18.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="918.9" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.49%)</title><rect x="934.1" y="387.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.1" y="398.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.49%)</title><rect x="934.1" y="371.0" width="5.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="937.1" y="382.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (27 samples, 1.89%)</title><rect x="939.9" y="419.0" width="22.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="942.9" y="430.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (25 samples, 1.75%)</title><rect x="939.9" y="403.0" width="20.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="942.9" y="414.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (5 samples, 0.35%)</title><rect x="956.5" y="387.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="959.5" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.28%)</title><rect x="957.3" y="371.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.3" y="382.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="957.3" y="355.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="960.3" y="366.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/util/TimeUtils.convert (2 samples, 0.14%)</title><rect x="960.6" y="403.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="963.6" y="414.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="961.5" y="387.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="964.5" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="962.3" y="563.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="965.3" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.07%)</title><rect x="963.1" y="579.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="966.1" y="590.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (13 samples, 0.91%)</title><rect x="963.9" y="595.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="966.9" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (13 samples, 0.91%)</title><rect x="963.9" y="579.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="966.9" y="590.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (13 samples, 0.91%)</title><rect x="963.9" y="563.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="966.9" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (10 samples, 0.70%)</title><rect x="966.4" y="547.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="969.4" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (9 samples, 0.63%)</title><rect x="966.4" y="531.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="969.4" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (5 samples, 0.35%)</title><rect x="969.7" y="515.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.7" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="970.6" y="499.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="973.6" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.21%)</title><rect x="971.4" y="499.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.4" y="510.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.21%)</title><rect x="971.4" y="483.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="974.4" y="494.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/util/TimeUtils.convert (1 samples, 0.07%)</title><rect x="973.9" y="531.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="976.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.35%)</title><rect x="974.7" y="643.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="977.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.35%)</title><rect x="974.7" y="627.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="977.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (219 samples, 15.37%)</title><rect x="978.8" y="643.0" width="181.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="981.8" y="654.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (217 samples, 15.23%)</title><rect x="980.5" y="627.0" width="179.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="983.5" y="638.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (193 samples, 13.54%)</title><rect x="984.6" y="611.0" width="159.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.6" y="622.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.07%)</title><rect x="989.6" y="595.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="992.6" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="989.6" y="579.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="992.6" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="989.6" y="563.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="989.6" y="547.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="992.6" y="558.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.07%)</title><rect x="989.6" y="531.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.33%)</title><rect x="990.4" y="595.0" width="15.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="993.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.35%)</title><rect x="1006.2" y="595.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1009.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.35%)</title><rect x="1006.2" y="579.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1009.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.07%)</title><rect x="1008.7" y="563.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1011.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="1009.5" y="563.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1012.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.21%)</title><rect x="1010.3" y="595.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1013.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (3 samples, 0.21%)</title><rect x="1010.3" y="579.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1013.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (159 samples, 11.16%)</title><rect x="1012.8" y="595.0" width="131.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1015.8" y="606.0">java/util/concur..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (159 samples, 11.16%)</title><rect x="1012.8" y="579.0" width="131.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1015.8" y="590.0">jdk/internal/mis..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="1016.1" y="563.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1019.1" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.07%)</title><rect x="1016.9" y="563.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.9" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park (150 samples, 10.53%)</title><rect x="1017.8" y="563.0" width="124.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1020.8" y="574.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.07%)</title><rect x="1020.2" y="547.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1023.2" y="558.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.14%)</title><rect x="1021.1" y="547.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.1" y="558.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="1022.7" y="547.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.7" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 1.19%)</title><rect x="1023.6" y="547.0" width="14.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1026.6" y="558.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.35%)</title><rect x="1030.2" y="531.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.2" y="542.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.21%)</title><rect x="1034.3" y="531.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.3" y="542.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1036.8" y="531.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1039.8" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.14%)</title><rect x="1037.6" y="547.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.6" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.21%)</title><rect x="1039.3" y="547.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1042.3" y="558.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.07%)</title><rect x="1041.8" y="547.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1044.8" y="558.0"></text>
</g>
<g>
<title>__lll_unlock_wake (49 samples, 3.44%)</title><rect x="1042.6" y="547.0" width="40.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1045.6" y="558.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 3.58%)</title><rect x="1083.2" y="547.0" width="42.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1086.2" y="558.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.35%)</title><rect x="1125.4" y="547.0" width="4.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1128.4" y="558.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="1129.6" y="547.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1132.6" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.21%)</title><rect x="1130.4" y="547.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1133.4" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="1132.9" y="547.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1135.9" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="1133.7" y="547.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1136.7" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="1134.5" y="547.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1137.5" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.14%)</title><rect x="1135.3" y="547.0" width="1.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1138.3" y="558.0"></text>
</g>
<g>
<title>_init (2 samples, 0.14%)</title><rect x="1137.0" y="547.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1140.0" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="1138.7" y="547.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.7" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="1139.5" y="547.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.5" y="558.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.14%)</title><rect x="1140.3" y="547.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.3" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="1142.0" y="563.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1145.0" y="574.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="1143.6" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (19 samples, 1.33%)</title><rect x="1144.5" y="611.0" width="15.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1147.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (19 samples, 1.33%)</title><rect x="1144.5" y="595.0" width="15.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1147.5" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (19 samples, 1.33%)</title><rect x="1144.5" y="579.0" width="15.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1147.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="1160.2" y="691.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1163.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="1160.2" y="675.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1163.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="1160.2" y="659.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1163.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.07%)</title><rect x="1160.2" y="643.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1163.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.07%)</title><rect x="1160.2" y="627.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1163.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="1160.2" y="611.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1163.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.07%)</title><rect x="1160.2" y="595.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1163.2" y="606.0"></text>
</g>
<g>
<title>start_thread (35 samples, 2.46%)</title><rect x="1161.0" y="691.0" width="29.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1164.0" y="702.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (35 samples, 2.46%)</title><rect x="1161.0" y="675.0" width="29.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1164.0" y="686.0">th..</text>
</g>
<g>
<title>Thread::call_run() (35 samples, 2.46%)</title><rect x="1161.0" y="659.0" width="29.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.0" y="670.0">Th..</text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 0.35%)</title><rect x="1161.0" y="643.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.0" y="654.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="1161.0" y="627.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.0" y="638.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.28%)</title><rect x="1161.8" y="627.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.8" y="638.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.14%)</title><rect x="1161.8" y="611.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="622.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.14%)</title><rect x="1161.8" y="595.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.8" y="606.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1163.5" y="611.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.5" y="622.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1163.5" y="595.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.5" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="1163.5" y="579.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.5" y="590.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="1163.5" y="563.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.5" y="574.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.07%)</title><rect x="1163.5" y="547.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.5" y="558.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.07%)</title><rect x="1163.5" y="531.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.5" y="542.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="1163.5" y="515.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.5" y="526.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.07%)</title><rect x="1163.5" y="499.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.5" y="510.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1164.3" y="611.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.3" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="1164.3" y="595.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.3" y="606.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1164.3" y="579.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.3" y="590.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1164.3" y="563.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="574.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.07%)</title><rect x="1164.3" y="547.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="558.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (29 samples, 2.04%)</title><rect x="1165.2" y="643.0" width="24.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.2" y="654.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (29 samples, 2.04%)</title><rect x="1165.2" y="627.0" width="24.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.2" y="638.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (29 samples, 2.04%)</title><rect x="1165.2" y="611.0" width="24.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.2" y="622.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (27 samples, 1.89%)</title><rect x="1165.2" y="595.0" width="22.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.2" y="606.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (27 samples, 1.89%)</title><rect x="1165.2" y="579.0" width="22.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.2" y="590.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (12 samples, 0.84%)</title><rect x="1165.2" y="563.0" width="9.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.2" y="574.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.07%)</title><rect x="1165.2" y="547.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.2" y="558.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.07%)</title><rect x="1165.2" y="531.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.2" y="542.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.07%)</title><rect x="1165.2" y="515.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.2" y="526.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.07%)</title><rect x="1166.0" y="547.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.0" y="558.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.07%)</title><rect x="1166.0" y="531.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.0" y="542.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="1166.0" y="515.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.0" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.21%)</title><rect x="1166.8" y="547.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.8" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.07%)</title><rect x="1166.8" y="531.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.8" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.14%)</title><rect x="1167.6" y="531.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.6" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1167.6" y="515.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.6" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1168.5" y="515.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.5" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="1168.5" y="499.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.5" y="510.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="1168.5" y="483.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.5" y="494.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.07%)</title><rect x="1168.5" y="467.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="478.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1168.5" y="451.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1168.5" y="435.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.5" y="446.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1168.5" y="419.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.5" y="430.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.07%)</title><rect x="1168.5" y="403.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.5" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (7 samples, 0.49%)</title><rect x="1169.3" y="547.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.3" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.07%)</title><rect x="1169.3" y="531.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.3" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.07%)</title><rect x="1169.3" y="515.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.3" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.07%)</title><rect x="1170.1" y="531.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.1" y="542.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.07%)</title><rect x="1170.1" y="515.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.1" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.14%)</title><rect x="1171.0" y="531.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.0" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.14%)</title><rect x="1171.0" y="515.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.0" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.07%)</title><rect x="1172.6" y="531.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="1172.6" y="515.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.07%)</title><rect x="1173.4" y="531.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="542.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1173.4" y="515.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.4" y="526.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.07%)</title><rect x="1174.3" y="531.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.3" y="542.0"></text>
</g>
<g>
<title>Compile::Optimize() (10 samples, 0.70%)</title><rect x="1175.1" y="563.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.1" y="574.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="1175.1" y="547.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.1" y="558.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="1175.1" y="531.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.1" y="542.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.07%)</title><rect x="1175.1" y="515.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.1" y="526.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (2 samples, 0.14%)</title><rect x="1175.9" y="547.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.14%)</title><rect x="1175.9" y="531.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.9" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1175.9" y="515.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="526.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.07%)</title><rect x="1175.9" y="499.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.9" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1176.8" y="515.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.07%)</title><rect x="1176.8" y="499.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.07%)</title><rect x="1176.8" y="483.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.07%)</title><rect x="1176.8" y="467.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 0.28%)</title><rect x="1177.6" y="547.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1177.6" y="531.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1177.6" y="515.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1178.4" y="531.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.07%)</title><rect x="1178.4" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="526.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1179.2" y="531.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.2" y="542.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1180.1" y="531.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.1" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.21%)</title><rect x="1180.9" y="547.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.21%)</title><rect x="1180.9" y="531.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1181.7" y="515.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1181.7" y="499.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="510.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1181.7" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1182.5" y="515.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="526.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.07%)</title><rect x="1182.5" y="499.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.35%)</title><rect x="1183.4" y="563.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.35%)</title><rect x="1183.4" y="547.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1183.4" y="531.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1183.4" y="515.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1183.4" y="499.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.28%)</title><rect x="1183.4" y="483.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1183.4" y="467.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1183.4" y="451.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1183.4" y="435.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1183.4" y="419.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1183.4" y="403.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.4" y="387.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.4" y="371.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.4" y="355.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.4" y="339.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.4" y="323.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.4" y="307.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.4" y="291.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.4" y="275.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.4" y="259.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.4" y="243.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.4" y="227.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.4" y="211.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.4" y="195.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1183.4" y="179.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1183.4" y="163.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1183.4" y="147.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1183.4" y="131.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1183.4" y="115.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1183.4" y="99.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="110.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="83.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="94.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1183.4" y="67.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="78.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.07%)</title><rect x="1183.4" y="51.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.4" y="62.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.07%)</title><rect x="1183.4" y="35.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="83.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.2" y="67.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="78.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.07%)</title><rect x="1184.2" y="51.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="62.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="35.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1185.0" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.0" y="398.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1185.0" y="371.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.0" y="382.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1185.0" y="355.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.0" y="366.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) [clone .part.183] (1 samples, 0.07%)</title><rect x="1185.0" y="339.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.0" y="350.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1185.0" y="323.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.0" y="334.0"></text>
</g>
<g>
<title>SafePointNode::size_of() const (1 samples, 0.07%)</title><rect x="1185.0" y="307.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.0" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.9" y="467.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.9" y="451.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.9" y="435.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1185.9" y="419.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1185.9" y="403.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1185.9" y="387.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1185.9" y="371.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.9" y="355.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.9" y="339.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1185.9" y="323.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1185.9" y="307.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1185.9" y="291.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1185.9" y="275.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.9" y="259.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.9" y="243.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.9" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1185.9" y="211.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1185.9" y="195.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1185.9" y="179.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1185.9" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="174.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_receiver_for_speculation(Node*) [clone .part.180] (1 samples, 0.07%)</title><rect x="1185.9" y="147.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="158.0"></text>
</g>
<g>
<title>CounterData::is_CounterData() const (1 samples, 0.07%)</title><rect x="1185.9" y="131.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1186.7" y="483.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1186.7" y="467.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1186.7" y="451.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="462.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1186.7" y="435.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1186.7" y="419.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="430.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1186.7" y="403.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1186.7" y="387.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="398.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.14%)</title><rect x="1187.5" y="595.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.5" y="606.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.14%)</title><rect x="1187.5" y="579.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.5" y="590.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.14%)</title><rect x="1187.5" y="563.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.5" y="574.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1187.5" y="547.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="558.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.07%)</title><rect x="1187.5" y="531.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.5" y="542.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.07%)</title><rect x="1187.5" y="515.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.5" y="526.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.07%)</title><rect x="1187.5" y="499.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="510.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1188.3" y="547.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="558.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.07%)</title><rect x="1188.3" y="531.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="542.0"></text>
</g>
<g>
<title>CodeBuffer::finalize_oop_references(methodHandle const&amp;) (1 samples, 0.07%)</title><rect x="1188.3" y="515.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.3" y="526.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.2" y="643.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.2" y="654.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.2" y="627.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.2" y="638.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1189.2" y="611.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.2" y="622.0"></text>
</g>
<g>
<title>Threads::change_thread_claim_parity() (1 samples, 0.07%)</title><rect x="1189.2" y="595.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.2" y="606.0"></text>
</g>
</g>
</svg>
