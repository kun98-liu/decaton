<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (905 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.11%)</title><rect x="10.0" y="2035.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.11%)</title><rect x="10.0" y="2019.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.11%)</title><rect x="10.0" y="2003.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1987.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1971.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1955.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1939.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1923.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1907.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1891.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1875.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1859.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1843.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1827.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1811.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1795.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1779.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1763.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1747.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1731.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1715.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1699.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1683.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1667.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1651.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1635.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1619.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1603.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1587.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1571.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1555.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1539.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1523.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1507.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1491.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1475.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1459.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1443.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1427.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1411.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1395.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1379.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1363.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1347.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1331.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1315.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1299.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1283.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1267.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1251.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1235.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1219.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1203.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1187.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1171.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1155.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1139.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1123.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1107.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1091.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1075.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1059.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1043.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1027.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1011.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="995.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="979.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="963.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="947.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="931.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="915.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="899.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="883.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="867.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="851.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="835.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="819.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="803.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="787.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="771.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="755.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="739.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="723.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="707.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="691.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="675.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="659.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="643.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="627.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="611.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="595.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="579.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="563.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="547.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="531.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="515.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="499.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="483.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="467.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="451.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="435.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="419.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="403.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="387.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="371.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="355.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="339.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="323.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="307.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="291.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="275.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="259.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="243.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="227.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="211.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="195.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="179.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="163.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="147.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="131.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="115.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="99.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="83.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="67.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="51.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="10.0" y="35.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.22%)</title><rect x="11.3" y="2035.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.3" y="2046.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="11.3" y="2019.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.3" y="2030.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.11%)</title><rect x="11.3" y="2003.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.3" y="2014.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.11%)</title><rect x="11.3" y="1987.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.3" y="1998.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.11%)</title><rect x="11.3" y="1971.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.3" y="1982.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*, bool) (1 samples, 0.11%)</title><rect x="12.6" y="2019.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.6" y="2030.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.81] (1 samples, 0.11%)</title><rect x="12.6" y="2003.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.6" y="2014.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.22%)</title><rect x="13.9" y="2035.0" width="2.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="16.9" y="2046.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="13.9" y="2019.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.9" y="2030.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.11%)</title><rect x="13.9" y="2003.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.9" y="2014.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*, bool) (1 samples, 0.11%)</title><rect x="15.2" y="2019.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="18.2" y="2030.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.11%)</title><rect x="15.2" y="2003.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.2" y="2014.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="15.2" y="1987.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="18.2" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (202 samples, 22.32%)</title><rect x="16.5" y="2035.0" width="263.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.5" y="2046.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (202 samples, 22.32%)</title><rect x="16.5" y="2019.0" width="263.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.5" y="2030.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (202 samples, 22.32%)</title><rect x="16.5" y="2003.0" width="263.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.5" y="2014.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.11%)</title><rect x="16.5" y="1987.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.5" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.11%)</title><rect x="16.5" y="1971.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.5" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="16.5" y="1955.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.5" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="16.5" y="1939.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.5" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="16.5" y="1923.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.5" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="16.5" y="1907.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="16.5" y="1891.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.5" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="16.5" y="1875.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="16.5" y="1859.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="16.5" y="1843.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="16.5" y="1827.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$245/69853021.test (1 samples, 0.11%)</title><rect x="16.5" y="1811.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.5" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.11%)</title><rect x="17.8" y="1987.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.55%)</title><rect x="19.1" y="1987.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.1" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.55%)</title><rect x="19.1" y="1971.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.1" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.55%)</title><rect x="19.1" y="1955.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$242/1380416171.accept (5 samples, 0.55%)</title><rect x="19.1" y="1939.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.55%)</title><rect x="19.1" y="1923.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.55%)</title><rect x="19.1" y="1907.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.1" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.55%)</title><rect x="19.1" y="1891.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.11%)</title><rect x="25.6" y="1987.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.6" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (168 samples, 18.56%)</title><rect x="27.0" y="1987.0" width="219.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.0" y="1998.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$241/51388959.accept (165 samples, 18.23%)</title><rect x="27.0" y="1971.0" width="215.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.0" y="1982.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (165 samples, 18.23%)</title><rect x="27.0" y="1955.0" width="215.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.0" y="1966.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (151 samples, 16.69%)</title><rect x="27.0" y="1939.0" width="196.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.0" y="1950.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (151 samples, 16.69%)</title><rect x="27.0" y="1923.0" width="196.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.0" y="1934.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (151 samples, 16.69%)</title><rect x="27.0" y="1907.0" width="196.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.0" y="1918.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (151 samples, 16.69%)</title><rect x="27.0" y="1891.0" width="196.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.0" y="1902.0">java/util/concurrent/Execu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (151 samples, 16.69%)</title><rect x="27.0" y="1875.0" width="196.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.0" y="1886.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (151 samples, 16.69%)</title><rect x="27.0" y="1859.0" width="196.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.0" y="1870.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 11.49%)</title><rect x="27.0" y="1843.0" width="135.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.0" y="1854.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 2.43%)</title><rect x="27.0" y="1827.0" width="28.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="30.0" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 2.43%)</title><rect x="27.0" y="1811.0" width="28.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.0" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (22 samples, 2.43%)</title><rect x="27.0" y="1795.0" width="28.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.0" y="1806.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.33%)</title><rect x="55.6" y="1827.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.33%)</title><rect x="55.6" y="1811.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.11%)</title><rect x="58.2" y="1795.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.2" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.11%)</title><rect x="58.2" y="1779.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 8.73%)</title><rect x="59.5" y="1827.0" width="103.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.5" y="1838.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 8.73%)</title><rect x="59.5" y="1811.0" width="103.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.5" y="1822.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 8.73%)</title><rect x="59.5" y="1795.0" width="103.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.5" y="1806.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 8.73%)</title><rect x="59.5" y="1779.0" width="103.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.5" y="1790.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (78 samples, 8.62%)</title><rect x="60.9" y="1763.0" width="101.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.9" y="1774.0">jdk/internal..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.11%)</title><rect x="62.2" y="1747.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="65.2" y="1758.0"></text>
</g>
<g>
<title>Unsafe_Unpark (39 samples, 4.31%)</title><rect x="63.5" y="1747.0" width="50.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="66.5" y="1758.0">Unsaf..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.22%)</title><rect x="67.4" y="1731.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="70.4" y="1742.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.22%)</title><rect x="70.0" y="1731.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="73.0" y="1742.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.66%)</title><rect x="72.6" y="1731.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="75.6" y="1742.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.22%)</title><rect x="77.8" y="1715.0" width="2.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="80.8" y="1726.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.11%)</title><rect x="80.4" y="1731.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="83.4" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.33%)</title><rect x="81.7" y="1731.0" width="3.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="84.7" y="1742.0"></text>
</g>
<g>
<title>_init (1 samples, 0.11%)</title><rect x="85.6" y="1731.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="88.6" y="1742.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (5 samples, 0.55%)</title><rect x="86.9" y="1731.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="89.9" y="1742.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 1.77%)</title><rect x="93.4" y="1731.0" width="20.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="96.4" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 4.09%)</title><rect x="114.3" y="1747.0" width="48.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="117.3" y="1758.0">__pt..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (31 samples, 3.43%)</title><rect x="162.6" y="1843.0" width="40.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.6" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (31 samples, 3.43%)</title><rect x="162.6" y="1827.0" width="40.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="165.6" y="1838.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.77%)</title><rect x="193.8" y="1811.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.77%)</title><rect x="193.8" y="1795.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.77%)</title><rect x="203.0" y="1843.0" width="20.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.77%)</title><rect x="203.0" y="1827.0" width="20.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.77%)</title><rect x="203.0" y="1811.0" width="20.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.77%)</title><rect x="203.0" y="1795.0" width="20.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="206.0" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.11%)</title><rect x="222.5" y="1779.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (12 samples, 1.33%)</title><rect x="223.8" y="1939.0" width="15.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="226.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (12 samples, 1.33%)</title><rect x="223.8" y="1923.0" width="15.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.33%)</title><rect x="223.8" y="1907.0" width="15.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.33%)</title><rect x="223.8" y="1891.0" width="15.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.33%)</title><rect x="235.6" y="1875.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.33%)</title><rect x="235.6" y="1859.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.11%)</title><rect x="239.5" y="1939.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.11%)</title><rect x="239.5" y="1923.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.5" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.11%)</title><rect x="239.5" y="1907.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.11%)</title><rect x="239.5" y="1891.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.11%)</title><rect x="239.5" y="1875.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="239.5" y="1859.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="239.5" y="1843.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="240.8" y="1939.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="240.8" y="1923.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="240.8" y="1907.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.11%)</title><rect x="240.8" y="1891.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.22%)</title><rect x="242.1" y="1971.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.22%)</title><rect x="242.1" y="1955.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.11%)</title><rect x="242.1" y="1939.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.11%)</title><rect x="242.1" y="1923.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.11%)</title><rect x="243.4" y="1939.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.11%)</title><rect x="244.7" y="1971.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.11%)</title><rect x="244.7" y="1955.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.11%)</title><rect x="244.7" y="1939.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.11%)</title><rect x="244.7" y="1923.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (26 samples, 2.87%)</title><rect x="246.0" y="1987.0" width="33.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="249.0" y="1998.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (26 samples, 2.87%)</title><rect x="246.0" y="1971.0" width="33.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.0" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.11%)</title><rect x="246.0" y="1955.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="249.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.11%)</title><rect x="246.0" y="1939.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (16 samples, 1.77%)</title><rect x="247.3" y="1955.0" width="20.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (16 samples, 1.77%)</title><rect x="247.3" y="1939.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (16 samples, 1.77%)</title><rect x="247.3" y="1923.0" width="20.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (11 samples, 1.22%)</title><rect x="247.3" y="1907.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (11 samples, 1.22%)</title><rect x="247.3" y="1891.0" width="14.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (7 samples, 0.77%)</title><rect x="247.3" y="1875.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.11%)</title><rect x="255.1" y="1859.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.11%)</title><rect x="255.1" y="1843.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.11%)</title><rect x="255.1" y="1827.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.11%)</title><rect x="255.1" y="1811.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.11%)</title><rect x="255.1" y="1795.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="258.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.11%)</title><rect x="255.1" y="1779.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.11%)</title><rect x="255.1" y="1763.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.1" y="1774.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.11%)</title><rect x="255.1" y="1747.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.1" y="1758.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.11%)</title><rect x="255.1" y="1731.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.1" y="1742.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.11%)</title><rect x="255.1" y="1715.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="258.1" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (4 samples, 0.44%)</title><rect x="256.4" y="1875.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 0.44%)</title><rect x="256.4" y="1859.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.44%)</title><rect x="256.4" y="1843.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.44%)</title><rect x="256.4" y="1827.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="259.4" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="260.3" y="1811.0" width="1.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="263.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (3 samples, 0.33%)</title><rect x="261.6" y="1907.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.33%)</title><rect x="261.6" y="1891.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.11%)</title><rect x="261.6" y="1875.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.11%)</title><rect x="261.6" y="1859.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="261.6" y="1843.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="261.6" y="1827.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.22%)</title><rect x="263.0" y="1875.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.22%)</title><rect x="263.0" y="1859.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="263.0" y="1843.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.0" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="263.0" y="1827.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="266.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="264.3" y="1843.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (2 samples, 0.22%)</title><rect x="265.6" y="1907.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.22%)</title><rect x="265.6" y="1891.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.22%)</title><rect x="265.6" y="1875.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.22%)</title><rect x="265.6" y="1859.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.22%)</title><rect x="268.2" y="1955.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.22%)</title><rect x="268.2" y="1939.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.22%)</title><rect x="268.2" y="1923.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.11%)</title><rect x="268.2" y="1907.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.11%)</title><rect x="268.2" y="1891.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="268.2" y="1875.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="268.2" y="1859.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="268.2" y="1843.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="268.2" y="1827.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.2" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.11%)</title><rect x="268.2" y="1811.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.11%)</title><rect x="269.5" y="1907.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.11%)</title><rect x="269.5" y="1891.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.11%)</title><rect x="269.5" y="1875.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.5" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.11%)</title><rect x="269.5" y="1859.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.55%)</title><rect x="270.8" y="1955.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.33%)</title><rect x="270.8" y="1939.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.33%)</title><rect x="270.8" y="1923.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.33%)</title><rect x="270.8" y="1907.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.33%)</title><rect x="270.8" y="1891.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.33%)</title><rect x="270.8" y="1875.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.33%)</title><rect x="270.8" y="1859.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.33%)</title><rect x="270.8" y="1843.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.11%)</title><rect x="270.8" y="1827.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.8" y="1838.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.11%)</title><rect x="270.8" y="1811.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.8" y="1822.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="270.8" y="1795.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="270.8" y="1779.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="273.8" y="1790.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="270.8" y="1763.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="273.8" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="270.8" y="1747.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="273.8" y="1758.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="270.8" y="1731.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="273.8" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="270.8" y="1715.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="273.8" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.22%)</title><rect x="272.1" y="1827.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.1" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.22%)</title><rect x="272.1" y="1811.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.1" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.22%)</title><rect x="272.1" y="1795.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.1" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.22%)</title><rect x="272.1" y="1779.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.1" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.22%)</title><rect x="272.1" y="1763.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.1" y="1774.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.22%)</title><rect x="272.1" y="1747.0" width="2.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="275.1" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.22%)</title><rect x="274.7" y="1939.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.11%)</title><rect x="274.7" y="1923.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.7" y="1934.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.11%)</title><rect x="274.7" y="1907.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="277.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.11%)</title><rect x="276.0" y="1923.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="276.0" y="1907.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="276.0" y="1891.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.11%)</title><rect x="276.0" y="1875.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.11%)</title><rect x="276.0" y="1859.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.11%)</title><rect x="276.0" y="1843.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.write (1 samples, 0.11%)</title><rect x="276.0" y="1827.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchTopic.write (1 samples, 0.11%)</title><rect x="276.0" y="1811.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchPartition.write (1 samples, 0.11%)</title><rect x="276.0" y="1795.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.22%)</title><rect x="277.3" y="1955.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.11%)</title><rect x="277.3" y="1939.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.11%)</title><rect x="277.3" y="1923.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.11%)</title><rect x="277.3" y="1907.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (1 samples, 0.11%)</title><rect x="277.3" y="1891.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.11%)</title><rect x="278.6" y="1939.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.11%)</title><rect x="278.6" y="1923.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.6" y="1934.0"></text>
</g>
<g>
<title>java/lang/Thread.run (521 samples, 57.57%)</title><rect x="279.9" y="2035.0" width="679.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.9" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (521 samples, 57.57%)</title><rect x="279.9" y="2019.0" width="679.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.9" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (521 samples, 57.57%)</title><rect x="279.9" y="2003.0" width="679.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.9" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/372885885.run (306 samples, 33.81%)</title><rect x="283.8" y="1987.0" width="399.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.8" y="1998.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (306 samples, 33.81%)</title><rect x="283.8" y="1971.0" width="399.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.8" y="1982.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (306 samples, 33.81%)</title><rect x="283.8" y="1955.0" width="399.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.8" y="1966.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (305 samples, 33.70%)</title><rect x="283.8" y="1939.0" width="397.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.8" y="1950.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.11%)</title><rect x="285.1" y="1923.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.1" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (30 samples, 3.31%)</title><rect x="286.4" y="1923.0" width="39.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.4" y="1934.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (30 samples, 3.31%)</title><rect x="286.4" y="1907.0" width="39.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.4" y="1918.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (30 samples, 3.31%)</title><rect x="286.4" y="1891.0" width="39.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.4" y="1902.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 2.32%)</title><rect x="298.2" y="1875.0" width="27.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.2" y="1886.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.22%)</title><rect x="298.2" y="1859.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$477/1144001597.accept (1 samples, 0.11%)</title><rect x="298.2" y="1843.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.2" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="299.5" y="1843.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="302.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 2.10%)</title><rect x="300.8" y="1859.0" width="24.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.8" y="1870.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$477/1144001597.accept (19 samples, 2.10%)</title><rect x="300.8" y="1843.0" width="24.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.8" y="1854.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (19 samples, 2.10%)</title><rect x="300.8" y="1827.0" width="24.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.8" y="1838.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (19 samples, 2.10%)</title><rect x="300.8" y="1811.0" width="24.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.8" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (19 samples, 2.10%)</title><rect x="300.8" y="1795.0" width="24.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.8" y="1806.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (19 samples, 2.10%)</title><rect x="300.8" y="1779.0" width="24.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="303.8" y="1790.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.66%)</title><rect x="300.8" y="1763.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$467/1094188413.accept (2 samples, 0.22%)</title><rect x="303.4" y="1747.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.4" y="1758.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.22%)</title><rect x="306.0" y="1747.0" width="2.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="309.0" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.44%)</title><rect x="308.6" y="1763.0" width="16.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (99 samples, 10.94%)</title><rect x="325.5" y="1923.0" width="129.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.5" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (99 samples, 10.94%)</title><rect x="325.5" y="1907.0" width="129.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.5" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (99 samples, 10.94%)</title><rect x="325.5" y="1891.0" width="129.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.5" y="1902.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (99 samples, 10.94%)</title><rect x="325.5" y="1875.0" width="129.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.5" y="1886.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (99 samples, 10.94%)</title><rect x="325.5" y="1859.0" width="129.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.5" y="1870.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (99 samples, 10.94%)</title><rect x="325.5" y="1843.0" width="129.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.5" y="1854.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (46 samples, 5.08%)</title><rect x="325.5" y="1827.0" width="60.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.5" y="1838.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.88%)</title><rect x="325.5" y="1811.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.88%)</title><rect x="325.5" y="1795.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="328.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.88%)</title><rect x="325.5" y="1779.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.5" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.88%)</title><rect x="325.5" y="1763.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.5" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.88%)</title><rect x="325.5" y="1747.0" width="10.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.5" y="1758.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.55%)</title><rect x="328.1" y="1731.0" width="6.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="331.1" y="1742.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.55%)</title><rect x="328.1" y="1715.0" width="6.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="331.1" y="1726.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="334.7" y="1731.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="337.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (38 samples, 4.20%)</title><rect x="336.0" y="1811.0" width="49.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.0" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (38 samples, 4.20%)</title><rect x="336.0" y="1795.0" width="49.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="339.0" y="1806.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.77%)</title><rect x="369.9" y="1779.0" width="9.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="372.9" y="1790.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.66%)</title><rect x="371.2" y="1763.0" width="7.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="374.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 0.55%)</title><rect x="379.0" y="1779.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="382.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 0.55%)</title><rect x="379.0" y="1763.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="382.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.55%)</title><rect x="379.0" y="1747.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="382.0" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="384.2" y="1731.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="387.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (49 samples, 5.41%)</title><rect x="385.5" y="1827.0" width="63.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.5" y="1838.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.44%)</title><rect x="385.5" y="1811.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="388.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.44%)</title><rect x="385.5" y="1795.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.11%)</title><rect x="389.4" y="1779.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="392.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.99%)</title><rect x="390.7" y="1811.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.88%)</title><rect x="392.0" y="1795.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="395.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.66%)</title><rect x="394.6" y="1779.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="397.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.44%)</title><rect x="397.2" y="1763.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.11%)</title><rect x="402.5" y="1811.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="405.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.11%)</title><rect x="402.5" y="1795.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="405.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (35 samples, 3.87%)</title><rect x="403.8" y="1811.0" width="45.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="406.8" y="1822.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (35 samples, 3.87%)</title><rect x="403.8" y="1795.0" width="45.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.8" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.88%)</title><rect x="403.8" y="1779.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.22%)</title><rect x="403.8" y="1763.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="406.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.22%)</title><rect x="403.8" y="1747.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.22%)</title><rect x="403.8" y="1731.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.22%)</title><rect x="403.8" y="1715.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.22%)</title><rect x="403.8" y="1699.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.33%)</title><rect x="406.4" y="1763.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.33%)</title><rect x="406.4" y="1747.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.33%)</title><rect x="406.4" y="1731.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.33%)</title><rect x="406.4" y="1715.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.33%)</title><rect x="406.4" y="1699.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.33%)</title><rect x="410.3" y="1763.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="413.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.33%)</title><rect x="410.3" y="1747.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="413.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (27 samples, 2.98%)</title><rect x="414.2" y="1779.0" width="35.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.2" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (27 samples, 2.98%)</title><rect x="414.2" y="1763.0" width="35.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.2" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (27 samples, 2.98%)</title><rect x="414.2" y="1747.0" width="35.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="417.2" y="1758.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.77%)</title><rect x="416.8" y="1731.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.11%)</title><rect x="416.8" y="1715.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.44%)</title><rect x="418.1" y="1715.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.44%)</title><rect x="418.1" y="1699.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.44%)</title><rect x="418.1" y="1683.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.44%)</title><rect x="418.1" y="1667.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="421.1" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.11%)</title><rect x="423.3" y="1715.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.11%)</title><rect x="423.3" y="1699.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="426.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="424.6" y="1715.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="424.6" y="1699.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.44%)</title><rect x="425.9" y="1731.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.44%)</title><rect x="425.9" y="1715.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="428.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.11%)</title><rect x="425.9" y="1699.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="428.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.11%)</title><rect x="425.9" y="1683.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="428.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (1 samples, 0.11%)</title><rect x="425.9" y="1667.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (1 samples, 0.11%)</title><rect x="425.9" y="1651.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.9" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (1 samples, 0.11%)</title><rect x="425.9" y="1635.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.9" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (1 samples, 0.11%)</title><rect x="425.9" y="1619.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="428.9" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.33%)</title><rect x="427.2" y="1699.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="430.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.33%)</title><rect x="427.2" y="1683.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="430.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (3 samples, 0.33%)</title><rect x="427.2" y="1667.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="430.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (3 samples, 0.33%)</title><rect x="427.2" y="1651.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="430.2" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (3 samples, 0.33%)</title><rect x="427.2" y="1635.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="430.2" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (3 samples, 0.33%)</title><rect x="427.2" y="1619.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="430.2" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.33%)</title><rect x="427.2" y="1603.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.2" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.66%)</title><rect x="431.1" y="1731.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="434.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.66%)</title><rect x="431.1" y="1715.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="434.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.66%)</title><rect x="431.1" y="1699.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="434.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.66%)</title><rect x="431.1" y="1683.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="434.1" y="1694.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.66%)</title><rect x="431.1" y="1667.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.1" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.66%)</title><rect x="431.1" y="1651.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.1" y="1662.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor3.newInstance (2 samples, 0.22%)</title><rect x="436.4" y="1635.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.55%)</title><rect x="439.0" y="1731.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="442.0" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.55%)</title><rect x="439.0" y="1715.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.0" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.33%)</title><rect x="439.0" y="1699.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.0" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.22%)</title><rect x="442.9" y="1699.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.22%)</title><rect x="442.9" y="1683.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="445.9" y="1694.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.22%)</title><rect x="442.9" y="1667.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="445.9" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.33%)</title><rect x="445.5" y="1731.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="448.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.44%)</title><rect x="449.4" y="1827.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.4" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.44%)</title><rect x="449.4" y="1811.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.44%)</title><rect x="449.4" y="1795.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="452.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.44%)</title><rect x="449.4" y="1779.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="452.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.44%)</title><rect x="449.4" y="1763.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="452.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.11%)</title><rect x="453.3" y="1747.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="456.3" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (172 samples, 19.01%)</title><rect x="454.6" y="1923.0" width="224.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="457.6" y="1934.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (27 samples, 2.98%)</title><rect x="459.8" y="1907.0" width="35.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="462.8" y="1918.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 2.87%)</title><rect x="461.1" y="1891.0" width="33.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="464.1" y="1902.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (25 samples, 2.76%)</title><rect x="462.4" y="1875.0" width="32.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="465.4" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 1.88%)</title><rect x="465.0" y="1859.0" width="22.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="468.0" y="1870.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 1.22%)</title><rect x="472.9" y="1843.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 1.22%)</title><rect x="472.9" y="1827.0" width="14.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.9" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 0.66%)</title><rect x="487.2" y="1859.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.2" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.66%)</title><rect x="487.2" y="1843.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.2" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.66%)</title><rect x="487.2" y="1827.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="490.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.33%)</title><rect x="495.0" y="1907.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.0" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.33%)</title><rect x="495.0" y="1891.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="498.0" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="497.6" y="1875.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="500.6" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="497.6" y="1859.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="500.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="497.6" y="1843.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="500.6" y="1854.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="497.6" y="1827.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="500.6" y="1838.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="497.6" y="1811.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="500.6" y="1822.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="497.6" y="1795.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="500.6" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.11%)</title><rect x="497.6" y="1779.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="500.6" y="1790.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.11%)</title><rect x="497.6" y="1763.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="500.6" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (86 samples, 9.50%)</title><rect x="499.0" y="1907.0" width="112.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.0" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (79 samples, 8.73%)</title><rect x="499.0" y="1891.0" width="103.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="502.0" y="1902.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (31 samples, 3.43%)</title><rect x="512.0" y="1875.0" width="40.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="515.0" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 3.43%)</title><rect x="512.0" y="1859.0" width="40.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.0" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 1.66%)</title><rect x="526.3" y="1843.0" width="19.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="529.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.88%)</title><rect x="531.5" y="1827.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.88%)</title><rect x="531.5" y="1811.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="534.5" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.33%)</title><rect x="536.8" y="1795.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="539.8" y="1806.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.22%)</title><rect x="538.1" y="1779.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="541.1" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.22%)</title><rect x="538.1" y="1763.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="541.1" y="1774.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.22%)</title><rect x="538.1" y="1747.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="541.1" y="1758.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.22%)</title><rect x="538.1" y="1731.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="541.1" y="1742.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.11%)</title><rect x="538.1" y="1715.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="541.1" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.11%)</title><rect x="539.4" y="1715.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="542.4" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="540.7" y="1795.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="543.7" y="1806.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.22%)</title><rect x="542.0" y="1827.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="545.0" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="544.6" y="1827.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="547.6" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.55%)</title><rect x="545.9" y="1843.0" width="6.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="548.9" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (38 samples, 4.20%)</title><rect x="552.4" y="1875.0" width="49.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="555.4" y="1886.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (33 samples, 3.65%)</title><rect x="558.9" y="1859.0" width="43.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="561.9" y="1870.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.77%)</title><rect x="558.9" y="1843.0" width="20.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="561.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.99%)</title><rect x="568.1" y="1827.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.99%)</title><rect x="568.1" y="1811.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="579.8" y="1843.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="579.8" y="1827.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="582.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.11%)</title><rect x="579.8" y="1811.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.8" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (16 samples, 1.77%)</title><rect x="581.1" y="1843.0" width="20.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="584.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.put (14 samples, 1.55%)</title><rect x="583.7" y="1827.0" width="18.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.7" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (14 samples, 1.55%)</title><rect x="583.7" y="1811.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="586.7" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.11%)</title><rect x="595.4" y="1795.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="598.4" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.11%)</title><rect x="596.7" y="1795.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="599.7" y="1806.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.33%)</title><rect x="598.0" y="1795.0" width="4.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="601.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 0.77%)</title><rect x="602.0" y="1891.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="605.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.77%)</title><rect x="602.0" y="1875.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.0" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.77%)</title><rect x="602.0" y="1859.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.0" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.55%)</title><rect x="602.0" y="1843.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="605.0" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.44%)</title><rect x="603.3" y="1827.0" width="5.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="606.3" y="1838.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.44%)</title><rect x="603.3" y="1811.0" width="5.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="606.3" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.22%)</title><rect x="608.5" y="1843.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (39 samples, 4.31%)</title><rect x="611.1" y="1907.0" width="50.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="614.1" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (38 samples, 4.20%)</title><rect x="612.4" y="1891.0" width="49.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="615.4" y="1902.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$397/455648389.process (3 samples, 0.33%)</title><rect x="629.3" y="1875.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="632.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (3 samples, 0.33%)</title><rect x="629.3" y="1859.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="632.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.11%)</title><rect x="630.6" y="1843.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.11%)</title><rect x="631.9" y="1843.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.11%)</title><rect x="631.9" y="1827.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="634.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/Long.&lt;init&gt; (1 samples, 0.11%)</title><rect x="631.9" y="1811.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="634.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (8 samples, 0.88%)</title><rect x="633.2" y="1875.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="636.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.22%)</title><rect x="643.7" y="1875.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (2 samples, 0.22%)</title><rect x="643.7" y="1859.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="646.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.11%)</title><rect x="646.3" y="1875.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="649.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.11%)</title><rect x="646.3" y="1859.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="649.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$472/11698137.get$Lambda (1 samples, 0.11%)</title><rect x="646.3" y="1843.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="649.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$472/11698137.&lt;init&gt; (1 samples, 0.11%)</title><rect x="646.3" y="1827.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="649.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.11%)</title><rect x="646.3" y="1811.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="649.3" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.11%)</title><rect x="647.6" y="1875.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="650.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.11%)</title><rect x="647.6" y="1859.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="650.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="647.6" y="1843.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="650.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.66%)</title><rect x="648.9" y="1875.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="651.9" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.66%)</title><rect x="648.9" y="1859.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="651.9" y="1870.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.66%)</title><rect x="648.9" y="1843.0" width="7.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="651.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="656.7" y="1875.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="658.0" y="1875.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="661.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="658.0" y="1859.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="661.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.22%)</title><rect x="659.3" y="1875.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.3" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.22%)</title><rect x="659.3" y="1859.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="662.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.22%)</title><rect x="659.3" y="1843.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="662.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.22%)</title><rect x="659.3" y="1827.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$473/1573140922.accept (1 samples, 0.11%)</title><rect x="660.6" y="1811.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.44%)</title><rect x="661.9" y="1907.0" width="17.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="664.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.44%)</title><rect x="661.9" y="1891.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="664.9" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.66%)</title><rect x="663.2" y="1875.0" width="7.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="666.2" y="1886.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.66%)</title><rect x="663.2" y="1859.0" width="7.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="666.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.66%)</title><rect x="671.1" y="1875.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="674.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.11%)</title><rect x="671.1" y="1859.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.1" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="671.1" y="1843.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="674.1" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="671.1" y="1827.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="674.1" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="671.1" y="1811.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="674.1" y="1822.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="671.1" y="1795.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="674.1" y="1806.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="671.1" y="1779.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="674.1" y="1790.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="671.1" y="1763.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="674.1" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.55%)</title><rect x="672.4" y="1859.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="675.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$475/2013884088.accept (5 samples, 0.55%)</title><rect x="672.4" y="1843.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (5 samples, 0.55%)</title><rect x="672.4" y="1827.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.55%)</title><rect x="672.4" y="1811.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="675.4" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.55%)</title><rect x="672.4" y="1795.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="675.4" y="1806.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.55%)</title><rect x="672.4" y="1779.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="675.4" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.44%)</title><rect x="673.7" y="1763.0" width="5.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="676.7" y="1774.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.44%)</title><rect x="673.7" y="1747.0" width="5.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="676.7" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.22%)</title><rect x="678.9" y="1923.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="681.9" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="680.2" y="1907.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="683.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.11%)</title><rect x="681.5" y="1939.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="684.5" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.11%)</title><rect x="681.5" y="1923.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="684.5" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.11%)</title><rect x="681.5" y="1907.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="684.5" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="681.5" y="1891.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="684.5" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="681.5" y="1875.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="684.5" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="681.5" y="1859.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="684.5" y="1870.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="681.5" y="1843.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="684.5" y="1854.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.11%)</title><rect x="681.5" y="1827.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="684.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.33%)</title><rect x="682.8" y="1987.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="685.8" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.33%)</title><rect x="682.8" y="1971.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="685.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.33%)</title><rect x="682.8" y="1955.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.33%)</title><rect x="682.8" y="1939.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="685.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (209 samples, 23.09%)</title><rect x="686.7" y="1987.0" width="272.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="689.7" y="1998.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (209 samples, 23.09%)</title><rect x="686.7" y="1971.0" width="272.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="689.7" y="1982.0">java/util/concurrent/LinkedBlockingQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (187 samples, 20.66%)</title><rect x="686.7" y="1955.0" width="243.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="689.7" y="1966.0">java/util/concurrent/locks/Abstr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (10 samples, 1.10%)</title><rect x="698.4" y="1939.0" width="13.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="701.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.88%)</title><rect x="711.5" y="1939.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="714.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.88%)</title><rect x="711.5" y="1923.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="714.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.22%)</title><rect x="719.3" y="1907.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (160 samples, 17.68%)</title><rect x="721.9" y="1939.0" width="208.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.9" y="1950.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (160 samples, 17.68%)</title><rect x="721.9" y="1923.0" width="208.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.9" y="1934.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.11%)</title><rect x="723.2" y="1907.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="726.2" y="1918.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.11%)</title><rect x="724.5" y="1907.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="727.5" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (153 samples, 16.91%)</title><rect x="725.8" y="1907.0" width="199.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="728.8" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.22%)</title><rect x="731.0" y="1891.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="734.0" y="1902.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.11%)</title><rect x="733.6" y="1891.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="736.6" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="733.6" y="1875.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="736.6" y="1886.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.99%)</title><rect x="735.0" y="1891.0" width="23.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="738.0" y="1902.0">P..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.77%)</title><rect x="742.8" y="1875.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="745.8" y="1886.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (5 samples, 0.55%)</title><rect x="745.4" y="1859.0" width="6.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="748.4" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="751.9" y="1875.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="754.9" y="1886.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="753.2" y="1875.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="756.2" y="1886.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.11%)</title><rect x="754.5" y="1875.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="757.5" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="755.8" y="1875.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="758.8" y="1886.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.11%)</title><rect x="757.1" y="1875.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="760.1" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="758.4" y="1891.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="761.4" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (8 samples, 0.88%)</title><rect x="759.7" y="1891.0" width="10.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="762.7" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.11%)</title><rect x="770.2" y="1891.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="773.2" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (37 samples, 4.09%)</title><rect x="771.5" y="1891.0" width="48.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="774.5" y="1902.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (59 samples, 6.52%)</title><rect x="819.7" y="1891.0" width="76.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="822.7" y="1902.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (10 samples, 1.10%)</title><rect x="896.6" y="1891.0" width="13.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="899.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.22%)</title><rect x="909.7" y="1891.0" width="2.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="912.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.33%)</title><rect x="912.3" y="1891.0" width="3.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="915.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.44%)</title><rect x="916.2" y="1891.0" width="5.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="919.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.22%)</title><rect x="921.4" y="1891.0" width="2.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="924.4" y="1902.0"></text>
</g>
<g>
<title>_init (1 samples, 0.11%)</title><rect x="924.0" y="1891.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="927.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.44%)</title><rect x="925.3" y="1907.0" width="5.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="928.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.11%)</title><rect x="930.5" y="1955.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="933.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.99%)</title><rect x="931.8" y="1955.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="934.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (9 samples, 0.99%)</title><rect x="931.8" y="1939.0" width="11.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="934.8" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (9 samples, 0.99%)</title><rect x="931.8" y="1923.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="934.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 1.33%)</title><rect x="943.6" y="1955.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="946.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.33%)</title><rect x="943.6" y="1939.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.33%)</title><rect x="943.6" y="1923.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="946.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.33%)</title><rect x="943.6" y="1907.0" width="15.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="946.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.11%)</title><rect x="959.2" y="2035.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="962.2" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="959.2" y="2019.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="962.2" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="959.2" y="2003.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="962.2" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.11%)</title><rect x="959.2" y="1987.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="962.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.11%)</title><rect x="959.2" y="1971.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.2" y="1982.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectedKeys (1 samples, 0.11%)</title><rect x="959.2" y="1955.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="962.2" y="1966.0"></text>
</g>
<g>
<title>start_thread (176 samples, 19.45%)</title><rect x="960.5" y="2035.0" width="229.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="963.5" y="2046.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (176 samples, 19.45%)</title><rect x="960.5" y="2019.0" width="229.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="963.5" y="2030.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (176 samples, 19.45%)</title><rect x="960.5" y="2003.0" width="229.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.5" y="2014.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.22%)</title><rect x="960.5" y="1987.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.5" y="1998.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.22%)</title><rect x="960.5" y="1971.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.5" y="1982.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.22%)</title><rect x="960.5" y="1955.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="963.5" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.11%)</title><rect x="961.8" y="1939.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="964.8" y="1950.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (173 samples, 19.12%)</title><rect x="963.1" y="1987.0" width="225.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="966.1" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (173 samples, 19.12%)</title><rect x="963.1" y="1971.0" width="225.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.1" y="1982.0">CompileBroker::compiler_thread..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (173 samples, 19.12%)</title><rect x="963.1" y="1955.0" width="225.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.1" y="1966.0">CompileBroker::invoke_compiler..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (172 samples, 19.01%)</title><rect x="963.1" y="1939.0" width="224.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.1" y="1950.0">C2Compiler::compile_method(ciE..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (172 samples, 19.01%)</title><rect x="963.1" y="1923.0" width="224.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="966.1" y="1934.0">Compile::Compile(ciEnv*, C2Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 6.63%)</title><rect x="963.1" y="1907.0" width="78.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.1" y="1918.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.33%)</title><rect x="963.1" y="1891.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="966.1" y="1902.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.11%)</title><rect x="963.1" y="1875.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.1" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.11%)</title><rect x="963.1" y="1859.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="966.1" y="1870.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.11%)</title><rect x="964.4" y="1875.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.4" y="1886.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.11%)</title><rect x="965.7" y="1875.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="968.7" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.11%)</title><rect x="967.0" y="1891.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="970.0" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.11%)</title><rect x="967.0" y="1875.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="970.0" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.11%)</title><rect x="967.0" y="1859.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="970.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.11%)</title><rect x="967.0" y="1843.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.0" y="1854.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 1.22%)</title><rect x="968.3" y="1891.0" width="14.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.3" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 1.22%)</title><rect x="968.3" y="1875.0" width="14.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.3" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.66%)</title><rect x="971.0" y="1859.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.33%)</title><rect x="978.8" y="1859.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="981.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.11%)</title><rect x="978.8" y="1843.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.8" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.11%)</title><rect x="978.8" y="1827.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.8" y="1838.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.11%)</title><rect x="978.8" y="1811.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.8" y="1822.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.11%)</title><rect x="978.8" y="1795.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.8" y="1806.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.22%)</title><rect x="980.1" y="1843.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.1" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.11%)</title><rect x="980.1" y="1827.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.1" y="1838.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.11%)</title><rect x="980.1" y="1811.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="983.1" y="1822.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="980.1" y="1795.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="983.1" y="1806.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.11%)</title><rect x="981.4" y="1827.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.4" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.66%)</title><rect x="982.7" y="1891.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.66%)</title><rect x="982.7" y="1875.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.22%)</title><rect x="982.7" y="1859.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.22%)</title><rect x="985.3" y="1859.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.3" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.22%)</title><rect x="987.9" y="1859.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="990.9" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.22%)</title><rect x="987.9" y="1843.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.9" y="1854.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.11%)</title><rect x="989.2" y="1827.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.2" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 4.31%)</title><rect x="990.5" y="1891.0" width="50.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="993.5" y="1902.0">Phase..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.11%)</title><rect x="990.5" y="1875.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="993.5" y="1886.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.11%)</title><rect x="990.5" y="1859.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.22%)</title><rect x="991.8" y="1875.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="994.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.22%)</title><rect x="994.4" y="1875.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="994.4" y="1859.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.11%)</title><rect x="995.7" y="1859.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="998.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.88%)</title><rect x="997.0" y="1875.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.0" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.11%)</title><rect x="1006.2" y="1859.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.2" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.11%)</title><rect x="1006.2" y="1843.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.77%)</title><rect x="1007.5" y="1875.0" width="9.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1010.5" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.11%)</title><rect x="1008.8" y="1859.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.8" y="1870.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.11%)</title><rect x="1008.8" y="1843.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1011.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.33%)</title><rect x="1010.1" y="1859.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.22%)</title><rect x="1011.4" y="1843.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1014.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.22%)</title><rect x="1014.0" y="1859.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1017.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1015.3" y="1843.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1018.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.33%)</title><rect x="1016.6" y="1875.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.6" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.22%)</title><rect x="1017.9" y="1859.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1020.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.11%)</title><rect x="1020.5" y="1875.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1023.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.66%)</title><rect x="1021.8" y="1875.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1024.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.55%)</title><rect x="1023.1" y="1859.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1026.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.11%)</title><rect x="1029.6" y="1875.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1032.6" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.33%)</title><rect x="1030.9" y="1875.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.9" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.33%)</title><rect x="1030.9" y="1859.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.9" y="1870.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.22%)</title><rect x="1030.9" y="1843.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.9" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1032.2" y="1827.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.2" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::union_helper(Node*, Node*, unsigned int, unsigned int, Node*, Node*, Node*, Block*, unsigned int) (1 samples, 0.11%)</title><rect x="1033.5" y="1843.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.22%)</title><rect x="1034.8" y="1875.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.8" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.33%)</title><rect x="1037.4" y="1875.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.4" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.11%)</title><rect x="1038.8" y="1859.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1040.1" y="1859.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1043.1" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.11%)</title><rect x="1040.1" y="1843.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1043.1" y="1854.0"></text>
</g>
<g>
<title>Compile::Optimize() (102 samples, 11.27%)</title><rect x="1041.4" y="1907.0" width="133.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1044.4" y="1918.0">Compile::Optimiz..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.11%)</title><rect x="1041.4" y="1891.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.4" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.11%)</title><rect x="1041.4" y="1875.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1044.4" y="1886.0"></text>
</g>
<g>
<title>JVMState::interpreter_frame_size() const (1 samples, 0.11%)</title><rect x="1041.4" y="1859.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1044.4" y="1870.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (38 samples, 4.20%)</title><rect x="1042.7" y="1891.0" width="49.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.7" y="1902.0">Compi..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (38 samples, 4.20%)</title><rect x="1042.7" y="1875.0" width="49.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1045.7" y="1886.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1042.7" y="1859.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1045.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (31 samples, 3.43%)</title><rect x="1044.0" y="1859.0" width="40.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1047.0" y="1870.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (29 samples, 3.20%)</title><rect x="1046.6" y="1843.0" width="37.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.6" y="1854.0">Pha..</text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.11%)</title><rect x="1046.6" y="1827.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.11%)</title><rect x="1047.9" y="1827.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (26 samples, 2.87%)</title><rect x="1049.2" y="1827.0" width="33.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.2" y="1838.0">Ph..</text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.11%)</title><rect x="1050.5" y="1811.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.5" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="1050.5" y="1795.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1053.5" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.11%)</title><rect x="1050.5" y="1779.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1053.5" y="1790.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.11%)</title><rect x="1050.5" y="1763.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1053.5" y="1774.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.11%)</title><rect x="1050.5" y="1747.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.5" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (23 samples, 2.54%)</title><rect x="1051.8" y="1811.0" width="30.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.8" y="1822.0">Ph..</text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.11%)</title><rect x="1081.8" y="1811.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.11%)</title><rect x="1083.1" y="1827.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.33%)</title><rect x="1084.4" y="1859.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.33%)</title><rect x="1084.4" y="1843.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1087.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.11%)</title><rect x="1084.4" y="1827.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.11%)</title><rect x="1085.7" y="1827.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1088.7" y="1838.0"></text>
</g>
<g>
<title>PhaseGVN::apply_identity(Node*) (1 samples, 0.11%)</title><rect x="1085.7" y="1811.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.7" y="1822.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.11%)</title><rect x="1087.0" y="1827.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1090.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.33%)</title><rect x="1088.3" y="1859.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.33%)</title><rect x="1088.3" y="1843.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1091.3" y="1854.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (2 samples, 0.22%)</title><rect x="1088.3" y="1827.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.3" y="1838.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.22%)</title><rect x="1088.3" y="1811.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.3" y="1822.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1090.9" y="1827.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.9" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.11%)</title><rect x="1090.9" y="1811.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.9" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1795.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.9" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1779.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.9" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1763.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.9" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1747.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.9" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1731.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.9" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1715.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1093.9" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1699.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.9" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1683.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.9" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1667.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.9" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1651.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1093.9" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1635.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.9" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1619.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.9" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1603.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1093.9" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1587.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.9" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1571.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1093.9" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1555.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.9" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1539.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.9" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1523.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.9" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1507.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.9" y="1518.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1090.9" y="1491.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.9" y="1502.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1090.9" y="1475.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.9" y="1486.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.11%)</title><rect x="1092.2" y="1891.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1092.2" y="1875.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.11%)</title><rect x="1092.2" y="1859.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1092.2" y="1843.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.2" y="1854.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.11%)</title><rect x="1092.2" y="1827.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (13 samples, 1.44%)</title><rect x="1093.5" y="1891.0" width="17.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.5" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (13 samples, 1.44%)</title><rect x="1093.5" y="1875.0" width="17.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1096.5" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1094.8" y="1859.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.11%)</title><rect x="1094.8" y="1843.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.11%)</title><rect x="1094.8" y="1827.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.8" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (11 samples, 1.22%)</title><rect x="1096.1" y="1859.0" width="14.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.1" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (10 samples, 1.10%)</title><rect x="1096.1" y="1843.0" width="13.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.1" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1827.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.1" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1811.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.1" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1795.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.1" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1779.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.1" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1763.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.1" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1747.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1731.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1715.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1699.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1683.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1667.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.1" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1651.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.1" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1635.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.1" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1619.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.1" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1603.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.1" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1587.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.1" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1571.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.1" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1555.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.1" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1539.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.1" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1523.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.1" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1507.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.1" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1491.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.1" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1475.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.1" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1459.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.1" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1443.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.1" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1427.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.1" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1411.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.1" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1395.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.1" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1379.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.1" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1363.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.1" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1347.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.1" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1331.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.1" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1315.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.1" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1299.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1283.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.1" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1267.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.1" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1251.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.1" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1235.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1219.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.1" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1203.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.1" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1187.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1171.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1155.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1099.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1139.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1123.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1107.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1091.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1075.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1059.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1043.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1027.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="1011.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="995.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="979.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1099.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="963.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="947.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="931.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="915.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1096.1" y="899.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.1" y="910.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.11%)</title><rect x="1096.1" y="883.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (9 samples, 0.99%)</title><rect x="1097.4" y="1827.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (3 samples, 0.33%)</title><rect x="1097.4" y="1811.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.4" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1100.0" y="1795.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.66%)</title><rect x="1101.3" y="1811.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.3" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1795.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.3" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1779.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.3" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1763.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.3" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1747.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.3" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1731.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.3" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1715.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.3" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1699.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.3" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1683.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.3" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1667.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.3" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1651.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.3" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1635.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.3" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1619.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.3" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.3" y="1603.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.3" y="1614.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.11%)</title><rect x="1101.3" y="1587.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.3" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.55%)</title><rect x="1102.6" y="1795.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1102.6" y="1779.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.6" y="1790.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1102.6" y="1763.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.6" y="1774.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.11%)</title><rect x="1102.6" y="1747.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.44%)</title><rect x="1103.9" y="1779.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.9" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.44%)</title><rect x="1103.9" y="1763.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.9" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.44%)</title><rect x="1103.9" y="1747.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.9" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.44%)</title><rect x="1103.9" y="1731.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.9" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.44%)</title><rect x="1103.9" y="1715.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.9" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.44%)</title><rect x="1103.9" y="1699.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.9" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1683.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.9" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1667.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.9" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1651.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.9" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1635.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.9" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1619.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.9" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1603.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.9" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1587.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.9" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1571.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.9" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1555.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.9" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1539.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.9" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1523.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.9" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1507.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.9" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1491.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.9" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1475.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.9" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1459.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1106.9" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1443.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.9" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1103.9" y="1427.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.9" y="1438.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1103.9" y="1411.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.9" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.33%)</title><rect x="1105.2" y="1683.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1105.2" y="1667.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.2" y="1678.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1105.2" y="1651.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.22%)</title><rect x="1106.6" y="1667.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.6" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.6" y="1651.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.6" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1106.6" y="1635.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.6" y="1646.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1106.6" y="1619.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.6" y="1630.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.11%)</title><rect x="1107.9" y="1651.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.9" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_AddP(Node*, Node*) (1 samples, 0.11%)</title><rect x="1109.2" y="1843.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.11%)</title><rect x="1110.5" y="1891.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (16 samples, 1.77%)</title><rect x="1111.8" y="1891.0" width="20.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.8" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1111.8" y="1875.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1113.1" y="1875.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 1.44%)</title><rect x="1114.4" y="1875.0" width="16.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (12 samples, 1.33%)</title><rect x="1115.7" y="1859.0" width="15.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 1.22%)</title><rect x="1115.7" y="1843.0" width="14.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (10 samples, 1.10%)</title><rect x="1117.0" y="1827.0" width="13.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.11%)</title><rect x="1130.0" y="1843.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1131.3" y="1875.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.11%)</title><rect x="1131.3" y="1859.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.3" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1131.3" y="1843.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.3" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.11%)</title><rect x="1131.3" y="1827.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.3" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1811.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.3" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1795.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.3" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1779.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.3" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1763.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.3" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1747.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.3" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1731.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.3" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1715.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.3" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1699.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.3" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1683.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.3" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1667.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.3" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1651.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.3" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1635.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.3" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1619.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.3" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1603.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.3" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1587.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.3" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1571.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.3" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1555.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.3" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1539.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.3" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1523.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.3" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1507.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.3" y="1518.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1131.3" y="1491.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.3" y="1502.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1131.3" y="1475.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.3" y="1486.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (27 samples, 2.98%)</title><rect x="1132.6" y="1891.0" width="35.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.6" y="1902.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (27 samples, 2.98%)</title><rect x="1132.6" y="1875.0" width="35.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.6" y="1886.0">Pha..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1136.5" y="1859.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.5" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1136.5" y="1843.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.5" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.22%)</title><rect x="1137.8" y="1859.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.8" y="1870.0"></text>
</g>
<g>
<title>IfNode::search_identical(int) (1 samples, 0.11%)</title><rect x="1137.8" y="1843.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.8" y="1854.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.11%)</title><rect x="1139.1" y="1843.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.1" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.22%)</title><rect x="1140.5" y="1859.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.5" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.11%)</title><rect x="1140.5" y="1843.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.5" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1140.5" y="1827.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.5" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1140.5" y="1811.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.5" y="1822.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1141.8" y="1843.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.8" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.11%)</title><rect x="1141.8" y="1827.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.8" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="1141.8" y="1811.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.8" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.11%)</title><rect x="1141.8" y="1795.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.8" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.11%)</title><rect x="1141.8" y="1779.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.8" y="1790.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.11%)</title><rect x="1141.8" y="1763.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.8" y="1774.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1143.1" y="1859.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.1" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="1143.1" y="1843.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.11%)</title><rect x="1143.1" y="1827.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.1" y="1838.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.11%)</title><rect x="1144.4" y="1859.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (4 samples, 0.44%)</title><rect x="1145.7" y="1859.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (7 samples, 0.77%)</title><rect x="1150.9" y="1859.0" width="9.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.22%)</title><rect x="1157.4" y="1843.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="1854.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.22%)</title><rect x="1157.4" y="1827.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.4" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.22%)</title><rect x="1160.0" y="1859.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.0" y="1870.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (2 samples, 0.22%)</title><rect x="1160.0" y="1843.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.0" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1162.6" y="1859.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="1870.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.11%)</title><rect x="1162.6" y="1843.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.33%)</title><rect x="1163.9" y="1859.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.9" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (2 samples, 0.22%)</title><rect x="1163.9" y="1843.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.9" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1163.9" y="1827.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1163.9" y="1811.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.9" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1163.9" y="1795.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.9" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1163.9" y="1779.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.9" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1163.9" y="1763.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.9" y="1774.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1163.9" y="1747.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.9" y="1758.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1163.9" y="1731.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.9" y="1742.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1165.2" y="1795.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.2" y="1806.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1165.2" y="1779.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.2" y="1790.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1166.5" y="1843.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.5" y="1854.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1166.5" y="1827.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="1838.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.11%)</title><rect x="1166.5" y="1811.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.5" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1166.5" y="1795.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.5" y="1806.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.11%)</title><rect x="1166.5" y="1779.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.5" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.11%)</title><rect x="1167.8" y="1891.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.8" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.11%)</title><rect x="1167.8" y="1875.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.8" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1167.8" y="1859.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.8" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.22%)</title><rect x="1169.1" y="1891.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.22%)</title><rect x="1169.1" y="1875.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.22%)</title><rect x="1169.1" y="1859.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.1" y="1870.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1169.1" y="1843.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.1" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1170.4" y="1843.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.4" y="1854.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.11%)</title><rect x="1171.7" y="1891.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.7" y="1902.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.11%)</title><rect x="1171.7" y="1875.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.7" y="1886.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.11%)</title><rect x="1173.0" y="1891.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.0" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 1.10%)</title><rect x="1174.4" y="1907.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 1.10%)</title><rect x="1174.4" y="1891.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 1.10%)</title><rect x="1174.4" y="1875.0" width="13.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.4" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 1.10%)</title><rect x="1174.4" y="1859.0" width="13.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 1.10%)</title><rect x="1174.4" y="1843.0" width="13.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 1.10%)</title><rect x="1174.4" y="1827.0" width="13.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1174.4" y="1811.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1174.4" y="1795.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1174.4" y="1779.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.4" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1174.4" y="1763.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.4" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1174.4" y="1747.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1174.4" y="1731.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1174.4" y="1715.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.4" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1174.4" y="1699.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1174.4" y="1683.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.4" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.11%)</title><rect x="1174.4" y="1667.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.4" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.11%)</title><rect x="1174.4" y="1651.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="1662.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.11%)</title><rect x="1174.4" y="1635.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.4" y="1646.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1174.4" y="1619.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.4" y="1630.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.11%)</title><rect x="1174.4" y="1603.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.4" y="1614.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.11%)</title><rect x="1174.4" y="1587.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.88%)</title><rect x="1175.7" y="1811.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.7" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.88%)</title><rect x="1175.7" y="1795.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.88%)</title><rect x="1175.7" y="1779.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.88%)</title><rect x="1175.7" y="1763.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.88%)</title><rect x="1175.7" y="1747.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.88%)</title><rect x="1175.7" y="1731.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="1742.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1175.7" y="1715.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="1726.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1175.7" y="1699.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="1710.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1175.7" y="1683.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.7" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.11%)</title><rect x="1175.7" y="1667.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.7" y="1678.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.11%)</title><rect x="1175.7" y="1651.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="1662.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.11%)</title><rect x="1175.7" y="1635.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="1646.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.11%)</title><rect x="1175.7" y="1619.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.7" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1177.0" y="1715.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.0" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1177.0" y="1699.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.0" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1177.0" y="1683.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.0" y="1694.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.11%)</title><rect x="1177.0" y="1667.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.0" y="1678.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.11%)</title><rect x="1177.0" y="1651.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.0" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.3" y="1667.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.3" y="1651.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.3" y="1635.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.3" y="1619.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.3" y="1603.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.3" y="1587.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.3" y="1571.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.3" y="1555.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.3" y="1539.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="1550.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1178.3" y="1523.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="1534.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1178.3" y="1507.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="1518.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1178.3" y="1491.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="1502.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1178.3" y="1475.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1178.3" y="1459.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1178.3" y="1443.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1178.3" y="1427.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.11%)</title><rect x="1178.3" y="1411.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::SuccIter::next() (1 samples, 0.11%)</title><rect x="1178.3" y="1395.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="1406.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.55%)</title><rect x="1179.6" y="1715.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.55%)</title><rect x="1179.6" y="1699.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.55%)</title><rect x="1179.6" y="1683.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.55%)</title><rect x="1179.6" y="1667.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.55%)</title><rect x="1179.6" y="1651.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.55%)</title><rect x="1179.6" y="1635.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.55%)</title><rect x="1179.6" y="1619.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.55%)</title><rect x="1179.6" y="1603.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.55%)</title><rect x="1179.6" y="1587.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.55%)</title><rect x="1179.6" y="1571.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.55%)</title><rect x="1179.6" y="1555.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.55%)</title><rect x="1179.6" y="1539.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.55%)</title><rect x="1179.6" y="1523.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.44%)</title><rect x="1179.6" y="1507.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.44%)</title><rect x="1179.6" y="1491.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.6" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.44%)</title><rect x="1179.6" y="1475.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.44%)</title><rect x="1179.6" y="1459.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.44%)</title><rect x="1179.6" y="1443.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.44%)</title><rect x="1179.6" y="1427.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1438.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1179.6" y="1411.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="1422.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1179.6" y="1395.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.6" y="1406.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1179.6" y="1379.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="1390.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1179.6" y="1363.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.6" y="1374.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1179.6" y="1347.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="1358.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1179.6" y="1331.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="1342.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1179.6" y="1315.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="1326.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1179.6" y="1299.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1179.6" y="1283.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="1294.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1179.6" y="1267.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.6" y="1278.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1179.6" y="1251.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="1262.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1179.6" y="1235.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="1246.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1179.6" y="1219.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="1230.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1179.6" y="1203.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.6" y="1214.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1179.6" y="1187.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="1198.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.11%)</title><rect x="1179.6" y="1171.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.11%)</title><rect x="1179.6" y="1155.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="1166.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.11%)</title><rect x="1179.6" y="1139.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="1150.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.11%)</title><rect x="1179.6" y="1123.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1182.6" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.9" y="1411.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.9" y="1395.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.9" y="1379.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.9" y="1363.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.9" y="1347.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.9" y="1331.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.9" y="1315.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.9" y="1299.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.9" y="1283.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.9" y="1267.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.9" y="1251.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.9" y="1235.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.9" y="1219.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.9" y="1203.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.9" y="1187.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.9" y="1171.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.9" y="1155.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.9" y="1139.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.9" y="1123.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.9" y="1107.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.9" y="1091.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.9" y="1075.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.9" y="1059.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.9" y="1043.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.9" y="1027.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.9" y="1011.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.9" y="995.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.9" y="979.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.9" y="963.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.9" y="947.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1180.9" y="931.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1180.9" y="915.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="926.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.11%)</title><rect x="1180.9" y="899.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="910.0"></text>
</g>
<g>
<title>CounterData::is_CounterData() const (1 samples, 0.11%)</title><rect x="1180.9" y="883.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1182.2" y="1411.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1182.2" y="1395.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1182.2" y="1379.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1182.2" y="1363.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.22%)</title><rect x="1182.2" y="1347.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.22%)</title><rect x="1182.2" y="1331.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.2" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.22%)</title><rect x="1182.2" y="1315.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1182.2" y="1299.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.2" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1182.2" y="1283.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1182.2" y="1267.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.22%)</title><rect x="1182.2" y="1251.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.22%)</title><rect x="1182.2" y="1235.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.22%)</title><rect x="1182.2" y="1219.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1182.2" y="1203.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1182.2" y="1187.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1182.2" y="1171.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.22%)</title><rect x="1182.2" y="1155.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.22%)</title><rect x="1182.2" y="1139.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.22%)</title><rect x="1182.2" y="1123.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1182.2" y="1107.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1182.2" y="1091.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1182.2" y="1075.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.22%)</title><rect x="1182.2" y="1059.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.22%)</title><rect x="1182.2" y="1043.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.2" y="1027.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="1038.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1182.2" y="1011.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.2" y="1022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1182.2" y="995.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1182.2" y="979.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1182.2" y="963.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1182.2" y="947.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1182.2" y="931.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1182.2" y="915.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1182.2" y="899.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1182.2" y="883.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.11%)</title><rect x="1182.2" y="867.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="878.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.11%)</title><rect x="1182.2" y="851.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="862.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.11%)</title><rect x="1182.2" y="835.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="846.0"></text>
</g>
<g>
<title>LinkResolver::check_field_accessability(Klass*, Klass*, Klass*, fieldDescriptor const&amp;, Thread*) (1 samples, 0.11%)</title><rect x="1182.2" y="819.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.2" y="830.0"></text>
</g>
<g>
<title>Reflection::verify_member_access(Klass const*, Klass const*, Klass const*, AccessFlags, bool, bool, Thread*) (1 samples, 0.11%)</title><rect x="1182.2" y="803.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1183.5" y="1027.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1183.5" y="1011.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="1022.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.11%)</title><rect x="1183.5" y="995.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="1006.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.11%)</title><rect x="1183.5" y="979.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="990.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.11%)</title><rect x="1183.5" y="963.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="974.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.11%)</title><rect x="1183.5" y="947.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="958.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.11%)</title><rect x="1183.5" y="931.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.5" y="942.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1183.5" y="915.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.5" y="926.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1183.5" y="899.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.5" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.8" y="1507.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.8" y="1491.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.8" y="1475.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.8" y="1459.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.8" y="1443.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.8" y="1427.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.8" y="1411.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.8" y="1395.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.8" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.8" y="1379.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.8" y="1363.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.8" y="1347.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.8" y="1331.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.8" y="1315.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.8" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.8" y="1299.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.8" y="1283.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.8" y="1294.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="1184.8" y="1267.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1187.8" y="1278.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.1" y="1811.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.1" y="1795.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1186.1" y="1779.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.1" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1186.1" y="1763.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.1" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1186.1" y="1747.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1186.1" y="1731.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1186.1" y="1715.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.1" y="1726.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1186.1" y="1699.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1710.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1186.1" y="1683.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.1" y="1694.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1186.1" y="1667.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1186.1" y="1651.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1186.1" y="1635.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.1" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1186.1" y="1619.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1186.1" y="1603.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.1" y="1614.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1186.1" y="1587.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1598.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1186.1" y="1571.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.1" y="1582.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.11%)</title><rect x="1186.1" y="1555.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="1566.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="1186.1" y="1539.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1189.1" y="1550.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.11%)</title><rect x="1187.4" y="1939.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.4" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.11%)</title><rect x="1187.4" y="1923.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.4" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.11%)</title><rect x="1187.4" y="1907.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.4" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.11%)</title><rect x="1187.4" y="1891.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.4" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.11%)</title><rect x="1187.4" y="1875.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.4" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.11%)</title><rect x="1187.4" y="1859.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.4" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.11%)</title><rect x="1187.4" y="1843.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.4" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.11%)</title><rect x="1187.4" y="1827.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.4" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.11%)</title><rect x="1187.4" y="1811.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.4" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.11%)</title><rect x="1187.4" y="1795.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.4" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.11%)</title><rect x="1187.4" y="1779.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.4" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.11%)</title><rect x="1187.4" y="1763.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.4" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.11%)</title><rect x="1187.4" y="1747.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.4" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.11%)</title><rect x="1187.4" y="1731.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.4" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.11%)</title><rect x="1187.4" y="1715.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.11%)</title><rect x="1187.4" y="1699.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.4" y="1710.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.11%)</title><rect x="1188.7" y="1987.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.7" y="1998.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.11%)</title><rect x="1188.7" y="1971.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.7" y="1982.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.11%)</title><rect x="1188.7" y="1955.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.7" y="1966.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.11%)</title><rect x="1188.7" y="1939.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.7" y="1950.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.11%)</title><rect x="1188.7" y="1923.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.7" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.11%)</title><rect x="1188.7" y="1907.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.7" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (1 samples, 0.11%)</title><rect x="1188.7" y="1891.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.7" y="1902.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.11%)</title><rect x="1188.7" y="1875.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.7" y="1886.0"></text>
</g>
</g>
</svg>
