<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1446" onload="init(evt)" viewBox="0 0 1200 1446" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1429"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1429"> </text>
<g id="frames">
<g>
<title>all (1,087 samples, 100.00%)</title><rect x="10.0" y="1395.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1406.0">all</text>
</g>
<g>
<title>[unknown] (2 samples, 0.18%)</title><rect x="10.0" y="1379.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.09%)</title><rect x="10.0" y="1363.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>heap_trim (1 samples, 0.09%)</title><rect x="11.1" y="1363.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.1" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (236 samples, 21.71%)</title><rect x="12.2" y="1379.0" width="256.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.2" y="1390.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (236 samples, 21.71%)</title><rect x="12.2" y="1363.0" width="256.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="1374.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.09%)</title><rect x="13.3" y="1347.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.3" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.09%)</title><rect x="13.3" y="1331.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.09%)</title><rect x="13.3" y="1315.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.09%)</title><rect x="13.3" y="1299.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="13.3" y="1283.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="13.3" y="1267.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="13.3" y="1251.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="13.3" y="1235.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="13.3" y="1219.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="13.3" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="13.3" y="1187.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.09%)</title><rect x="13.3" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.09%)</title><rect x="13.3" y="1155.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.write (1 samples, 0.09%)</title><rect x="13.3" y="1139.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData$OffsetCommitRequestTopic.write (1 samples, 0.09%)</title><rect x="13.3" y="1123.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData$OffsetCommitRequestPartition.write (1 samples, 0.09%)</title><rect x="13.3" y="1107.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/RawTaggedFieldWriter.forFields (1 samples, 0.09%)</title><rect x="13.3" y="1091.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/RawTaggedFieldWriter.&lt;init&gt; (1 samples, 0.09%)</title><rect x="13.3" y="1075.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (234 samples, 21.53%)</title><rect x="14.3" y="1347.0" width="254.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="1358.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.09%)</title><rect x="14.3" y="1331.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.3" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="14.3" y="1315.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.3" y="1326.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="14.3" y="1299.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.3" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="14.3" y="1283.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.3" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.09%)</title><rect x="14.3" y="1267.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.3" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="15.4" y="1331.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="15.4" y="1315.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.4" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="15.4" y="1299.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="15.4" y="1283.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.4" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="15.4" y="1267.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="15.4" y="1251.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.4" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="15.4" y="1235.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="15.4" y="1219.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="15.4" y="1203.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="15.4" y="1187.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (6 samples, 0.55%)</title><rect x="16.5" y="1331.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.5" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (6 samples, 0.55%)</title><rect x="16.5" y="1315.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.5" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.55%)</title><rect x="16.5" y="1299.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$135/1334876671.accept (6 samples, 0.55%)</title><rect x="16.5" y="1283.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.55%)</title><rect x="16.5" y="1267.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.55%)</title><rect x="16.5" y="1251.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.5" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.46%)</title><rect x="17.6" y="1235.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (193 samples, 17.76%)</title><rect x="23.0" y="1331.0" width="209.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.0" y="1342.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/894116677.accept (191 samples, 17.57%)</title><rect x="23.0" y="1315.0" width="207.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.0" y="1326.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (191 samples, 17.57%)</title><rect x="23.0" y="1299.0" width="207.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.0" y="1310.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (171 samples, 15.73%)</title><rect x="23.0" y="1283.0" width="185.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.0" y="1294.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (171 samples, 15.73%)</title><rect x="23.0" y="1267.0" width="185.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.0" y="1278.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (171 samples, 15.73%)</title><rect x="23.0" y="1251.0" width="185.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.0" y="1262.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (171 samples, 15.73%)</title><rect x="23.0" y="1235.0" width="185.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.0" y="1246.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (171 samples, 15.73%)</title><rect x="23.0" y="1219.0" width="185.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.0" y="1230.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (149 samples, 13.71%)</title><rect x="45.8" y="1203.0" width="161.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.8" y="1214.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (119 samples, 10.95%)</title><rect x="75.1" y="1187.0" width="129.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.1" y="1198.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 2.39%)</title><rect x="90.3" y="1171.0" width="28.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="93.3" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 2.39%)</title><rect x="90.3" y="1155.0" width="28.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.3" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 2.39%)</title><rect x="90.3" y="1139.0" width="28.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.3" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 7.27%)</title><rect x="118.6" y="1171.0" width="85.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.6" y="1182.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 7.27%)</title><rect x="118.6" y="1155.0" width="85.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="121.6" y="1166.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 7.27%)</title><rect x="118.6" y="1139.0" width="85.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.6" y="1150.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 7.27%)</title><rect x="118.6" y="1123.0" width="85.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="121.6" y="1134.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (77 samples, 7.08%)</title><rect x="120.7" y="1107.0" width="83.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="123.7" y="1118.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="120.7" y="1091.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="123.7" y="1102.0"></text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 6.26%)</title><rect x="121.8" y="1091.0" width="73.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="124.8" y="1102.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.28%)</title><rect x="122.9" y="1075.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="125.9" y="1086.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="126.2" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="129.2" y="1086.0"></text>
</g>
<g>
<title>__pthread_cond_signal (49 samples, 4.51%)</title><rect x="127.2" y="1075.0" width="53.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="130.2" y="1086.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.37%)</title><rect x="180.4" y="1075.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="183.4" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.92%)</title><rect x="184.8" y="1075.0" width="10.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="187.8" y="1086.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.37%)</title><rect x="195.6" y="1091.0" width="4.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="198.6" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.28%)</title><rect x="200.0" y="1091.0" width="3.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="203.0" y="1102.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="203.2" y="1091.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="206.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="204.3" y="1187.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="207.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.09%)</title><rect x="204.3" y="1171.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="204.3" y="1155.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.18%)</title><rect x="205.4" y="1187.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="205.4" y="1171.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="205.4" y="1155.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.18%)</title><rect x="205.4" y="1139.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="206.5" y="1123.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="209.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="207.6" y="1203.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.09%)</title><rect x="207.6" y="1187.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.09%)</title><rect x="207.6" y="1171.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.09%)</title><rect x="207.6" y="1155.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (17 samples, 1.56%)</title><rect x="208.7" y="1283.0" width="18.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.7" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (17 samples, 1.56%)</title><rect x="208.7" y="1267.0" width="18.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.20%)</title><rect x="213.0" y="1251.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.20%)</title><rect x="213.0" y="1235.0" width="14.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.28%)</title><rect x="223.9" y="1219.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.28%)</title><rect x="223.9" y="1203.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.28%)</title><rect x="223.9" y="1187.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.09%)</title><rect x="227.1" y="1283.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.1" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="227.1" y="1267.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.1" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="227.1" y="1251.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="230.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="228.2" y="1283.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="228.2" y="1267.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="228.2" y="1251.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.18%)</title><rect x="228.2" y="1235.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.18%)</title><rect x="228.2" y="1219.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.18%)</title><rect x="230.4" y="1315.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.18%)</title><rect x="230.4" y="1299.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="230.4" y="1283.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="230.4" y="1267.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.4" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="231.5" y="1251.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (33 samples, 3.04%)</title><rect x="232.5" y="1331.0" width="35.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.5" y="1342.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (33 samples, 3.04%)</title><rect x="232.5" y="1315.0" width="35.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.5" y="1326.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (23 samples, 2.12%)</title><rect x="232.5" y="1299.0" width="25.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.5" y="1310.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.09%)</title><rect x="232.5" y="1283.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.5" y="1294.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="232.5" y="1267.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="235.5" y="1278.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*) (1 samples, 0.09%)</title><rect x="232.5" y="1251.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="235.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (22 samples, 2.02%)</title><rect x="233.6" y="1283.0" width="23.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.6" y="1294.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 2.02%)</title><rect x="233.6" y="1267.0" width="23.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.6" y="1278.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (18 samples, 1.66%)</title><rect x="234.7" y="1251.0" width="19.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (18 samples, 1.66%)</title><rect x="234.7" y="1235.0" width="19.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.7" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="235.8" y="1219.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.8" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="235.8" y="1203.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.8" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="235.8" y="1187.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.8" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="235.8" y="1171.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.8" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="235.8" y="1155.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.10%)</title><rect x="236.9" y="1219.0" width="13.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.55%)</title><rect x="243.4" y="1203.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.55%)</title><rect x="243.4" y="1187.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.55%)</title><rect x="243.4" y="1171.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.55%)</title><rect x="243.4" y="1155.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.55%)</title><rect x="243.4" y="1139.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.55%)</title><rect x="243.4" y="1123.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.55%)</title><rect x="243.4" y="1107.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (4 samples, 0.37%)</title><rect x="249.9" y="1219.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.18%)</title><rect x="252.1" y="1203.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.18%)</title><rect x="252.1" y="1187.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.1" y="1198.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.18%)</title><rect x="252.1" y="1171.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.09%)</title><rect x="254.3" y="1251.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (2 samples, 0.18%)</title><rect x="255.3" y="1251.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.18%)</title><rect x="255.3" y="1235.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.18%)</title><rect x="255.3" y="1219.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.18%)</title><rect x="255.3" y="1203.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.3" y="1214.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="256.4" y="1187.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="259.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.55%)</title><rect x="257.5" y="1299.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.55%)</title><rect x="257.5" y="1283.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.46%)</title><rect x="257.5" y="1267.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.5" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="259.7" y="1251.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.7" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="259.7" y="1235.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="259.7" y="1219.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="262.7" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="259.7" y="1203.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.7" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="259.7" y="1187.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.09%)</title><rect x="259.7" y="1171.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="259.7" y="1155.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="259.7" y="1139.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.18%)</title><rect x="260.8" y="1251.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.18%)</title><rect x="260.8" y="1235.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.8" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="261.8" y="1219.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.8" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="261.8" y="1203.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.8" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="261.8" y="1187.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="261.8" y="1171.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="261.8" y="1155.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="261.8" y="1139.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.8" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="261.8" y="1123.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="264.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="262.9" y="1267.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.09%)</title><rect x="264.0" y="1299.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="264.0" y="1283.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.09%)</title><rect x="264.0" y="1267.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="264.0" y="1251.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.09%)</title><rect x="264.0" y="1235.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="264.0" y="1219.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="264.0" y="1203.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="264.0" y="1187.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="264.0" y="1171.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.0" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="264.0" y="1155.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.0" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="264.0" y="1139.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.0" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="264.0" y="1123.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="264.0" y="1107.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="264.0" y="1091.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="264.0" y="1075.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="264.0" y="1059.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.0" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="264.0" y="1043.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="267.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.18%)</title><rect x="265.1" y="1299.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.18%)</title><rect x="265.1" y="1283.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.18%)</title><rect x="265.1" y="1267.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="266.2" y="1251.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.09%)</title><rect x="266.2" y="1235.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="266.2" y="1219.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="267.3" y="1299.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="267.3" y="1283.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.09%)</title><rect x="267.3" y="1267.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="267.3" y="1251.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (569 samples, 52.35%)</title><rect x="268.4" y="1379.0" width="617.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.4" y="1390.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (569 samples, 52.35%)</title><rect x="268.4" y="1363.0" width="617.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.4" y="1374.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (569 samples, 52.35%)</title><rect x="268.4" y="1347.0" width="617.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.4" y="1358.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/1483041490.run (364 samples, 33.49%)</title><rect x="269.4" y="1331.0" width="395.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.4" y="1342.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$81 (364 samples, 33.49%)</title><rect x="269.4" y="1315.0" width="395.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.4" y="1326.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (364 samples, 33.49%)</title><rect x="269.4" y="1299.0" width="395.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.4" y="1310.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (364 samples, 33.49%)</title><rect x="269.4" y="1283.0" width="395.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.4" y="1294.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.37%)</title><rect x="274.9" y="1267.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (14 samples, 1.29%)</title><rect x="279.2" y="1267.0" width="15.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.2" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (14 samples, 1.29%)</title><rect x="279.2" y="1251.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.get (14 samples, 1.29%)</title><rect x="279.2" y="1235.0" width="15.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.28%)</title><rect x="279.2" y="1219.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (11 samples, 1.01%)</title><rect x="282.5" y="1219.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.5" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.55%)</title><rect x="287.9" y="1203.0" width="6.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="290.9" y="1214.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.55%)</title><rect x="287.9" y="1187.0" width="6.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="290.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (30 samples, 2.76%)</title><rect x="294.4" y="1267.0" width="32.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.4" y="1278.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (30 samples, 2.76%)</title><rect x="294.4" y="1251.0" width="32.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.4" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (30 samples, 2.76%)</title><rect x="294.4" y="1235.0" width="32.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.4" y="1246.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="302.0" y="1219.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="305.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 2.02%)</title><rect x="303.1" y="1219.0" width="23.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.1" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="303.1" y="1203.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.09%)</title><rect x="303.1" y="1187.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.09%)</title><rect x="303.1" y="1171.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$364/1414674518.accept (1 samples, 0.09%)</title><rect x="303.1" y="1155.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 1.93%)</title><rect x="304.2" y="1203.0" width="22.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.2" y="1214.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$364/1414674518.accept (21 samples, 1.93%)</title><rect x="304.2" y="1187.0" width="22.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.2" y="1198.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (21 samples, 1.93%)</title><rect x="304.2" y="1171.0" width="22.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.2" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$356/158658577.accept (1 samples, 0.09%)</title><rect x="306.4" y="1155.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="309.4" y="1166.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="307.4" y="1155.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="310.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (17 samples, 1.56%)</title><rect x="308.5" y="1155.0" width="18.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (17 samples, 1.56%)</title><rect x="308.5" y="1139.0" width="18.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (17 samples, 1.56%)</title><rect x="308.5" y="1123.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.55%)</title><rect x="308.5" y="1107.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.55%)</title><rect x="308.5" y="1091.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 1.01%)</title><rect x="315.0" y="1107.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (96 samples, 8.83%)</title><rect x="327.0" y="1267.0" width="104.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.0" y="1278.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (96 samples, 8.83%)</title><rect x="327.0" y="1251.0" width="104.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.0" y="1262.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (96 samples, 8.83%)</title><rect x="327.0" y="1235.0" width="104.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.0" y="1246.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (96 samples, 8.83%)</title><rect x="327.0" y="1219.0" width="104.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.0" y="1230.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (96 samples, 8.83%)</title><rect x="327.0" y="1203.0" width="104.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="330.0" y="1214.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (96 samples, 8.83%)</title><rect x="327.0" y="1187.0" width="104.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.0" y="1198.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (32 samples, 2.94%)</title><rect x="327.0" y="1171.0" width="34.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.0" y="1182.0">co..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.64%)</title><rect x="338.9" y="1155.0" width="7.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="341.9" y="1166.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.55%)</title><rect x="340.0" y="1139.0" width="6.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="343.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.37%)</title><rect x="346.5" y="1155.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="349.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.37%)</title><rect x="346.5" y="1139.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.37%)</title><rect x="346.5" y="1123.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="349.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.37%)</title><rect x="346.5" y="1107.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="349.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.37%)</title><rect x="346.5" y="1091.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="349.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.37%)</title><rect x="346.5" y="1075.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="349.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.37%)</title><rect x="346.5" y="1059.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="349.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (9 samples, 0.83%)</title><rect x="350.9" y="1155.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.09%)</title><rect x="359.5" y="1139.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="362.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.09%)</title><rect x="359.5" y="1123.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="362.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="359.5" y="1107.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="362.5" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="360.6" y="1155.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="363.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (60 samples, 5.52%)</title><rect x="361.7" y="1171.0" width="65.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.7" y="1182.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.55%)</title><rect x="362.8" y="1155.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.55%)</title><rect x="362.8" y="1139.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.83%)</title><rect x="369.3" y="1155.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="372.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.55%)</title><rect x="372.6" y="1139.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="375.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.37%)</title><rect x="373.7" y="1123.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.37%)</title><rect x="373.7" y="1107.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="376.9" y="1091.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="379.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="378.0" y="1123.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="378.0" y="1107.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.46%)</title><rect x="379.1" y="1155.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.46%)</title><rect x="379.1" y="1139.0" width="5.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (3 samples, 0.28%)</title><rect x="384.5" y="1155.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (35 samples, 3.22%)</title><rect x="387.8" y="1155.0" width="38.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="390.8" y="1166.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="387.8" y="1139.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (34 samples, 3.13%)</title><rect x="388.9" y="1139.0" width="36.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.9" y="1150.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.20%)</title><rect x="388.9" y="1123.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.28%)</title><rect x="395.4" y="1107.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.28%)</title><rect x="395.4" y="1091.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.28%)</title><rect x="395.4" y="1075.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="398.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.37%)</title><rect x="398.6" y="1107.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (21 samples, 1.93%)</title><rect x="403.0" y="1123.0" width="22.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.0" y="1134.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (21 samples, 1.93%)</title><rect x="403.0" y="1107.0" width="22.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.0" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (21 samples, 1.93%)</title><rect x="403.0" y="1091.0" width="22.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.0" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.46%)</title><rect x="403.0" y="1075.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.28%)</title><rect x="404.1" y="1059.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.28%)</title><rect x="404.1" y="1043.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.28%)</title><rect x="404.1" y="1027.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="405.1" y="1011.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="407.3" y="1059.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="410.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.28%)</title><rect x="408.4" y="1075.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.28%)</title><rect x="408.4" y="1059.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="411.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.28%)</title><rect x="408.4" y="1043.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.28%)</title><rect x="408.4" y="1027.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="411.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.28%)</title><rect x="408.4" y="1011.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="411.7" y="1075.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="414.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.18%)</title><rect x="412.7" y="1075.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.18%)</title><rect x="412.7" y="1059.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="415.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.18%)</title><rect x="412.7" y="1043.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.18%)</title><rect x="412.7" y="1027.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.18%)</title><rect x="412.7" y="1011.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.7" y="1022.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.18%)</title><rect x="412.7" y="995.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.7" y="1006.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.18%)</title><rect x="412.7" y="979.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="415.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.46%)</title><rect x="414.9" y="1075.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.46%)</title><rect x="414.9" y="1059.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="417.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.46%)</title><rect x="414.9" y="1043.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="417.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.18%)</title><rect x="418.2" y="1027.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="421.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.46%)</title><rect x="420.3" y="1075.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="423.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.09%)</title><rect x="425.8" y="1155.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="428.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.37%)</title><rect x="426.9" y="1171.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="429.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.37%)</title><rect x="426.9" y="1155.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="429.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.37%)</title><rect x="426.9" y="1139.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.37%)</title><rect x="426.9" y="1123.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="429.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.37%)</title><rect x="426.9" y="1107.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="429.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (211 samples, 19.41%)</title><rect x="431.2" y="1267.0" width="229.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="434.2" y="1278.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (40 samples, 3.68%)</title><rect x="431.2" y="1251.0" width="43.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.2" y="1262.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (38 samples, 3.50%)</title><rect x="433.4" y="1235.0" width="41.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="436.4" y="1246.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (35 samples, 3.22%)</title><rect x="436.6" y="1219.0" width="38.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.6" y="1230.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.83%)</title><rect x="438.8" y="1203.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="441.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.83%)</title><rect x="438.8" y="1187.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.83%)</title><rect x="438.8" y="1171.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="441.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.83%)</title><rect x="438.8" y="1155.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.8" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (24 samples, 2.21%)</title><rect x="448.6" y="1203.0" width="26.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="451.6" y="1214.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (20 samples, 1.84%)</title><rect x="452.9" y="1187.0" width="21.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="455.9" y="1198.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.55%)</title><rect x="468.1" y="1171.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.1" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.28%)</title><rect x="474.6" y="1251.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="477.6" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.28%)</title><rect x="474.6" y="1235.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (104 samples, 9.57%)</title><rect x="477.9" y="1251.0" width="112.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="480.9" y="1262.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (99 samples, 9.11%)</title><rect x="477.9" y="1235.0" width="107.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="480.9" y="1246.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (23 samples, 2.12%)</title><rect x="487.6" y="1219.0" width="25.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.6" y="1230.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 1.38%)</title><rect x="490.9" y="1203.0" width="16.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="493.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.83%)</title><rect x="492.0" y="1187.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="495.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.37%)</title><rect x="497.4" y="1171.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.37%)</title><rect x="497.4" y="1155.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.4" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.37%)</title><rect x="497.4" y="1139.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="500.4" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.37%)</title><rect x="497.4" y="1123.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="500.4" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.28%)</title><rect x="497.4" y="1107.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="500.4" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.18%)</title><rect x="498.5" y="1091.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="501.5" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="499.6" y="1075.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="502.6" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="499.6" y="1059.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="502.6" y="1070.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="499.6" y="1043.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="502.6" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="499.6" y="1027.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="502.6" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="499.6" y="1011.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="502.6" y="1022.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.09%)</title><rect x="499.6" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="502.6" y="1006.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.09%)</title><rect x="500.7" y="1107.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="503.7" y="1118.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="501.8" y="1187.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="504.8" y="1198.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="502.8" y="1187.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="505.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="507.2" y="1203.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.2" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="507.2" y="1187.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="510.2" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="507.2" y="1171.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="510.2" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="507.2" y="1155.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="510.2" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="507.2" y="1139.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="510.2" y="1150.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="507.2" y="1123.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="510.2" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.37%)</title><rect x="508.3" y="1203.0" width="4.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="511.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.28%)</title><rect x="512.6" y="1219.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="515.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.28%)</title><rect x="512.6" y="1203.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="515.6" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.28%)</title><rect x="512.6" y="1187.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.6" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.28%)</title><rect x="512.6" y="1171.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="515.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.28%)</title><rect x="515.9" y="1219.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="518.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.28%)</title><rect x="515.9" y="1203.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="518.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.28%)</title><rect x="515.9" y="1187.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="518.9" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (61 samples, 5.61%)</title><rect x="519.1" y="1219.0" width="66.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="522.1" y="1230.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (61 samples, 5.61%)</title><rect x="519.1" y="1203.0" width="66.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="522.1" y="1214.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.46%)</title><rect x="519.1" y="1187.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="522.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.46%)</title><rect x="519.1" y="1171.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="522.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.46%)</title><rect x="519.1" y="1155.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="522.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.46%)</title><rect x="519.1" y="1139.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="523.5" y="1123.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="526.5" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (56 samples, 5.15%)</title><rect x="524.6" y="1187.0" width="60.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="527.6" y="1198.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (52 samples, 4.78%)</title><rect x="528.9" y="1171.0" width="56.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="531.9" y="1182.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (27 samples, 2.48%)</title><rect x="556.0" y="1155.0" width="29.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="559.0" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.37%)</title><rect x="576.7" y="1139.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="579.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="581.0" y="1139.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="584.0" y="1150.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.28%)</title><rect x="582.1" y="1139.0" width="3.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="585.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 0.46%)</title><rect x="585.3" y="1235.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="588.3" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.46%)</title><rect x="585.3" y="1219.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="588.3" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.46%)</title><rect x="585.3" y="1203.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="588.3" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.46%)</title><rect x="585.3" y="1187.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="588.3" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="587.5" y="1171.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="590.5" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="587.5" y="1155.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="590.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="588.6" y="1171.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="591.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (49 samples, 4.51%)</title><rect x="590.8" y="1251.0" width="53.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="593.8" y="1262.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (49 samples, 4.51%)</title><rect x="590.8" y="1235.0" width="53.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="593.8" y="1246.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/959567448.process (33 samples, 3.04%)</title><rect x="592.9" y="1219.0" width="35.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="595.9" y="1230.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (33 samples, 3.04%)</title><rect x="592.9" y="1203.0" width="35.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="595.9" y="1214.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (28 samples, 2.58%)</title><rect x="592.9" y="1187.0" width="30.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="595.9" y="1198.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (12 samples, 1.10%)</title><rect x="606.0" y="1171.0" width="13.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.0" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="609.2" y="1155.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="612.2" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.74%)</title><rect x="610.3" y="1155.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="613.3" y="1166.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.64%)</title><rect x="611.4" y="1139.0" width="7.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="614.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.28%)</title><rect x="619.0" y="1171.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="622.3" y="1171.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="625.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (5 samples, 0.46%)</title><rect x="623.3" y="1187.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="626.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.46%)</title><rect x="623.3" y="1171.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="626.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.46%)</title><rect x="623.3" y="1155.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="626.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.46%)</title><rect x="623.3" y="1139.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="626.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.46%)</title><rect x="623.3" y="1123.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="626.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.09%)</title><rect x="628.8" y="1219.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="628.8" y="1203.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="631.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (2 samples, 0.18%)</title><rect x="629.9" y="1219.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="632.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$361/70657173.get (2 samples, 0.18%)</title><rect x="629.9" y="1203.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="632.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$93 (2 samples, 0.18%)</title><rect x="629.9" y="1187.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2100961961.linkToTargetMethod (1 samples, 0.09%)</title><rect x="632.0" y="1219.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="635.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/842326585.invokeStatic_L_L (1 samples, 0.09%)</title><rect x="632.0" y="1203.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="635.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$362/329036199.get$Lambda (1 samples, 0.09%)</title><rect x="632.0" y="1187.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="635.0" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="633.1" y="1219.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.1" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="634.2" y="1219.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="637.2" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="634.2" y="1203.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.46%)</title><rect x="635.3" y="1219.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.3" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="639.6" y="1203.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.28%)</title><rect x="640.7" y="1219.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="643.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.28%)</title><rect x="640.7" y="1203.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="643.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.28%)</title><rect x="640.7" y="1187.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.28%)</title><rect x="640.7" y="1171.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="643.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.28%)</title><rect x="640.7" y="1155.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="643.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.28%)</title><rect x="640.7" y="1139.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.38%)</title><rect x="644.0" y="1251.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.38%)</title><rect x="644.0" y="1235.0" width="16.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.0" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="646.1" y="1219.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="649.1" y="1230.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="646.1" y="1203.0" width="2.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="649.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.01%)</title><rect x="648.3" y="1219.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="651.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.18%)</title><rect x="648.3" y="1203.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="651.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.18%)</title><rect x="648.3" y="1187.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.18%)</title><rect x="648.3" y="1171.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="651.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$363/949518578.accept (1 samples, 0.09%)</title><rect x="648.3" y="1155.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.3" y="1166.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="649.4" y="1155.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="652.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.83%)</title><rect x="650.5" y="1203.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$363/949518578.accept (9 samples, 0.83%)</title><rect x="650.5" y="1187.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$74 (9 samples, 0.83%)</title><rect x="650.5" y="1171.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="653.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (9 samples, 0.83%)</title><rect x="650.5" y="1155.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="653.5" y="1166.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.83%)</title><rect x="650.5" y="1139.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="653.5" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.83%)</title><rect x="650.5" y="1123.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="653.5" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.64%)</title><rect x="652.6" y="1107.0" width="7.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="655.6" y="1118.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.64%)</title><rect x="652.6" y="1091.0" width="7.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="655.6" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.37%)</title><rect x="660.2" y="1267.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="663.2" y="1278.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.37%)</title><rect x="660.2" y="1251.0" width="4.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="663.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.18%)</title><rect x="664.6" y="1331.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="667.6" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="664.6" y="1315.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="667.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="664.6" y="1299.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.18%)</title><rect x="664.6" y="1283.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (202 samples, 18.58%)</title><rect x="666.8" y="1331.0" width="219.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.8" y="1342.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (201 samples, 18.49%)</title><rect x="667.8" y="1315.0" width="218.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="670.8" y="1326.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (163 samples, 15.00%)</title><rect x="705.8" y="1299.0" width="177.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="708.8" y="1310.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.64%)</title><rect x="720.0" y="1283.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="723.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.64%)</title><rect x="720.0" y="1267.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.64%)</title><rect x="720.0" y="1251.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="723.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.64%)</title><rect x="720.0" y="1235.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (143 samples, 13.16%)</title><rect x="727.6" y="1283.0" width="155.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="730.6" y="1294.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (143 samples, 13.16%)</title><rect x="727.6" y="1267.0" width="155.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.6" y="1278.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="734.1" y="1251.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="737.1" y="1262.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="735.2" y="1251.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="738.2" y="1262.0"></text>
</g>
<g>
<title>Unsafe_Park (135 samples, 12.42%)</title><rect x="736.2" y="1251.0" width="146.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="739.2" y="1262.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="738.4" y="1235.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="741.4" y="1246.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="739.5" y="1235.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="742.5" y="1246.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 1.47%)</title><rect x="740.6" y="1235.0" width="17.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="743.6" y="1246.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.37%)</title><rect x="749.3" y="1219.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="752.3" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="750.3" y="1203.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="753.3" y="1214.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="751.4" y="1203.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="754.4" y="1214.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="753.6" y="1219.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="756.6" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.18%)</title><rect x="755.8" y="1219.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="758.8" y="1230.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.18%)</title><rect x="757.9" y="1235.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="760.9" y="1246.0"></text>
</g>
<g>
<title>__lll_unlock_wake (43 samples, 3.96%)</title><rect x="760.1" y="1235.0" width="46.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="763.1" y="1246.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 4.78%)</title><rect x="806.8" y="1235.0" width="56.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="809.8" y="1246.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (10 samples, 0.92%)</title><rect x="863.2" y="1235.0" width="10.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="866.2" y="1246.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="874.1" y="1235.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="877.1" y="1246.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.09%)</title><rect x="875.2" y="1235.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="878.2" y="1246.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="876.3" y="1235.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="879.3" y="1246.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="878.4" y="1235.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="881.4" y="1246.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="879.5" y="1235.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.5" y="1246.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="880.6" y="1235.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="883.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.18%)</title><rect x="882.8" y="1299.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="885.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.18%)</title><rect x="882.8" y="1283.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="885.8" y="1294.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.18%)</title><rect x="882.8" y="1267.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="885.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="885.0" y="1299.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="888.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="885.0" y="1283.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="888.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="885.0" y="1267.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="888.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="885.0" y="1251.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="888.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="886.0" y="1379.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="889.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="886.0" y="1363.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="886.0" y="1347.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="889.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="886.0" y="1331.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="889.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="886.0" y="1315.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="889.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="886.0" y="1299.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="889.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="886.0" y="1283.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="889.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="886.0" y="1267.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="889.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="886.0" y="1251.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="889.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.09%)</title><rect x="886.0" y="1235.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="889.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.09%)</title><rect x="886.0" y="1219.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="889.0" y="1230.0"></text>
</g>
<g>
<title>start_thread (279 samples, 25.67%)</title><rect x="887.1" y="1379.0" width="302.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="890.1" y="1390.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (279 samples, 25.67%)</title><rect x="887.1" y="1363.0" width="302.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="890.1" y="1374.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (28 samples, 2.58%)</title><rect x="887.1" y="1347.0" width="30.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="890.1" y="1358.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.18%)</title><rect x="887.1" y="1331.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.1" y="1342.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.18%)</title><rect x="887.1" y="1315.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="890.1" y="1326.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.18%)</title><rect x="887.1" y="1299.0" width="2.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="890.1" y="1310.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (26 samples, 2.39%)</title><rect x="889.3" y="1331.0" width="28.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="892.3" y="1342.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.83%)</title><rect x="889.3" y="1315.0" width="9.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="892.3" y="1326.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="889.3" y="1299.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="892.3" y="1310.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="890.4" y="1299.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="893.4" y="1310.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.55%)</title><rect x="892.6" y="1299.0" width="6.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="895.6" y="1310.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.55%)</title><rect x="899.1" y="1315.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="902.1" y="1326.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="899.1" y="1299.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.1" y="1310.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="899.1" y="1283.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.1" y="1294.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="899.1" y="1267.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="902.1" y="1278.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="899.1" y="1251.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="902.1" y="1262.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="900.2" y="1283.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.2" y="1294.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="900.2" y="1267.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="903.2" y="1278.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.09%)</title><rect x="900.2" y="1251.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.2" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.37%)</title><rect x="901.2" y="1299.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="904.2" y="1310.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.37%)</title><rect x="901.2" y="1283.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="904.2" y="1294.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (11 samples, 1.01%)</title><rect x="905.6" y="1315.0" width="11.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="908.6" y="1326.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (11 samples, 1.01%)</title><rect x="905.6" y="1299.0" width="11.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="908.6" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (10 samples, 0.92%)</title><rect x="905.6" y="1283.0" width="10.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="908.6" y="1294.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (10 samples, 0.92%)</title><rect x="905.6" y="1267.0" width="10.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="908.6" y="1278.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (10 samples, 0.92%)</title><rect x="905.6" y="1251.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="908.6" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (10 samples, 0.92%)</title><rect x="905.6" y="1235.0" width="10.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="908.6" y="1246.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.46%)</title><rect x="911.0" y="1219.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="914.0" y="1230.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="911.0" y="1203.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="914.0" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.18%)</title><rect x="912.1" y="1203.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="915.1" y="1214.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="913.2" y="1187.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="916.2" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.18%)</title><rect x="914.3" y="1203.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.3" y="1214.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="915.4" y="1187.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="918.4" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="916.4" y="1283.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="919.4" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="916.4" y="1267.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="919.4" y="1278.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.09%)</title><rect x="916.4" y="1251.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="919.4" y="1262.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::HeapRegionRemSetIterator(HeapRegionRemSet*) (1 samples, 0.09%)</title><rect x="916.4" y="1235.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="919.4" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (249 samples, 22.91%)</title><rect x="917.5" y="1347.0" width="270.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="920.5" y="1358.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (249 samples, 22.91%)</title><rect x="917.5" y="1331.0" width="270.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="920.5" y="1342.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (248 samples, 22.82%)</title><rect x="917.5" y="1315.0" width="269.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="920.5" y="1326.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (248 samples, 22.82%)</title><rect x="917.5" y="1299.0" width="269.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="920.5" y="1310.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (247 samples, 22.72%)</title><rect x="917.5" y="1283.0" width="268.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="920.5" y="1294.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.09%)</title><rect x="917.5" y="1267.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="920.5" y="1278.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (246 samples, 22.63%)</title><rect x="918.6" y="1267.0" width="267.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="921.6" y="1278.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>Compile::Code_Gen() (93 samples, 8.56%)</title><rect x="918.6" y="1251.0" width="101.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="921.6" y="1262.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.37%)</title><rect x="918.6" y="1235.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.6" y="1246.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.37%)</title><rect x="918.6" y="1219.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="921.6" y="1230.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.09%)</title><rect x="921.9" y="1203.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="924.9" y="1214.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.09%)</title><rect x="921.9" y="1187.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="924.9" y="1198.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.09%)</title><rect x="921.9" y="1171.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="924.9" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="921.9" y="1155.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="924.9" y="1166.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="921.9" y="1139.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="924.9" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.46%)</title><rect x="923.0" y="1235.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.0" y="1246.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.18%)</title><rect x="923.0" y="1219.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.0" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.18%)</title><rect x="923.0" y="1203.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.0" y="1214.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.18%)</title><rect x="923.0" y="1187.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="926.0" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 0.28%)</title><rect x="925.1" y="1219.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="928.1" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (3 samples, 0.28%)</title><rect x="925.1" y="1203.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="928.1" y="1214.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 1.01%)</title><rect x="928.4" y="1235.0" width="11.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="931.4" y="1246.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.18%)</title><rect x="928.4" y="1219.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="931.4" y="1230.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.09%)</title><rect x="929.5" y="1203.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="932.5" y="1214.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.83%)</title><rect x="930.6" y="1219.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.6" y="1230.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.37%)</title><rect x="931.6" y="1203.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="934.6" y="1214.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="936.0" y="1203.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="939.0" y="1214.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="936.0" y="1187.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.0" y="1198.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="936.0" y="1171.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="939.0" y="1182.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.28%)</title><rect x="937.1" y="1203.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="940.1" y="1214.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.28%)</title><rect x="937.1" y="1187.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="940.1" y="1198.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (2 samples, 0.18%)</title><rect x="937.1" y="1171.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="940.1" y="1182.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="937.1" y="1155.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="940.1" y="1166.0"></text>
</g>
<g>
<title>ciObjArrayKlass::is_obj_array_klass() const (1 samples, 0.09%)</title><rect x="937.1" y="1139.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="940.1" y="1150.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.09%)</title><rect x="938.2" y="1155.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.2" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="939.2" y="1171.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="942.2" y="1182.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="939.2" y="1155.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.2" y="1166.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.09%)</title><rect x="939.2" y="1139.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.2" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.09%)</title><rect x="940.3" y="1235.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="943.3" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.09%)</title><rect x="940.3" y="1219.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="943.3" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.46%)</title><rect x="941.4" y="1235.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.4" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.46%)</title><rect x="941.4" y="1219.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="944.4" y="1230.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.09%)</title><rect x="941.4" y="1203.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.4" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="942.5" y="1203.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="945.5" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="943.6" y="1203.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="946.6" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="943.6" y="1187.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="946.6" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="944.7" y="1203.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="947.7" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="945.7" y="1203.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.7" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.09%)</title><rect x="946.8" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="949.8" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (66 samples, 6.07%)</title><rect x="947.9" y="1235.0" width="71.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="950.9" y="1246.0">PhaseCha..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="947.9" y="1219.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.9" y="1230.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.09%)</title><rect x="949.0" y="1219.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="952.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.46%)</title><rect x="950.1" y="1219.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="953.1" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="953.3" y="1203.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="956.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="954.4" y="1203.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="957.4" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="954.4" y="1187.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.4" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.46%)</title><rect x="955.5" y="1219.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="958.5" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="955.5" y="1203.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.37%)</title><rect x="956.6" y="1203.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="959.6" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="959.9" y="1187.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (14 samples, 1.29%)</title><rect x="960.9" y="1219.0" width="15.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="963.9" y="1230.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="972.9" y="1203.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="975.9" y="1214.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.09%)</title><rect x="972.9" y="1187.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="975.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="974.0" y="1203.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.0" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="974.0" y="1187.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="977.0" y="1198.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="974.0" y="1171.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="977.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="975.1" y="1203.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.1" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="975.1" y="1187.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="978.1" y="1198.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="975.1" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="978.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.92%)</title><rect x="976.1" y="1219.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="979.1" y="1230.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="978.3" y="1203.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.3" y="1214.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.09%)</title><rect x="979.4" y="1203.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="982.4" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.46%)</title><rect x="980.5" y="1203.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="983.5" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="984.8" y="1187.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.8" y="1198.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="985.9" y="1203.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="988.9" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.28%)</title><rect x="987.0" y="1219.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.28%)</title><rect x="987.0" y="1203.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.0" y="1214.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="987.0" y="1187.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.0" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="988.1" y="1187.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.1" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.64%)</title><rect x="990.3" y="1219.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="993.3" y="1230.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="993.5" y="1203.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.5" y="1214.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.09%)</title><rect x="994.6" y="1203.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="997.6" y="1214.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="995.7" y="1203.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="998.7" y="1214.0"></text>
</g>
<g>
<title>storePNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="996.8" y="1203.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.8" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.37%)</title><rect x="997.9" y="1219.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.9" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="998.9" y="1203.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.9" y="1214.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1000.0" y="1203.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1003.0" y="1214.0"></text>
</g>
<g>
<title>rRegNOper::type() const (1 samples, 0.09%)</title><rect x="1001.1" y="1203.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.1" y="1214.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.55%)</title><rect x="1002.2" y="1219.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1005.2" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 0.55%)</title><rect x="1002.2" y="1203.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.2" y="1214.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (6 samples, 0.55%)</title><rect x="1002.2" y="1187.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1005.2" y="1198.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1002.2" y="1171.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1005.2" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.28%)</title><rect x="1003.3" y="1171.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.3" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1005.5" y="1155.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1008.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (2 samples, 0.18%)</title><rect x="1006.5" y="1171.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1008.7" y="1219.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.7" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1008.7" y="1203.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.18%)</title><rect x="1009.8" y="1219.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1012.8" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1009.8" y="1203.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1012.8" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1010.9" y="1203.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1012.0" y="1219.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1015.0" y="1230.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1012.0" y="1203.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1015.0" y="1214.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.37%)</title><rect x="1013.1" y="1219.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.1" y="1230.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1013.1" y="1203.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.1" y="1214.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.28%)</title><rect x="1014.1" y="1203.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.1" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1016.3" y="1187.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.3" y="1198.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="1017.4" y="1219.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.4" y="1230.0"></text>
</g>
<g>
<title>jmpConUNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1018.5" y="1219.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1021.5" y="1230.0"></text>
</g>
<g>
<title>Compile::Optimize() (140 samples, 12.88%)</title><rect x="1019.6" y="1251.0" width="151.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1022.6" y="1262.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1019.6" y="1235.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.6" y="1246.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1019.6" y="1219.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.6" y="1230.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1019.6" y="1203.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.6" y="1214.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="1019.6" y="1187.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.6" y="1198.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1020.7" y="1235.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1023.7" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.09%)</title><rect x="1020.7" y="1219.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1023.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.55%)</title><rect x="1021.7" y="1235.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1024.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.55%)</title><rect x="1021.7" y="1219.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1021.7" y="1203.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.09%)</title><rect x="1021.7" y="1187.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1024.7" y="1198.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::GrowableArray() (1 samples, 0.09%)</title><rect x="1021.7" y="1171.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.7" y="1182.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.09%)</title><rect x="1021.7" y="1155.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.7" y="1166.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1021.7" y="1139.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1024.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1022.8" y="1203.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1025.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.09%)</title><rect x="1022.8" y="1187.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1025.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.37%)</title><rect x="1023.9" y="1203.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.9" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.37%)</title><rect x="1023.9" y="1187.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1023.9" y="1171.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1026.9" y="1182.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.09%)</title><rect x="1023.9" y="1155.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1026.9" y="1166.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1023.9" y="1139.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.28%)</title><rect x="1025.0" y="1171.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1025.0" y="1155.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1028.0" y="1166.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1025.0" y="1139.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1028.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1026.1" y="1155.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="1139.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="1123.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="1107.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="1091.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1029.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="1075.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="1059.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="1043.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="1027.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="1011.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="995.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="979.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="947.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="931.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="915.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="899.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="883.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="867.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="819.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="787.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1029.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="755.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="723.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="707.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="691.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="675.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="659.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="643.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="627.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="611.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1026.1" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.1" y="590.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1026.1" y="563.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="1139.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="1123.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1030.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="1107.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="1091.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="1075.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="1059.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="1043.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1030.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="1027.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1030.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="1011.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1030.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="963.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="947.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="931.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="899.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="883.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1030.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="851.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="835.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1030.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1030.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1030.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1030.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="707.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1030.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="643.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1030.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="627.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1030.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1030.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1027.2" y="595.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1030.2" y="606.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1027.2" y="579.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1030.2" y="590.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1027.2" y="563.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1030.2" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1027.2" y="547.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1030.2" y="558.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1027.2" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.2" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.37%)</title><rect x="1028.3" y="1235.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.3" y="1246.0"></text>
</g>
<g>
<title>PhaseCCP::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.09%)</title><rect x="1030.4" y="1219.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1033.4" y="1230.0"></text>
</g>
<g>
<title>TypeInt::widen(Type const*, Type const*) const (1 samples, 0.09%)</title><rect x="1030.4" y="1203.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.4" y="1214.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1030.4" y="1187.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.4" y="1198.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1030.4" y="1171.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.4" y="1182.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1030.4" y="1155.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1033.4" y="1166.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1031.5" y="1219.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.5" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (114 samples, 10.49%)</title><rect x="1032.6" y="1235.0" width="123.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.6" y="1246.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1032.6" y="1219.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.6" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1032.6" y="1203.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.6" y="1214.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1032.6" y="1187.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1035.6" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1032.6" y="1171.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.6" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1032.6" y="1155.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.6" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1032.6" y="1139.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.6" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1032.6" y="1123.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.6" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1032.6" y="1107.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1035.6" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1032.6" y="1091.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.6" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1032.6" y="1075.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1032.6" y="1059.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.09%)</title><rect x="1032.6" y="1043.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.6" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1033.7" y="1107.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1033.7" y="1091.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.09%)</title><rect x="1033.7" y="1075.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.28%)</title><rect x="1034.8" y="1219.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1036.9" y="1203.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (99 samples, 9.11%)</title><rect x="1038.0" y="1219.0" width="107.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1041.0" y="1230.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (99 samples, 9.11%)</title><rect x="1038.0" y="1203.0" width="107.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1041.0" y="1214.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.55%)</title><rect x="1040.2" y="1187.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1043.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (91 samples, 8.37%)</title><rect x="1046.7" y="1187.0" width="98.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.7" y="1198.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (14 samples, 1.29%)</title><rect x="1129.2" y="1171.0" width="15.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1144.4" y="1171.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1144.4" y="1155.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.18%)</title><rect x="1145.5" y="1219.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.5" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.46%)</title><rect x="1147.7" y="1219.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1148.7" y="1203.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.09%)</title><rect x="1148.7" y="1187.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1148.7" y="1171.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.7" y="1182.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1148.7" y="1155.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1151.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.09%)</title><rect x="1149.8" y="1203.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.18%)</title><rect x="1150.9" y="1203.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.09%)</title><rect x="1150.9" y="1187.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1150.9" y="1171.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1152.0" y="1187.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.0" y="1198.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1152.0" y="1171.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.0" y="1182.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1152.0" y="1155.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.0" y="1166.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1152.0" y="1139.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.0" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1152.0" y="1123.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.0" y="1134.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1152.0" y="1107.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1153.1" y="1219.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1153.1" y="1203.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.1" y="1214.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.09%)</title><rect x="1153.1" y="1187.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.1" y="1198.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1154.2" y="1187.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.2" y="1198.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.09%)</title><rect x="1154.2" y="1171.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.2" y="1182.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1154.2" y="1155.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.2" y="1166.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.09%)</title><rect x="1155.3" y="1219.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 1.20%)</title><rect x="1156.3" y="1235.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.3" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 1.20%)</title><rect x="1156.3" y="1219.0" width="14.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.3" y="1230.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1156.3" y="1203.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.3" y="1214.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1156.3" y="1187.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="1198.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1156.3" y="1171.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.3" y="1182.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1156.3" y="1155.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.3" y="1166.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1156.3" y="1139.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.3" y="1150.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1156.3" y="1123.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.3" y="1134.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1156.3" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.3" y="1118.0"></text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.09%)</title><rect x="1157.4" y="1203.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="1214.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.28%)</title><rect x="1158.5" y="1203.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.5" y="1214.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1158.5" y="1187.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.5" y="1198.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.18%)</title><rect x="1159.6" y="1187.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="1198.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.18%)</title><rect x="1159.6" y="1171.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.6" y="1182.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1159.6" y="1155.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="1166.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1161.8" y="1203.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.28%)</title><rect x="1162.9" y="1203.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1165.0" y="1187.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.0" y="1198.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1165.0" y="1171.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.0" y="1182.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1166.1" y="1203.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="1214.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1166.1" y="1187.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.1" y="1198.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1167.2" y="1187.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.2" y="1198.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1167.2" y="1171.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.2" y="1182.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1168.3" y="1203.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.3" y="1214.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.4" y="1203.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.4" y="1214.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1169.4" y="1187.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.4" y="1198.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1170.5" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1170.5" y="1219.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.5" y="1230.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.09%)</title><rect x="1170.5" y="1203.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.5" y="1214.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.09%)</title><rect x="1170.5" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.5" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 1.01%)</title><rect x="1171.5" y="1251.0" width="12.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.5" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 1.01%)</title><rect x="1171.5" y="1235.0" width="12.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 1.01%)</title><rect x="1171.5" y="1219.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 1.01%)</title><rect x="1171.5" y="1203.0" width="12.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 1.01%)</title><rect x="1171.5" y="1187.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 1.01%)</title><rect x="1171.5" y="1171.0" width="12.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.5" y="1182.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1171.5" y="1155.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.5" y="1166.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1171.5" y="1139.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.5" y="1150.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1171.5" y="1123.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.5" y="1134.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1171.5" y="1107.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.5" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.74%)</title><rect x="1172.6" y="1155.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.6" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.74%)</title><rect x="1172.6" y="1139.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.64%)</title><rect x="1173.7" y="1123.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.64%)</title><rect x="1173.7" y="1107.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.64%)</title><rect x="1173.7" y="1091.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.64%)</title><rect x="1173.7" y="1075.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.46%)</title><rect x="1173.7" y="1059.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.46%)</title><rect x="1173.7" y="1043.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.46%)</title><rect x="1173.7" y="1027.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.46%)</title><rect x="1173.7" y="1011.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.46%)</title><rect x="1173.7" y="995.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.46%)</title><rect x="1173.7" y="979.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="990.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="963.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="974.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1173.7" y="947.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="958.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1173.7" y="931.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="942.0"></text>
</g>
<g>
<title>InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&amp;, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1173.7" y="915.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="926.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.09%)</title><rect x="1173.7" y="899.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="910.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="1173.7" y="883.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.37%)</title><rect x="1174.8" y="963.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.37%)</title><rect x="1174.8" y="947.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.37%)</title><rect x="1174.8" y="931.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.37%)</title><rect x="1174.8" y="915.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.37%)</title><rect x="1174.8" y="899.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.37%)</title><rect x="1174.8" y="883.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.28%)</title><rect x="1174.8" y="867.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.28%)</title><rect x="1174.8" y="851.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.28%)</title><rect x="1174.8" y="835.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.28%)</title><rect x="1174.8" y="819.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.28%)</title><rect x="1174.8" y="803.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1174.8" y="787.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1174.8" y="771.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1174.8" y="755.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1174.8" y="739.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1174.8" y="723.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1174.8" y="707.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1174.8" y="691.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1174.8" y="675.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1174.8" y="659.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1174.8" y="643.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1174.8" y="627.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1174.8" y="611.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.8" y="595.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.8" y="579.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.8" y="563.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.8" y="547.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.8" y="531.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.8" y="515.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.8" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.8" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1174.8" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="494.0"></text>
</g>
<g>
<title>LibraryIntrinsic::is_virtual() const (1 samples, 0.09%)</title><rect x="1174.8" y="467.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1175.9" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="579.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="590.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.9" y="563.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.9" y="574.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.09%)</title><rect x="1175.9" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.9" y="558.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1175.9" y="531.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="542.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1177.0" y="787.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.0" y="798.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.0" y="771.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.0" y="782.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.0" y="755.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.0" y="766.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.09%)</title><rect x="1177.0" y="739.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.0" y="750.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1177.0" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1177.0" y="707.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1177.0" y="691.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.0" y="702.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.09%)</title><rect x="1177.0" y="675.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.0" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.1" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.1" y="851.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.1" y="835.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.1" y="819.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.1" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.1" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.1" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="782.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1178.1" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="766.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1178.1" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.1" y="750.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.09%)</title><rect x="1178.1" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="734.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.09%)</title><rect x="1178.1" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.1" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.09%)</title><rect x="1178.1" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="702.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.09%)</title><rect x="1178.1" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1179.1" y="1059.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1179.1" y="1043.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1179.1" y="1027.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1179.1" y="1011.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1179.1" y="995.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1179.1" y="979.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1179.1" y="963.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1179.1" y="947.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1179.1" y="931.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1179.1" y="915.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1179.1" y="899.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1179.1" y="883.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1179.1" y="867.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1179.1" y="851.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1179.1" y="835.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1179.1" y="819.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1179.1" y="803.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1179.1" y="787.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1179.1" y="771.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1179.1" y="755.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1179.1" y="739.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1179.1" y="723.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1179.1" y="707.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1179.1" y="691.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1179.1" y="675.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.1" y="659.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.1" y="643.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.1" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.1" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.1" y="595.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.1" y="579.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.1" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.1" y="547.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.1" y="531.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.1" y="515.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.1" y="499.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.1" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.1" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.1" y="451.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.1" y="435.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.1" y="419.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.1" y="403.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.1" y="387.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.1" y="371.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.1" y="355.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.1" y="339.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.1" y="323.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.1" y="307.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.1" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.1" y="275.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.1" y="259.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.1" y="243.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.1" y="227.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.1" y="211.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1179.1" y="195.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1179.1" y="179.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="190.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1179.1" y="163.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1179.1" y="147.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="158.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1179.1" y="131.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.1" y="142.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1179.1" y="115.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="126.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.09%)</title><rect x="1179.1" y="99.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="110.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1179.1" y="83.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="94.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1179.1" y="67.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1179.1" y="51.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.1" y="62.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1179.1" y="35.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.2" y="659.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.2" y="643.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.2" y="627.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.2" y="611.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.2" y="595.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.2" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.2" y="563.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.2" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.2" y="531.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.2" y="515.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.2" y="499.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.2" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.2" y="467.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.2" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.2" y="435.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="446.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1180.2" y="419.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="430.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1180.2" y="403.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="414.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.09%)</title><rect x="1180.2" y="387.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="398.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1180.2" y="371.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="382.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1180.2" y="355.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="366.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1180.2" y="339.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="350.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="1180.2" y="323.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="334.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1180.2" y="307.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1181.3" y="1155.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1181.3" y="1139.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1181.3" y="1123.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1181.3" y="1107.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1181.3" y="1091.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1181.3" y="1075.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1181.3" y="1059.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1181.3" y="1043.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1181.3" y="1027.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1181.3" y="1011.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1181.3" y="995.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1181.3" y="979.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1181.3" y="963.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1181.3" y="947.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1181.3" y="931.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1181.3" y="915.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1181.3" y="899.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1181.3" y="883.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1181.3" y="867.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1181.3" y="851.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="862.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1181.3" y="835.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.4" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.4" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.4" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.4" y="803.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.4" y="787.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.4" y="771.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.4" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.4" y="755.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.4" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.4" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.4" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.4" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.4" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.4" y="675.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.4" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.4" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.4" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1182.4" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.4" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1182.4" y="627.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.4" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1182.4" y="611.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1182.4" y="595.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.4" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1182.4" y="579.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.4" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1182.4" y="563.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.4" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1182.4" y="547.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.4" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.09%)</title><rect x="1182.4" y="531.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.4" y="542.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1183.5" y="1251.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.5" y="1262.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1183.5" y="1235.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.5" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1183.5" y="1219.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.5" y="1230.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.09%)</title><rect x="1184.6" y="1251.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="1262.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.09%)</title><rect x="1184.6" y="1235.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="1246.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.09%)</title><rect x="1184.6" y="1219.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.6" y="1230.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.7" y="1283.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="1294.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.7" y="1267.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="1278.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.7" y="1251.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="1262.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.09%)</title><rect x="1185.7" y="1235.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="1246.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1185.7" y="1219.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.7" y="1230.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1185.7" y="1203.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1185.7" y="1187.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.7" y="1198.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1186.7" y="1315.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="1326.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.09%)</title><rect x="1186.7" y="1299.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="1310.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.09%)</title><rect x="1186.7" y="1283.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="1294.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.09%)</title><rect x="1186.7" y="1267.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1189.7" y="1278.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.09%)</title><rect x="1186.7" y="1251.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.7" y="1262.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.09%)</title><rect x="1186.7" y="1235.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="1246.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.8" y="1347.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="1358.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.8" y="1331.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.8" y="1342.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.8" y="1315.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="1326.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="1315.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="1326.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="1299.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="1310.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="1283.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="1267.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.9" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="1251.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="1262.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.09%)</title><rect x="1188.9" y="1235.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.9" y="1246.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.09%)</title><rect x="1188.9" y="1219.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="1230.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.09%)</title><rect x="1188.9" y="1203.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="1214.0"></text>
</g>
<g>
<title>SparsePRT::clear() (1 samples, 0.09%)</title><rect x="1188.9" y="1187.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.9" y="1198.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1188.9" y="1171.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1191.9" y="1182.0"></text>
</g>
</g>
</svg>
