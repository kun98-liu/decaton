<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1397"> </text>
<g id="frames">
<g>
<title>all (179 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 8.94%)</title><rect x="10.0" y="1347.0" width="105.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (16 samples, 8.94%)</title><rect x="10.0" y="1331.0" width="105.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1342.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.56%)</title><rect x="10.0" y="1315.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.56%)</title><rect x="10.0" y="1299.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.56%)</title><rect x="10.0" y="1283.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.56%)</title><rect x="10.0" y="1267.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.56%)</title><rect x="10.0" y="1251.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.56%)</title><rect x="10.0" y="1235.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.56%)</title><rect x="10.0" y="1219.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.56%)</title><rect x="10.0" y="1203.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.56%)</title><rect x="10.0" y="1187.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.56%)</title><rect x="10.0" y="1171.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.56%)</title><rect x="10.0" y="1155.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.56%)</title><rect x="10.0" y="1139.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.56%)</title><rect x="10.0" y="1123.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.write (1 samples, 0.56%)</title><rect x="10.0" y="1107.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ObjectSerializationCache.getSerializedValue (1 samples, 0.56%)</title><rect x="10.0" y="1091.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (15 samples, 8.38%)</title><rect x="16.6" y="1315.0" width="98.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="1326.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.56%)</title><rect x="16.6" y="1299.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.56%)</title><rect x="16.6" y="1283.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.6" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.56%)</title><rect x="16.6" y="1267.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.6" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.56%)</title><rect x="16.6" y="1251.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.56%)</title><rect x="16.6" y="1235.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.56%)</title><rect x="16.6" y="1219.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.56%)</title><rect x="16.6" y="1203.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.56%)</title><rect x="16.6" y="1187.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.56%)</title><rect x="16.6" y="1171.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.56%)</title><rect x="16.6" y="1155.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.6" y="1166.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.56%)</title><rect x="16.6" y="1139.0" width="6.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="19.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.68%)</title><rect x="23.2" y="1299.0" width="19.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/944086822.accept (3 samples, 1.68%)</title><rect x="23.2" y="1283.0" width="19.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.2" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.68%)</title><rect x="23.2" y="1267.0" width="19.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 1.12%)</title><rect x="23.2" y="1251.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 1.12%)</title><rect x="23.2" y="1235.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 1.12%)</title><rect x="23.2" y="1219.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 1.12%)</title><rect x="23.2" y="1203.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 1.12%)</title><rect x="23.2" y="1187.0" width="13.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 1.12%)</title><rect x="23.2" y="1171.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.56%)</title><rect x="36.4" y="1251.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.56%)</title><rect x="36.4" y="1235.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 6.15%)</title><rect x="43.0" y="1299.0" width="72.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.0" y="1310.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 6.15%)</title><rect x="43.0" y="1283.0" width="72.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.0" y="1294.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 3.91%)</title><rect x="43.0" y="1267.0" width="46.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.0" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.68%)</title><rect x="43.0" y="1251.0" width="19.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.68%)</title><rect x="43.0" y="1235.0" width="19.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.12%)</title><rect x="43.0" y="1219.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.56%)</title><rect x="43.0" y="1203.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.56%)</title><rect x="43.0" y="1187.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.56%)</title><rect x="43.0" y="1171.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.56%)</title><rect x="43.0" y="1155.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.0" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.56%)</title><rect x="43.0" y="1139.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.56%)</title><rect x="43.0" y="1123.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.56%)</title><rect x="49.6" y="1203.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.56%)</title><rect x="49.6" y="1187.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.56%)</title><rect x="49.6" y="1171.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.56%)</title><rect x="49.6" y="1155.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.6" y="1166.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.56%)</title><rect x="49.6" y="1139.0" width="6.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="52.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.56%)</title><rect x="56.1" y="1219.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.56%)</title><rect x="56.1" y="1203.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.56%)</title><rect x="56.1" y="1187.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.56%)</title><rect x="56.1" y="1171.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.56%)</title><rect x="56.1" y="1155.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.56%)</title><rect x="56.1" y="1139.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.56%)</title><rect x="56.1" y="1123.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.topicIds (1 samples, 0.56%)</title><rect x="56.1" y="1107.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.56%)</title><rect x="56.1" y="1091.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.56%)</title><rect x="56.1" y="1075.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.56%)</title><rect x="56.1" y="1059.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.56%)</title><rect x="56.1" y="1043.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.56%)</title><rect x="56.1" y="1027.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.1" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (1 samples, 0.56%)</title><rect x="56.1" y="1011.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.56%)</title><rect x="56.1" y="995.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.56%)</title><rect x="56.1" y="979.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.56%)</title><rect x="56.1" y="963.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.1" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$61/116237769.accept (1 samples, 0.56%)</title><rect x="56.1" y="947.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.56%)</title><rect x="56.1" y="931.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.56%)</title><rect x="56.1" y="915.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.56%)</title><rect x="56.1" y="899.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.56%)</title><rect x="56.1" y="883.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (4 samples, 2.23%)</title><rect x="62.7" y="1251.0" width="26.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.7" y="1262.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.12%)</title><rect x="69.3" y="1235.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (2 samples, 1.12%)</title><rect x="69.3" y="1219.0" width="13.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.12%)</title><rect x="69.3" y="1203.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.12%)</title><rect x="69.3" y="1187.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 1.12%)</title><rect x="69.3" y="1171.0" width="13.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 1.12%)</title><rect x="69.3" y="1155.0" width="13.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 1.12%)</title><rect x="69.3" y="1139.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="72.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 1.12%)</title><rect x="69.3" y="1123.0" width="13.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 1.12%)</title><rect x="69.3" y="1107.0" width="13.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 1.12%)</title><rect x="69.3" y="1091.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 1.12%)</title><rect x="69.3" y="1075.0" width="13.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="72.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.56%)</title><rect x="82.5" y="1235.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.56%)</title><rect x="89.1" y="1267.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="92.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.56%)</title><rect x="89.1" y="1251.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.56%)</title><rect x="89.1" y="1235.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.56%)</title><rect x="89.1" y="1219.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.56%)</title><rect x="89.1" y="1203.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.56%)</title><rect x="89.1" y="1187.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.56%)</title><rect x="89.1" y="1171.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.56%)</title><rect x="89.1" y="1155.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.&lt;init&gt; (1 samples, 0.56%)</title><rect x="89.1" y="1139.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.1" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.&lt;init&gt; (1 samples, 0.56%)</title><rect x="89.1" y="1123.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.1" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.allocateElements (1 samples, 0.56%)</title><rect x="89.1" y="1107.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.12%)</title><rect x="95.7" y="1267.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="98.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 1.12%)</title><rect x="95.7" y="1251.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 1.12%)</title><rect x="95.7" y="1235.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 1.12%)</title><rect x="95.7" y="1219.0" width="13.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (2 samples, 1.12%)</title><rect x="95.7" y="1203.0" width="13.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.7" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.56%)</title><rect x="102.3" y="1187.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.3" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.56%)</title><rect x="102.3" y="1171.0" width="6.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="105.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.56%)</title><rect x="108.9" y="1267.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="111.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.56%)</title><rect x="108.9" y="1251.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.56%)</title><rect x="108.9" y="1235.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.56%)</title><rect x="108.9" y="1219.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="111.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.56%)</title><rect x="108.9" y="1203.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.56%)</title><rect x="108.9" y="1187.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="111.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.run (70 samples, 39.11%)</title><rect x="115.5" y="1347.0" width="461.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="118.5" y="1358.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (70 samples, 39.11%)</title><rect x="115.5" y="1331.0" width="461.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.5" y="1342.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (70 samples, 39.11%)</title><rect x="115.5" y="1315.0" width="461.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.5" y="1326.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/1107206589.run (67 samples, 37.43%)</title><rect x="115.5" y="1299.0" width="441.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="118.5" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$81 (67 samples, 37.43%)</title><rect x="115.5" y="1283.0" width="441.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="118.5" y="1294.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (67 samples, 37.43%)</title><rect x="115.5" y="1267.0" width="441.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.5" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (67 samples, 37.43%)</title><rect x="115.5" y="1251.0" width="441.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.5" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 1.68%)</title><rect x="128.7" y="1235.0" width="19.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.7" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 1.68%)</title><rect x="128.7" y="1219.0" width="19.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.7" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.68%)</title><rect x="128.7" y="1203.0" width="19.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="131.7" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 1.68%)</title><rect x="128.7" y="1187.0" width="19.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="131.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (5 samples, 2.79%)</title><rect x="148.4" y="1235.0" width="33.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.4" y="1246.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.12%)</title><rect x="168.2" y="1219.0" width="13.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.12%)</title><rect x="168.2" y="1203.0" width="13.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.12%)</title><rect x="168.2" y="1187.0" width="13.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.12%)</title><rect x="168.2" y="1171.0" width="13.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$372/1909441186.accept (2 samples, 1.12%)</title><rect x="168.2" y="1155.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="171.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (2 samples, 1.12%)</title><rect x="168.2" y="1139.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 1.12%)</title><rect x="168.2" y="1123.0" width="13.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="171.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 1.12%)</title><rect x="168.2" y="1107.0" width="13.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.12%)</title><rect x="168.2" y="1091.0" width="13.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="171.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.56%)</title><rect x="168.2" y="1075.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.56%)</title><rect x="168.2" y="1059.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.56%)</title><rect x="174.8" y="1075.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (17 samples, 9.50%)</title><rect x="181.4" y="1235.0" width="112.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.4" y="1246.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (17 samples, 9.50%)</title><rect x="181.4" y="1219.0" width="112.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="184.4" y="1230.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (17 samples, 9.50%)</title><rect x="181.4" y="1203.0" width="112.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.4" y="1214.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 9.50%)</title><rect x="181.4" y="1187.0" width="112.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.4" y="1198.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 9.50%)</title><rect x="181.4" y="1171.0" width="112.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="184.4" y="1182.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (17 samples, 9.50%)</title><rect x="181.4" y="1155.0" width="112.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="184.4" y="1166.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 4.47%)</title><rect x="181.4" y="1139.0" width="52.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.4" y="1150.0">com/f..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="214.4" y="1123.0" width="6.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="217.4" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="214.4" y="1107.0" width="6.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="217.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.56%)</title><rect x="220.9" y="1123.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.56%)</title><rect x="220.9" y="1107.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.56%)</title><rect x="220.9" y="1091.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.56%)</title><rect x="220.9" y="1075.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.56%)</title><rect x="220.9" y="1059.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.56%)</title><rect x="220.9" y="1043.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.56%)</title><rect x="220.9" y="1027.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.56%)</title><rect x="227.5" y="1123.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 4.47%)</title><rect x="234.1" y="1139.0" width="52.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.1" y="1150.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.56%)</title><rect x="234.1" y="1123.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.56%)</title><rect x="234.1" y="1107.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.56%)</title><rect x="240.7" y="1123.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.56%)</title><rect x="240.7" y="1107.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (6 samples, 3.35%)</title><rect x="247.3" y="1123.0" width="39.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.3" y="1134.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.35%)</title><rect x="247.3" y="1107.0" width="39.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.3" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.12%)</title><rect x="247.3" y="1091.0" width="13.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.56%)</title><rect x="247.3" y="1075.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.56%)</title><rect x="253.9" y="1075.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.56%)</title><rect x="253.9" y="1059.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.23%)</title><rect x="260.5" y="1091.0" width="26.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.5" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.23%)</title><rect x="260.5" y="1075.0" width="26.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.5" y="1086.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.23%)</title><rect x="260.5" y="1059.0" width="26.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.5" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.56%)</title><rect x="260.5" y="1043.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="263.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.56%)</title><rect x="260.5" y="1027.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.56%)</title><rect x="260.5" y="1011.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.56%)</title><rect x="260.5" y="995.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.56%)</title><rect x="260.5" y="979.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.56%)</title><rect x="267.1" y="1043.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.56%)</title><rect x="267.1" y="1027.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.56%)</title><rect x="267.1" y="1011.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.56%)</title><rect x="267.1" y="995.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.56%)</title><rect x="267.1" y="979.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.1" y="990.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.56%)</title><rect x="267.1" y="963.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.1" y="974.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.56%)</title><rect x="267.1" y="947.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.56%)</title><rect x="273.7" y="1043.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.56%)</title><rect x="273.7" y="1027.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.56%)</title><rect x="273.7" y="1011.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.56%)</title><rect x="280.3" y="1043.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.56%)</title><rect x="286.9" y="1139.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.56%)</title><rect x="286.9" y="1123.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.56%)</title><rect x="286.9" y="1107.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.56%)</title><rect x="286.9" y="1091.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.56%)</title><rect x="286.9" y="1075.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (40 samples, 22.35%)</title><rect x="293.5" y="1235.0" width="263.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.5" y="1246.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="306.6" y="1219.0" width="6.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="309.6" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="306.6" y="1203.0" width="6.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="309.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (5 samples, 2.79%)</title><rect x="313.2" y="1219.0" width="33.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.2" y="1230.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.56%)</title><rect x="313.2" y="1203.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.2" y="1214.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.23%)</title><rect x="319.8" y="1203.0" width="26.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="322.8" y="1214.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.23%)</title><rect x="319.8" y="1187.0" width="26.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="322.8" y="1198.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.23%)</title><rect x="319.8" y="1171.0" width="26.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.8" y="1182.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 2.23%)</title><rect x="319.8" y="1155.0" width="26.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="322.8" y="1166.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 2.23%)</title><rect x="319.8" y="1139.0" width="26.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="322.8" y="1150.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.56%)</title><rect x="346.2" y="1219.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="349.2" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.56%)</title><rect x="346.2" y="1203.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (11 samples, 6.15%)</title><rect x="352.8" y="1219.0" width="72.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.8" y="1230.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (11 samples, 6.15%)</title><rect x="352.8" y="1203.0" width="72.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="355.8" y="1214.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.23%)</title><rect x="352.8" y="1187.0" width="26.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.8" y="1198.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.56%)</title><rect x="359.4" y="1171.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.56%)</title><rect x="359.4" y="1155.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.56%)</title><rect x="359.4" y="1139.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.56%)</title><rect x="359.4" y="1123.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="362.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.56%)</title><rect x="359.4" y="1107.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.4" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.56%)</title><rect x="359.4" y="1091.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="362.4" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.56%)</title><rect x="359.4" y="1075.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="362.4" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.56%)</title><rect x="359.4" y="1059.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="362.4" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.12%)</title><rect x="366.0" y="1171.0" width="13.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="369.0" y="1182.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 3.91%)</title><rect x="379.2" y="1187.0" width="46.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.2" y="1198.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.35%)</title><rect x="385.8" y="1171.0" width="39.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.8" y="1182.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 3.35%)</title><rect x="385.8" y="1155.0" width="39.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.8" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 2.79%)</title><rect x="392.3" y="1139.0" width="33.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.3" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.12%)</title><rect x="412.1" y="1123.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.1" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.56%)</title><rect x="418.7" y="1107.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="421.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (19 samples, 10.61%)</title><rect x="425.3" y="1219.0" width="125.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="428.3" y="1230.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (19 samples, 10.61%)</title><rect x="425.3" y="1203.0" width="125.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.3" y="1214.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/1387746646.process (14 samples, 7.82%)</title><rect x="431.9" y="1187.0" width="92.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.9" y="1198.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (14 samples, 7.82%)</title><rect x="431.9" y="1171.0" width="92.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="434.9" y="1182.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 7.26%)</title><rect x="431.9" y="1155.0" width="85.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.9" y="1166.0">com/lineco..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.56%)</title><rect x="431.9" y="1139.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.9" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.56%)</title><rect x="431.9" y="1123.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.9" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.56%)</title><rect x="431.9" y="1107.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="434.9" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.56%)</title><rect x="431.9" y="1091.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.56%)</title><rect x="431.9" y="1075.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.56%)</title><rect x="431.9" y="1059.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (12 samples, 6.70%)</title><rect x="438.5" y="1139.0" width="79.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="441.5" y="1150.0">com/linec..</text>
</g>
<g>
<title>java/lang/Thread.sleep (12 samples, 6.70%)</title><rect x="438.5" y="1123.0" width="79.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="441.5" y="1134.0">java/lang..</text>
</g>
<g>
<title>JVM_Sleep (9 samples, 5.03%)</title><rect x="451.7" y="1107.0" width="59.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="454.7" y="1118.0">JVM_Sl..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (8 samples, 4.47%)</title><rect x="458.3" y="1091.0" width="52.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="461.3" y="1102.0">os::s..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.56%)</title><rect x="458.3" y="1075.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="461.3" y="1086.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.56%)</title><rect x="458.3" y="1059.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="461.3" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.79%)</title><rect x="464.9" y="1075.0" width="32.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="467.9" y="1086.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 1.12%)</title><rect x="497.8" y="1075.0" width="13.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="500.8" y="1086.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.56%)</title><rect x="511.0" y="1107.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="514.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.56%)</title><rect x="517.6" y="1155.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="520.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.56%)</title><rect x="517.6" y="1139.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.56%)</title><rect x="517.6" y="1123.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="520.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.56%)</title><rect x="517.6" y="1107.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.56%)</title><rect x="517.6" y="1091.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="520.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.56%)</title><rect x="517.6" y="1075.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="520.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.56%)</title><rect x="517.6" y="1059.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="520.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.56%)</title><rect x="517.6" y="1043.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="520.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.56%)</title><rect x="517.6" y="1027.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.56%)</title><rect x="524.2" y="1187.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="527.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.56%)</title><rect x="524.2" y="1171.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="527.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.56%)</title><rect x="524.2" y="1155.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="527.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.56%)</title><rect x="524.2" y="1139.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="527.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.56%)</title><rect x="524.2" y="1123.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="527.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.56%)</title><rect x="524.2" y="1107.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.56%)</title><rect x="530.8" y="1187.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="533.8" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.56%)</title><rect x="530.8" y="1171.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.12%)</title><rect x="537.4" y="1187.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.12%)</title><rect x="537.4" y="1171.0" width="13.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="540.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.12%)</title><rect x="537.4" y="1155.0" width="13.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="540.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.12%)</title><rect x="537.4" y="1139.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 1.12%)</title><rect x="537.4" y="1123.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="540.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 1.12%)</title><rect x="537.4" y="1107.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="540.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$369/787302296.accept (1 samples, 0.56%)</title><rect x="544.0" y="1091.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="547.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.56%)</title><rect x="550.6" y="1219.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="553.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.56%)</title><rect x="550.6" y="1203.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.56%)</title><rect x="550.6" y="1187.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.56%)</title><rect x="550.6" y="1171.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="553.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$371/172323893.accept (1 samples, 0.56%)</title><rect x="550.6" y="1155.0" width="6.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$74 (1 samples, 0.56%)</title><rect x="550.6" y="1139.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.56%)</title><rect x="550.6" y="1123.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.6" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.56%)</title><rect x="550.6" y="1107.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="553.6" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.56%)</title><rect x="550.6" y="1091.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="553.6" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.56%)</title><rect x="550.6" y="1075.0" width="6.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="553.6" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.56%)</title><rect x="550.6" y="1059.0" width="6.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="553.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.68%)</title><rect x="557.2" y="1299.0" width="19.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="560.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 1.12%)</title><rect x="557.2" y="1283.0" width="13.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="560.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.12%)</title><rect x="557.2" y="1267.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="560.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.12%)</title><rect x="557.2" y="1251.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="560.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.12%)</title><rect x="557.2" y="1235.0" width="13.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="560.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.12%)</title><rect x="557.2" y="1219.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="560.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.56%)</title><rect x="570.3" y="1283.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.56%)</title><rect x="576.9" y="1347.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="579.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.56%)</title><rect x="576.9" y="1331.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="579.9" y="1342.0"></text>
</g>
<g>
<title>start_thread (92 samples, 51.40%)</title><rect x="583.5" y="1347.0" width="606.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="586.5" y="1358.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (92 samples, 51.40%)</title><rect x="583.5" y="1331.0" width="606.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="586.5" y="1342.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 7.82%)</title><rect x="583.5" y="1315.0" width="92.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="586.5" y="1326.0">GangWorker:..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 7.82%)</title><rect x="583.5" y="1299.0" width="92.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="586.5" y="1310.0">G1ParTask::..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 7.82%)</title><rect x="583.5" y="1283.0" width="92.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="586.5" y="1294.0">G1ParEvacua..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 7.26%)</title><rect x="583.5" y="1267.0" width="85.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="586.5" y="1278.0">G1ParScanT..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 5.59%)</title><rect x="596.7" y="1251.0" width="65.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="599.7" y="1262.0">G1ParSc..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 2.23%)</title><rect x="629.7" y="1235.0" width="26.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="632.7" y="1246.0">I..</text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (2 samples, 1.12%)</title><rect x="642.8" y="1219.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="645.8" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.56%)</title><rect x="656.0" y="1235.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="659.0" y="1246.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.56%)</title><rect x="662.6" y="1251.0" width="6.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="665.6" y="1262.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.56%)</title><rect x="669.2" y="1267.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="672.2" y="1278.0"></text>
</g>
<g>
<title>JavaThread::run() (78 samples, 43.58%)</title><rect x="675.8" y="1315.0" width="514.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="678.8" y="1326.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (78 samples, 43.58%)</title><rect x="675.8" y="1299.0" width="514.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="678.8" y="1310.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (78 samples, 43.58%)</title><rect x="675.8" y="1283.0" width="514.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="678.8" y="1294.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (77 samples, 43.02%)</title><rect x="675.8" y="1267.0" width="507.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="678.8" y="1278.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (75 samples, 41.90%)</title><rect x="675.8" y="1251.0" width="494.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="678.8" y="1262.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (75 samples, 41.90%)</title><rect x="675.8" y="1235.0" width="494.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="678.8" y="1246.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (43 samples, 24.02%)</title><rect x="675.8" y="1219.0" width="283.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="678.8" y="1230.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.56%)</title><rect x="675.8" y="1203.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="678.8" y="1214.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.56%)</title><rect x="675.8" y="1187.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="678.8" y="1198.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.56%)</title><rect x="675.8" y="1171.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="678.8" y="1182.0"></text>
</g>
<g>
<title>cmovL_memNode::oper_input_base() const (1 samples, 0.56%)</title><rect x="675.8" y="1155.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="678.8" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.12%)</title><rect x="682.4" y="1203.0" width="13.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="685.4" y="1214.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 1.12%)</title><rect x="682.4" y="1187.0" width="13.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="685.4" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 1.12%)</title><rect x="682.4" y="1171.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="685.4" y="1182.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.79%)</title><rect x="695.6" y="1203.0" width="32.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="698.6" y="1214.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.79%)</title><rect x="695.6" y="1187.0" width="32.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="698.6" y="1198.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.68%)</title><rect x="695.6" y="1171.0" width="19.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="698.6" y="1182.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.12%)</title><rect x="715.4" y="1171.0" width="13.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="718.4" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 1.12%)</title><rect x="715.4" y="1155.0" width="13.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="718.4" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.56%)</title><rect x="715.4" y="1139.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="718.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.56%)</title><rect x="715.4" y="1123.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="718.4" y="1134.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.56%)</title><rect x="722.0" y="1139.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="725.0" y="1150.0"></text>
</g>
<g>
<title>State::_sub_Op_MulL(Node const*) (1 samples, 0.56%)</title><rect x="722.0" y="1123.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="725.0" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.68%)</title><rect x="728.5" y="1203.0" width="19.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="731.5" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.68%)</title><rect x="728.5" y="1187.0" width="19.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="731.5" y="1198.0"></text>
</g>
<g>
<title>Node::is_block_proj() const (1 samples, 0.56%)</title><rect x="728.5" y="1171.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="731.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.56%)</title><rect x="735.1" y="1171.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="738.1" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.56%)</title><rect x="735.1" y="1155.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="738.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.56%)</title><rect x="741.7" y="1171.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="744.7" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 17.88%)</title><rect x="748.3" y="1203.0" width="211.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="751.3" y="1214.0">PhaseChaitin::Register_Alloc..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.56%)</title><rect x="748.3" y="1187.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="751.3" y="1198.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.56%)</title><rect x="754.9" y="1187.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="757.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.56%)</title><rect x="761.5" y="1187.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="764.5" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.12%)</title><rect x="768.1" y="1187.0" width="13.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="771.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.12%)</title><rect x="768.1" y="1171.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="771.1" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="774.7" y="1155.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="777.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 3.35%)</title><rect x="781.3" y="1187.0" width="39.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="784.3" y="1198.0">Pha..</text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.56%)</title><rect x="814.2" y="1171.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="817.2" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 4.47%)</title><rect x="820.8" y="1187.0" width="52.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="823.8" y="1198.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.56%)</title><rect x="834.0" y="1171.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="837.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 2.79%)</title><rect x="840.6" y="1171.0" width="33.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="843.6" y="1182.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.68%)</title><rect x="853.8" y="1155.0" width="19.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="856.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.12%)</title><rect x="873.6" y="1187.0" width="13.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.6" y="1198.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.56%)</title><rect x="880.2" y="1171.0" width="6.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="883.2" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.12%)</title><rect x="886.8" y="1187.0" width="13.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="889.8" y="1198.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 2.23%)</title><rect x="899.9" y="1187.0" width="26.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.9" y="1198.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 2.23%)</title><rect x="899.9" y="1171.0" width="26.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="902.9" y="1182.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 2.23%)</title><rect x="899.9" y="1155.0" width="26.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="902.9" y="1166.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.56%)</title><rect x="899.9" y="1139.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="902.9" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 1.12%)</title><rect x="906.5" y="1139.0" width="13.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="909.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.56%)</title><rect x="919.7" y="1139.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="922.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.12%)</title><rect x="926.3" y="1187.0" width="13.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.3" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.68%)</title><rect x="939.5" y="1187.0" width="19.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.5" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.12%)</title><rect x="946.1" y="1171.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.1" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (29 samples, 16.20%)</title><rect x="959.3" y="1219.0" width="191.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="962.3" y="1230.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.56%)</title><rect x="959.3" y="1203.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.3" y="1214.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.56%)</title><rect x="959.3" y="1187.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.3" y="1198.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.56%)</title><rect x="965.9" y="1203.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.9" y="1214.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.56%)</title><rect x="965.9" y="1187.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="968.9" y="1198.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.56%)</title><rect x="965.9" y="1171.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="968.9" y="1182.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.56%)</title><rect x="965.9" y="1155.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="968.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.12%)</title><rect x="972.5" y="1203.0" width="13.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="975.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::ConnectionGraph(Compile*, PhaseIterGVN*) (1 samples, 0.56%)</title><rect x="972.5" y="1187.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="975.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.56%)</title><rect x="979.1" y="1187.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.1" y="1198.0"></text>
</g>
<g>
<title>ConPNode::Opcode() const (1 samples, 0.56%)</title><rect x="979.1" y="1171.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="982.1" y="1182.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.56%)</title><rect x="985.6" y="1203.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="988.6" y="1214.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.56%)</title><rect x="985.6" y="1187.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.56%)</title><rect x="992.2" y="1203.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="995.2" y="1214.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.56%)</title><rect x="992.2" y="1187.0" width="6.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="995.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 10.61%)</title><rect x="998.8" y="1203.0" width="125.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1001.8" y="1214.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.12%)</title><rect x="998.8" y="1187.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1001.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.68%)</title><rect x="1012.0" y="1187.0" width="19.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1015.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (12 samples, 6.70%)</title><rect x="1031.8" y="1187.0" width="79.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1034.8" y="1198.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 6.15%)</title><rect x="1038.4" y="1171.0" width="72.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1041.4" y="1182.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 6.15%)</title><rect x="1038.4" y="1155.0" width="72.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.4" y="1166.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.56%)</title><rect x="1097.7" y="1139.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.56%)</title><rect x="1097.7" y="1123.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1100.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.56%)</title><rect x="1104.3" y="1139.0" width="6.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.12%)</title><rect x="1110.9" y="1187.0" width="13.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.56%)</title><rect x="1110.9" y="1171.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.56%)</title><rect x="1110.9" y="1155.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.56%)</title><rect x="1117.5" y="1171.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.56%)</title><rect x="1117.5" y="1155.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.68%)</title><rect x="1124.1" y="1203.0" width="19.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.1" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.68%)</title><rect x="1124.1" y="1187.0" width="19.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.1" y="1198.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1124.1" y="1171.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.1" y="1182.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.56%)</title><rect x="1124.1" y="1155.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.1" y="1166.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.56%)</title><rect x="1124.1" y="1139.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.1" y="1150.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.56%)</title><rect x="1124.1" y="1123.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.56%)</title><rect x="1130.7" y="1171.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.56%)</title><rect x="1130.7" y="1155.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.7" y="1166.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.56%)</title><rect x="1130.7" y="1139.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.7" y="1150.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.56%)</title><rect x="1137.3" y="1171.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.3" y="1182.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.56%)</title><rect x="1137.3" y="1155.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.3" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.56%)</title><rect x="1143.9" y="1203.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.9" y="1214.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.56%)</title><rect x="1143.9" y="1187.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.9" y="1198.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.56%)</title><rect x="1143.9" y="1171.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.9" y="1182.0"></text>
</g>
<g>
<title>Node::replace_edges_in_range(Node*, Node*, int, int) (1 samples, 0.56%)</title><rect x="1143.9" y="1155.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.9" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.68%)</title><rect x="1150.4" y="1219.0" width="19.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.4" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.68%)</title><rect x="1150.4" y="1203.0" width="19.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.68%)</title><rect x="1150.4" y="1187.0" width="19.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.68%)</title><rect x="1150.4" y="1171.0" width="19.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.68%)</title><rect x="1150.4" y="1155.0" width="19.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.68%)</title><rect x="1150.4" y="1139.0" width="19.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.68%)</title><rect x="1150.4" y="1123.0" width="19.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.4" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.68%)</title><rect x="1150.4" y="1107.0" width="19.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.68%)</title><rect x="1150.4" y="1091.0" width="19.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.68%)</title><rect x="1150.4" y="1075.0" width="19.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.68%)</title><rect x="1150.4" y="1059.0" width="19.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.68%)</title><rect x="1150.4" y="1043.0" width="19.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.4" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.68%)</title><rect x="1150.4" y="1027.0" width="19.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.68%)</title><rect x="1150.4" y="1011.0" width="19.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.68%)</title><rect x="1150.4" y="995.0" width="19.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.68%)</title><rect x="1150.4" y="979.0" width="19.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.68%)</title><rect x="1150.4" y="963.0" width="19.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.68%)</title><rect x="1150.4" y="947.0" width="19.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.68%)</title><rect x="1150.4" y="931.0" width="19.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.12%)</title><rect x="1150.4" y="915.0" width="13.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.12%)</title><rect x="1150.4" y="899.0" width="13.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.12%)</title><rect x="1150.4" y="883.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.12%)</title><rect x="1150.4" y="867.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.12%)</title><rect x="1150.4" y="851.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.12%)</title><rect x="1150.4" y="835.0" width="13.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.12%)</title><rect x="1150.4" y="819.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.12%)</title><rect x="1150.4" y="803.0" width="13.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.12%)</title><rect x="1150.4" y="787.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.12%)</title><rect x="1150.4" y="771.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.12%)</title><rect x="1150.4" y="755.0" width="13.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.12%)</title><rect x="1150.4" y="739.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.12%)</title><rect x="1150.4" y="723.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.12%)</title><rect x="1150.4" y="707.0" width="13.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.12%)</title><rect x="1150.4" y="691.0" width="13.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.12%)</title><rect x="1150.4" y="675.0" width="13.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.12%)</title><rect x="1150.4" y="659.0" width="13.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.12%)</title><rect x="1150.4" y="643.0" width="13.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.12%)</title><rect x="1150.4" y="627.0" width="13.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.12%)</title><rect x="1150.4" y="611.0" width="13.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.12%)</title><rect x="1150.4" y="595.0" width="13.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.12%)</title><rect x="1150.4" y="579.0" width="13.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.12%)</title><rect x="1150.4" y="563.0" width="13.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.12%)</title><rect x="1150.4" y="547.0" width="13.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1150.4" y="531.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1150.4" y="515.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1150.4" y="499.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1150.4" y="483.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1150.4" y="467.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1150.4" y="451.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.4" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.56%)</title><rect x="1150.4" y="435.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="446.0"></text>
</g>
<g>
<title>Compile::find_intrinsic(ciMethod*, bool) (1 samples, 0.56%)</title><rect x="1150.4" y="419.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.4" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1157.0" y="531.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1157.0" y="515.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1157.0" y="499.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1157.0" y="483.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1157.0" y="467.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1157.0" y="451.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1157.0" y="435.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1157.0" y="419.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1157.0" y="403.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1157.0" y="387.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1157.0" y="371.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1157.0" y="355.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1157.0" y="339.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.0" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.56%)</title><rect x="1157.0" y="323.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.0" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.56%)</title><rect x="1157.0" y="307.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.0" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.56%)</title><rect x="1157.0" y="291.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.0" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.56%)</title><rect x="1157.0" y="275.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.0" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.56%)</title><rect x="1157.0" y="259.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.0" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.56%)</title><rect x="1157.0" y="243.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.0" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.56%)</title><rect x="1157.0" y="227.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.0" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.56%)</title><rect x="1157.0" y="211.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.0" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.56%)</title><rect x="1157.0" y="195.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.0" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.56%)</title><rect x="1157.0" y="179.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.0" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1157.0" y="163.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.0" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1157.0" y="147.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.0" y="158.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.56%)</title><rect x="1157.0" y="131.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.0" y="142.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.56%)</title><rect x="1157.0" y="115.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.0" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.56%)</title><rect x="1157.0" y="99.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.0" y="110.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.56%)</title><rect x="1157.0" y="83.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.0" y="94.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.56%)</title><rect x="1157.0" y="67.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.0" y="78.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.56%)</title><rect x="1157.0" y="51.0" width="6.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.0" y="62.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.56%)</title><rect x="1157.0" y="35.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.6" y="915.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.6" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.6" y="899.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.6" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.6" y="883.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.6" y="867.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.6" y="851.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.6" y="835.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.6" y="819.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.6" y="803.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.6" y="787.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.6" y="771.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.6" y="755.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.6" y="739.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.6" y="723.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.6" y="707.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.6" y="691.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.6" y="675.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.6" y="659.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.6" y="643.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.56%)</title><rect x="1163.6" y="627.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.56%)</title><rect x="1163.6" y="611.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.56%)</title><rect x="1163.6" y="595.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.56%)</title><rect x="1163.6" y="579.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.56%)</title><rect x="1163.6" y="563.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.56%)</title><rect x="1163.6" y="547.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.56%)</title><rect x="1163.6" y="531.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.6" y="542.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.56%)</title><rect x="1163.6" y="515.0" width="6.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1166.6" y="526.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.12%)</title><rect x="1170.2" y="1251.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.2" y="1262.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.12%)</title><rect x="1170.2" y="1235.0" width="13.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.2" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.12%)</title><rect x="1170.2" y="1219.0" width="13.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.2" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.12%)</title><rect x="1170.2" y="1203.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.2" y="1214.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.12%)</title><rect x="1170.2" y="1187.0" width="13.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.2" y="1198.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.12%)</title><rect x="1170.2" y="1171.0" width="13.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.2" y="1182.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.12%)</title><rect x="1170.2" y="1155.0" width="13.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.2" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.12%)</title><rect x="1170.2" y="1139.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.2" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.12%)</title><rect x="1170.2" y="1123.0" width="13.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.2" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.12%)</title><rect x="1170.2" y="1107.0" width="13.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.2" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 1.12%)</title><rect x="1170.2" y="1091.0" width="13.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.2" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.12%)</title><rect x="1170.2" y="1075.0" width="13.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.2" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 1.12%)</title><rect x="1170.2" y="1059.0" width="13.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.2" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.12%)</title><rect x="1170.2" y="1043.0" width="13.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.2" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.12%)</title><rect x="1170.2" y="1027.0" width="13.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.2" y="1038.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.56%)</title><rect x="1170.2" y="1011.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.2" y="1022.0"></text>
</g>
<g>
<title>ValueStack::copy(ValueStack::Kind, int) (1 samples, 0.56%)</title><rect x="1170.2" y="995.0" width="6.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.2" y="1006.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.56%)</title><rect x="1170.2" y="979.0" width="6.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.2" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.56%)</title><rect x="1176.8" y="1011.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.56%)</title><rect x="1176.8" y="995.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.56%)</title><rect x="1176.8" y="979.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.56%)</title><rect x="1176.8" y="963.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.8" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.56%)</title><rect x="1176.8" y="947.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.56%)</title><rect x="1176.8" y="931.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.56%)</title><rect x="1176.8" y="915.0" width="6.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.8" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.56%)</title><rect x="1176.8" y="899.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.56%)</title><rect x="1176.8" y="883.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.56%)</title><rect x="1176.8" y="867.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.8" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.56%)</title><rect x="1176.8" y="851.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.56%)</title><rect x="1176.8" y="835.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1176.8" y="819.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.8" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.56%)</title><rect x="1176.8" y="803.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="814.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.56%)</title><rect x="1176.8" y="787.0" width="6.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="798.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.56%)</title><rect x="1176.8" y="771.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="782.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.56%)</title><rect x="1176.8" y="755.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.56%)</title><rect x="1176.8" y="739.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.8" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.56%)</title><rect x="1176.8" y="723.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="734.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.56%)</title><rect x="1176.8" y="707.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.8" y="718.0"></text>
</g>
<g>
<title>LoaderConstraintTable::add_entry(Symbol*, Klass*, Handle, Klass*, Handle) (1 samples, 0.56%)</title><rect x="1176.8" y="691.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.8" y="702.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.56%)</title><rect x="1183.4" y="1267.0" width="6.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="1278.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.56%)</title><rect x="1183.4" y="1251.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="1262.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.56%)</title><rect x="1183.4" y="1235.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.56%)</title><rect x="1183.4" y="1219.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.4" y="1230.0"></text>
</g>
</g>
</svg>
