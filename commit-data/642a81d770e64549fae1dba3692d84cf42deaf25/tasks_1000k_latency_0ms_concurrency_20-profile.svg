<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (1,478 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.20%)</title><rect x="10.0" y="1139.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.20%)</title><rect x="10.0" y="1123.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.20%)</title><rect x="10.0" y="1107.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.20%)</title><rect x="10.0" y="1091.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.14%)</title><rect x="10.8" y="1075.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="1086.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="10.8" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.07%)</title><rect x="10.8" y="1043.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.8" y="1054.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="11.6" y="1059.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.6" y="1070.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.07%)</title><rect x="12.4" y="1139.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="15.4" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="12.4" y="1123.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.4" y="1134.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="12.4" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (243 samples, 16.44%)</title><rect x="13.2" y="1139.0" width="194.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="1150.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (243 samples, 16.44%)</title><rect x="13.2" y="1123.0" width="194.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.2" y="1134.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.07%)</title><rect x="13.2" y="1107.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.07%)</title><rect x="13.2" y="1091.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.07%)</title><rect x="13.2" y="1075.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.07%)</title><rect x="13.2" y="1059.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.07%)</title><rect x="13.2" y="1043.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.07%)</title><rect x="13.2" y="1027.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.07%)</title><rect x="13.2" y="1011.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.07%)</title><rect x="13.2" y="995.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.07%)</title><rect x="13.2" y="979.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (1 samples, 0.07%)</title><rect x="13.2" y="963.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests$$Lambda$255/792070965.apply (1 samples, 0.07%)</title><rect x="13.2" y="947.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (239 samples, 16.17%)</title><rect x="14.0" y="1107.0" width="190.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.0" y="1118.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.14%)</title><rect x="14.0" y="1091.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.07%)</title><rect x="14.8" y="1075.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="14.8" y="1059.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="14.8" y="1043.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="14.8" y="1027.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="14.8" y="1011.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="14.8" y="995.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="14.8" y="979.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.14%)</title><rect x="15.6" y="1091.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.14%)</title><rect x="15.6" y="1075.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.14%)</title><rect x="15.6" y="1059.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$272/515256278.accept (2 samples, 0.14%)</title><rect x="15.6" y="1043.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.14%)</title><rect x="15.6" y="1027.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.14%)</title><rect x="15.6" y="1011.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.14%)</title><rect x="15.6" y="995.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.6" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.14%)</title><rect x="17.2" y="1091.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.2" y="1102.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (2 samples, 0.14%)</title><rect x="17.2" y="1075.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.2" y="1086.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (2 samples, 0.14%)</title><rect x="17.2" y="1059.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.2" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="17.2" y="1043.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.2" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (2 samples, 0.14%)</title><rect x="17.2" y="1027.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.2" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="17.2" y="1011.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="17.2" y="995.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.2" y="1006.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (2 samples, 0.14%)</title><rect x="17.2" y="979.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.2" y="990.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (2 samples, 0.14%)</title><rect x="17.2" y="963.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.2" y="974.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (2 samples, 0.14%)</title><rect x="17.2" y="947.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.2" y="958.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (1 samples, 0.07%)</title><rect x="17.2" y="931.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.2" y="942.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (1 samples, 0.07%)</title><rect x="17.2" y="915.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (1 samples, 0.07%)</title><rect x="17.2" y="899.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (1 samples, 0.07%)</title><rect x="17.2" y="883.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (1 samples, 0.07%)</title><rect x="17.2" y="867.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.2" y="878.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.07%)</title><rect x="18.0" y="931.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.0" y="942.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValueSlowPath (1 samples, 0.07%)</title><rect x="18.0" y="915.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Math.ulp (1 samples, 0.07%)</title><rect x="18.0" y="899.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.0" y="910.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.setIntegerToDoubleValueConversionRatio (1 samples, 0.07%)</title><rect x="18.0" y="883.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (191 samples, 12.92%)</title><rect x="18.8" y="1091.0" width="152.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="1102.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/1360744165.accept (185 samples, 12.52%)</title><rect x="18.8" y="1075.0" width="147.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.8" y="1086.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (185 samples, 12.52%)</title><rect x="18.8" y="1059.0" width="147.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.8" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (163 samples, 11.03%)</title><rect x="18.8" y="1043.0" width="130.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.8" y="1054.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (163 samples, 11.03%)</title><rect x="18.8" y="1027.0" width="130.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.8" y="1038.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (163 samples, 11.03%)</title><rect x="18.8" y="1011.0" width="130.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="21.8" y="1022.0">com/linecorp/dec..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (19 samples, 1.29%)</title><rect x="18.8" y="995.0" width="15.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.8" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (19 samples, 1.29%)</title><rect x="18.8" y="979.0" width="15.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.8" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepCounter.increment (1 samples, 0.07%)</title><rect x="21.2" y="963.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/DoubleAdder.add (1 samples, 0.07%)</title><rect x="21.2" y="947.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.2" y="958.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (15 samples, 1.01%)</title><rect x="22.0" y="963.0" width="12.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="25.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (144 samples, 9.74%)</title><rect x="34.0" y="995.0" width="114.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="37.0" y="1006.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (144 samples, 9.74%)</title><rect x="34.0" y="979.0" width="114.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.0" y="990.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (140 samples, 9.47%)</title><rect x="37.1" y="963.0" width="111.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.1" y="974.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (124 samples, 8.39%)</title><rect x="37.1" y="947.0" width="99.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.1" y="958.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (13 samples, 0.88%)</title><rect x="37.1" y="931.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (13 samples, 0.88%)</title><rect x="37.1" y="915.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 0.88%)</title><rect x="37.1" y="899.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.07%)</title><rect x="46.7" y="883.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.20%)</title><rect x="47.5" y="931.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.20%)</title><rect x="47.5" y="915.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.14%)</title><rect x="48.3" y="899.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.14%)</title><rect x="48.3" y="883.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (108 samples, 7.31%)</title><rect x="49.9" y="931.0" width="86.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.9" y="942.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (108 samples, 7.31%)</title><rect x="49.9" y="915.0" width="86.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.9" y="926.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (106 samples, 7.17%)</title><rect x="51.5" y="899.0" width="84.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.5" y="910.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (106 samples, 7.17%)</title><rect x="51.5" y="883.0" width="84.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.5" y="894.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (104 samples, 7.04%)</title><rect x="53.1" y="867.0" width="83.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.1" y="878.0">jdk/inter..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.07%)</title><rect x="54.7" y="851.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="57.7" y="862.0"></text>
</g>
<g>
<title>Unsafe_Unpark (46 samples, 3.11%)</title><rect x="55.5" y="851.0" width="36.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="58.5" y="862.0">Uns..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.07%)</title><rect x="62.7" y="835.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="65.7" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.14%)</title><rect x="63.5" y="835.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="66.5" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.27%)</title><rect x="65.1" y="835.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="68.1" y="846.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="67.5" y="819.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="70.5" y="830.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.07%)</title><rect x="68.3" y="835.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="71.3" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.34%)</title><rect x="69.1" y="835.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="72.1" y="846.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="73.1" y="835.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="76.1" y="846.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.20%)</title><rect x="73.9" y="835.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="76.9" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_lock (19 samples, 1.29%)</title><rect x="76.3" y="835.0" width="15.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="79.3" y="846.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="91.4" y="835.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="94.4" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_signal (54 samples, 3.65%)</title><rect x="92.2" y="851.0" width="43.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="95.2" y="862.0">__pt..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="135.3" y="851.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="138.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.07%)</title><rect x="136.1" y="947.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.07%)</title><rect x="136.1" y="931.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.07%)</title><rect x="136.1" y="915.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.07%)</title><rect x="136.1" y="899.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="139.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.54%)</title><rect x="136.9" y="947.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.54%)</title><rect x="136.9" y="931.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="139.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.41%)</title><rect x="138.5" y="915.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="141.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.41%)</title><rect x="138.5" y="899.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="141.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.47%)</title><rect x="143.3" y="947.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="146.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.47%)</title><rect x="143.3" y="931.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.07%)</title><rect x="148.1" y="915.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (11 samples, 0.74%)</title><rect x="148.9" y="1043.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="151.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 0.74%)</title><rect x="148.9" y="1027.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="151.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.61%)</title><rect x="150.5" y="1011.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="153.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.61%)</title><rect x="150.5" y="995.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="153.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="156.9" y="979.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.07%)</title><rect x="156.9" y="963.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (7 samples, 0.47%)</title><rect x="157.7" y="1043.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="160.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.47%)</title><rect x="157.7" y="1027.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="160.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="157.7" y="1011.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="158.5" y="995.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.34%)</title><rect x="159.3" y="1011.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (5 samples, 0.34%)</title><rect x="159.3" y="995.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (5 samples, 0.34%)</title><rect x="159.3" y="979.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.3" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.34%)</title><rect x="159.3" y="963.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.3" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.34%)</title><rect x="159.3" y="947.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.27%)</title><rect x="163.3" y="1043.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.27%)</title><rect x="163.3" y="1027.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="166.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.14%)</title><rect x="164.9" y="1011.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.14%)</title><rect x="164.9" y="995.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="166.5" y="1075.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="166.5" y="1059.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="166.5" y="1043.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="169.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.27%)</title><rect x="167.3" y="1075.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.27%)</title><rect x="167.3" y="1059.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.27%)</title><rect x="167.3" y="1043.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.27%)</title><rect x="167.3" y="1027.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.3" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.07%)</title><rect x="169.7" y="1011.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="172.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="170.5" y="1075.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="170.5" y="1059.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="173.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="170.5" y="1043.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="173.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="170.5" y="1027.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="170.5" y="1011.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.07%)</title><rect x="170.5" y="995.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="173.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (42 samples, 2.84%)</title><rect x="171.3" y="1091.0" width="33.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.3" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (42 samples, 2.84%)</title><rect x="171.3" y="1075.0" width="33.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.3" y="1086.0">or..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.isEmpty (1 samples, 0.07%)</title><rect x="172.1" y="1059.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (26 samples, 1.76%)</title><rect x="172.9" y="1059.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="175.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="172.9" y="1043.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="172.9" y="1027.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="172.9" y="1011.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (25 samples, 1.69%)</title><rect x="173.7" y="1043.0" width="19.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.07%)</title><rect x="173.7" y="1027.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.07%)</title><rect x="173.7" y="1011.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.7" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.07%)</title><rect x="173.7" y="995.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$525/1434279107.accept (1 samples, 0.07%)</title><rect x="173.7" y="979.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.07%)</title><rect x="173.7" y="963.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="173.7" y="947.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="173.7" y="931.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.07%)</title><rect x="173.7" y="915.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (24 samples, 1.62%)</title><rect x="174.5" y="1027.0" width="19.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1800 (1 samples, 0.07%)</title><rect x="174.5" y="1011.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.trace (1 samples, 0.07%)</title><rect x="174.5" y="995.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (16 samples, 1.08%)</title><rect x="175.3" y="1011.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (16 samples, 1.08%)</title><rect x="175.3" y="995.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="178.3" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.07%)</title><rect x="176.1" y="979.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.1" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.07%)</title><rect x="176.1" y="963.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.1" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.07%)</title><rect x="176.1" y="947.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.1" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.07%)</title><rect x="176.1" y="931.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.1" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.07%)</title><rect x="176.1" y="915.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="179.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 0.54%)</title><rect x="176.9" y="979.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.14%)</title><rect x="176.9" y="963.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.14%)</title><rect x="176.9" y="947.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.14%)</title><rect x="176.9" y="931.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.14%)</title><rect x="176.9" y="915.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.14%)</title><rect x="176.9" y="899.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (2 samples, 0.14%)</title><rect x="176.9" y="883.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (2 samples, 0.14%)</title><rect x="176.9" y="867.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.9" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (2 samples, 0.14%)</title><rect x="176.9" y="851.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.9" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (2 samples, 0.14%)</title><rect x="176.9" y="835.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.9" y="846.0"></text>
</g>
<g>
<title>updateBytesCRC32C (2 samples, 0.14%)</title><rect x="176.9" y="819.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="179.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.41%)</title><rect x="178.5" y="963.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.41%)</title><rect x="178.5" y="947.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="181.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="179.3" y="931.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (4 samples, 0.27%)</title><rect x="180.1" y="931.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (4 samples, 0.27%)</title><rect x="180.1" y="915.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="183.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (4 samples, 0.27%)</title><rect x="180.1" y="899.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (6 samples, 0.41%)</title><rect x="183.2" y="979.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="186.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.41%)</title><rect x="183.2" y="963.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.41%)</title><rect x="183.2" y="947.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.2" y="958.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.41%)</title><rect x="183.2" y="931.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.2" y="942.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="187.2" y="915.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="190.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (4 samples, 0.27%)</title><rect x="188.0" y="1011.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.27%)</title><rect x="188.0" y="995.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.14%)</title><rect x="188.0" y="979.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="188.0" y="963.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.0" y="974.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.14%)</title><rect x="188.0" y="947.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.0" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.14%)</title><rect x="188.0" y="931.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.0" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="188.8" y="915.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="191.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="189.6" y="979.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.14%)</title><rect x="189.6" y="963.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="189.6" y="947.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="189.6" y="931.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="190.4" y="947.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (2 samples, 0.14%)</title><rect x="191.2" y="1011.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.14%)</title><rect x="191.2" y="995.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="191.2" y="979.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.07%)</title><rect x="192.0" y="979.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.0" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="192.0" y="963.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.0" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="192.0" y="947.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="195.0" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="192.0" y="931.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="195.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.07%)</title><rect x="192.8" y="1011.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.07%)</title><rect x="192.8" y="995.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="192.8" y="979.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="192.8" y="963.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="192.8" y="947.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="195.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.07%)</title><rect x="193.6" y="1059.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.07%)</title><rect x="193.6" y="1043.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.07%)</title><rect x="193.6" y="1027.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="193.6" y="1011.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="193.6" y="995.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.07%)</title><rect x="193.6" y="979.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.47%)</title><rect x="194.4" y="1059.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="197.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.47%)</title><rect x="194.4" y="1043.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.47%)</title><rect x="194.4" y="1027.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="197.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (6 samples, 0.41%)</title><rect x="194.4" y="1011.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="197.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.07%)</title><rect x="194.4" y="995.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="194.4" y="979.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="194.4" y="963.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.4" y="974.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="194.4" y="947.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="197.4" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.07%)</title><rect x="194.4" y="931.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.07%)</title><rect x="194.4" y="915.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.20%)</title><rect x="195.2" y="995.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="198.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.20%)</title><rect x="195.2" y="979.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="198.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.20%)</title><rect x="195.2" y="963.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.20%)</title><rect x="195.2" y="947.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.07%)</title><rect x="195.2" y="931.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.2" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.07%)</title><rect x="195.2" y="915.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.2" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="195.2" y="899.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="198.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="195.2" y="883.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="198.2" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="195.2" y="867.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="198.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="195.2" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="198.2" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="195.2" y="835.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="198.2" y="846.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="195.2" y="819.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="198.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.14%)</title><rect x="196.0" y="931.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.0" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.14%)</title><rect x="196.0" y="915.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.0" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.14%)</title><rect x="196.0" y="899.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.0" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.14%)</title><rect x="196.0" y="883.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.0" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.14%)</title><rect x="196.0" y="867.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.0" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.14%)</title><rect x="196.0" y="851.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.0" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.14%)</title><rect x="196.0" y="835.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="199.0" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="196.0" y="819.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="199.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (2 samples, 0.14%)</title><rect x="197.6" y="995.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (2 samples, 0.14%)</title><rect x="197.6" y="979.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (2 samples, 0.14%)</title><rect x="197.6" y="963.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (2 samples, 0.14%)</title><rect x="197.6" y="947.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (2 samples, 0.14%)</title><rect x="197.6" y="931.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (2 samples, 0.14%)</title><rect x="197.6" y="915.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.6" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (2 samples, 0.14%)</title><rect x="197.6" y="899.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.6" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (2 samples, 0.14%)</title><rect x="197.6" y="883.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.6" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.14%)</title><rect x="197.6" y="867.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.6" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.14%)</title><rect x="197.6" y="851.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.6" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.07%)</title><rect x="197.6" y="835.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.6" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.07%)</title><rect x="197.6" y="819.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.6" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.07%)</title><rect x="197.6" y="803.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.6" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.07%)</title><rect x="197.6" y="787.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.6" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.07%)</title><rect x="197.6" y="771.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.6" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.07%)</title><rect x="197.6" y="755.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.07%)</title><rect x="197.6" y="739.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (1 samples, 0.07%)</title><rect x="197.6" y="723.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.6" y="734.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.07%)</title><rect x="197.6" y="707.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="200.6" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.07%)</title><rect x="198.4" y="835.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.07%)</title><rect x="198.4" y="819.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.4" y="830.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_writev0 (1 samples, 0.07%)</title><rect x="198.4" y="803.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="201.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.07%)</title><rect x="199.2" y="1011.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.2" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.07%)</title><rect x="199.2" y="995.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="202.2" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.07%)</title><rect x="199.2" y="979.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.2" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.07%)</title><rect x="199.2" y="963.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.2" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (1 samples, 0.07%)</title><rect x="199.2" y="947.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.2" y="958.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.07%)</title><rect x="199.2" y="931.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="202.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.27%)</title><rect x="200.0" y="1059.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.27%)</title><rect x="200.0" y="1043.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.20%)</title><rect x="200.8" y="1027.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.14%)</title><rect x="201.6" y="1011.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.14%)</title><rect x="203.2" y="1059.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.14%)</title><rect x="203.2" y="1043.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.14%)</title><rect x="203.2" y="1027.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.07%)</title><rect x="204.8" y="1107.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.8" y="1118.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.14%)</title><rect x="205.6" y="1107.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.6" y="1118.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (2 samples, 0.14%)</title><rect x="205.6" y="1091.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.6" y="1102.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (2 samples, 0.14%)</title><rect x="205.6" y="1075.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.6" y="1086.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="205.6" y="1059.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.6" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (2 samples, 0.14%)</title><rect x="205.6" y="1043.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="205.6" y="1027.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.6" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="205.6" y="1011.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.6" y="1022.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (2 samples, 0.14%)</title><rect x="205.6" y="995.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.6" y="1006.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (2 samples, 0.14%)</title><rect x="205.6" y="979.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.6" y="990.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (2 samples, 0.14%)</title><rect x="205.6" y="963.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.6" y="974.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (2 samples, 0.14%)</title><rect x="205.6" y="947.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="958.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (1 samples, 0.07%)</title><rect x="205.6" y="931.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="942.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (1 samples, 0.07%)</title><rect x="206.4" y="931.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (1 samples, 0.07%)</title><rect x="206.4" y="915.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (1 samples, 0.07%)</title><rect x="206.4" y="899.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (1 samples, 0.07%)</title><rect x="206.4" y="883.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.4" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,098 samples, 74.29%)</title><rect x="207.2" y="1139.0" width="876.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.2" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,098 samples, 74.29%)</title><rect x="207.2" y="1123.0" width="876.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="210.2" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,098 samples, 74.29%)</title><rect x="207.2" y="1107.0" width="876.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="210.2" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$528/1951819327.run (872 samples, 59.00%)</title><rect x="208.0" y="1091.0" width="696.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.0" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$528/1951819327.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (872 samples, 59.00%)</title><rect x="208.0" y="1075.0" width="696.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.0" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (872 samples, 59.00%)</title><rect x="208.0" y="1059.0" width="696.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.0" y="1070.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="208.8" y="1043.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="211.8" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (13 samples, 0.88%)</title><rect x="209.6" y="1043.0" width="10.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="212.6" y="1054.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.61%)</title><rect x="212.8" y="1027.0" width="7.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="215.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (832 samples, 56.29%)</title><rect x="220.0" y="1043.0" width="664.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.0" y="1054.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (58 samples, 3.92%)</title><rect x="220.0" y="1027.0" width="46.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.0" y="1038.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (58 samples, 3.92%)</title><rect x="220.0" y="1011.0" width="46.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.0" y="1022.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (58 samples, 3.92%)</title><rect x="220.0" y="995.0" width="46.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.0" y="1006.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (39 samples, 2.64%)</title><rect x="235.1" y="979.0" width="31.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.1" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.34%)</title><rect x="235.1" y="963.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$533/1632798697.accept (2 samples, 0.14%)</title><rect x="236.7" y="947.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="239.7" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="238.3" y="947.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="241.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (34 samples, 2.30%)</title><rect x="239.1" y="963.0" width="27.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.1" y="974.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$533/1632798697.accept (34 samples, 2.30%)</title><rect x="239.1" y="947.0" width="27.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.1" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (34 samples, 2.30%)</title><rect x="239.1" y="931.0" width="27.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.1" y="942.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (34 samples, 2.30%)</title><rect x="239.1" y="915.0" width="27.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.1" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (18 samples, 1.22%)</title><rect x="239.1" y="899.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.1" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (18 samples, 1.22%)</title><rect x="239.1" y="883.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.1" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (18 samples, 1.22%)</title><rect x="239.1" y="867.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$527/1441944625.accept (1 samples, 0.07%)</title><rect x="251.1" y="851.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$526/505887919.accept (1 samples, 0.07%)</title><rect x="251.9" y="851.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.9" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="252.7" y="851.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="255.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (16 samples, 1.08%)</title><rect x="253.5" y="899.0" width="12.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.41%)</title><rect x="261.5" y="883.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.07%)</title><rect x="261.5" y="867.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.34%)</title><rect x="262.3" y="867.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$526/505887919.accept (1 samples, 0.07%)</title><rect x="263.1" y="851.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.20%)</title><rect x="263.9" y="851.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (3 samples, 0.20%)</title><rect x="263.9" y="835.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.9" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.20%)</title><rect x="263.9" y="819.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.9" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.weakCompareAndSet (3 samples, 0.20%)</title><rect x="263.9" y="803.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (5 samples, 0.34%)</title><rect x="266.3" y="1027.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (5 samples, 0.34%)</title><rect x="266.3" y="1011.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 0.34%)</title><rect x="266.3" y="995.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.34%)</title><rect x="266.3" y="979.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.34%)</title><rect x="266.3" y="963.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="269.5" y="947.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (168 samples, 11.37%)</title><rect x="270.3" y="1027.0" width="134.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.3" y="1038.0">com/linecorp/deca..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (167 samples, 11.30%)</title><rect x="271.1" y="1011.0" width="133.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.1" y="1022.0">io/micrometer/cor..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (143 samples, 9.68%)</title><rect x="273.5" y="995.0" width="114.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.5" y="1006.0">io/micrometer/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (104 samples, 7.04%)</title><rect x="273.5" y="979.0" width="83.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.5" y="990.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (104 samples, 7.04%)</title><rect x="273.5" y="963.0" width="83.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.5" y="974.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (92 samples, 6.22%)</title><rect x="279.1" y="947.0" width="73.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.1" y="958.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (92 samples, 6.22%)</title><rect x="279.1" y="931.0" width="73.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.1" y="942.0">io/micro..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (92 samples, 6.22%)</title><rect x="279.1" y="915.0" width="73.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.1" y="926.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (92 samples, 6.22%)</title><rect x="279.1" y="899.0" width="73.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.1" y="910.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (92 samples, 6.22%)</title><rect x="279.1" y="883.0" width="73.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.1" y="894.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (68 samples, 4.60%)</title><rect x="279.1" y="867.0" width="54.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.1" y="878.0">org/H..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (36 samples, 2.44%)</title><rect x="279.1" y="851.0" width="28.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.1" y="862.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (32 samples, 2.17%)</title><rect x="307.8" y="851.0" width="25.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.8" y="862.0">o..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (32 samples, 2.17%)</title><rect x="307.8" y="835.0" width="25.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.8" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (32 samples, 2.17%)</title><rect x="307.8" y="819.0" width="25.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="310.8" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (32 samples, 2.17%)</title><rect x="307.8" y="803.0" width="25.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.8" y="814.0">j..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (24 samples, 1.62%)</title><rect x="333.3" y="867.0" width="19.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.3" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.34%)</title><rect x="352.5" y="947.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="355.5" y="958.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="353.3" y="931.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="356.3" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (39 samples, 2.64%)</title><rect x="356.5" y="979.0" width="31.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.5" y="990.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (15 samples, 1.01%)</title><rect x="356.5" y="963.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.5" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (11 samples, 0.74%)</title><rect x="359.7" y="947.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.7" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.68%)</title><rect x="360.5" y="931.0" width="8.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="363.5" y="942.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.54%)</title><rect x="362.1" y="915.0" width="6.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="365.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (24 samples, 1.62%)</title><rect x="368.5" y="963.0" width="19.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="371.5" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="386.0" y="947.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="389.0" y="958.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (21 samples, 1.42%)</title><rect x="387.6" y="995.0" width="16.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="390.6" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="399.6" y="979.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="402.6" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.34%)</title><rect x="400.4" y="979.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="403.4" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="401.2" y="963.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="404.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (121 samples, 8.19%)</title><rect x="404.4" y="1027.0" width="96.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.4" y="1038.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (121 samples, 8.19%)</title><rect x="404.4" y="1011.0" width="96.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.4" y="1022.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (121 samples, 8.19%)</title><rect x="404.4" y="995.0" width="96.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.4" y="1006.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (121 samples, 8.19%)</title><rect x="404.4" y="979.0" width="96.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="407.4" y="990.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (121 samples, 8.19%)</title><rect x="404.4" y="963.0" width="96.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.4" y="974.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (121 samples, 8.19%)</title><rect x="404.4" y="947.0" width="96.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.4" y="958.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (42 samples, 2.84%)</title><rect x="404.4" y="931.0" width="33.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="407.4" y="942.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (17 samples, 1.15%)</title><rect x="404.4" y="915.0" width="13.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="407.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (17 samples, 1.15%)</title><rect x="404.4" y="899.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="407.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.20%)</title><rect x="415.6" y="883.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.20%)</title><rect x="415.6" y="867.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="418.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.20%)</title><rect x="415.6" y="851.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.20%)</title><rect x="415.6" y="835.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="418.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (25 samples, 1.69%)</title><rect x="418.0" y="915.0" width="19.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="421.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (25 samples, 1.69%)</title><rect x="418.0" y="899.0" width="19.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="421.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.34%)</title><rect x="425.2" y="883.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="428.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.34%)</title><rect x="425.2" y="867.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="428.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 0.74%)</title><rect x="429.1" y="883.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="432.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 0.74%)</title><rect x="429.1" y="867.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="432.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.07%)</title><rect x="429.1" y="851.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.1" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="429.1" y="835.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="432.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (10 samples, 0.68%)</title><rect x="429.9" y="851.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="432.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (73 samples, 4.94%)</title><rect x="437.9" y="931.0" width="58.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.9" y="942.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.27%)</title><rect x="437.9" y="915.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.27%)</title><rect x="437.9" y="899.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.68%)</title><rect x="441.1" y="915.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.47%)</title><rect x="443.5" y="899.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="446.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.34%)</title><rect x="445.1" y="883.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.34%)</title><rect x="445.1" y="867.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.34%)</title><rect x="445.1" y="851.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.07%)</title><rect x="449.1" y="915.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.07%)</title><rect x="449.1" y="899.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="452.1" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="449.1" y="883.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="452.1" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="449.1" y="867.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="452.1" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="449.1" y="851.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="452.1" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="449.1" y="835.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="452.1" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="449.1" y="819.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="452.1" y="830.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="449.1" y="803.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="452.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (58 samples, 3.92%)</title><rect x="449.9" y="915.0" width="46.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.9" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (58 samples, 3.92%)</title><rect x="449.9" y="899.0" width="46.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.9" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (23 samples, 1.56%)</title><rect x="450.7" y="883.0" width="18.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="453.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.20%)</title><rect x="452.3" y="867.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.20%)</title><rect x="452.3" y="851.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.20%)</title><rect x="452.3" y="835.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="455.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (16 samples, 1.08%)</title><rect x="454.7" y="867.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="467.5" y="867.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="467.5" y="851.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="470.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (34 samples, 2.30%)</title><rect x="469.1" y="883.0" width="27.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="472.1" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (34 samples, 2.30%)</title><rect x="469.1" y="867.0" width="27.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="472.1" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (34 samples, 2.30%)</title><rect x="469.1" y="851.0" width="27.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="472.1" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.54%)</title><rect x="471.5" y="835.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="474.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="472.3" y="819.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="475.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="472.3" y="803.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="475.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.41%)</title><rect x="473.1" y="819.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.41%)</title><rect x="473.1" y="803.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.41%)</title><rect x="473.1" y="787.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.34%)</title><rect x="473.9" y="771.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (11 samples, 0.74%)</title><rect x="477.8" y="835.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (11 samples, 0.74%)</title><rect x="477.8" y="819.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="480.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (5 samples, 0.34%)</title><rect x="477.8" y="803.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="480.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (5 samples, 0.34%)</title><rect x="477.8" y="787.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (5 samples, 0.34%)</title><rect x="477.8" y="771.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (5 samples, 0.34%)</title><rect x="477.8" y="755.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (5 samples, 0.34%)</title><rect x="477.8" y="739.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="480.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (5 samples, 0.34%)</title><rect x="477.8" y="723.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="480.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.41%)</title><rect x="481.8" y="803.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.41%)</title><rect x="481.8" y="787.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (6 samples, 0.41%)</title><rect x="481.8" y="771.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (6 samples, 0.41%)</title><rect x="481.8" y="755.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="484.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (6 samples, 0.41%)</title><rect x="481.8" y="739.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="484.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (6 samples, 0.41%)</title><rect x="481.8" y="723.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (6 samples, 0.41%)</title><rect x="481.8" y="707.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (8 samples, 0.54%)</title><rect x="486.6" y="835.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="489.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (8 samples, 0.54%)</title><rect x="486.6" y="819.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="489.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (8 samples, 0.54%)</title><rect x="486.6" y="803.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="489.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (8 samples, 0.54%)</title><rect x="486.6" y="787.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="489.6" y="798.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.54%)</title><rect x="486.6" y="771.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.6" y="782.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.54%)</title><rect x="486.6" y="755.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.6" y="766.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.07%)</title><rect x="492.2" y="739.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="492.2" y="723.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="495.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="492.2" y="707.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="495.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="492.2" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.2" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="492.2" y="675.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="495.2" y="686.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.07%)</title><rect x="492.2" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.27%)</title><rect x="493.0" y="835.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.27%)</title><rect x="493.0" y="819.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="493.0" y="803.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="496.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.14%)</title><rect x="494.6" y="803.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="497.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.14%)</title><rect x="494.6" y="787.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.14%)</title><rect x="494.6" y="771.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="497.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="495.4" y="755.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.41%)</title><rect x="496.2" y="931.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.41%)</title><rect x="496.2" y="915.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.41%)</title><rect x="496.2" y="899.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.41%)</title><rect x="496.2" y="883.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="499.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.41%)</title><rect x="496.2" y="867.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="499.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (477 samples, 32.27%)</title><rect x="501.0" y="1027.0" width="380.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="504.0" y="1038.0">com/linecorp/decaton/processor/runtime/internal/Proc..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="501.8" y="1011.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (33 samples, 2.23%)</title><rect x="502.6" y="1011.0" width="26.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="505.6" y="1022.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (33 samples, 2.23%)</title><rect x="502.6" y="995.0" width="26.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="505.6" y="1006.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (32 samples, 2.17%)</title><rect x="503.4" y="979.0" width="25.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.4" y="990.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 1.15%)</title><rect x="509.0" y="963.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="512.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (17 samples, 1.15%)</title><rect x="509.0" y="947.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="512.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (17 samples, 1.15%)</title><rect x="509.0" y="931.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.41%)</title><rect x="522.6" y="963.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.41%)</title><rect x="522.6" y="947.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="525.6" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.14%)</title><rect x="527.3" y="963.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="530.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.14%)</title><rect x="527.3" y="947.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="530.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.14%)</title><rect x="527.3" y="931.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="530.3" y="942.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.14%)</title><rect x="527.3" y="915.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="530.3" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.14%)</title><rect x="527.3" y="899.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.41%)</title><rect x="528.9" y="1011.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="531.9" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="528.9" y="995.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="531.9" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="528.9" y="979.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="531.9" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="528.9" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="531.9" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="528.9" y="947.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="531.9" y="958.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.07%)</title><rect x="528.9" y="931.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="531.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.34%)</title><rect x="529.7" y="995.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="532.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (111 samples, 7.51%)</title><rect x="533.7" y="1011.0" width="88.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="536.7" y="1022.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (95 samples, 6.43%)</title><rect x="536.9" y="995.0" width="75.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="539.9" y="1006.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (25 samples, 1.69%)</title><rect x="544.9" y="979.0" width="20.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.9" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.41%)</title><rect x="556.1" y="963.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.1" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.27%)</title><rect x="557.7" y="947.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="560.7" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.27%)</title><rect x="557.7" y="931.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="560.7" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.27%)</title><rect x="557.7" y="915.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="560.7" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="560.1" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="563.1" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="560.1" y="883.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="563.1" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="560.1" y="867.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="563.1" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="560.1" y="851.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="563.1" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="560.1" y="835.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="563.1" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.07%)</title><rect x="560.1" y="819.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="563.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.14%)</title><rect x="560.9" y="963.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="563.9" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.14%)</title><rect x="560.9" y="947.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="563.9" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.14%)</title><rect x="560.9" y="931.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="563.9" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="560.9" y="915.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="563.9" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="560.9" y="899.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="563.9" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.14%)</title><rect x="560.9" y="883.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="563.9" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.14%)</title><rect x="560.9" y="867.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="563.9" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="560.9" y="851.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="563.9" y="862.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="560.9" y="835.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="563.9" y="846.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="560.9" y="819.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="563.9" y="830.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.07%)</title><rect x="561.7" y="851.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="564.7" y="862.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="562.5" y="963.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="565.5" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="563.3" y="963.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="566.3" y="974.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="564.9" y="979.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.9" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.07%)</title><rect x="564.9" y="963.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.9" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="564.9" y="947.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="567.9" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="564.9" y="931.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="567.9" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="565.7" y="979.0" width="0.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="568.7" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (58 samples, 3.92%)</title><rect x="566.5" y="979.0" width="46.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="569.5" y="990.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (54 samples, 3.65%)</title><rect x="569.7" y="963.0" width="43.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="572.7" y="974.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 0.68%)</title><rect x="576.0" y="947.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="579.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.68%)</title><rect x="576.0" y="931.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.68%)</title><rect x="576.0" y="915.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="579.0" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (36 samples, 2.44%)</title><rect x="584.0" y="947.0" width="28.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="587.0" y="958.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (36 samples, 2.44%)</title><rect x="584.0" y="931.0" width="28.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="587.0" y="942.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.27%)</title><rect x="585.6" y="915.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="588.6" y="926.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.27%)</title><rect x="585.6" y="899.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.6" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.27%)</title><rect x="585.6" y="883.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.6" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="588.0" y="867.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="591.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (30 samples, 2.03%)</title><rect x="588.8" y="915.0" width="24.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="591.8" y="926.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (17 samples, 1.15%)</title><rect x="599.2" y="899.0" width="13.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="602.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="612.0" y="883.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="615.0" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="612.0" y="867.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="615.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="612.0" y="851.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="615.0" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="612.0" y="835.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="615.0" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="612.0" y="819.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="615.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.07%)</title><rect x="612.0" y="803.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="615.0" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.07%)</title><rect x="612.0" y="787.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="615.0" y="798.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="612.0" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="615.0" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="612.0" y="755.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="615.0" y="766.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="612.0" y="739.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="615.0" y="750.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.07%)</title><rect x="612.0" y="723.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="615.0" y="734.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.07%)</title><rect x="612.0" y="707.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="615.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (7 samples, 0.47%)</title><rect x="612.8" y="995.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="615.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (7 samples, 0.47%)</title><rect x="612.8" y="979.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="615.8" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.47%)</title><rect x="612.8" y="963.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="615.8" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.47%)</title><rect x="612.8" y="947.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="615.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.27%)</title><rect x="612.8" y="931.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="615.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.20%)</title><rect x="616.0" y="931.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="619.0" y="942.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.34%)</title><rect x="618.4" y="995.0" width="4.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="621.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (96 samples, 6.50%)</title><rect x="622.4" y="1011.0" width="76.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="625.4" y="1022.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (96 samples, 6.50%)</title><rect x="622.4" y="995.0" width="76.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="625.4" y="1006.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$443/2080548590.process (41 samples, 2.77%)</title><rect x="635.9" y="979.0" width="32.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.9" y="990.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (41 samples, 2.77%)</title><rect x="635.9" y="963.0" width="32.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.9" y="974.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (29 samples, 1.96%)</title><rect x="636.7" y="947.0" width="23.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.7" y="958.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (12 samples, 0.81%)</title><rect x="637.5" y="931.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.5" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (12 samples, 0.81%)</title><rect x="637.5" y="915.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="640.5" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 0.81%)</title><rect x="637.5" y="899.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.5" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (12 samples, 0.81%)</title><rect x="637.5" y="883.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ExecutionRecord.process (1 samples, 0.07%)</title><rect x="647.1" y="931.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="650.1" y="942.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.41%)</title><rect x="647.9" y="931.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="650.9" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="648.7" y="915.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="651.7" y="926.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="648.7" y="899.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="651.7" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.20%)</title><rect x="649.5" y="915.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="652.5" y="926.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="650.3" y="899.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="653.3" y="910.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="651.9" y="915.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="654.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (9 samples, 0.61%)</title><rect x="652.7" y="931.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (9 samples, 0.61%)</title><rect x="652.7" y="915.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (11 samples, 0.74%)</title><rect x="659.9" y="947.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.68%)</title><rect x="660.7" y="931.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.61%)</title><rect x="660.7" y="915.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.7" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (9 samples, 0.61%)</title><rect x="660.7" y="899.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="663.7" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="662.3" y="883.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="665.3" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.41%)</title><rect x="663.1" y="883.0" width="4.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="666.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="663.9" y="867.0" width="4.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="666.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.07%)</title><rect x="667.9" y="915.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="670.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.14%)</title><rect x="668.7" y="979.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="671.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 0.34%)</title><rect x="670.3" y="979.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="673.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (5 samples, 0.34%)</title><rect x="670.3" y="963.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="673.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.34%)</title><rect x="674.2" y="979.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.2" y="990.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.34%)</title><rect x="674.2" y="963.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="677.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (3 samples, 0.20%)</title><rect x="678.2" y="979.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="681.2" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.07%)</title><rect x="679.0" y="963.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="682.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$529/535206755.get (1 samples, 0.07%)</title><rect x="679.8" y="963.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="682.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$0 (1 samples, 0.07%)</title><rect x="679.8" y="947.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="682.8" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.07%)</title><rect x="680.6" y="979.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="683.6" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.07%)</title><rect x="680.6" y="963.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$529/535206755.get$Lambda (1 samples, 0.07%)</title><rect x="680.6" y="947.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="683.6" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (4 samples, 0.27%)</title><rect x="681.4" y="979.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="684.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.14%)</title><rect x="682.2" y="963.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="685.2" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.14%)</title><rect x="682.2" y="947.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="685.2" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="683.0" y="931.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="686.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="683.8" y="963.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="686.8" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.14%)</title><rect x="684.6" y="979.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="687.6" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.14%)</title><rect x="684.6" y="963.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="687.6" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.34%)</title><rect x="686.2" y="979.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="689.2" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (2 samples, 0.14%)</title><rect x="688.6" y="963.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="691.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="688.6" y="947.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="691.6" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.07%)</title><rect x="689.4" y="947.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="692.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.07%)</title><rect x="689.4" y="931.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.4" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.34%)</title><rect x="690.2" y="979.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.2" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.34%)</title><rect x="690.2" y="963.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.2" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (2 samples, 0.14%)</title><rect x="690.2" y="947.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="693.2" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.&lt;init&gt; (3 samples, 0.20%)</title><rect x="691.8" y="947.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="694.8" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.&lt;init&gt; (3 samples, 0.20%)</title><rect x="691.8" y="931.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="694.8" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.&lt;init&gt; (3 samples, 0.20%)</title><rect x="691.8" y="915.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="694.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.41%)</title><rect x="694.2" y="979.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="697.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.41%)</title><rect x="694.2" y="963.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="697.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.41%)</title><rect x="694.2" y="947.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="697.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.34%)</title><rect x="694.2" y="931.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="697.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$530/673484736.accept (2 samples, 0.14%)</title><rect x="694.2" y="915.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="697.2" y="926.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.20%)</title><rect x="695.8" y="915.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="698.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="698.2" y="931.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="701.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.14%)</title><rect x="699.0" y="1011.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="702.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (2 samples, 0.14%)</title><rect x="699.0" y="995.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="702.0" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (4 samples, 0.27%)</title><rect x="700.6" y="1011.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="703.6" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (4 samples, 0.27%)</title><rect x="700.6" y="995.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="703.6" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepCounter.increment (3 samples, 0.20%)</title><rect x="700.6" y="979.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="703.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/DoubleAdder.add (2 samples, 0.14%)</title><rect x="701.4" y="963.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/Striped64$Cell.cas (2 samples, 0.14%)</title><rect x="701.4" y="947.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.4" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LJJ_Z (2 samples, 0.14%)</title><rect x="701.4" y="931.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.4" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleLongs$FieldInstanceReadWrite.compareAndSet (2 samples, 0.14%)</title><rect x="701.4" y="915.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="704.4" y="926.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.07%)</title><rect x="703.0" y="979.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="706.0" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (118 samples, 7.98%)</title><rect x="703.8" y="1011.0" width="94.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.8" y="1022.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (114 samples, 7.71%)</title><rect x="703.8" y="995.0" width="91.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="706.8" y="1006.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (114 samples, 7.71%)</title><rect x="703.8" y="979.0" width="91.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="706.8" y="990.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (94 samples, 6.36%)</title><rect x="703.8" y="963.0" width="75.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="706.8" y="974.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (94 samples, 6.36%)</title><rect x="703.8" y="947.0" width="75.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="706.8" y="958.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.rotate (1 samples, 0.07%)</title><rect x="705.4" y="931.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.4" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.07%)</title><rect x="705.4" y="915.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.4" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (87 samples, 5.89%)</title><rect x="706.2" y="931.0" width="69.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="709.2" y="942.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (87 samples, 5.89%)</title><rect x="706.2" y="915.0" width="69.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.2" y="926.0">io/micr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (87 samples, 5.89%)</title><rect x="706.2" y="899.0" width="69.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.2" y="910.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (87 samples, 5.89%)</title><rect x="706.2" y="883.0" width="69.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="709.2" y="894.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (87 samples, 5.89%)</title><rect x="706.2" y="867.0" width="69.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.2" y="878.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (64 samples, 4.33%)</title><rect x="706.2" y="851.0" width="51.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.2" y="862.0">org/H..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (39 samples, 2.64%)</title><rect x="706.2" y="835.0" width="31.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="709.2" y="846.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (25 samples, 1.69%)</title><rect x="737.3" y="835.0" width="20.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="740.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (25 samples, 1.69%)</title><rect x="737.3" y="819.0" width="20.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="740.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (25 samples, 1.69%)</title><rect x="737.3" y="803.0" width="20.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="740.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (25 samples, 1.69%)</title><rect x="737.3" y="787.0" width="20.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="740.3" y="798.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (23 samples, 1.56%)</title><rect x="757.3" y="851.0" width="18.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.3" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.27%)</title><rect x="775.6" y="931.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="778.6" y="942.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="775.6" y="915.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="778.6" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (20 samples, 1.35%)</title><rect x="778.8" y="963.0" width="16.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.8" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (8 samples, 0.54%)</title><rect x="778.8" y="947.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="781.8" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (8 samples, 0.54%)</title><rect x="778.8" y="931.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.8" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="778.8" y="915.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="781.8" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.47%)</title><rect x="779.6" y="915.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="782.6" y="926.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.47%)</title><rect x="779.6" y="899.0" width="5.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="782.6" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/util/TimeUtils.convert (5 samples, 0.34%)</title><rect x="785.2" y="947.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="788.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (7 samples, 0.47%)</title><rect x="789.2" y="947.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="792.2" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.getChildren (3 samples, 0.20%)</title><rect x="794.8" y="995.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="797.8" y="1006.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.values (3 samples, 0.20%)</title><rect x="794.8" y="979.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.8" y="990.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$Values.iterator (1 samples, 0.07%)</title><rect x="797.2" y="995.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="800.2" y="1006.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="797.2" y="979.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="800.2" y="990.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="797.2" y="963.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="800.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (105 samples, 7.10%)</title><rect x="798.0" y="1011.0" width="83.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.0" y="1022.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (105 samples, 7.10%)</title><rect x="798.0" y="995.0" width="83.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="801.0" y="1006.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (105 samples, 7.10%)</title><rect x="798.0" y="979.0" width="83.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="801.0" y="990.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.27%)</title><rect x="798.0" y="963.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$532/1872061547.accept (2 samples, 0.14%)</title><rect x="798.8" y="947.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="801.8" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="800.4" y="947.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="803.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (101 samples, 6.83%)</title><rect x="801.2" y="963.0" width="80.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="804.2" y="974.0">java/util..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$532/1872061547.accept (100 samples, 6.77%)</title><rect x="802.0" y="947.0" width="79.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="805.0" y="958.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (100 samples, 6.77%)</title><rect x="802.0" y="931.0" width="79.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="805.0" y="942.0">com/linec..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (100 samples, 6.77%)</title><rect x="802.0" y="915.0" width="79.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.0" y="926.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (85 samples, 5.75%)</title><rect x="802.0" y="899.0" width="67.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.0" y="910.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (85 samples, 5.75%)</title><rect x="802.0" y="883.0" width="67.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="805.0" y="894.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (69 samples, 4.67%)</title><rect x="802.0" y="867.0" width="55.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="805.0" y="878.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (69 samples, 4.67%)</title><rect x="802.0" y="851.0" width="55.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="805.0" y="862.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (52 samples, 3.52%)</title><rect x="811.6" y="835.0" width="41.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="814.6" y="846.0">io/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (52 samples, 3.52%)</title><rect x="811.6" y="819.0" width="41.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.6" y="830.0">io/..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (52 samples, 3.52%)</title><rect x="811.6" y="803.0" width="41.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.6" y="814.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (52 samples, 3.52%)</title><rect x="811.6" y="787.0" width="41.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.6" y="798.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (52 samples, 3.52%)</title><rect x="811.6" y="771.0" width="41.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="814.6" y="782.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (37 samples, 2.50%)</title><rect x="811.6" y="755.0" width="29.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="814.6" y="766.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.normalizeIndex (1 samples, 0.07%)</title><rect x="811.6" y="739.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="814.6" y="750.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (20 samples, 1.35%)</title><rect x="812.4" y="739.0" width="15.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.4" y="750.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (16 samples, 1.08%)</title><rect x="828.3" y="739.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (16 samples, 1.08%)</title><rect x="828.3" y="723.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="831.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (16 samples, 1.08%)</title><rect x="828.3" y="707.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="831.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (16 samples, 1.08%)</title><rect x="828.3" y="691.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="831.3" y="702.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (15 samples, 1.01%)</title><rect x="841.1" y="755.0" width="12.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.1" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.34%)</title><rect x="853.1" y="835.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="856.1" y="846.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="853.1" y="819.0" width="4.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="856.1" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (16 samples, 1.08%)</title><rect x="857.1" y="867.0" width="12.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="860.1" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/util/TimeUtils.convert (5 samples, 0.34%)</title><rect x="857.1" y="851.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.1" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="860.3" y="835.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="863.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (11 samples, 0.74%)</title><rect x="861.1" y="851.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="864.1" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.07%)</title><rect x="869.9" y="899.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="872.9" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.updateMax (1 samples, 0.07%)</title><rect x="869.9" y="883.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="872.9" y="894.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (14 samples, 0.95%)</title><rect x="870.6" y="899.0" width="11.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="873.6" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.27%)</title><rect x="878.6" y="883.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="881.6" y="894.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="878.6" y="867.0" width="3.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="881.6" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.20%)</title><rect x="881.8" y="1027.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="884.8" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="882.6" y="1011.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="885.6" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (1 samples, 0.07%)</title><rect x="884.2" y="1043.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="887.2" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (1 samples, 0.07%)</title><rect x="884.2" y="1027.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="887.2" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (1 samples, 0.07%)</title><rect x="884.2" y="1011.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="887.2" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.07%)</title><rect x="884.2" y="995.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="887.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="884.2" y="979.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="887.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="884.2" y="963.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="884.2" y="947.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="887.2" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (24 samples, 1.62%)</title><rect x="885.0" y="1043.0" width="19.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="888.0" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (10 samples, 0.68%)</title><rect x="885.0" y="1027.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="888.0" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (10 samples, 0.68%)</title><rect x="885.0" y="1011.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="888.0" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="885.0" y="995.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="888.0" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (1 samples, 0.07%)</title><rect x="885.0" y="979.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="888.0" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (9 samples, 0.61%)</title><rect x="885.8" y="995.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="888.8" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (6 samples, 0.41%)</title><rect x="885.8" y="979.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="888.8" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 0.27%)</title><rect x="887.4" y="963.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="890.4" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.20%)</title><rect x="888.2" y="947.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.2" y="958.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="888.2" y="931.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="891.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (3 samples, 0.20%)</title><rect x="890.6" y="979.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="893.6" y="990.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (14 samples, 0.95%)</title><rect x="893.0" y="1027.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="896.0" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.20%)</title><rect x="901.0" y="1011.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="904.0" y="1022.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="901.0" y="995.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="904.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (1 samples, 0.07%)</title><rect x="903.4" y="1011.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="906.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.07%)</title><rect x="904.2" y="1091.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="907.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.34%)</title><rect x="905.0" y="1091.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="908.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.34%)</title><rect x="905.0" y="1075.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="908.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (219 samples, 14.82%)</title><rect x="909.0" y="1091.0" width="174.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="912.0" y="1102.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (218 samples, 14.75%)</title><rect x="909.8" y="1075.0" width="174.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="912.8" y="1086.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (201 samples, 13.60%)</title><rect x="913.8" y="1059.0" width="160.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="916.8" y="1070.0">java/util/concurrent..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (16 samples, 1.08%)</title><rect x="916.2" y="1043.0" width="12.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="919.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (11 samples, 0.74%)</title><rect x="928.9" y="1043.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="931.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.74%)</title><rect x="928.9" y="1027.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="936.9" y="1011.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="939.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (171 samples, 11.57%)</title><rect x="937.7" y="1043.0" width="136.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="940.7" y="1054.0">java/util/concurr..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (171 samples, 11.57%)</title><rect x="937.7" y="1027.0" width="136.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="940.7" y="1038.0">jdk/internal/misc..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="938.5" y="1011.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="941.5" y="1022.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.07%)</title><rect x="939.3" y="1011.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.3" y="1022.0"></text>
</g>
<g>
<title>Unsafe_Park (167 samples, 11.30%)</title><rect x="940.1" y="1011.0" width="133.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="943.1" y="1022.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.07%)</title><rect x="941.7" y="995.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.7" y="1006.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="942.5" y="995.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.5" y="1006.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 1.56%)</title><rect x="943.3" y="995.0" width="18.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="946.3" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.27%)</title><rect x="952.1" y="979.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="955.1" y="990.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="953.7" y="963.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="956.7" y="974.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="954.5" y="963.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="957.5" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (5 samples, 0.34%)</title><rect x="955.3" y="979.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="958.3" y="990.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.14%)</title><rect x="959.3" y="979.0" width="1.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="962.3" y="990.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="960.9" y="979.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="963.9" y="990.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="961.7" y="995.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.7" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (47 samples, 3.18%)</title><rect x="962.5" y="995.0" width="37.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="965.5" y="1006.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (68 samples, 4.60%)</title><rect x="1000.0" y="995.0" width="54.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1003.0" y="1006.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.34%)</title><rect x="1054.3" y="995.0" width="4.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1057.3" y="1006.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="1058.3" y="995.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1061.3" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.20%)</title><rect x="1059.1" y="995.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1062.1" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.47%)</title><rect x="1061.5" y="995.0" width="5.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1064.5" y="1006.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="1067.1" y="995.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1070.1" y="1006.0"></text>
</g>
<g>
<title>_init (2 samples, 0.14%)</title><rect x="1067.8" y="995.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1070.8" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (4 samples, 0.27%)</title><rect x="1069.4" y="995.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.4" y="1006.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="1072.6" y="995.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.6" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="1073.4" y="1011.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1076.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 0.81%)</title><rect x="1074.2" y="1059.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1077.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.81%)</title><rect x="1074.2" y="1043.0" width="9.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1077.2" y="1054.0"></text>
</g>
<g>
<title>start_thread (133 samples, 9.00%)</title><rect x="1083.8" y="1139.0" width="106.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1086.8" y="1150.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (133 samples, 9.00%)</title><rect x="1083.8" y="1123.0" width="106.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1086.8" y="1134.0">thread_native..</text>
</g>
<g>
<title>Thread::call_run() (133 samples, 9.00%)</title><rect x="1083.8" y="1107.0" width="106.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.8" y="1118.0">Thread::call_..</text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.27%)</title><rect x="1083.8" y="1091.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.8" y="1102.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="1083.8" y="1075.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.8" y="1086.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.07%)</title><rect x="1083.8" y="1059.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1086.8" y="1070.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.14%)</title><rect x="1084.6" y="1075.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.6" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.07%)</title><rect x="1084.6" y="1059.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.6" y="1070.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="1084.6" y="1043.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1087.6" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1085.4" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.4" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1085.4" y="1043.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.4" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="1085.4" y="1027.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.4" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="1085.4" y="1011.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.4" y="1022.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.07%)</title><rect x="1085.4" y="995.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.4" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.07%)</title><rect x="1085.4" y="979.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.4" y="990.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="1086.2" y="1075.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.2" y="1086.0"></text>
</g>
<g>
<title>CardTable::clear(MemRegion) (1 samples, 0.07%)</title><rect x="1086.2" y="1059.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.2" y="1070.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (128 samples, 8.66%)</title><rect x="1087.0" y="1091.0" width="102.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.0" y="1102.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (127 samples, 8.59%)</title><rect x="1087.0" y="1075.0" width="101.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.0" y="1086.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (127 samples, 8.59%)</title><rect x="1087.0" y="1059.0" width="101.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.0" y="1070.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (124 samples, 8.39%)</title><rect x="1087.0" y="1043.0" width="99.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.0" y="1054.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (124 samples, 8.39%)</title><rect x="1087.0" y="1027.0" width="99.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.0" y="1038.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (72 samples, 4.87%)</title><rect x="1087.0" y="1011.0" width="57.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1090.0" y="1022.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.07%)</title><rect x="1087.0" y="995.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.0" y="1006.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="1087.0" y="979.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.0" y="990.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.14%)</title><rect x="1087.8" y="995.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1090.8" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.07%)</title><rect x="1087.8" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.8" y="990.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.07%)</title><rect x="1088.6" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.6" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="1088.6" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.6" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="1088.6" y="947.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.6" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.27%)</title><rect x="1089.4" y="995.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.4" y="1006.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.27%)</title><rect x="1089.4" y="979.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.4" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.20%)</title><rect x="1089.4" y="963.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.4" y="974.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.07%)</title><rect x="1091.8" y="963.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.8" y="974.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="1092.6" y="995.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.6" y="1006.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="1092.6" y="979.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.6" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.41%)</title><rect x="1093.4" y="995.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.4" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.41%)</title><rect x="1093.4" y="979.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.4" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.14%)</title><rect x="1093.4" y="963.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.4" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.14%)</title><rect x="1093.4" y="947.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.4" y="958.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (2 samples, 0.14%)</title><rect x="1093.4" y="931.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.4" y="942.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (2 samples, 0.14%)</title><rect x="1093.4" y="915.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1096.4" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1093.4" y="899.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.4" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1094.2" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.2" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1094.2" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.2" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1094.2" y="867.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.2" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="1095.0" y="963.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.0" y="974.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1095.0" y="947.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.0" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.14%)</title><rect x="1095.8" y="963.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.8" y="974.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.07%)</title><rect x="1097.4" y="963.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1100.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (58 samples, 3.92%)</title><rect x="1098.2" y="995.0" width="46.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.2" y="1006.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.34%)</title><rect x="1098.2" y="979.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.2" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.14%)</title><rect x="1100.6" y="963.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.6" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1101.4" y="947.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (8 samples, 0.54%)</title><rect x="1102.2" y="979.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.2" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1103.8" y="963.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.8" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1104.6" y="963.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.6" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.20%)</title><rect x="1106.2" y="963.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1107.0" y="947.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.0" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.47%)</title><rect x="1108.6" y="979.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.6" y="990.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="1111.8" y="963.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="1112.6" y="963.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.6" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="1112.6" y="947.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.6" y="958.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.07%)</title><rect x="1112.6" y="931.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.6" y="942.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="1113.4" y="963.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 0.88%)</title><rect x="1114.2" y="979.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.2" y="990.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="1115.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.0" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1115.8" y="963.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.8" y="974.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1116.5" y="963.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.5" y="974.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="1116.5" y="947.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.14%)</title><rect x="1117.3" y="963.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.3" y="974.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.07%)</title><rect x="1118.1" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.1" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.34%)</title><rect x="1118.9" y="963.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.14%)</title><rect x="1122.9" y="963.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.9" y="974.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="1123.7" y="947.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.07%)</title><rect x="1124.5" y="979.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.5" y="990.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.07%)</title><rect x="1124.5" y="963.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1127.5" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.34%)</title><rect x="1125.3" y="979.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.3" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="1127.7" y="963.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.7" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1128.5" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.5" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1128.5" y="947.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.5" y="958.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1128.5" y="931.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.5" y="942.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1128.5" y="915.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.5" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (2 samples, 0.14%)</title><rect x="1129.3" y="979.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="1130.9" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.9" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.34%)</title><rect x="1131.7" y="979.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.20%)</title><rect x="1133.3" y="963.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.3" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.07%)</title><rect x="1135.7" y="979.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.7" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="1135.7" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.7" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.27%)</title><rect x="1136.5" y="979.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.5" y="990.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="1138.1" y="963.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.1" y="974.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1138.1" y="947.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.1" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1138.9" y="963.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.9" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="1139.7" y="979.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.7" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.34%)</title><rect x="1140.5" y="979.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.5" y="990.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.07%)</title><rect x="1142.1" y="963.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.1" y="974.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1142.1" y="947.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1145.1" y="958.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="1142.9" y="963.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.9" y="974.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="1142.9" y="947.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.9" y="958.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1142.9" y="931.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1145.9" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1143.7" y="947.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.7" y="958.0"></text>
</g>
<g>
<title>Compile::Optimize() (43 samples, 2.91%)</title><rect x="1144.5" y="1011.0" width="34.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.5" y="1022.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.14%)</title><rect x="1144.5" y="995.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.5" y="1006.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.14%)</title><rect x="1144.5" y="979.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.5" y="990.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) [clone .part.263] (1 samples, 0.07%)</title><rect x="1145.3" y="963.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.3" y="974.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (15 samples, 1.01%)</title><rect x="1146.1" y="995.0" width="12.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (15 samples, 1.01%)</title><rect x="1146.1" y="979.0" width="12.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.1" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1146.1" y="963.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.1" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1146.1" y="947.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.1" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1146.1" y="931.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1146.1" y="915.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.1" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="1146.1" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.1" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1146.9" y="963.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.9" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1146.9" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.9" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1146.9" y="931.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.9" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1146.9" y="915.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.9" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="1146.9" y="899.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.07%)</title><rect x="1146.9" y="883.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1146.9" y="867.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.9" y="878.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.07%)</title><rect x="1146.9" y="851.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.07%)</title><rect x="1147.7" y="963.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1148.5" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1148.5" y="947.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.34%)</title><rect x="1149.3" y="963.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.14%)</title><rect x="1151.7" y="947.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.7" y="958.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.07%)</title><rect x="1151.7" y="931.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1152.5" y="931.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() [clone .part.156] (1 samples, 0.07%)</title><rect x="1153.3" y="963.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1153.3" y="947.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1153.3" y="931.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.07%)</title><rect x="1154.1" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.07%)</title><rect x="1154.1" y="947.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.1" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.27%)</title><rect x="1154.9" y="963.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.9" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.27%)</title><rect x="1154.9" y="947.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1155.7" y="931.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.7" y="942.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1155.7" y="915.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.7" y="926.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1156.5" y="931.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.5" y="942.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.07%)</title><rect x="1156.5" y="915.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1157.3" y="915.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.3" y="926.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1157.3" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.3" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.34%)</title><rect x="1158.1" y="995.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.34%)</title><rect x="1158.1" y="979.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="1158.1" y="963.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.1" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="1158.1" y="947.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.1" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="1158.1" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.1" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="1158.1" y="915.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.1" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="1158.1" y="899.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.1" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) [clone .constprop.70] (1 samples, 0.07%)</title><rect x="1158.1" y="883.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.1" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1158.1" y="867.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.1" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1158.1" y="851.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.1" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1158.1" y="835.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.1" y="846.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.07%)</title><rect x="1158.1" y="819.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.1" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.07%)</title><rect x="1158.1" y="803.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.1" y="814.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, LinkInfo const&amp;, methodHandle const&amp;, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1158.1" y="787.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.1" y="798.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.07%)</title><rect x="1158.1" y="771.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.1" y="782.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.07%)</title><rect x="1158.1" y="755.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="1158.9" y="963.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="1158.9" y="947.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="931.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="899.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="883.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="867.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="851.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="835.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="819.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="803.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="787.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="771.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="755.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="739.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="723.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="707.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="675.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="659.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="643.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="627.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="611.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="595.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="579.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="563.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="547.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.9" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="531.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="515.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.9" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="499.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.9" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="483.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.9" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="467.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.9" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="451.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.9" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="435.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.9" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="419.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="403.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.9" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="387.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.9" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="371.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="355.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="339.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.9" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="323.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="307.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.9" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="291.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="275.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="259.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="243.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.9" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="227.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.9" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.9" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="195.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="179.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.9" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="163.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.9" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="147.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.9" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="131.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="115.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="99.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.9" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="83.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.9" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="67.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.9" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1158.9" y="35.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.9" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="1159.7" y="931.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1159.7" y="915.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.7" y="926.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.07%)</title><rect x="1159.7" y="899.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1160.5" y="915.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1160.5" y="899.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1160.5" y="883.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1160.5" y="867.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1160.5" y="851.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1160.5" y="835.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1160.5" y="819.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1160.5" y="803.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.5" y="814.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.07%)</title><rect x="1160.5" y="787.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.5" y="798.0"></text>
</g>
<g>
<title>TypeAryPtr::cast_to_instance_id(int) const (1 samples, 0.07%)</title><rect x="1161.3" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.3" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1161.3" y="931.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.3" y="942.0"></text>
</g>
<g>
<title>TypeAryPtr::xdual() const (1 samples, 0.07%)</title><rect x="1161.3" y="915.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.3" y="926.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1161.3" y="899.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.3" y="910.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1161.3" y="883.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1164.3" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="1162.1" y="995.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.1" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1162.1" y="979.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 0.47%)</title><rect x="1162.9" y="995.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.14%)</title><rect x="1162.9" y="979.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.20%)</title><rect x="1164.5" y="979.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.5" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.14%)</title><rect x="1164.5" y="963.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.5" y="947.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.07%)</title><rect x="1164.5" y="931.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.5" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.07%)</title><rect x="1165.3" y="947.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.3" y="958.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.07%)</title><rect x="1166.0" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.07%)</title><rect x="1166.8" y="979.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.8" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1166.8" y="963.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.8" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1166.8" y="947.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1166.8" y="931.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.8" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1166.8" y="915.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.8" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1167.6" y="979.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.6" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1167.6" y="963.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.6" y="974.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1167.6" y="947.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.6" y="958.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1167.6" y="931.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.6" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 0.81%)</title><rect x="1168.4" y="995.0" width="9.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 0.81%)</title><rect x="1168.4" y="979.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.4" y="990.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.2" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.2" y="974.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1169.2" y="947.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.2" y="958.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.07%)</title><rect x="1169.2" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.2" y="942.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1169.2" y="915.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.2" y="926.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.07%)</title><rect x="1170.0" y="963.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.0" y="974.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.07%)</title><rect x="1170.8" y="963.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.8" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.27%)</title><rect x="1171.6" y="963.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="974.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1172.4" y="947.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.4" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.14%)</title><rect x="1173.2" y="947.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.2" y="958.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1173.2" y="931.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.2" y="942.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1174.0" y="931.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.0" y="942.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1174.8" y="963.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="974.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1175.6" y="963.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.6" y="974.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1176.4" y="963.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="974.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.07%)</title><rect x="1176.4" y="947.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1176.4" y="931.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1176.4" y="915.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.07%)</title><rect x="1176.4" y="899.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="910.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1176.4" y="883.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.4" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1177.2" y="963.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="974.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="1177.2" y="947.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1180.2" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1178.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1178.0" y="979.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1178.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1178.0" y="947.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="958.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.07%)</title><rect x="1178.8" y="1011.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.8" y="1022.0"></text>
</g>
<g>
<title>PhaseStringOpts::PhaseStringOpts(PhaseGVN*, Unique_Node_List*) (1 samples, 0.07%)</title><rect x="1178.8" y="995.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="1006.0"></text>
</g>
<g>
<title>PhaseStringOpts::replace_string_concat(StringConcat*) (1 samples, 0.07%)</title><rect x="1178.8" y="979.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="990.0"></text>
</g>
<g>
<title>StringConcat::eliminate_unneeded_control() (1 samples, 0.07%)</title><rect x="1178.8" y="963.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="974.0"></text>
</g>
<g>
<title>StringConcat::eliminate_call(CallNode*) (1 samples, 0.07%)</title><rect x="1178.8" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="958.0"></text>
</g>
<g>
<title>Compile::gvn_replace_by(Node*, Node*) (1 samples, 0.07%)</title><rect x="1178.8" y="931.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.07%)</title><rect x="1178.8" y="915.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="926.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1178.8" y="899.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="910.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.07%)</title><rect x="1178.8" y="883.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.8" y="894.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1179.6" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.41%)</title><rect x="1180.4" y="1011.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.41%)</title><rect x="1180.4" y="995.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.41%)</title><rect x="1180.4" y="979.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1180.4" y="963.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1180.4" y="947.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1180.4" y="931.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1180.4" y="915.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1180.4" y="899.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1180.4" y="883.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1180.4" y="867.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1180.4" y="851.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.34%)</title><rect x="1180.4" y="835.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1180.4" y="819.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.34%)</title><rect x="1180.4" y="803.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.34%)</title><rect x="1180.4" y="787.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.34%)</title><rect x="1180.4" y="771.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.34%)</title><rect x="1180.4" y="755.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1180.4" y="739.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="750.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1180.4" y="723.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="734.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1180.4" y="707.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="718.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.07%)</title><rect x="1180.4" y="691.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="702.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.07%)</title><rect x="1180.4" y="675.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.4" y="686.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1180.4" y="659.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1183.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1181.2" y="723.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1181.2" y="707.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.2" y="691.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.2" y="675.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.2" y="659.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1181.2" y="643.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="627.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="611.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="595.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="579.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="563.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="547.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="531.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="515.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="499.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="483.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="467.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="451.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="435.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="419.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="403.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="387.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="371.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="355.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="339.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="323.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="307.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="291.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="275.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="259.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="243.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="227.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.2" y="211.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.2" y="195.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.2" y="179.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.2" y="163.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.2" y="147.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.2" y="131.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="142.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="1181.2" y="115.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="126.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1181.2" y="99.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="110.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1181.2" y="83.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="627.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="611.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.0" y="595.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.0" y="579.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.0" y="563.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.0" y="547.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.0" y="531.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="515.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.0" y="483.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.0" y="467.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.0" y="451.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.0" y="435.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="419.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.0" y="403.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.0" y="387.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.0" y="371.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.0" y="355.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1182.0" y="339.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1182.0" y="323.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="334.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.07%)</title><rect x="1182.0" y="307.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="318.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.07%)</title><rect x="1182.0" y="291.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="302.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.07%)</title><rect x="1182.0" y="275.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="286.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.07%)</title><rect x="1182.8" y="691.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.07%)</title><rect x="1182.8" y="675.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>ciMethodData::load_remaining_extra_data() (1 samples, 0.07%)</title><rect x="1182.8" y="659.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="739.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="723.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="734.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.07%)</title><rect x="1183.6" y="707.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="718.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1183.6" y="691.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="702.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1183.6" y="675.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="686.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="659.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1183.6" y="643.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="654.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="627.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="638.0"></text>
</g>
<g>
<title>InitializeNode::capture_store(StoreNode*, long, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="611.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="622.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1183.6" y="595.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="606.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1184.4" y="963.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="974.0"></text>
</g>
<g>
<title>GraphKit::clean_stack(int) (1 samples, 0.07%)</title><rect x="1184.4" y="947.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="958.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.2" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="1022.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.07%)</title><rect x="1185.2" y="995.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="1006.0"></text>
</g>
<g>
<title>__GI___qsort_r (1 samples, 0.07%)</title><rect x="1185.2" y="979.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1188.2" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.20%)</title><rect x="1186.0" y="1043.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.20%)</title><rect x="1186.0" y="1027.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.20%)</title><rect x="1186.0" y="1011.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.20%)</title><rect x="1186.0" y="995.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.0" y="1006.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (2 samples, 0.14%)</title><rect x="1186.0" y="979.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.14%)</title><rect x="1186.0" y="963.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.14%)</title><rect x="1186.0" y="947.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.14%)</title><rect x="1186.0" y="931.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.0" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.14%)</title><rect x="1186.0" y="915.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.14%)</title><rect x="1186.0" y="899.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.14%)</title><rect x="1186.0" y="883.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.14%)</title><rect x="1186.0" y="867.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.14%)</title><rect x="1186.0" y="851.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.0" y="835.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.0" y="819.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.0" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.0" y="803.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="787.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="771.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.0" y="755.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.0" y="739.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.0" y="723.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="707.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.0" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="691.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.0" y="675.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.0" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.0" y="659.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.0" y="643.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="627.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="611.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.0" y="595.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.0" y="579.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.0" y="563.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="547.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="531.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.0" y="515.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.0" y="499.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::load_indexed(BasicType) (1 samples, 0.07%)</title><rect x="1186.0" y="483.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.07%)</title><rect x="1186.0" y="467.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="478.0"></text>
</g>
<g>
<title>Canonicalizer::do_LoadIndexed(LoadIndexed*) (1 samples, 0.07%)</title><rect x="1186.0" y="451.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="462.0"></text>
</g>
<g>
<title>ciArray::element_value(int) (1 samples, 0.07%)</title><rect x="1186.0" y="435.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="446.0"></text>
</g>
<g>
<title>ciArray::element_value_impl(BasicType, arrayOopDesc*, int) (1 samples, 0.07%)</title><rect x="1186.0" y="419.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="430.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.07%)</title><rect x="1186.0" y="403.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="414.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.07%)</title><rect x="1186.8" y="835.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="846.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.07%)</title><rect x="1186.8" y="819.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.8" y="830.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::is_mature(Method*) (1 samples, 0.07%)</title><rect x="1186.8" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="814.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.07%)</title><rect x="1186.8" y="787.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.07%)</title><rect x="1187.6" y="979.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.6" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.07%)</title><rect x="1187.6" y="963.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.6" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (1 samples, 0.07%)</title><rect x="1187.6" y="947.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.6" y="958.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1188.4" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.4" y="1086.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1188.4" y="1059.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.4" y="1070.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.07%)</title><rect x="1188.4" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.4" y="1054.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1188.4" y="1027.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1191.4" y="1038.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1188.4" y="1011.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.4" y="1022.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1188.4" y="995.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.4" y="1006.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1188.4" y="979.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="990.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="1188.4" y="963.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1191.4" y="974.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.2" y="1091.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.2" y="1102.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.2" y="1075.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.2" y="1086.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.07%)</title><rect x="1189.2" y="1059.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.2" y="1070.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.2" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="1054.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.07%)</title><rect x="1189.2" y="1027.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.2" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.2" y="1011.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.2" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_cset() (1 samples, 0.07%)</title><rect x="1189.2" y="995.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.2" y="1006.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::do_heap_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="1189.2" y="979.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.2" y="990.0"></text>
</g>
</g>
</svg>
