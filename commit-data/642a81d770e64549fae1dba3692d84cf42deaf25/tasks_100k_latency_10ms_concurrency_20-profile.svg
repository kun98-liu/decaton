<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (303 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.99%)</title><rect x="10.0" y="1075.0" width="11.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.99%)</title><rect x="10.0" y="1059.0" width="11.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.99%)</title><rect x="10.0" y="1043.0" width="11.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.33%)</title><rect x="10.0" y="1027.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.33%)</title><rect x="10.0" y="1011.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.66%)</title><rect x="13.9" y="1027.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.9" y="1038.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.33%)</title><rect x="17.8" y="1011.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (17 samples, 5.61%)</title><rect x="21.7" y="1075.0" width="66.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.7" y="1086.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (17 samples, 5.61%)</title><rect x="21.7" y="1059.0" width="66.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.7" y="1070.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (17 samples, 5.61%)</title><rect x="21.7" y="1043.0" width="66.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.7" y="1054.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.66%)</title><rect x="21.7" y="1027.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.66%)</title><rect x="21.7" y="1011.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.33%)</title><rect x="21.7" y="995.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.33%)</title><rect x="21.7" y="979.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.33%)</title><rect x="21.7" y="963.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.7" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.33%)</title><rect x="25.6" y="995.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.33%)</title><rect x="25.6" y="979.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.33%)</title><rect x="25.6" y="963.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.33%)</title><rect x="25.6" y="947.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.33%)</title><rect x="25.6" y="931.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.33%)</title><rect x="25.6" y="915.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.33%)</title><rect x="25.6" y="899.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.33%)</title><rect x="25.6" y="883.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.33%)</title><rect x="25.6" y="867.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/1725667478.test (1 samples, 0.33%)</title><rect x="25.6" y="851.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.33%)</title><rect x="29.5" y="1027.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.33%)</title><rect x="29.5" y="1011.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (1 samples, 0.33%)</title><rect x="29.5" y="995.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.5" y="1006.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.33%)</title><rect x="29.5" y="979.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.33%)</title><rect x="33.4" y="1027.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.33%)</title><rect x="33.4" y="1011.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.33%)</title><rect x="33.4" y="995.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$272/2035342127.accept (1 samples, 0.33%)</title><rect x="33.4" y="979.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.33%)</title><rect x="33.4" y="963.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.33%)</title><rect x="33.4" y="947.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.4" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.33%)</title><rect x="37.3" y="1027.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.3" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (1 samples, 0.33%)</title><rect x="37.3" y="1011.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.3" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (1 samples, 0.33%)</title><rect x="37.3" y="995.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.3" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.33%)</title><rect x="37.3" y="979.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.3" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (1 samples, 0.33%)</title><rect x="37.3" y="963.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.3" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.33%)</title><rect x="37.3" y="947.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.3" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.33%)</title><rect x="37.3" y="931.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.3" y="942.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (1 samples, 0.33%)</title><rect x="37.3" y="915.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.3" y="926.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (1 samples, 0.33%)</title><rect x="37.3" y="899.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.3" y="910.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (1 samples, 0.33%)</title><rect x="37.3" y="883.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.3" y="894.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.33%)</title><rect x="37.3" y="867.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.3" y="878.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValueSlowPath (1 samples, 0.33%)</title><rect x="37.3" y="851.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.3" y="862.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.shiftCoveredRangeToTheRight (1 samples, 0.33%)</title><rect x="37.3" y="835.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.3" y="846.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.shiftValuesLeft (1 samples, 0.33%)</title><rect x="37.3" y="819.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.3" y="830.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.33%)</title><rect x="37.3" y="803.0" width="3.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="40.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.99%)</title><rect x="41.2" y="1027.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/972200971.accept (3 samples, 0.99%)</title><rect x="41.2" y="1011.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 0.99%)</title><rect x="41.2" y="995.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (2 samples, 0.66%)</title><rect x="41.2" y="979.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.66%)</title><rect x="41.2" y="963.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.66%)</title><rect x="41.2" y="947.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.2" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (2 samples, 0.66%)</title><rect x="41.2" y="931.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.2" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (2 samples, 0.66%)</title><rect x="41.2" y="915.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="44.2" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepCounter.increment (1 samples, 0.33%)</title><rect x="41.2" y="899.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="44.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/DoubleAdder.add (1 samples, 0.33%)</title><rect x="41.2" y="883.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.2" y="894.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.33%)</title><rect x="45.0" y="899.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.33%)</title><rect x="48.9" y="979.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.33%)</title><rect x="48.9" y="963.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.97%)</title><rect x="52.8" y="1027.0" width="35.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.8" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.97%)</title><rect x="52.8" y="1011.0" width="35.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="55.8" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.32%)</title><rect x="52.8" y="995.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="55.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.32%)</title><rect x="52.8" y="979.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.32%)</title><rect x="52.8" y="963.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.66%)</title><rect x="52.8" y="947.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.66%)</title><rect x="52.8" y="931.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.33%)</title><rect x="52.8" y="915.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.33%)</title><rect x="52.8" y="899.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.33%)</title><rect x="52.8" y="883.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordCompletedReceive (1 samples, 0.33%)</title><rect x="52.8" y="867.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.33%)</title><rect x="52.8" y="851.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.33%)</title><rect x="56.7" y="915.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.7" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.33%)</title><rect x="56.7" y="899.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.7" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.33%)</title><rect x="56.7" y="883.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.7" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.33%)</title><rect x="56.7" y="867.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.33%)</title><rect x="56.7" y="851.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="56.7" y="835.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="56.7" y="819.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.7" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.getFDVal (1 samples, 0.33%)</title><rect x="56.7" y="803.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.33%)</title><rect x="60.6" y="947.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.keySet (1 samples, 0.33%)</title><rect x="60.6" y="931.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="63.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.33%)</title><rect x="64.5" y="947.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.33%)</title><rect x="64.5" y="931.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="64.5" y="915.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="64.5" y="899.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.33%)</title><rect x="64.5" y="883.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.33%)</title><rect x="64.5" y="867.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="67.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.33%)</title><rect x="64.5" y="851.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.build (1 samples, 0.33%)</title><rect x="64.5" y="835.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.flushPendingSend (1 samples, 0.33%)</title><rect x="64.5" y="819.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.5" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (1 samples, 0.33%)</title><rect x="64.5" y="803.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.5" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.33%)</title><rect x="64.5" y="787.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.66%)</title><rect x="68.4" y="995.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.33%)</title><rect x="68.4" y="979.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.33%)</title><rect x="68.4" y="963.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.33%)</title><rect x="68.4" y="947.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.33%)</title><rect x="68.4" y="931.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.33%)</title><rect x="68.4" y="915.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.33%)</title><rect x="68.4" y="899.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.4" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.33%)</title><rect x="68.4" y="883.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="71.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.33%)</title><rect x="68.4" y="867.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="71.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.33%)</title><rect x="68.4" y="851.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="68.4" y="835.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.33%)</title><rect x="72.3" y="979.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.33%)</title><rect x="72.3" y="963.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.3" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.33%)</title><rect x="72.3" y="947.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="75.3" y="958.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.33%)</title><rect x="72.3" y="931.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="75.3" y="942.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.94] (1 samples, 0.33%)</title><rect x="72.3" y="915.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="75.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.33%)</title><rect x="76.2" y="995.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.33%)</title><rect x="76.2" y="979.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.33%)</title><rect x="76.2" y="963.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.33%)</title><rect x="76.2" y="947.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="79.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.33%)</title><rect x="76.2" y="931.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.66%)</title><rect x="80.1" y="995.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="83.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.66%)</title><rect x="80.1" y="979.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validatePositionsOnMetadataChange (1 samples, 0.33%)</title><rect x="84.0" y="963.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.33%)</title><rect x="84.0" y="947.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (222 samples, 73.27%)</title><rect x="87.9" y="1075.0" width="864.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.9" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (222 samples, 73.27%)</title><rect x="87.9" y="1059.0" width="864.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.9" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (222 samples, 73.27%)</title><rect x="87.9" y="1043.0" width="864.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.9" y="1054.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/1191242236.run (214 samples, 70.63%)</title><rect x="87.9" y="1027.0" width="833.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.9" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/1191242236.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (214 samples, 70.63%)</title><rect x="87.9" y="1011.0" width="833.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.9" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (214 samples, 70.63%)</title><rect x="87.9" y="995.0" width="833.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.9" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (200 samples, 66.01%)</title><rect x="87.9" y="979.0" width="778.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.9" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (13 samples, 4.29%)</title><rect x="87.9" y="963.0" width="50.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.9" y="974.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 4.29%)</title><rect x="87.9" y="947.0" width="50.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.9" y="958.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 4.29%)</title><rect x="87.9" y="931.0" width="50.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.9" y="942.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 3.30%)</title><rect x="99.6" y="915.0" width="38.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.6" y="926.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.33%)</title><rect x="99.6" y="899.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$517/251139617.accept (1 samples, 0.33%)</title><rect x="99.6" y="883.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.97%)</title><rect x="103.5" y="899.0" width="35.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="106.5" y="910.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$517/251139617.accept (9 samples, 2.97%)</title><rect x="103.5" y="883.0" width="35.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.5" y="894.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (9 samples, 2.97%)</title><rect x="103.5" y="867.0" width="35.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.5" y="878.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (9 samples, 2.97%)</title><rect x="103.5" y="851.0" width="35.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.5" y="862.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (9 samples, 2.97%)</title><rect x="103.5" y="835.0" width="35.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.5" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 2.97%)</title><rect x="103.5" y="819.0" width="35.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.5" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.32%)</title><rect x="103.5" y="803.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$505/735802047.accept (1 samples, 0.33%)</title><rect x="103.5" y="787.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$504/758091496.accept (2 samples, 0.66%)</title><rect x="107.4" y="787.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.4" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="115.1" y="787.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="118.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 1.65%)</title><rect x="119.0" y="803.0" width="19.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$504/758091496.accept (3 samples, 0.99%)</title><rect x="126.8" y="787.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="129.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (1 samples, 0.33%)</title><rect x="138.5" y="963.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="141.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (1 samples, 0.33%)</title><rect x="138.5" y="947.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.5" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.33%)</title><rect x="138.5" y="931.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="141.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="138.5" y="915.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="138.5" y="899.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="141.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (22 samples, 7.26%)</title><rect x="142.4" y="963.0" width="85.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.4" y="974.0">com/lineco..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (22 samples, 7.26%)</title><rect x="142.4" y="947.0" width="85.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.4" y="958.0">io/microme..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (13 samples, 4.29%)</title><rect x="150.2" y="931.0" width="50.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.2" y="942.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (7 samples, 2.31%)</title><rect x="150.2" y="915.0" width="27.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.2" y="926.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (7 samples, 2.31%)</title><rect x="150.2" y="899.0" width="27.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.2" y="910.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (7 samples, 2.31%)</title><rect x="150.2" y="883.0" width="27.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.2" y="894.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (7 samples, 2.31%)</title><rect x="150.2" y="867.0" width="27.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.2" y="878.0">i..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (7 samples, 2.31%)</title><rect x="150.2" y="851.0" width="27.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.2" y="862.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (7 samples, 2.31%)</title><rect x="150.2" y="835.0" width="27.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.2" y="846.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (7 samples, 2.31%)</title><rect x="150.2" y="819.0" width="27.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.2" y="830.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (5 samples, 1.65%)</title><rect x="150.2" y="803.0" width="19.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.2" y="814.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (4 samples, 1.32%)</title><rect x="150.2" y="787.0" width="15.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="153.2" y="798.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (1 samples, 0.33%)</title><rect x="165.8" y="787.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (1 samples, 0.33%)</title><rect x="165.8" y="771.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (1 samples, 0.33%)</title><rect x="165.8" y="755.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="168.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (1 samples, 0.33%)</title><rect x="165.8" y="739.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="168.8" y="750.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (2 samples, 0.66%)</title><rect x="169.7" y="803.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="172.7" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (6 samples, 1.98%)</title><rect x="177.5" y="915.0" width="23.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.5" y="926.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (6 samples, 1.98%)</title><rect x="177.5" y="899.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.5" y="910.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.66%)</title><rect x="193.0" y="883.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.0" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.updateMax (1 samples, 0.33%)</title><rect x="193.0" y="867.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="196.0" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="196.9" y="867.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="199.9" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="196.9" y="851.0" width="3.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="199.9" y="862.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (7 samples, 2.31%)</title><rect x="200.8" y="931.0" width="27.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.8" y="942.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (22 samples, 7.26%)</title><rect x="228.1" y="963.0" width="85.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.1" y="974.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (22 samples, 7.26%)</title><rect x="228.1" y="947.0" width="85.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.1" y="958.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (22 samples, 7.26%)</title><rect x="228.1" y="931.0" width="85.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.1" y="942.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (22 samples, 7.26%)</title><rect x="228.1" y="915.0" width="85.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.1" y="926.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (22 samples, 7.26%)</title><rect x="228.1" y="899.0" width="85.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.1" y="910.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (22 samples, 7.26%)</title><rect x="228.1" y="883.0" width="85.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.1" y="894.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 3.63%)</title><rect x="228.1" y="867.0" width="42.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.1" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.66%)</title><rect x="228.1" y="851.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.66%)</title><rect x="228.1" y="835.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.33%)</title><rect x="228.1" y="819.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.33%)</title><rect x="228.1" y="803.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="231.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.33%)</title><rect x="228.1" y="787.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.33%)</title><rect x="232.0" y="819.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.0" y="830.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.33%)</title><rect x="232.0" y="803.0" width="3.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="235.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.33%)</title><rect x="235.9" y="851.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.33%)</title><rect x="235.9" y="835.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.9" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.33%)</title><rect x="235.9" y="819.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="238.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (8 samples, 2.64%)</title><rect x="239.8" y="851.0" width="31.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.8" y="862.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 2.64%)</title><rect x="239.8" y="835.0" width="31.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.8" y="846.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 2.31%)</title><rect x="239.8" y="819.0" width="27.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.8" y="830.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.66%)</title><rect x="239.8" y="803.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.66%)</title><rect x="239.8" y="787.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.33%)</title><rect x="243.7" y="771.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.99%)</title><rect x="247.6" y="803.0" width="11.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.99%)</title><rect x="247.6" y="787.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.99%)</title><rect x="247.6" y="771.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.66%)</title><rect x="259.2" y="803.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.33%)</title><rect x="267.0" y="819.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.33%)</title><rect x="267.0" y="803.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.33%)</title><rect x="267.0" y="787.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="270.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.33%)</title><rect x="267.0" y="771.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.33%)</title><rect x="267.0" y="755.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.0" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.33%)</title><rect x="267.0" y="739.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="270.0" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.33%)</title><rect x="267.0" y="723.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="270.0" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.33%)</title><rect x="267.0" y="707.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="270.0" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.33%)</title><rect x="267.0" y="691.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="270.0" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.33%)</title><rect x="267.0" y="675.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="270.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 3.63%)</title><rect x="270.9" y="867.0" width="42.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.9" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 3.63%)</title><rect x="270.9" y="851.0" width="42.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.9" y="862.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 3.63%)</title><rect x="270.9" y="835.0" width="42.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.9" y="846.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (11 samples, 3.63%)</title><rect x="270.9" y="819.0" width="42.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.9" y="830.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (11 samples, 3.63%)</title><rect x="270.9" y="803.0" width="42.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.9" y="814.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (142 samples, 46.86%)</title><rect x="313.8" y="963.0" width="553.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.8" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="313.8" y="947.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="316.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="313.8" y="931.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="316.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.33%)</title><rect x="313.8" y="915.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="316.8" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.33%)</title><rect x="313.8" y="899.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="316.8" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.33%)</title><rect x="313.8" y="883.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="316.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (11 samples, 3.63%)</title><rect x="317.7" y="947.0" width="42.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="320.7" y="958.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (10 samples, 3.30%)</title><rect x="321.6" y="931.0" width="38.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.6" y="942.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 3.30%)</title><rect x="321.6" y="915.0" width="38.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.6" y="926.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.99%)</title><rect x="321.6" y="899.0" width="11.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 2.31%)</title><rect x="333.2" y="899.0" width="27.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="336.2" y="910.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 2.31%)</title><rect x="333.2" y="883.0" width="27.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.2" y="894.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.66%)</title><rect x="360.5" y="947.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.5" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.66%)</title><rect x="360.5" y="931.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="363.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (21 samples, 6.93%)</title><rect x="368.3" y="947.0" width="81.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="371.3" y="958.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (16 samples, 5.28%)</title><rect x="368.3" y="931.0" width="62.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.3" y="942.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 1.65%)</title><rect x="380.0" y="915.0" width="19.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="383.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.32%)</title><rect x="380.0" y="899.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="383.0" y="910.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.33%)</title><rect x="395.5" y="899.0" width="3.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="398.5" y="910.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.64%)</title><rect x="399.4" y="915.0" width="31.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="402.4" y="926.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.64%)</title><rect x="399.4" y="899.0" width="31.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.4" y="910.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.66%)</title><rect x="399.4" y="883.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.33%)</title><rect x="403.3" y="867.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.33%)</title><rect x="403.3" y="851.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="407.2" y="883.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.2" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.33%)</title><rect x="407.2" y="867.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.2" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.33%)</title><rect x="407.2" y="851.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.33%)</title><rect x="407.2" y="835.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.2" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 1.65%)</title><rect x="411.1" y="883.0" width="19.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="414.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.65%)</title><rect x="411.1" y="867.0" width="19.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="414.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.65%)</title><rect x="411.1" y="851.0" width="19.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="414.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.66%)</title><rect x="422.8" y="835.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="425.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (5 samples, 1.65%)</title><rect x="430.6" y="931.0" width="19.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="433.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (5 samples, 1.65%)</title><rect x="430.6" y="915.0" width="19.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 1.65%)</title><rect x="430.6" y="899.0" width="19.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 1.65%)</title><rect x="430.6" y="883.0" width="19.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="433.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.66%)</title><rect x="430.6" y="867.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.99%)</title><rect x="438.4" y="867.0" width="11.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (67 samples, 22.11%)</title><rect x="450.1" y="947.0" width="260.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="453.1" y="958.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (67 samples, 22.11%)</title><rect x="450.1" y="931.0" width="260.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.1" y="942.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$430/704571611.process (48 samples, 15.84%)</title><rect x="461.7" y="915.0" width="187.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="464.7" y="926.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (48 samples, 15.84%)</title><rect x="461.7" y="899.0" width="187.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.7" y="910.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (48 samples, 15.84%)</title><rect x="461.7" y="883.0" width="187.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.7" y="894.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.32%)</title><rect x="461.7" y="867.0" width="15.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.7" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.32%)</title><rect x="461.7" y="851.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.7" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.32%)</title><rect x="461.7" y="835.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.7" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.32%)</title><rect x="461.7" y="819.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="464.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.99%)</title><rect x="465.6" y="803.0" width="11.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="468.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.33%)</title><rect x="473.4" y="787.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ExecutionRecord.process (44 samples, 14.52%)</title><rect x="477.3" y="867.0" width="171.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.3" y="878.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (43 samples, 14.19%)</title><rect x="477.3" y="851.0" width="167.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.3" y="862.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (39 samples, 12.87%)</title><rect x="481.2" y="835.0" width="151.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="484.2" y="846.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.99%)</title><rect x="496.8" y="819.0" width="11.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="499.8" y="830.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.33%)</title><rect x="508.5" y="819.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="511.5" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (1 samples, 0.33%)</title><rect x="512.4" y="819.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="515.4" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 2.97%)</title><rect x="516.3" y="819.0" width="35.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="519.3" y="830.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.99%)</title><rect x="551.3" y="819.0" width="11.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="554.3" y="830.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (18 samples, 5.94%)</title><rect x="563.0" y="819.0" width="70.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="566.0" y="830.0">os::slee..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (8 samples, 2.64%)</title><rect x="582.5" y="803.0" width="31.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="585.5" y="814.0">Mo..</text>
</g>
<g>
<title>update_get_addr (1 samples, 0.33%)</title><rect x="609.7" y="787.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="612.7" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.99%)</title><rect x="613.6" y="803.0" width="11.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="616.6" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="621.4" y="787.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="624.4" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.66%)</title><rect x="625.3" y="803.0" width="7.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="628.3" y="814.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.33%)</title><rect x="633.1" y="835.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="636.1" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.66%)</title><rect x="637.0" y="835.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="640.0" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="644.8" y="851.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="647.8" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="644.8" y="835.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="647.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.66%)</title><rect x="648.7" y="915.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="651.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (2 samples, 0.66%)</title><rect x="648.7" y="899.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="651.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.66%)</title><rect x="648.7" y="883.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="651.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.66%)</title><rect x="648.7" y="867.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="651.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.66%)</title><rect x="648.7" y="851.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="651.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.66%)</title><rect x="648.7" y="835.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="651.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="656.5" y="915.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="659.5" y="926.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.33%)</title><rect x="656.5" y="899.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.5" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="656.5" y="883.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="659.5" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="656.5" y="867.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="659.5" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.33%)</title><rect x="656.5" y="851.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="659.5" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.33%)</title><rect x="656.5" y="835.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="659.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (1 samples, 0.33%)</title><rect x="660.4" y="915.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="663.4" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.33%)</title><rect x="664.3" y="915.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="667.3" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.33%)</title><rect x="664.3" y="899.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="667.3" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.33%)</title><rect x="668.2" y="915.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="671.2" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.33%)</title><rect x="668.2" y="899.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.2" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.33%)</title><rect x="672.0" y="915.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.65%)</title><rect x="675.9" y="915.0" width="19.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="678.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.32%)</title><rect x="695.4" y="915.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.32%)</title><rect x="695.4" y="899.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.32%)</title><rect x="695.4" y="883.0" width="15.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="698.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.99%)</title><rect x="695.4" y="867.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="698.4" y="878.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.66%)</title><rect x="699.3" y="851.0" width="7.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="702.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.33%)</title><rect x="707.1" y="867.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="710.1" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (5 samples, 1.65%)</title><rect x="711.0" y="947.0" width="19.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="714.0" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (5 samples, 1.65%)</title><rect x="711.0" y="931.0" width="19.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="714.0" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepCounter.increment (2 samples, 0.66%)</title><rect x="711.0" y="915.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="714.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/DoubleAdder.add (2 samples, 0.66%)</title><rect x="711.0" y="899.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="714.0" y="910.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (3 samples, 0.99%)</title><rect x="718.8" y="915.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="721.8" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (17 samples, 5.61%)</title><rect x="730.5" y="947.0" width="66.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.5" y="958.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (14 samples, 4.62%)</title><rect x="730.5" y="931.0" width="54.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="733.5" y="942.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (14 samples, 4.62%)</title><rect x="730.5" y="915.0" width="54.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.5" y="926.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (7 samples, 2.31%)</title><rect x="730.5" y="899.0" width="27.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="733.5" y="910.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (7 samples, 2.31%)</title><rect x="730.5" y="883.0" width="27.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.5" y="894.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (6 samples, 1.98%)</title><rect x="730.5" y="867.0" width="23.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.5" y="878.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (6 samples, 1.98%)</title><rect x="730.5" y="851.0" width="23.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="733.5" y="862.0">i..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (6 samples, 1.98%)</title><rect x="730.5" y="835.0" width="23.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="733.5" y="846.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (6 samples, 1.98%)</title><rect x="730.5" y="819.0" width="23.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.5" y="830.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (6 samples, 1.98%)</title><rect x="730.5" y="803.0" width="23.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.5" y="814.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (5 samples, 1.65%)</title><rect x="730.5" y="787.0" width="19.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="733.5" y="798.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (4 samples, 1.32%)</title><rect x="730.5" y="771.0" width="15.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.5" y="782.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (1 samples, 0.33%)</title><rect x="746.0" y="771.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="749.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (1 samples, 0.33%)</title><rect x="746.0" y="755.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="749.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (1 samples, 0.33%)</title><rect x="746.0" y="739.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="749.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (1 samples, 0.33%)</title><rect x="746.0" y="723.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="749.0" y="734.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.33%)</title><rect x="749.9" y="787.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="752.9" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="753.8" y="867.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="756.8" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="753.8" y="851.0" width="3.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="756.8" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (7 samples, 2.31%)</title><rect x="757.7" y="899.0" width="27.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.7" y="910.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (7 samples, 2.31%)</title><rect x="757.7" y="883.0" width="27.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.7" y="894.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.33%)</title><rect x="781.1" y="867.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="784.1" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="781.1" y="851.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="781.1" y="835.0" width="3.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="784.1" y="846.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (3 samples, 0.99%)</title><rect x="785.0" y="931.0" width="11.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.0" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (1 samples, 0.33%)</title><rect x="792.8" y="915.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 5.94%)</title><rect x="796.7" y="947.0" width="70.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="799.7" y="958.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 5.94%)</title><rect x="796.7" y="931.0" width="70.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="799.7" y="942.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 5.61%)</title><rect x="800.6" y="915.0" width="66.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.6" y="926.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 5.61%)</title><rect x="800.6" y="899.0" width="66.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="803.6" y="910.0">java/ut..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$515/1640141397.accept (17 samples, 5.61%)</title><rect x="800.6" y="883.0" width="66.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="803.6" y="894.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (17 samples, 5.61%)</title><rect x="800.6" y="867.0" width="66.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.6" y="878.0">com/lin..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (17 samples, 5.61%)</title><rect x="800.6" y="851.0" width="66.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="803.6" y="862.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (16 samples, 5.28%)</title><rect x="800.6" y="835.0" width="62.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="803.6" y="846.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (16 samples, 5.28%)</title><rect x="800.6" y="819.0" width="62.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="803.6" y="830.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (12 samples, 3.96%)</title><rect x="800.6" y="803.0" width="46.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.6" y="814.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (12 samples, 3.96%)</title><rect x="800.6" y="787.0" width="46.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="803.6" y="798.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (12 samples, 3.96%)</title><rect x="800.6" y="771.0" width="46.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.6" y="782.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (12 samples, 3.96%)</title><rect x="800.6" y="755.0" width="46.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="803.6" y="766.0">io/m..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (12 samples, 3.96%)</title><rect x="800.6" y="739.0" width="46.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.6" y="750.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (12 samples, 3.96%)</title><rect x="800.6" y="723.0" width="46.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="803.6" y="734.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (12 samples, 3.96%)</title><rect x="800.6" y="707.0" width="46.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.6" y="718.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (10 samples, 3.30%)</title><rect x="800.6" y="691.0" width="38.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="803.6" y="702.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (8 samples, 2.64%)</title><rect x="800.6" y="675.0" width="31.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="803.6" y="686.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (2 samples, 0.66%)</title><rect x="831.7" y="675.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="834.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (2 samples, 0.66%)</title><rect x="831.7" y="659.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (2 samples, 0.66%)</title><rect x="831.7" y="643.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (2 samples, 0.66%)</title><rect x="831.7" y="627.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="834.7" y="638.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (2 samples, 0.66%)</title><rect x="839.5" y="691.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="842.5" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (4 samples, 1.32%)</title><rect x="847.3" y="803.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="850.3" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 1.32%)</title><rect x="847.3" y="787.0" width="15.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="850.3" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.33%)</title><rect x="859.0" y="771.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="862.0" y="782.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.33%)</title><rect x="862.9" y="835.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.9" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (14 samples, 4.62%)</title><rect x="866.8" y="979.0" width="54.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="869.8" y="990.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (7 samples, 2.31%)</title><rect x="866.8" y="963.0" width="27.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="869.8" y="974.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (5 samples, 1.65%)</title><rect x="874.6" y="947.0" width="19.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="877.6" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.33%)</title><rect x="874.6" y="931.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="877.6" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (1 samples, 0.33%)</title><rect x="874.6" y="915.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="877.6" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (4 samples, 1.32%)</title><rect x="878.4" y="931.0" width="15.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="881.4" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 1.32%)</title><rect x="878.4" y="915.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="881.4" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 1.32%)</title><rect x="878.4" y="899.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="881.4" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="890.1" y="883.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="893.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="890.1" y="867.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="893.1" y="878.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (7 samples, 2.31%)</title><rect x="894.0" y="963.0" width="27.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="897.0" y="974.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="917.4" y="947.0" width="3.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="920.4" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="917.4" y="931.0" width="3.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="920.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.33%)</title><rect x="921.3" y="1027.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="924.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (1 samples, 0.33%)</title><rect x="925.2" y="1027.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="928.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset (1 samples, 0.33%)</title><rect x="925.2" y="1011.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="928.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1 samples, 0.33%)</title><rect x="925.2" y="995.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="928.2" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry$$Lambda$164/1320388319.run (1 samples, 0.33%)</title><rect x="925.2" y="979.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="928.2" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry.publishSafely (1 samples, 0.33%)</title><rect x="925.2" y="963.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="928.2" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.publish (1 samples, 0.33%)</title><rect x="925.2" y="947.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="928.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (1 samples, 0.33%)</title><rect x="925.2" y="931.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="928.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.33%)</title><rect x="925.2" y="915.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="928.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (1 samples, 0.33%)</title><rect x="925.2" y="899.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="928.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (1 samples, 0.33%)</title><rect x="925.2" y="883.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="928.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.33%)</title><rect x="925.2" y="867.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="928.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.33%)</title><rect x="925.2" y="851.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="928.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$SizedRefSortingSink.end (1 samples, 0.33%)</title><rect x="925.2" y="835.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (1 samples, 0.33%)</title><rect x="925.2" y="819.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.2" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$523/443407227.accept (1 samples, 0.33%)</title><rect x="925.2" y="803.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="928.2" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$12 (1 samples, 0.33%)</title><rect x="925.2" y="787.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="928.2" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Meter.use (1 samples, 0.33%)</title><rect x="925.2" y="771.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="928.2" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$526/2114730703.accept (1 samples, 0.33%)</title><rect x="925.2" y="755.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="928.2" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$5 (1 samples, 0.33%)</title><rect x="925.2" y="739.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="928.2" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingRegistryConfig.logInactive (1 samples, 0.33%)</title><rect x="925.2" y="723.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="928.2" y="734.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.33%)</title><rect x="925.2" y="707.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="928.2" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.33%)</title><rect x="925.2" y="691.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="928.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.98%)</title><rect x="929.1" y="1027.0" width="23.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="932.1" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.65%)</title><rect x="933.0" y="1011.0" width="19.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="936.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.33%)</title><rect x="940.8" y="995.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="943.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.33%)</title><rect x="940.8" y="979.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="943.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.33%)</title><rect x="940.8" y="963.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="943.8" y="974.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.33%)</title><rect x="940.8" y="947.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="943.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.66%)</title><rect x="944.7" y="995.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="947.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.66%)</title><rect x="944.7" y="979.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="947.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.66%)</title><rect x="944.7" y="963.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="947.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.66%)</title><rect x="944.7" y="947.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="947.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.66%)</title><rect x="952.4" y="1075.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.4" y="1086.0"></text>
</g>
<g>
<title>start_thread (59 samples, 19.47%)</title><rect x="960.2" y="1075.0" width="229.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="963.2" y="1086.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (59 samples, 19.47%)</title><rect x="960.2" y="1059.0" width="229.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="963.2" y="1070.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (59 samples, 19.47%)</title><rect x="960.2" y="1043.0" width="229.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="963.2" y="1054.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 3.63%)</title><rect x="960.2" y="1027.0" width="42.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="963.2" y="1038.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 3.63%)</title><rect x="960.2" y="1011.0" width="42.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="963.2" y="1022.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 2.97%)</title><rect x="960.2" y="995.0" width="35.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="963.2" y="1006.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.33%)</title><rect x="971.9" y="979.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="974.9" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 0.99%)</title><rect x="975.8" y="979.0" width="11.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="978.8" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.66%)</title><rect x="975.8" y="963.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.8" y="974.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.33%)</title><rect x="975.8" y="947.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="978.8" y="958.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.33%)</title><rect x="979.7" y="947.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="982.7" y="958.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.33%)</title><rect x="983.6" y="963.0" width="3.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="986.6" y="974.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.33%)</title><rect x="987.5" y="979.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.5" y="990.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.33%)</title><rect x="991.4" y="979.0" width="3.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="994.4" y="990.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.66%)</title><rect x="995.3" y="995.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="998.3" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.66%)</title><rect x="995.3" y="979.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.3" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.66%)</title><rect x="995.3" y="963.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="998.3" y="974.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.66%)</title><rect x="995.3" y="947.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.3" y="958.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.66%)</title><rect x="995.3" y="931.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="998.3" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.66%)</title><rect x="995.3" y="915.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.3" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (48 samples, 15.84%)</title><rect x="1003.1" y="1027.0" width="186.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1006.1" y="1038.0">JavaThread::thread_main_..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (48 samples, 15.84%)</title><rect x="1003.1" y="1011.0" width="186.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1006.1" y="1022.0">CompileBroker::compiler_..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (46 samples, 15.18%)</title><rect x="1003.1" y="995.0" width="179.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.1" y="1006.0">CompileBroker::invoke_c..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (42 samples, 13.86%)</title><rect x="1003.1" y="979.0" width="163.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1006.1" y="990.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (42 samples, 13.86%)</title><rect x="1003.1" y="963.0" width="163.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1006.1" y="974.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (28 samples, 9.24%)</title><rect x="1003.1" y="947.0" width="109.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.1" y="958.0">Compile::Code..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.33%)</title><rect x="1003.1" y="931.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.1" y="942.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.33%)</title><rect x="1003.1" y="915.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1006.1" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.99%)</title><rect x="1007.0" y="931.0" width="11.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1010.0" y="942.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.99%)</title><rect x="1007.0" y="915.0" width="11.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1010.0" y="926.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.33%)</title><rect x="1007.0" y="899.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1010.0" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.33%)</title><rect x="1007.0" y="883.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1010.0" y="894.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.33%)</title><rect x="1007.0" y="867.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1010.0" y="878.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.66%)</title><rect x="1010.9" y="899.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1013.9" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 0.66%)</title><rect x="1010.9" y="883.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.9" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 0.66%)</title><rect x="1010.9" y="867.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1013.9" y="878.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 0.66%)</title><rect x="1010.9" y="851.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.9" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 0.66%)</title><rect x="1010.9" y="835.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.9" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.33%)</title><rect x="1010.9" y="819.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1013.9" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.33%)</title><rect x="1010.9" y="803.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.9" y="814.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.33%)</title><rect x="1010.9" y="787.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1013.9" y="798.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.33%)</title><rect x="1014.8" y="819.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.8" y="830.0"></text>
</g>
<g>
<title>State::_sub_Op_ConI(Node const*) (1 samples, 0.33%)</title><rect x="1014.8" y="803.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.8" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.33%)</title><rect x="1018.6" y="931.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1021.6" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.33%)</title><rect x="1018.6" y="915.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.6" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.32%)</title><rect x="1022.5" y="931.0" width="15.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.5" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.32%)</title><rect x="1022.5" y="915.0" width="15.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1025.5" y="926.0"></text>
</g>
<g>
<title>Arena::Arena(MemoryType) (1 samples, 0.33%)</title><rect x="1022.5" y="899.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.5" y="910.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.33%)</title><rect x="1022.5" y="883.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.5" y="894.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.33%)</title><rect x="1022.5" y="867.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.5" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.33%)</title><rect x="1026.4" y="899.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.4" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.66%)</title><rect x="1030.3" y="899.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1033.3" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.33%)</title><rect x="1030.3" y="883.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1033.3" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.33%)</title><rect x="1034.2" y="883.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 6.27%)</title><rect x="1038.1" y="931.0" width="74.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1041.1" y="942.0">PhaseCha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.33%)</title><rect x="1038.1" y="915.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1041.1" y="926.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.33%)</title><rect x="1038.1" y="899.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1041.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.33%)</title><rect x="1042.0" y="915.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1045.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.33%)</title><rect x="1045.9" y="915.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.9" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.33%)</title><rect x="1045.9" y="899.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1048.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.99%)</title><rect x="1049.8" y="915.0" width="11.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.8" y="926.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.33%)</title><rect x="1053.7" y="899.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1056.7" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.33%)</title><rect x="1057.6" y="899.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1060.6" y="910.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.33%)</title><rect x="1057.6" y="883.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.65%)</title><rect x="1061.5" y="915.0" width="19.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1064.5" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.33%)</title><rect x="1061.5" y="899.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1064.5" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.33%)</title><rect x="1065.4" y="899.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.66%)</title><rect x="1069.3" y="899.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1072.3" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="1069.3" y="883.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.3" y="894.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.33%)</title><rect x="1073.2" y="883.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.2" y="894.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.33%)</title><rect x="1077.1" y="899.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.33%)</title><rect x="1081.0" y="915.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.33%)</title><rect x="1081.0" y="899.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.0" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="1081.0" y="883.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.0" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.32%)</title><rect x="1084.9" y="915.0" width="15.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1087.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 1.32%)</title><rect x="1084.9" y="899.0" width="15.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.33%)</title><rect x="1096.5" y="883.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.5" y="894.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.33%)</title><rect x="1096.5" y="867.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.5" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.66%)</title><rect x="1100.4" y="915.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.4" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.66%)</title><rect x="1100.4" y="899.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.4" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.33%)</title><rect x="1104.3" y="883.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.3" y="894.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.33%)</title><rect x="1108.2" y="915.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.2" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 2.31%)</title><rect x="1112.1" y="947.0" width="27.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.1" y="958.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.33%)</title><rect x="1112.1" y="931.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.1" y="942.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.33%)</title><rect x="1112.1" y="915.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.1" y="926.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.33%)</title><rect x="1116.0" y="931.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.0" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.33%)</title><rect x="1116.0" y="915.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1119.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (3 samples, 0.99%)</title><rect x="1119.9" y="931.0" width="11.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.9" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1119.9" y="915.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.9" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.33%)</title><rect x="1119.9" y="899.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.33%)</title><rect x="1119.9" y="883.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.33%)</title><rect x="1123.8" y="915.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.33%)</title><rect x="1123.8" y="899.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.33%)</title><rect x="1127.7" y="915.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.33%)</title><rect x="1127.7" y="899.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.7" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.33%)</title><rect x="1127.7" y="883.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.7" y="894.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.33%)</title><rect x="1127.7" y="867.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.66%)</title><rect x="1131.6" y="931.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.6" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.66%)</title><rect x="1131.6" y="915.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.6" y="926.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1131.6" y="899.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.6" y="910.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.33%)</title><rect x="1131.6" y="883.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.6" y="894.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1135.5" y="899.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.5" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.33%)</title><rect x="1135.5" y="883.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.5" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.33%)</title><rect x="1135.5" y="867.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.5" y="878.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.33%)</title><rect x="1135.5" y="851.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.5" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.31%)</title><rect x="1139.4" y="947.0" width="27.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.4" y="958.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.31%)</title><rect x="1139.4" y="931.0" width="27.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.4" y="942.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.31%)</title><rect x="1139.4" y="915.0" width="27.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.4" y="926.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.31%)</title><rect x="1139.4" y="899.0" width="27.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.4" y="910.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.31%)</title><rect x="1139.4" y="883.0" width="27.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="894.0">P..</text>
</g>
<g>
<title>GraphKit::shared_unlock(Node*, Node*) (1 samples, 0.33%)</title><rect x="1139.4" y="867.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.4" y="878.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.33%)</title><rect x="1139.4" y="851.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.98%)</title><rect x="1143.3" y="867.0" width="23.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.3" y="878.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1143.3" y="851.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.3" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1143.3" y="835.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.3" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.33%)</title><rect x="1143.3" y="819.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.33%)</title><rect x="1143.3" y="803.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.33%)</title><rect x="1143.3" y="787.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1143.3" y="771.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.3" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1143.3" y="755.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1143.3" y="739.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.65%)</title><rect x="1147.2" y="851.0" width="19.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.65%)</title><rect x="1147.2" y="835.0" width="19.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.65%)</title><rect x="1147.2" y="819.0" width="19.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.65%)</title><rect x="1147.2" y="803.0" width="19.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.65%)</title><rect x="1147.2" y="787.0" width="19.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.65%)</title><rect x="1147.2" y="771.0" width="19.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1147.2" y="755.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.2" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1147.2" y="739.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.2" y="750.0"></text>
</g>
<g>
<title>InlineTree::print_inlining(ciMethod*, int, ciMethod*, bool) const (1 samples, 0.33%)</title><rect x="1147.2" y="723.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.32%)</title><rect x="1151.1" y="755.0" width="15.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.32%)</title><rect x="1151.1" y="739.0" width="15.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.32%)</title><rect x="1151.1" y="723.0" width="15.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.32%)</title><rect x="1151.1" y="707.0" width="15.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.32%)</title><rect x="1151.1" y="691.0" width="15.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.32%)</title><rect x="1151.1" y="675.0" width="15.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.1" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.33%)</title><rect x="1151.1" y="659.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.1" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.33%)</title><rect x="1151.1" y="643.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.1" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.33%)</title><rect x="1151.1" y="627.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.1" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.33%)</title><rect x="1151.1" y="611.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.33%)</title><rect x="1151.1" y="595.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.1" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1151.1" y="579.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1151.1" y="563.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.1" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.33%)</title><rect x="1151.1" y="547.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.1" y="558.0"></text>
</g>
<g>
<title>ciMethodBlocks::block_containing(int) (1 samples, 0.33%)</title><rect x="1151.1" y="531.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.99%)</title><rect x="1155.0" y="659.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.99%)</title><rect x="1155.0" y="643.0" width="11.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.99%)</title><rect x="1155.0" y="627.0" width="11.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.99%)</title><rect x="1155.0" y="611.0" width="11.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.99%)</title><rect x="1155.0" y="595.0" width="11.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.99%)</title><rect x="1155.0" y="579.0" width="11.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1155.0" y="563.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1155.0" y="547.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1155.0" y="531.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1155.0" y="515.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1155.0" y="499.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1155.0" y="483.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1155.0" y="467.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1155.0" y="451.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1155.0" y="435.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1155.0" y="419.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1155.0" y="403.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1155.0" y="387.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1155.0" y="371.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1155.0" y="355.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1155.0" y="339.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1155.0" y="323.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1155.0" y="307.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1155.0" y="291.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1155.0" y="275.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1155.0" y="259.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1155.0" y="243.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1155.0" y="227.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1155.0" y="211.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1155.0" y="195.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.0" y="206.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1155.0" y="179.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.0" y="190.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.33%)</title><rect x="1155.0" y="163.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) [clone .part.170] (1 samples, 0.33%)</title><rect x="1155.0" y="147.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="158.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.33%)</title><rect x="1155.0" y="131.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.0" y="142.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.33%)</title><rect x="1155.0" y="115.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.0" y="126.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.33%)</title><rect x="1155.0" y="99.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.0" y="110.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.33%)</title><rect x="1155.0" y="83.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.0" y="94.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.33%)</title><rect x="1155.0" y="67.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.0" y="78.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.33%)</title><rect x="1155.0" y="51.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="62.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.33%)</title><rect x="1155.0" y="35.0" width="3.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1158.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="195.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="179.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.8" y="190.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.33%)</title><rect x="1158.8" y="163.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.8" y="174.0"></text>
</g>
<g>
<title>Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="147.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.8" y="158.0"></text>
</g>
<g>
<title>Type::make_from_constant(ciConstant, bool, int, bool, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="131.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.8" y="142.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_constant(ciObject*, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="115.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.8" y="126.0"></text>
</g>
<g>
<title>TypeAry::make(Type const*, TypeInt const*, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="99.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.8" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.33%)</title><rect x="1158.8" y="83.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.8" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.33%)</title><rect x="1158.8" y="67.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.8" y="78.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.33%)</title><rect x="1158.8" y="51.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.8" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1162.7" y="563.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1162.7" y="547.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1162.7" y="531.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1162.7" y="515.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1162.7" y="499.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1162.7" y="483.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1162.7" y="467.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.7" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 1.32%)</title><rect x="1166.6" y="979.0" width="15.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.6" y="990.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 1.32%)</title><rect x="1166.6" y="963.0" width="15.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.6" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.32%)</title><rect x="1166.6" y="947.0" width="15.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.6" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.32%)</title><rect x="1166.6" y="931.0" width="15.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.6" y="942.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.33%)</title><rect x="1166.6" y="915.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.6" y="926.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.33%)</title><rect x="1166.6" y="899.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.6" y="910.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.33%)</title><rect x="1166.6" y="883.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.33%)</title><rect x="1166.6" y="867.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.33%)</title><rect x="1166.6" y="851.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.33%)</title><rect x="1166.6" y="835.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.6" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1166.6" y="819.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.6" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1166.6" y="803.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.6" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1166.6" y="787.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.6" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.33%)</title><rect x="1166.6" y="771.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.6" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.33%)</title><rect x="1166.6" y="755.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.6" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1166.6" y="739.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1166.6" y="723.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.6" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.33%)</title><rect x="1166.6" y="707.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.6" y="718.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::should_not_inline(ciEnv*, ciMethod*) (1 samples, 0.33%)</title><rect x="1166.6" y="691.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="702.0"></text>
</g>
<g>
<title>ciMethod::highest_osr_comp_level() (1 samples, 0.33%)</title><rect x="1166.6" y="675.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.6" y="686.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.66%)</title><rect x="1170.5" y="915.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.5" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.66%)</title><rect x="1170.5" y="899.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="910.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_profile_call(LIR_OpProfileCall*) (1 samples, 0.33%)</title><rect x="1170.5" y="883.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.5" y="894.0"></text>
</g>
<g>
<title>LIR_Assembler::type_profile_helper(RegisterImpl*, ciMethodData*, ProfileData*, RegisterImpl*, Label*) (1 samples, 0.33%)</title><rect x="1170.5" y="867.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.5" y="878.0"></text>
</g>
<g>
<title>Assembler::jmp(Label&amp;, bool) (1 samples, 0.33%)</title><rect x="1170.5" y="851.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.5" y="862.0"></text>
</g>
<g>
<title>LIR_OpTypeCheck::emit_code(LIR_Assembler*) (1 samples, 0.33%)</title><rect x="1174.4" y="883.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="894.0"></text>
</g>
<g>
<title>MacroAssembler::check_klass_subtype_fast_path(RegisterImpl*, RegisterImpl*, RegisterImpl*, Label*, Label*, Label*, RegisterOrConstant) (1 samples, 0.33%)</title><rect x="1174.4" y="867.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.4" y="878.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.33%)</title><rect x="1178.3" y="915.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.33%)</title><rect x="1178.3" y="899.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="910.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.33%)</title><rect x="1178.3" y="883.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.33%)</title><rect x="1178.3" y="867.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="878.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.33%)</title><rect x="1178.3" y="851.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="862.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(PhiResolver*, Instruction*, Instruction*) (1 samples, 0.33%)</title><rect x="1178.3" y="835.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="846.0"></text>
</g>
<g>
<title>PhiResolver::create_node(LIR_OprDesc*, bool) (1 samples, 0.33%)</title><rect x="1178.3" y="819.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="830.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.66%)</title><rect x="1182.2" y="995.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="1006.0"></text>
</g>
<g>
<title>CompileTask::select_for_compilation() (1 samples, 0.33%)</title><rect x="1182.2" y="979.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.2" y="990.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.33%)</title><rect x="1186.1" y="979.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="990.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.33%)</title><rect x="1186.1" y="963.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.33%)</title><rect x="1186.1" y="947.0" width="3.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1189.1" y="958.0"></text>
</g>
</g>
</svg>
