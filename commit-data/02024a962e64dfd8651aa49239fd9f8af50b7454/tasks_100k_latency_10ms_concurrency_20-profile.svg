<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1510" onload="init(evt)" viewBox="0 0 1200 1510" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1493"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1493"> </text>
<g id="frames">
<g>
<title>all (187 samples, 100.00%)</title><rect x="10.0" y="1459.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1470.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (13 samples, 6.95%)</title><rect x="10.0" y="1443.0" width="82.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1454.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (12 samples, 6.42%)</title><rect x="16.3" y="1427.0" width="75.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1438.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (12 samples, 6.42%)</title><rect x="16.3" y="1411.0" width="75.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.3" y="1422.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.53%)</title><rect x="16.3" y="1395.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.3" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsPaused (1 samples, 0.53%)</title><rect x="16.3" y="1379.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.3" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.53%)</title><rect x="22.6" y="1395.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.6" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.53%)</title><rect x="22.6" y="1379.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.6" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.53%)</title><rect x="22.6" y="1363.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.6" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.53%)</title><rect x="22.6" y="1347.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.6" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.53%)</title><rect x="22.6" y="1331.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.6" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.53%)</title><rect x="22.6" y="1315.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.6" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.53%)</title><rect x="22.6" y="1299.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.6" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.53%)</title><rect x="22.6" y="1283.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.6" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.53%)</title><rect x="22.6" y="1267.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.6" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.53%)</title><rect x="22.6" y="1251.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.6" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 1.07%)</title><rect x="28.9" y="1395.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.9" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 1.07%)</title><rect x="28.9" y="1379.0" width="12.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.9" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.07%)</title><rect x="28.9" y="1363.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/196385003.accept (2 samples, 1.07%)</title><rect x="28.9" y="1347.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 1.07%)</title><rect x="28.9" y="1331.0" width="12.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 1.07%)</title><rect x="28.9" y="1315.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.9" y="1326.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 1.07%)</title><rect x="28.9" y="1299.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.60%)</title><rect x="41.6" y="1395.0" width="18.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.6" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/225050537.accept (3 samples, 1.60%)</title><rect x="41.6" y="1379.0" width="18.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.6" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.60%)</title><rect x="41.6" y="1363.0" width="18.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.6" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (1 samples, 0.53%)</title><rect x="41.6" y="1347.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.53%)</title><rect x="41.6" y="1331.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.6" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.53%)</title><rect x="41.6" y="1315.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.53%)</title><rect x="41.6" y="1299.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.53%)</title><rect x="41.6" y="1283.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 1.07%)</title><rect x="47.9" y="1347.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 1.07%)</title><rect x="47.9" y="1331.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.07%)</title><rect x="47.9" y="1315.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.07%)</title><rect x="47.9" y="1299.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.53%)</title><rect x="54.2" y="1283.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.53%)</title><rect x="54.2" y="1267.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="57.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.67%)</title><rect x="60.5" y="1395.0" width="31.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.5" y="1406.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.67%)</title><rect x="60.5" y="1379.0" width="31.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.5" y="1390.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (3 samples, 1.60%)</title><rect x="60.5" y="1363.0" width="18.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.53%)</title><rect x="60.5" y="1347.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.53%)</title><rect x="60.5" y="1331.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.53%)</title><rect x="60.5" y="1315.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.53%)</title><rect x="60.5" y="1299.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.53%)</title><rect x="60.5" y="1283.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.53%)</title><rect x="60.5" y="1267.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.53%)</title><rect x="60.5" y="1251.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.53%)</title><rect x="60.5" y="1235.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.53%)</title><rect x="60.5" y="1219.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.53%)</title><rect x="60.5" y="1203.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.53%)</title><rect x="60.5" y="1187.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.5" y="1198.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.53%)</title><rect x="60.5" y="1171.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.5" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.53%)</title><rect x="60.5" y="1155.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.5" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.53%)</title><rect x="60.5" y="1139.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.5" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.53%)</title><rect x="60.5" y="1123.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.5" y="1134.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.53%)</title><rect x="60.5" y="1107.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.5" y="1118.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.53%)</title><rect x="60.5" y="1091.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.5" y="1102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.53%)</title><rect x="60.5" y="1075.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.5" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.53%)</title><rect x="60.5" y="1059.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (1 samples, 0.53%)</title><rect x="66.8" y="1347.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.53%)</title><rect x="66.8" y="1331.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.53%)</title><rect x="66.8" y="1315.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.53%)</title><rect x="66.8" y="1299.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.53%)</title><rect x="66.8" y="1283.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.53%)</title><rect x="66.8" y="1267.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.53%)</title><rect x="66.8" y="1251.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.53%)</title><rect x="66.8" y="1235.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.53%)</title><rect x="66.8" y="1219.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.53%)</title><rect x="66.8" y="1203.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.53%)</title><rect x="73.1" y="1347.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.1" y="1358.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.53%)</title><rect x="73.1" y="1331.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.1" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.53%)</title><rect x="73.1" y="1315.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.1" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.53%)</title><rect x="73.1" y="1299.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.07%)</title><rect x="79.4" y="1363.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.53%)</title><rect x="79.4" y="1347.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.53%)</title><rect x="79.4" y="1331.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.53%)</title><rect x="79.4" y="1315.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.4" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.53%)</title><rect x="79.4" y="1299.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.4" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.53%)</title><rect x="79.4" y="1283.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.4" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.53%)</title><rect x="79.4" y="1267.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.53%)</title><rect x="79.4" y="1251.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.4" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.53%)</title><rect x="79.4" y="1235.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.53%)</title><rect x="85.7" y="1347.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.53%)</title><rect x="85.7" y="1331.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.53%)</title><rect x="85.7" y="1315.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.canSendRequest (1 samples, 0.53%)</title><rect x="85.7" y="1299.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.isChannelReady (1 samples, 0.53%)</title><rect x="85.7" y="1283.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.7" y="1294.0"></text>
</g>
<g>
<title>java/lang/Thread.run (77 samples, 41.18%)</title><rect x="92.0" y="1443.0" width="485.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.0" y="1454.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (77 samples, 41.18%)</title><rect x="92.0" y="1427.0" width="485.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.0" y="1438.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (77 samples, 41.18%)</title><rect x="92.0" y="1411.0" width="485.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.0" y="1422.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/338725033.run (71 samples, 37.97%)</title><rect x="92.0" y="1395.0" width="448.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.0" y="1406.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (71 samples, 37.97%)</title><rect x="92.0" y="1379.0" width="448.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="95.0" y="1390.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (71 samples, 37.97%)</title><rect x="92.0" y="1363.0" width="448.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.0" y="1374.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (71 samples, 37.97%)</title><rect x="92.0" y="1347.0" width="448.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="95.0" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipelin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (3 samples, 1.60%)</title><rect x="104.7" y="1331.0" width="18.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.7" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.60%)</title><rect x="104.7" y="1315.0" width="18.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.60%)</title><rect x="104.7" y="1299.0" width="18.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.53%)</title><rect x="117.3" y="1283.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.53%)</title><rect x="117.3" y="1267.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.3" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$490/738268532.accept (1 samples, 0.53%)</title><rect x="117.3" y="1251.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (1 samples, 0.53%)</title><rect x="117.3" y="1235.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.53%)</title><rect x="117.3" y="1219.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.53%)</title><rect x="117.3" y="1203.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="120.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.53%)</title><rect x="117.3" y="1187.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.53%)</title><rect x="117.3" y="1171.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="120.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/1860083931.accept (1 samples, 0.53%)</title><rect x="117.3" y="1155.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (13 samples, 6.95%)</title><rect x="123.6" y="1331.0" width="82.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.6" y="1342.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (13 samples, 6.95%)</title><rect x="123.6" y="1315.0" width="82.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.6" y="1326.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (13 samples, 6.95%)</title><rect x="123.6" y="1299.0" width="82.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="126.6" y="1310.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 6.95%)</title><rect x="123.6" y="1283.0" width="82.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.6" y="1294.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (13 samples, 6.95%)</title><rect x="123.6" y="1267.0" width="82.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.6" y="1278.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (13 samples, 6.95%)</title><rect x="123.6" y="1251.0" width="82.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="126.6" y="1262.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.53%)</title><rect x="123.6" y="1235.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.53%)</title><rect x="123.6" y="1219.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.53%)</title><rect x="123.6" y="1203.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.53%)</title><rect x="123.6" y="1187.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.53%)</title><rect x="123.6" y="1171.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="126.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.53%)</title><rect x="123.6" y="1155.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="126.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.53%)</title><rect x="123.6" y="1139.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 5.88%)</title><rect x="129.9" y="1235.0" width="69.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.9" y="1246.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.07%)</title><rect x="129.9" y="1219.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 1.07%)</title><rect x="129.9" y="1203.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (9 samples, 4.81%)</title><rect x="142.5" y="1219.0" width="56.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="145.5" y="1230.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 4.81%)</title><rect x="142.5" y="1203.0" width="56.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.5" y="1214.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.60%)</title><rect x="142.5" y="1187.0" width="18.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="145.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.53%)</title><rect x="142.5" y="1171.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.53%)</title><rect x="142.5" y="1155.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="145.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.53%)</title><rect x="142.5" y="1139.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.53%)</title><rect x="148.8" y="1171.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.53%)</title><rect x="155.1" y="1171.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="158.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.53%)</title><rect x="155.1" y="1155.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="158.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 3.21%)</title><rect x="161.4" y="1187.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="164.4" y="1198.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 3.21%)</title><rect x="161.4" y="1171.0" width="37.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.4" y="1182.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 3.21%)</title><rect x="161.4" y="1155.0" width="37.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.4" y="1166.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.60%)</title><rect x="167.8" y="1139.0" width="18.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.53%)</title><rect x="180.4" y="1123.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="183.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.53%)</title><rect x="180.4" y="1107.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.53%)</title><rect x="180.4" y="1091.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="183.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.53%)</title><rect x="180.4" y="1075.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.53%)</title><rect x="186.7" y="1139.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.53%)</title><rect x="186.7" y="1123.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.53%)</title><rect x="186.7" y="1107.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.53%)</title><rect x="186.7" y="1091.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.53%)</title><rect x="186.7" y="1075.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.7" y="1086.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.53%)</title><rect x="186.7" y="1059.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.53%)</title><rect x="193.0" y="1139.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.53%)</title><rect x="193.0" y="1123.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.53%)</title><rect x="193.0" y="1107.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.0" y="1118.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.53%)</title><rect x="193.0" y="1091.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.53%)</title><rect x="199.3" y="1235.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.53%)</title><rect x="199.3" y="1219.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.53%)</title><rect x="199.3" y="1203.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.53%)</title><rect x="199.3" y="1187.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.53%)</title><rect x="199.3" y="1171.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (52 samples, 27.81%)</title><rect x="205.6" y="1331.0" width="328.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.6" y="1342.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (2 samples, 1.07%)</title><rect x="205.6" y="1315.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.6" y="1326.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.07%)</title><rect x="205.6" y="1299.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.6" y="1310.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.07%)</title><rect x="205.6" y="1283.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.53%)</title><rect x="205.6" y="1267.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.6" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.53%)</title><rect x="211.9" y="1267.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.9" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.53%)</title><rect x="211.9" y="1251.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.9" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.53%)</title><rect x="211.9" y="1235.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (9 samples, 4.81%)</title><rect x="218.2" y="1315.0" width="56.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.2" y="1326.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (9 samples, 4.81%)</title><rect x="218.2" y="1299.0" width="56.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.2" y="1310.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.14%)</title><rect x="230.9" y="1283.0" width="25.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.9" y="1294.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.14%)</title><rect x="230.9" y="1267.0" width="25.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.9" y="1278.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.07%)</title><rect x="243.5" y="1251.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.5" y="1262.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.53%)</title><rect x="249.8" y="1235.0" width="6.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="252.8" y="1246.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.60%)</title><rect x="256.1" y="1283.0" width="18.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.1" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.60%)</title><rect x="256.1" y="1267.0" width="18.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="259.1" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.60%)</title><rect x="256.1" y="1251.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.1" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.60%)</title><rect x="256.1" y="1235.0" width="18.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.1" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.53%)</title><rect x="256.1" y="1219.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="259.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.07%)</title><rect x="262.4" y="1219.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (37 samples, 19.79%)</title><rect x="275.0" y="1315.0" width="233.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.0" y="1326.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (37 samples, 19.79%)</title><rect x="275.0" y="1299.0" width="233.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.0" y="1310.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/1703245346.process (30 samples, 16.04%)</title><rect x="281.3" y="1283.0" width="189.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.3" y="1294.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (30 samples, 16.04%)</title><rect x="281.3" y="1267.0" width="189.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="284.3" y="1278.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (29 samples, 15.51%)</title><rect x="281.3" y="1251.0" width="183.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.3" y="1262.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.53%)</title><rect x="281.3" y="1235.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.3" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.53%)</title><rect x="281.3" y="1219.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.3" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.53%)</title><rect x="281.3" y="1203.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.3" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.53%)</title><rect x="281.3" y="1187.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.53%)</title><rect x="281.3" y="1171.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (28 samples, 14.97%)</title><rect x="287.6" y="1235.0" width="176.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.6" y="1246.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (26 samples, 13.90%)</title><rect x="287.6" y="1219.0" width="164.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.6" y="1230.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (26 samples, 13.90%)</title><rect x="287.6" y="1203.0" width="164.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="290.6" y="1214.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.53%)</title><rect x="287.6" y="1187.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="290.6" y="1198.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (3 samples, 1.60%)</title><rect x="294.0" y="1187.0" width="18.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="297.0" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.253] (1 samples, 0.53%)</title><rect x="312.9" y="1187.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="315.9" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.60%)</title><rect x="319.2" y="1187.0" width="18.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="322.2" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 4.28%)</title><rect x="338.1" y="1187.0" width="50.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="341.1" y="1198.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.53%)</title><rect x="388.6" y="1187.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="391.6" y="1198.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (9 samples, 4.81%)</title><rect x="394.9" y="1187.0" width="56.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="397.9" y="1198.0">os::sl..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 1.07%)</title><rect x="420.2" y="1171.0" width="12.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="423.2" y="1182.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.53%)</title><rect x="426.5" y="1155.0" width="6.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="429.5" y="1166.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.53%)</title><rect x="432.8" y="1171.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="435.8" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.53%)</title><rect x="439.1" y="1171.0" width="6.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="442.1" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="439.1" y="1155.0" width="6.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="442.1" y="1166.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.53%)</title><rect x="445.4" y="1171.0" width="6.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="448.4" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.07%)</title><rect x="451.7" y="1219.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="454.7" y="1230.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.07%)</title><rect x="451.7" y="1203.0" width="12.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="454.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.53%)</title><rect x="464.3" y="1251.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="467.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.53%)</title><rect x="464.3" y="1235.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="467.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.53%)</title><rect x="464.3" y="1219.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="467.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 1.60%)</title><rect x="470.6" y="1283.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 1.60%)</title><rect x="470.6" y="1267.0" width="19.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="473.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.53%)</title><rect x="489.6" y="1283.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.53%)</title><rect x="489.6" y="1267.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.53%)</title><rect x="489.6" y="1251.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="492.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.53%)</title><rect x="489.6" y="1235.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.53%)</title><rect x="489.6" y="1219.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="492.6" y="1230.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.53%)</title><rect x="489.6" y="1203.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.53%)</title><rect x="495.9" y="1283.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.9" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.53%)</title><rect x="495.9" y="1267.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="498.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.53%)</title><rect x="495.9" y="1251.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="498.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.53%)</title><rect x="495.9" y="1235.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="498.9" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.53%)</title><rect x="502.2" y="1283.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="505.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.14%)</title><rect x="508.5" y="1315.0" width="25.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.5" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.14%)</title><rect x="508.5" y="1299.0" width="25.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="511.5" y="1310.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.53%)</title><rect x="527.4" y="1283.0" width="6.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="530.4" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="527.4" y="1267.0" width="6.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="530.4" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.53%)</title><rect x="533.7" y="1331.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="536.7" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="533.7" y="1315.0" width="6.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="536.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.53%)</title><rect x="540.1" y="1395.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="543.1" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.53%)</title><rect x="540.1" y="1379.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="543.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.53%)</title><rect x="540.1" y="1363.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.53%)</title><rect x="540.1" y="1347.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="543.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.67%)</title><rect x="546.4" y="1395.0" width="31.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.4" y="1406.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 2.67%)</title><rect x="546.4" y="1379.0" width="31.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="549.4" y="1390.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.60%)</title><rect x="559.0" y="1363.0" width="18.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="562.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.60%)</title><rect x="559.0" y="1347.0" width="18.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.60%)</title><rect x="559.0" y="1331.0" width="18.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.60%)</title><rect x="559.0" y="1315.0" width="18.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="562.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 1.07%)</title><rect x="577.9" y="1443.0" width="12.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="580.9" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.53%)</title><rect x="584.2" y="1427.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="587.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.53%)</title><rect x="584.2" y="1411.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="587.2" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.53%)</title><rect x="584.2" y="1395.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.53%)</title><rect x="584.2" y="1379.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.2" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.53%)</title><rect x="584.2" y="1363.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.2" y="1374.0"></text>
</g>
<g>
<title>start_thread (95 samples, 50.80%)</title><rect x="590.5" y="1443.0" width="599.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="593.5" y="1454.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (95 samples, 50.80%)</title><rect x="590.5" y="1427.0" width="599.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="593.5" y="1438.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (95 samples, 50.80%)</title><rect x="590.5" y="1411.0" width="599.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="593.5" y="1422.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 8.02%)</title><rect x="590.5" y="1395.0" width="94.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="593.5" y="1406.0">GangWorker:..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 8.02%)</title><rect x="590.5" y="1379.0" width="94.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="593.5" y="1390.0">G1ParTask::..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 6.95%)</title><rect x="590.5" y="1363.0" width="82.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="593.5" y="1374.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 3.21%)</title><rect x="634.7" y="1347.0" width="37.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="637.7" y="1358.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 2.14%)</title><rect x="647.3" y="1331.0" width="25.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="650.3" y="1342.0">G..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.53%)</title><rect x="666.3" y="1315.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="669.3" y="1326.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 1.07%)</title><rect x="672.6" y="1363.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="675.6" y="1374.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 1.07%)</title><rect x="672.6" y="1347.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="675.6" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 1.07%)</title><rect x="672.6" y="1331.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="675.6" y="1342.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 1.07%)</title><rect x="672.6" y="1315.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="675.6" y="1326.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 1.07%)</title><rect x="672.6" y="1299.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="675.6" y="1310.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.53%)</title><rect x="672.6" y="1283.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="675.6" y="1294.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.53%)</title><rect x="678.9" y="1283.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="681.9" y="1294.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.53%)</title><rect x="678.9" y="1267.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="681.9" y="1278.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.536] (1 samples, 0.53%)</title><rect x="678.9" y="1251.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="681.9" y="1262.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (80 samples, 42.78%)</title><rect x="685.2" y="1395.0" width="504.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="688.2" y="1406.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (80 samples, 42.78%)</title><rect x="685.2" y="1379.0" width="504.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="688.2" y="1390.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (80 samples, 42.78%)</title><rect x="685.2" y="1363.0" width="504.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="688.2" y="1374.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (78 samples, 41.71%)</title><rect x="685.2" y="1347.0" width="492.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="688.2" y="1358.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.53%)</title><rect x="685.2" y="1331.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="688.2" y="1342.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (77 samples, 41.18%)</title><rect x="691.5" y="1331.0" width="485.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="694.5" y="1342.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (42 samples, 22.46%)</title><rect x="691.5" y="1315.0" width="265.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="694.5" y="1326.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.53%)</title><rect x="691.5" y="1299.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="694.5" y="1310.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.53%)</title><rect x="691.5" y="1283.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="694.5" y="1294.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.07%)</title><rect x="697.8" y="1299.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="700.8" y="1310.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.53%)</title><rect x="697.8" y="1283.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="700.8" y="1294.0"></text>
</g>
<g>
<title>indPosIndexScaleOffsetOper::scale() const (1 samples, 0.53%)</title><rect x="704.1" y="1283.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="707.1" y="1294.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.67%)</title><rect x="710.4" y="1299.0" width="31.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="713.4" y="1310.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.67%)</title><rect x="710.4" y="1283.0" width="31.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="713.4" y="1294.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 1.07%)</title><rect x="710.4" y="1267.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="713.4" y="1278.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.60%)</title><rect x="723.0" y="1267.0" width="19.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.0" y="1278.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.53%)</title><rect x="723.0" y="1251.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="726.0" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.53%)</title><rect x="723.0" y="1235.0" width="6.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="726.0" y="1246.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.53%)</title><rect x="729.4" y="1251.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="732.4" y="1262.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.53%)</title><rect x="735.7" y="1251.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="738.7" y="1262.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.53%)</title><rect x="735.7" y="1235.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="738.7" y="1246.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.53%)</title><rect x="735.7" y="1219.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="738.7" y="1230.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.53%)</title><rect x="735.7" y="1203.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="738.7" y="1214.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.53%)</title><rect x="735.7" y="1187.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="738.7" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 2.14%)</title><rect x="742.0" y="1299.0" width="25.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="745.0" y="1310.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 2.14%)</title><rect x="742.0" y="1283.0" width="25.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.0" y="1294.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.53%)</title><rect x="742.0" y="1267.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="745.0" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.53%)</title><rect x="742.0" y="1251.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="745.0" y="1262.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.53%)</title><rect x="742.0" y="1235.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="745.0" y="1246.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.53%)</title><rect x="742.0" y="1219.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="745.0" y="1230.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.53%)</title><rect x="742.0" y="1203.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="745.0" y="1214.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.60%)</title><rect x="748.3" y="1267.0" width="18.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="751.3" y="1278.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.60%)</title><rect x="748.3" y="1251.0" width="18.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="751.3" y="1262.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.53%)</title><rect x="754.6" y="1235.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="757.6" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="760.9" y="1235.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="763.9" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 16.04%)</title><rect x="767.2" y="1299.0" width="189.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="770.2" y="1310.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.60%)</title><rect x="767.2" y="1283.0" width="18.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="770.2" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="767.2" y="1267.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.2" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.53%)</title><rect x="773.5" y="1267.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="776.5" y="1278.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.53%)</title><rect x="773.5" y="1251.0" width="6.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="776.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.53%)</title><rect x="779.8" y="1267.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="782.8" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.53%)</title><rect x="786.1" y="1283.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="789.1" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.53%)</title><rect x="786.1" y="1267.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="789.1" y="1278.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="786.1" y="1251.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="789.1" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.14%)</title><rect x="792.5" y="1283.0" width="25.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="795.5" y="1294.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 2.67%)</title><rect x="817.7" y="1283.0" width="31.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="820.7" y="1294.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.53%)</title><rect x="830.3" y="1267.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="833.3" y="1278.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="830.3" y="1251.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="833.3" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 1.07%)</title><rect x="836.6" y="1267.0" width="12.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="839.6" y="1278.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 1.07%)</title><rect x="836.6" y="1251.0" width="12.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="839.6" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 1.07%)</title><rect x="849.3" y="1283.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="852.3" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.07%)</title><rect x="849.3" y="1267.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="852.3" y="1278.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.53%)</title><rect x="855.6" y="1251.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="858.6" y="1262.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.53%)</title><rect x="855.6" y="1235.0" width="6.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="858.6" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.60%)</title><rect x="861.9" y="1283.0" width="18.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="864.9" y="1294.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.53%)</title><rect x="874.5" y="1267.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="877.5" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.53%)</title><rect x="880.8" y="1283.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="883.8" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.60%)</title><rect x="887.1" y="1283.0" width="18.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="890.1" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.53%)</title><rect x="899.7" y="1267.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="902.7" y="1278.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.53%)</title><rect x="906.0" y="1283.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="909.0" y="1294.0"></text>
</g>
<g>
<title>encodeHeapOop_not_nullNode::ideal_Opcode() const (1 samples, 0.53%)</title><rect x="906.0" y="1267.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="909.0" y="1278.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.07%)</title><rect x="912.4" y="1283.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.4" y="1294.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.07%)</title><rect x="912.4" y="1267.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="915.4" y="1278.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.53%)</title><rect x="912.4" y="1251.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="915.4" y="1262.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.53%)</title><rect x="918.7" y="1251.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.07%)</title><rect x="925.0" y="1283.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.0" y="1294.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.07%)</title><rect x="925.0" y="1267.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="928.0" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.53%)</title><rect x="937.6" y="1283.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="940.6" y="1294.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.53%)</title><rect x="937.6" y="1267.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="940.6" y="1278.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.07%)</title><rect x="943.9" y="1283.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="946.9" y="1294.0"></text>
</g>
<g>
<title>Compile::Optimize() (27 samples, 14.44%)</title><rect x="956.5" y="1315.0" width="170.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="959.5" y="1326.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.53%)</title><rect x="956.5" y="1299.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.5" y="1310.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.53%)</title><rect x="956.5" y="1283.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.5" y="1294.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.53%)</title><rect x="956.5" y="1267.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.5" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="956.5" y="1251.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="959.5" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="956.5" y="1235.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="959.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="956.5" y="1219.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="956.5" y="1203.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="959.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="956.5" y="1187.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="959.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="956.5" y="1171.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="959.5" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="956.5" y="1155.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.5" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="956.5" y="1139.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="959.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="956.5" y="1123.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="959.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="956.5" y="1107.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="959.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="956.5" y="1091.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="959.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="956.5" y="1075.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="959.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="956.5" y="1059.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="959.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="956.5" y="1043.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="959.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="956.5" y="1027.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="959.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="956.5" y="1011.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="959.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="956.5" y="995.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="959.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="956.5" y="979.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="959.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="956.5" y="963.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="959.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="956.5" y="947.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="959.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="956.5" y="931.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="959.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="956.5" y="915.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="956.5" y="899.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="956.5" y="883.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="959.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="956.5" y="867.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="959.5" y="878.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.53%)</title><rect x="956.5" y="851.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.5" y="862.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.53%)</title><rect x="956.5" y="835.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="959.5" y="846.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.53%)</title><rect x="956.5" y="819.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="959.5" y="830.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (8 samples, 4.28%)</title><rect x="962.8" y="1299.0" width="50.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="965.8" y="1310.0">Compi..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (8 samples, 4.28%)</title><rect x="962.8" y="1283.0" width="50.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="965.8" y="1294.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.07%)</title><rect x="962.8" y="1267.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.8" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 2.67%)</title><rect x="975.5" y="1267.0" width="31.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="978.5" y="1278.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.67%)</title><rect x="975.5" y="1251.0" width="31.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="978.5" y="1262.0">Ph..</text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.53%)</title><rect x="975.5" y="1235.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 2.14%)</title><rect x="981.8" y="1235.0" width="25.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="984.8" y="1246.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 2.14%)</title><rect x="981.8" y="1219.0" width="25.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.8" y="1230.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.53%)</title><rect x="1007.0" y="1267.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1010.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.07%)</title><rect x="1013.3" y="1299.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1016.3" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.07%)</title><rect x="1013.3" y="1283.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1016.3" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::add_edge(PointsToNode*, PointsToNode*) [clone .isra.196] (1 samples, 0.53%)</title><rect x="1013.3" y="1267.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.3" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1019.6" y="1267.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1019.6" y="1251.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1022.6" y="1262.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.53%)</title><rect x="1019.6" y="1235.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.6" y="1246.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.53%)</title><rect x="1025.9" y="1299.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (10 samples, 5.35%)</title><rect x="1032.2" y="1299.0" width="63.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.2" y="1310.0">PhaseId..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.53%)</title><rect x="1032.2" y="1283.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.2" y="1294.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.53%)</title><rect x="1032.2" y="1267.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.2" y="1278.0"></text>
</g>
<g>
<title>IdealLoopTree::remove_safepoints(PhaseIdealLoop*, bool) (1 samples, 0.53%)</title><rect x="1032.2" y="1251.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1035.2" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.53%)</title><rect x="1038.6" y="1283.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1041.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 2.67%)</title><rect x="1044.9" y="1283.0" width="31.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1047.9" y="1294.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.14%)</title><rect x="1051.2" y="1267.0" width="25.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1054.2" y="1278.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 2.14%)</title><rect x="1051.2" y="1251.0" width="25.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.2" y="1262.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 1.60%)</title><rect x="1057.5" y="1235.0" width="18.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.53%)</title><rect x="1076.4" y="1283.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1079.4" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.53%)</title><rect x="1076.4" y="1267.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.4" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.53%)</title><rect x="1076.4" y="1251.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1079.4" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.07%)</title><rect x="1082.7" y="1283.0" width="12.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.7" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.07%)</title><rect x="1082.7" y="1267.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1085.7" y="1278.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 1.07%)</title><rect x="1082.7" y="1251.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.53%)</title><rect x="1082.7" y="1235.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.7" y="1246.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.53%)</title><rect x="1089.0" y="1235.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.14%)</title><rect x="1095.3" y="1299.0" width="25.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.3" y="1310.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.14%)</title><rect x="1095.3" y="1283.0" width="25.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.3" y="1294.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1095.3" y="1267.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.3" y="1278.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.53%)</title><rect x="1095.3" y="1251.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.3" y="1262.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.53%)</title><rect x="1095.3" y="1235.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.3" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.53%)</title><rect x="1095.3" y="1219.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.3" y="1230.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.53%)</title><rect x="1095.3" y="1203.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.3" y="1214.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.53%)</title><rect x="1095.3" y="1187.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.3" y="1198.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.53%)</title><rect x="1095.3" y="1171.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.3" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.53%)</title><rect x="1095.3" y="1155.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.3" y="1166.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1101.7" y="1267.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.7" y="1278.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.53%)</title><rect x="1101.7" y="1251.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.7" y="1262.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 1.07%)</title><rect x="1108.0" y="1267.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.0" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (2 samples, 1.07%)</title><rect x="1108.0" y="1251.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.0" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.07%)</title><rect x="1108.0" y="1235.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1111.0" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.07%)</title><rect x="1108.0" y="1219.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.0" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.07%)</title><rect x="1108.0" y="1203.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.0" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.07%)</title><rect x="1108.0" y="1187.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.0" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.07%)</title><rect x="1108.0" y="1171.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.0" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.07%)</title><rect x="1108.0" y="1155.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.0" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="1139.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1111.0" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="1123.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.0" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="1107.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.0" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="1091.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.0" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="1075.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.0" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="1059.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.0" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="1043.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.0" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="1027.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.0" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="1011.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.0" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.53%)</title><rect x="1108.0" y="995.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.0" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1108.0" y="979.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.0" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.53%)</title><rect x="1114.3" y="1139.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.3" y="1150.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.53%)</title><rect x="1114.3" y="1123.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.3" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.53%)</title><rect x="1120.6" y="1299.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.6" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.53%)</title><rect x="1120.6" y="1283.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.6" y="1294.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.53%)</title><rect x="1120.6" y="1267.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.6" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::coalesce_subword_stores(long, Node*, PhaseGVN*) (1 samples, 0.53%)</title><rect x="1120.6" y="1251.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.6" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.21%)</title><rect x="1126.9" y="1315.0" width="37.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.9" y="1326.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.21%)</title><rect x="1126.9" y="1299.0" width="37.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.9" y="1310.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.21%)</title><rect x="1126.9" y="1283.0" width="37.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="1294.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.21%)</title><rect x="1126.9" y="1267.0" width="37.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.9" y="1278.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.21%)</title><rect x="1126.9" y="1251.0" width="37.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.9" y="1262.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.21%)</title><rect x="1126.9" y="1235.0" width="37.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.9" y="1246.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.21%)</title><rect x="1126.9" y="1219.0" width="37.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.9" y="1230.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.21%)</title><rect x="1126.9" y="1203.0" width="37.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="1214.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.21%)</title><rect x="1126.9" y="1187.0" width="37.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.9" y="1198.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.21%)</title><rect x="1126.9" y="1171.0" width="37.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.9" y="1182.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.21%)</title><rect x="1126.9" y="1155.0" width="37.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.9" y="1166.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.21%)</title><rect x="1126.9" y="1139.0" width="37.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.9" y="1150.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.07%)</title><rect x="1126.9" y="1123.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.07%)</title><rect x="1126.9" y="1107.0" width="12.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.07%)</title><rect x="1126.9" y="1091.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.07%)</title><rect x="1126.9" y="1075.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.07%)</title><rect x="1126.9" y="1059.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.07%)</title><rect x="1126.9" y="1043.0" width="12.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.9" y="1054.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1126.9" y="1027.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.9" y="1038.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.53%)</title><rect x="1126.9" y="1011.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.9" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.2" y="1027.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.2" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1133.2" y="1011.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1133.2" y="995.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1133.2" y="979.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1133.2" y="963.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1133.2" y="947.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.2" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.2" y="931.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.2" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1133.2" y="915.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1133.2" y="899.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1133.2" y="883.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1133.2" y="867.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1133.2" y="851.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.2" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.2" y="835.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.2" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1133.2" y="819.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1133.2" y="803.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1133.2" y="787.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1133.2" y="771.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1133.2" y="755.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1133.2" y="739.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.2" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1133.2" y="723.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1133.2" y="707.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1133.2" y="691.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1133.2" y="675.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="1133.2" y="659.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="1133.2" y="643.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.2" y="654.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.53%)</title><rect x="1133.2" y="627.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.2" y="638.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.53%)</title><rect x="1133.2" y="611.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.2" y="622.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.53%)</title><rect x="1133.2" y="595.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.2" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.53%)</title><rect x="1133.2" y="579.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.2" y="590.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.53%)</title><rect x="1133.2" y="563.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.2" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 2.14%)</title><rect x="1139.5" y="1123.0" width="25.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.5" y="1134.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.14%)</title><rect x="1139.5" y="1107.0" width="25.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.5" y="1118.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.14%)</title><rect x="1139.5" y="1091.0" width="25.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.5" y="1102.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.14%)</title><rect x="1139.5" y="1075.0" width="25.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.5" y="1086.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.14%)</title><rect x="1139.5" y="1059.0" width="25.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.5" y="1070.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.14%)</title><rect x="1139.5" y="1043.0" width="25.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.5" y="1054.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.14%)</title><rect x="1139.5" y="1027.0" width="25.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.5" y="1038.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1139.5" y="1011.0" width="18.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.5" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.60%)</title><rect x="1139.5" y="995.0" width="18.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.60%)</title><rect x="1139.5" y="979.0" width="18.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.60%)</title><rect x="1139.5" y="963.0" width="18.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.60%)</title><rect x="1139.5" y="947.0" width="18.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.60%)</title><rect x="1139.5" y="931.0" width="18.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.5" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1139.5" y="915.0" width="18.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.5" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.60%)</title><rect x="1139.5" y="899.0" width="18.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.60%)</title><rect x="1139.5" y="883.0" width="18.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.60%)</title><rect x="1139.5" y="867.0" width="18.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.60%)</title><rect x="1139.5" y="851.0" width="18.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.60%)</title><rect x="1139.5" y="835.0" width="18.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.5" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1139.5" y="819.0" width="18.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.5" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.60%)</title><rect x="1139.5" y="803.0" width="18.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.60%)</title><rect x="1139.5" y="787.0" width="18.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.60%)</title><rect x="1139.5" y="771.0" width="18.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.60%)</title><rect x="1139.5" y="755.0" width="18.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.60%)</title><rect x="1139.5" y="739.0" width="18.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.5" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.53%)</title><rect x="1139.5" y="723.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.5" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.53%)</title><rect x="1139.5" y="707.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.5" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.53%)</title><rect x="1139.5" y="691.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.53%)</title><rect x="1139.5" y="675.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.53%)</title><rect x="1139.5" y="659.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.5" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="1139.5" y="643.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.5" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="1139.5" y="627.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.53%)</title><rect x="1139.5" y="611.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.53%)</title><rect x="1139.5" y="595.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.5" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.53%)</title><rect x="1139.5" y="579.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.5" y="590.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, ciSymbol*, ciMethodType*) (1 samples, 0.53%)</title><rect x="1139.5" y="563.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.5" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.53%)</title><rect x="1139.5" y="547.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.5" y="558.0"></text>
</g>
<g>
<title>Klass::is_klass() const volatile (1 samples, 0.53%)</title><rect x="1139.5" y="531.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.07%)</title><rect x="1145.8" y="723.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.07%)</title><rect x="1145.8" y="707.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.07%)</title><rect x="1145.8" y="691.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.07%)</title><rect x="1145.8" y="675.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.07%)</title><rect x="1145.8" y="659.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.07%)</title><rect x="1145.8" y="643.0" width="12.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1145.8" y="627.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1145.8" y="611.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1145.8" y="595.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1145.8" y="579.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1145.8" y="563.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1145.8" y="547.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1145.8" y="531.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1145.8" y="515.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1145.8" y="499.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1145.8" y="483.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1145.8" y="467.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="1145.8" y="451.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="1145.8" y="435.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.8" y="446.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.53%)</title><rect x="1145.8" y="419.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.8" y="430.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.53%)</title><rect x="1145.8" y="403.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.8" y="414.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.53%)</title><rect x="1145.8" y="387.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.8" y="398.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.53%)</title><rect x="1145.8" y="371.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.8" y="382.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.53%)</title><rect x="1145.8" y="355.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.8" y="366.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.53%)</title><rect x="1145.8" y="339.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.8" y="350.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.53%)</title><rect x="1145.8" y="323.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.8" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.53%)</title><rect x="1145.8" y="307.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.8" y="318.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.53%)</title><rect x="1145.8" y="291.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.8" y="302.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.53%)</title><rect x="1145.8" y="275.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.8" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1152.1" y="627.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1152.1" y="611.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1152.1" y="595.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1152.1" y="579.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1152.1" y="563.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1152.1" y="547.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1152.1" y="531.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1152.1" y="515.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1152.1" y="499.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1152.1" y="483.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1152.1" y="467.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1152.1" y="451.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1152.1" y="435.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1152.1" y="419.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1152.1" y="403.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1152.1" y="387.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1152.1" y="371.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1152.1" y="355.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1152.1" y="339.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1152.1" y="323.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1152.1" y="307.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1152.1" y="291.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1152.1" y="275.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1152.1" y="259.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1152.1" y="243.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1152.1" y="227.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1152.1" y="211.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.1" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1152.1" y="195.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1152.1" y="179.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1152.1" y="163.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1152.1" y="147.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.53%)</title><rect x="1152.1" y="131.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="142.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.53%)</title><rect x="1152.1" y="115.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.53%)</title><rect x="1152.1" y="99.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.1" y="110.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.53%)</title><rect x="1152.1" y="83.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.1" y="94.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.53%)</title><rect x="1152.1" y="67.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.1" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.53%)</title><rect x="1152.1" y="51.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.1" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.53%)</title><rect x="1152.1" y="35.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1158.4" y="1011.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.4" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1158.4" y="995.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.4" y="1006.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.53%)</title><rect x="1158.4" y="979.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.4" y="990.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.53%)</title><rect x="1158.4" y="963.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.4" y="974.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.53%)</title><rect x="1158.4" y="947.0" width="6.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1161.4" y="958.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.53%)</title><rect x="1164.8" y="1315.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.8" y="1326.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.53%)</title><rect x="1164.8" y="1299.0" width="6.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1167.8" y="1310.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.53%)</title><rect x="1171.1" y="1315.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.1" y="1326.0"></text>
</g>
<g>
<title>ciMethodData::load_remaining_extra_data() (1 samples, 0.53%)</title><rect x="1171.1" y="1299.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.1" y="1310.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 1.07%)</title><rect x="1177.4" y="1347.0" width="12.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1358.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 1.07%)</title><rect x="1177.4" y="1331.0" width="12.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="1342.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.07%)</title><rect x="1177.4" y="1315.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="1326.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.07%)</title><rect x="1177.4" y="1299.0" width="12.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="1310.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.53%)</title><rect x="1177.4" y="1283.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="1294.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.53%)</title><rect x="1177.4" y="1267.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="1278.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.53%)</title><rect x="1177.4" y="1251.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.53%)</title><rect x="1177.4" y="1235.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.53%)</title><rect x="1177.4" y="1219.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.53%)</title><rect x="1177.4" y="1203.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.53%)</title><rect x="1177.4" y="1187.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.53%)</title><rect x="1177.4" y="1171.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.53%)</title><rect x="1177.4" y="1155.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.53%)</title><rect x="1177.4" y="1139.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.53%)</title><rect x="1177.4" y="1123.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.53%)</title><rect x="1177.4" y="1107.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.53%)</title><rect x="1177.4" y="1091.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.53%)</title><rect x="1177.4" y="1075.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.53%)</title><rect x="1177.4" y="1059.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.53%)</title><rect x="1177.4" y="1043.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.53%)</title><rect x="1177.4" y="1027.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.53%)</title><rect x="1177.4" y="1011.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.53%)</title><rect x="1177.4" y="995.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.53%)</title><rect x="1177.4" y="979.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.53%)</title><rect x="1177.4" y="963.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.53%)</title><rect x="1177.4" y="947.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.53%)</title><rect x="1177.4" y="931.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1177.4" y="915.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1177.4" y="899.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1177.4" y="883.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="894.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.53%)</title><rect x="1177.4" y="867.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.53%)</title><rect x="1183.7" y="1283.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="1294.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.53%)</title><rect x="1183.7" y="1267.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="1278.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.53%)</title><rect x="1183.7" y="1251.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="1262.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.53%)</title><rect x="1183.7" y="1235.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="1246.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.53%)</title><rect x="1183.7" y="1219.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="1230.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.53%)</title><rect x="1183.7" y="1203.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="1214.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.53%)</title><rect x="1183.7" y="1187.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.7" y="1198.0"></text>
</g>
</g>
</svg>
