<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,010 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="2035.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="2019.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="2003.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1987.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1971.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1955.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1939.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1923.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1907.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1891.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1875.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1859.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1827.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1811.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1795.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1779.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1763.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1747.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1731.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1715.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1699.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1683.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1667.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1651.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1635.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1619.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1603.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1587.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1571.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1555.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1539.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1523.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1507.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1491.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1475.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1459.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1443.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1427.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1411.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1395.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1379.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1363.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1347.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1331.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1315.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1299.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1283.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1267.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1251.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1235.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1219.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1203.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1187.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1171.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1155.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1139.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1123.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1107.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1091.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1075.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1059.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1043.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1027.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="1011.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="995.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="979.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="963.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="947.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="931.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="915.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="899.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="883.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="867.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="851.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="835.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="819.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="787.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="771.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="755.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="739.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="723.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="707.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="675.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="643.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="611.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="515.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="499.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="483.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="451.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="435.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="419.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="387.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="371.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="355.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="339.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="307.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="291.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="275.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="259.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="243.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="227.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="211.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="195.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="179.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="163.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="147.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="131.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="115.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="99.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="83.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="67.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="51.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="10.0" y="35.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.20%)</title><rect x="11.2" y="2035.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.2" y="2046.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="11.2" y="2019.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="2030.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.20%)</title><rect x="11.2" y="2003.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.2" y="2014.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.10%)</title><rect x="11.2" y="1987.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.2" y="1998.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="11.2" y="1971.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="1982.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="12.3" y="1987.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.3" y="1998.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.10%)</title><rect x="12.3" y="1971.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.3" y="1982.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.10%)</title><rect x="12.3" y="1955.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.3" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (240 samples, 23.76%)</title><rect x="13.5" y="2035.0" width="280.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.5" y="2046.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (240 samples, 23.76%)</title><rect x="13.5" y="2019.0" width="280.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.5" y="2030.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.10%)</title><rect x="13.5" y="2003.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.10%)</title><rect x="13.5" y="1987.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.10%)</title><rect x="13.5" y="1971.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.10%)</title><rect x="13.5" y="1955.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="13.5" y="1939.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="13.5" y="1923.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="13.5" y="1907.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="13.5" y="1891.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="13.5" y="1875.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="13.5" y="1859.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="13.5" y="1843.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="13.5" y="1827.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.10%)</title><rect x="13.5" y="1811.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.5" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.10%)</title><rect x="13.5" y="1795.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (237 samples, 23.47%)</title><rect x="14.7" y="2003.0" width="276.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.7" y="2014.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.20%)</title><rect x="14.7" y="1987.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.7" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.20%)</title><rect x="14.7" y="1971.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="14.7" y="1955.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.7" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.10%)</title><rect x="14.7" y="1939.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.7" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="15.8" y="1939.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.8" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="15.8" y="1923.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="15.8" y="1907.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="15.8" y="1891.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="15.8" y="1875.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="18.8" y="1886.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="15.8" y="1859.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="18.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.20%)</title><rect x="17.0" y="1987.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.0" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.20%)</title><rect x="17.0" y="1971.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.0" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.20%)</title><rect x="17.0" y="1955.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$241/450263723.accept (2 samples, 0.20%)</title><rect x="17.0" y="1939.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.0" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.20%)</title><rect x="17.0" y="1923.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.20%)</title><rect x="17.0" y="1907.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.0" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.20%)</title><rect x="17.0" y="1891.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="19.3" y="1987.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.3" y="1998.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="19.3" y="1971.0" width="1.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="22.3" y="1982.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="19.3" y="1955.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="22.3" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (186 samples, 18.42%)</title><rect x="20.5" y="1987.0" width="217.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.5" y="1998.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$240/994942758.accept (182 samples, 18.02%)</title><rect x="20.5" y="1971.0" width="212.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.5" y="1982.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (182 samples, 18.02%)</title><rect x="20.5" y="1955.0" width="212.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.5" y="1966.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (165 samples, 16.34%)</title><rect x="20.5" y="1939.0" width="192.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.5" y="1950.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (165 samples, 16.34%)</title><rect x="20.5" y="1923.0" width="192.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.5" y="1934.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (165 samples, 16.34%)</title><rect x="20.5" y="1907.0" width="192.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.5" y="1918.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (165 samples, 16.34%)</title><rect x="20.5" y="1891.0" width="192.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.5" y="1902.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (165 samples, 16.34%)</title><rect x="20.5" y="1875.0" width="192.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.5" y="1886.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (165 samples, 16.34%)</title><rect x="20.5" y="1859.0" width="192.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.5" y="1870.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (125 samples, 12.38%)</title><rect x="20.5" y="1843.0" width="146.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.5" y="1854.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.88%)</title><rect x="20.5" y="1827.0" width="22.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.5" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.88%)</title><rect x="20.5" y="1811.0" width="22.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.5" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.88%)</title><rect x="20.5" y="1795.0" width="22.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.5" y="1806.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.10%)</title><rect x="42.7" y="1827.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.7" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.10%)</title><rect x="42.7" y="1811.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.10%)</title><rect x="42.7" y="1795.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="45.7" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.10%)</title><rect x="42.7" y="1779.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="45.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (105 samples, 10.40%)</title><rect x="43.9" y="1827.0" width="122.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.9" y="1838.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (105 samples, 10.40%)</title><rect x="43.9" y="1811.0" width="122.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="46.9" y="1822.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (105 samples, 10.40%)</title><rect x="43.9" y="1795.0" width="122.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.9" y="1806.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (105 samples, 10.40%)</title><rect x="43.9" y="1779.0" width="122.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.9" y="1790.0">java/util/concu..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (105 samples, 10.40%)</title><rect x="43.9" y="1763.0" width="122.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.9" y="1774.0">jdk/internal/mi..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.10%)</title><rect x="43.9" y="1747.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="46.9" y="1758.0"></text>
</g>
<g>
<title>Unsafe_Unpark (52 samples, 5.15%)</title><rect x="45.0" y="1747.0" width="60.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="48.0" y="1758.0">Unsafe..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (3 samples, 0.30%)</title><rect x="53.2" y="1731.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="56.2" y="1742.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.10%)</title><rect x="56.7" y="1731.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="59.7" y="1742.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (6 samples, 0.59%)</title><rect x="57.9" y="1731.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="60.9" y="1742.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.40%)</title><rect x="64.9" y="1731.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="67.9" y="1742.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (3 samples, 0.30%)</title><rect x="69.6" y="1731.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="72.6" y="1742.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="73.1" y="1731.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="76.1" y="1742.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="74.3" y="1731.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="77.3" y="1742.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.10%)</title><rect x="75.4" y="1731.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="78.4" y="1742.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (10 samples, 0.99%)</title><rect x="76.6" y="1731.0" width="11.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="79.6" y="1742.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.49%)</title><rect x="88.3" y="1731.0" width="17.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="91.3" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_signal (52 samples, 5.15%)</title><rect x="105.8" y="1747.0" width="60.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="108.8" y="1758.0">__pthr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.20%)</title><rect x="166.6" y="1843.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.20%)</title><rect x="166.6" y="1827.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="169.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.20%)</title><rect x="166.6" y="1811.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.20%)</title><rect x="166.6" y="1795.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.6" y="1806.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.10%)</title><rect x="167.7" y="1779.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="170.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (31 samples, 3.07%)</title><rect x="168.9" y="1843.0" width="36.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="171.9" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (31 samples, 3.07%)</title><rect x="168.9" y="1827.0" width="36.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.9" y="1838.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.59%)</title><rect x="198.1" y="1811.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.59%)</title><rect x="198.1" y="1795.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.69%)</title><rect x="205.1" y="1843.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.69%)</title><rect x="205.1" y="1827.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.69%)</title><rect x="205.1" y="1811.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.69%)</title><rect x="205.1" y="1795.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (12 samples, 1.19%)</title><rect x="213.3" y="1939.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.3" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (8 samples, 0.79%)</title><rect x="218.0" y="1923.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.69%)</title><rect x="219.1" y="1907.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.69%)</title><rect x="219.1" y="1891.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.30%)</title><rect x="223.8" y="1875.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.30%)</title><rect x="223.8" y="1859.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.20%)</title><rect x="227.3" y="1939.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="227.3" y="1923.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.20%)</title><rect x="227.3" y="1907.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (2 samples, 0.20%)</title><rect x="227.3" y="1891.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (2 samples, 0.20%)</title><rect x="227.3" y="1875.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.20%)</title><rect x="227.3" y="1859.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.20%)</title><rect x="227.3" y="1843.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.30%)</title><rect x="229.6" y="1939.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.30%)</title><rect x="229.6" y="1923.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="230.8" y="1907.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.20%)</title><rect x="230.8" y="1891.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.10%)</title><rect x="233.1" y="1971.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.20%)</title><rect x="234.3" y="1971.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.20%)</title><rect x="234.3" y="1955.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.20%)</title><rect x="234.3" y="1939.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.20%)</title><rect x="234.3" y="1923.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="236.7" y="1971.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.7" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="236.7" y="1955.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="239.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (46 samples, 4.55%)</title><rect x="237.8" y="1987.0" width="53.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.8" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (46 samples, 4.55%)</title><rect x="237.8" y="1971.0" width="53.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.8" y="1982.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (32 samples, 3.17%)</title><rect x="239.0" y="1955.0" width="37.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.0" y="1966.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (32 samples, 3.17%)</title><rect x="239.0" y="1939.0" width="37.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.0" y="1950.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.10%)</title><rect x="239.0" y="1923.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="239.0" y="1907.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.0" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="239.0" y="1891.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.10%)</title><rect x="239.0" y="1875.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (31 samples, 3.07%)</title><rect x="240.2" y="1923.0" width="36.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.2" y="1934.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.10%)</title><rect x="240.2" y="1907.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (1 samples, 0.10%)</title><rect x="240.2" y="1891.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.2" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="240.2" y="1875.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="240.2" y="1859.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (24 samples, 2.38%)</title><rect x="241.3" y="1907.0" width="28.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.3" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 2.38%)</title><rect x="241.3" y="1891.0" width="28.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.3" y="1902.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.39%)</title><rect x="244.8" y="1875.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.10%)</title><rect x="247.2" y="1859.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.10%)</title><rect x="247.2" y="1843.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="247.2" y="1827.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.10%)</title><rect x="247.2" y="1811.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.10%)</title><rect x="247.2" y="1795.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.10%)</title><rect x="247.2" y="1779.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="247.2" y="1763.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.2" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.40%)</title><rect x="248.3" y="1859.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.40%)</title><rect x="248.3" y="1843.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.40%)</title><rect x="248.3" y="1827.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="251.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.40%)</title><rect x="248.3" y="1811.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.40%)</title><rect x="248.3" y="1795.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (4 samples, 0.40%)</title><rect x="248.3" y="1779.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (4 samples, 0.40%)</title><rect x="248.3" y="1763.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (4 samples, 0.40%)</title><rect x="248.3" y="1747.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.3" y="1758.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (4 samples, 0.40%)</title><rect x="248.3" y="1731.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.3" y="1742.0"></text>
</g>
<g>
<title>updateBytesCRC32C (4 samples, 0.40%)</title><rect x="248.3" y="1715.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="251.3" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.59%)</title><rect x="253.0" y="1859.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.59%)</title><rect x="253.0" y="1843.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (6 samples, 0.59%)</title><rect x="253.0" y="1827.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (6 samples, 0.59%)</title><rect x="253.0" y="1811.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (5 samples, 0.50%)</title><rect x="254.2" y="1795.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="257.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.10%)</title><rect x="260.0" y="1859.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.10%)</title><rect x="260.0" y="1843.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.10%)</title><rect x="260.0" y="1827.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="260.0" y="1811.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.baseTimestamp (1 samples, 0.10%)</title><rect x="260.0" y="1795.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (7 samples, 0.69%)</title><rect x="261.2" y="1875.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.69%)</title><rect x="261.2" y="1859.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.69%)</title><rect x="261.2" y="1843.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.69%)</title><rect x="261.2" y="1827.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="264.2" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="268.2" y="1811.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="271.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.10%)</title><rect x="269.4" y="1907.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="272.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.10%)</title><rect x="269.4" y="1891.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.4" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="269.4" y="1875.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.4" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="269.4" y="1859.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.10%)</title><rect x="269.4" y="1843.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="272.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.10%)</title><rect x="270.5" y="1907.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.10%)</title><rect x="270.5" y="1891.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (4 samples, 0.40%)</title><rect x="271.7" y="1907.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.10%)</title><rect x="275.2" y="1891.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.30%)</title><rect x="276.4" y="1955.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.20%)</title><rect x="276.4" y="1939.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.10%)</title><rect x="277.5" y="1923.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="280.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="277.5" y="1907.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="277.5" y="1891.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.10%)</title><rect x="277.5" y="1875.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.5" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.10%)</title><rect x="277.5" y="1859.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="278.7" y="1939.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="281.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.10%)</title><rect x="278.7" y="1923.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.10%)</title><rect x="278.7" y="1907.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.10%)</title><rect x="279.9" y="1955.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.10%)</title><rect x="279.9" y="1939.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.59%)</title><rect x="281.0" y="1955.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.50%)</title><rect x="281.0" y="1939.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.50%)</title><rect x="281.0" y="1923.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="281.0" y="1907.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.10%)</title><rect x="281.0" y="1891.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="281.0" y="1875.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.0" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.10%)</title><rect x="281.0" y="1859.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.0" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.10%)</title><rect x="281.0" y="1843.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="284.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.40%)</title><rect x="282.2" y="1907.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.40%)</title><rect x="282.2" y="1891.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.40%)</title><rect x="282.2" y="1875.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.40%)</title><rect x="282.2" y="1859.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.40%)</title><rect x="282.2" y="1843.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (3 samples, 0.30%)</title><rect x="282.2" y="1827.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.2" y="1838.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.30%)</title><rect x="282.2" y="1811.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.2" y="1822.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.30%)</title><rect x="282.2" y="1795.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.30%)</title><rect x="282.2" y="1779.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="285.2" y="1790.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.30%)</title><rect x="282.2" y="1763.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="285.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.30%)</title><rect x="282.2" y="1747.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="285.2" y="1758.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.30%)</title><rect x="282.2" y="1731.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="285.2" y="1742.0"></text>
</g>
<g>
<title>__memset_sse2 (3 samples, 0.30%)</title><rect x="282.2" y="1715.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="285.2" y="1726.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="285.7" y="1827.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.7" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="285.7" y="1811.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.7" y="1822.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.10%)</title><rect x="285.7" y="1795.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.7" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.10%)</title><rect x="285.7" y="1779.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.7" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.10%)</title><rect x="285.7" y="1763.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.7" y="1774.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="285.7" y="1747.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="288.7" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="286.9" y="1939.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="286.9" y="1923.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="286.9" y="1907.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="286.9" y="1891.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="286.9" y="1875.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.10%)</title><rect x="286.9" y="1859.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.10%)</title><rect x="286.9" y="1843.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.write (1 samples, 0.10%)</title><rect x="286.9" y="1827.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchTopic.write (1 samples, 0.10%)</title><rect x="286.9" y="1811.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="289.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.10%)</title><rect x="288.1" y="1955.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.10%)</title><rect x="288.1" y="1939.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="288.1" y="1923.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="288.1" y="1907.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.10%)</title><rect x="288.1" y="1891.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.20%)</title><rect x="289.2" y="1955.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="290.4" y="1939.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.10%)</title><rect x="290.4" y="1923.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="290.4" y="1907.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="290.4" y="1891.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (2 samples, 0.20%)</title><rect x="291.6" y="2003.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.6" y="2014.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="291.6" y="1987.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.6" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="291.6" y="1971.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.6" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="291.6" y="1955.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.10%)</title><rect x="291.6" y="1939.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.6" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="292.7" y="1987.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="295.7" y="1998.0"></text>
</g>
<g>
<title>java/lang/Thread.run (553 samples, 54.75%)</title><rect x="293.9" y="2035.0" width="646.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.9" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (553 samples, 54.75%)</title><rect x="293.9" y="2019.0" width="646.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.9" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (553 samples, 54.75%)</title><rect x="293.9" y="2003.0" width="646.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="296.9" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/154803573.run (332 samples, 32.87%)</title><rect x="293.9" y="1987.0" width="387.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.9" y="1998.0">com/linecorp/decaton/processor/runtime/internal/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (332 samples, 32.87%)</title><rect x="293.9" y="1971.0" width="387.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.9" y="1982.0">com/linecorp/decaton/processor/runtime/internal/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (331 samples, 32.77%)</title><rect x="295.1" y="1955.0" width="386.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.1" y="1966.0">com/linecorp/decaton/processor/runtime/internal/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (330 samples, 32.67%)</title><rect x="295.1" y="1939.0" width="385.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.1" y="1950.0">com/linecorp/decaton/processor/runtime/internal/Proce..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="303.2" y="1923.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="306.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (37 samples, 3.66%)</title><rect x="304.4" y="1923.0" width="43.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="307.4" y="1934.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (37 samples, 3.66%)</title><rect x="304.4" y="1907.0" width="43.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="307.4" y="1918.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (37 samples, 3.66%)</title><rect x="304.4" y="1891.0" width="43.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="307.4" y="1902.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 2.38%)</title><rect x="319.6" y="1875.0" width="28.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.6" y="1886.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.40%)</title><rect x="319.6" y="1859.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$475/1505317226.accept (1 samples, 0.10%)</title><rect x="320.8" y="1843.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.8" y="1854.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.20%)</title><rect x="321.9" y="1843.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="324.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 1.98%)</title><rect x="324.3" y="1859.0" width="23.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.3" y="1870.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$475/1505317226.accept (19 samples, 1.88%)</title><rect x="325.4" y="1843.0" width="22.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="328.4" y="1854.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (19 samples, 1.88%)</title><rect x="325.4" y="1827.0" width="22.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.4" y="1838.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (19 samples, 1.88%)</title><rect x="325.4" y="1811.0" width="22.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.4" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (19 samples, 1.88%)</title><rect x="325.4" y="1795.0" width="22.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.4" y="1806.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (19 samples, 1.88%)</title><rect x="325.4" y="1779.0" width="22.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.4" y="1790.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.59%)</title><rect x="325.4" y="1763.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="328.4" y="1774.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.20%)</title><rect x="330.1" y="1747.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="333.1" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.29%)</title><rect x="332.5" y="1763.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.5" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (97 samples, 9.60%)</title><rect x="347.6" y="1923.0" width="113.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="350.6" y="1934.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (97 samples, 9.60%)</title><rect x="347.6" y="1907.0" width="113.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.6" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (97 samples, 9.60%)</title><rect x="347.6" y="1891.0" width="113.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.6" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="347.6" y="1875.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="350.6" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="347.6" y="1859.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="350.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.20%)</title><rect x="347.6" y="1843.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="350.6" y="1854.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.20%)</title><rect x="347.6" y="1827.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="350.6" y="1838.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.20%)</title><rect x="347.6" y="1811.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="350.6" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (2 samples, 0.20%)</title><rect x="347.6" y="1795.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="350.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (95 samples, 9.41%)</title><rect x="350.0" y="1875.0" width="111.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.0" y="1886.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (95 samples, 9.41%)</title><rect x="350.0" y="1859.0" width="111.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="353.0" y="1870.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (95 samples, 9.41%)</title><rect x="350.0" y="1843.0" width="111.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="353.0" y="1854.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (36 samples, 3.56%)</title><rect x="350.0" y="1827.0" width="42.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.0" y="1838.0">com/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="366.3" y="1811.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="369.3" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="366.3" y="1795.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="369.3" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.89%)</title><rect x="367.5" y="1811.0" width="10.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="370.5" y="1822.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.69%)</title><rect x="369.8" y="1795.0" width="8.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="372.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.30%)</title><rect x="378.0" y="1811.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.30%)</title><rect x="378.0" y="1795.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="381.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.30%)</title><rect x="378.0" y="1779.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.30%)</title><rect x="378.0" y="1763.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="378.0" y="1747.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (9 samples, 0.89%)</title><rect x="381.5" y="1811.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="384.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (9 samples, 0.89%)</title><rect x="381.5" y="1795.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="384.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.20%)</title><rect x="381.5" y="1779.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.20%)</title><rect x="381.5" y="1763.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="384.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.69%)</title><rect x="383.9" y="1779.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="386.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 0.69%)</title><rect x="383.9" y="1763.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="386.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.20%)</title><rect x="389.7" y="1747.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="392.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (54 samples, 5.35%)</title><rect x="392.0" y="1827.0" width="63.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.0" y="1838.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.40%)</title><rect x="392.0" y="1811.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.40%)</title><rect x="392.0" y="1795.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="395.5" y="1779.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.69%)</title><rect x="396.7" y="1811.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.40%)</title><rect x="400.2" y="1795.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.20%)</title><rect x="401.4" y="1779.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.20%)</title><rect x="401.4" y="1763.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="404.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.10%)</title><rect x="403.7" y="1779.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="406.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.10%)</title><rect x="403.7" y="1763.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.10%)</title><rect x="403.7" y="1747.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (43 samples, 4.26%)</title><rect x="404.9" y="1811.0" width="50.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.9" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (43 samples, 4.26%)</title><rect x="404.9" y="1795.0" width="50.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="407.9" y="1806.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.49%)</title><rect x="404.9" y="1779.0" width="17.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.10%)</title><rect x="404.9" y="1763.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="407.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.10%)</title><rect x="404.9" y="1747.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="407.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="404.9" y="1731.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.59%)</title><rect x="406.1" y="1763.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.59%)</title><rect x="406.1" y="1747.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.59%)</title><rect x="406.1" y="1731.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.69%)</title><rect x="413.1" y="1763.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="416.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="421.2" y="1763.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="421.2" y="1747.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="424.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (28 samples, 2.77%)</title><rect x="422.4" y="1779.0" width="32.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.4" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (28 samples, 2.77%)</title><rect x="422.4" y="1763.0" width="32.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="425.4" y="1774.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (28 samples, 2.77%)</title><rect x="422.4" y="1747.0" width="32.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="425.4" y="1758.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.79%)</title><rect x="432.9" y="1731.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="435.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.20%)</title><rect x="435.3" y="1715.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.20%)</title><rect x="435.3" y="1699.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.20%)</title><rect x="435.3" y="1683.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="438.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="436.4" y="1667.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="439.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.30%)</title><rect x="437.6" y="1715.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="440.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="441.1" y="1715.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="441.1" y="1699.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="444.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="441.1" y="1683.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="444.1" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.79%)</title><rect x="442.3" y="1731.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="445.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.20%)</title><rect x="449.3" y="1715.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.20%)</title><rect x="449.3" y="1699.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="452.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.20%)</title><rect x="449.3" y="1683.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="452.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (1 samples, 0.10%)</title><rect x="449.3" y="1667.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (1 samples, 0.10%)</title><rect x="449.3" y="1651.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="452.3" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (1 samples, 0.10%)</title><rect x="449.3" y="1635.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.3" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (1 samples, 0.10%)</title><rect x="449.3" y="1619.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.3" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (1 samples, 0.10%)</title><rect x="449.3" y="1603.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="452.3" y="1614.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.10%)</title><rect x="450.5" y="1667.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="453.5" y="1678.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="450.5" y="1651.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="453.5" y="1662.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="450.5" y="1635.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="453.5" y="1646.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="450.5" y="1619.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="453.5" y="1630.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="450.5" y="1603.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="453.5" y="1614.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="450.5" y="1587.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="453.5" y="1598.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="450.5" y="1571.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="453.5" y="1582.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.10%)</title><rect x="450.5" y="1555.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="453.5" y="1566.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="450.5" y="1539.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="453.5" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.30%)</title><rect x="451.6" y="1731.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.6" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.30%)</title><rect x="451.6" y="1715.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.6" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="451.6" y="1699.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="454.6" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="454.0" y="1699.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="457.0" y="1710.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="454.0" y="1683.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="457.0" y="1694.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="454.0" y="1667.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="457.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="454.0" y="1651.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="457.0" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.50%)</title><rect x="455.1" y="1827.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.1" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.50%)</title><rect x="455.1" y="1811.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="458.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.50%)</title><rect x="455.1" y="1795.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="458.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.50%)</title><rect x="455.1" y="1779.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="458.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.50%)</title><rect x="455.1" y="1763.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (188 samples, 18.61%)</title><rect x="461.0" y="1923.0" width="219.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.0" y="1934.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (26 samples, 2.57%)</title><rect x="464.5" y="1907.0" width="30.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="467.5" y="1918.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 2.57%)</title><rect x="464.5" y="1891.0" width="30.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="467.5" y="1902.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (23 samples, 2.28%)</title><rect x="468.0" y="1875.0" width="26.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.0" y="1886.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 1.19%)</title><rect x="468.0" y="1859.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="471.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.19%)</title><rect x="468.0" y="1843.0" width="14.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.19%)</title><rect x="468.0" y="1827.0" width="14.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.0" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (2 samples, 0.20%)</title><rect x="482.0" y="1859.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.0" y="1870.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.20%)</title><rect x="482.0" y="1843.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.40%)</title><rect x="484.3" y="1859.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="487.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.20%)</title><rect x="486.7" y="1843.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.7" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.20%)</title><rect x="486.7" y="1827.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="489.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 0.50%)</title><rect x="489.0" y="1859.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="492.0" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 0.50%)</title><rect x="489.0" y="1843.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.0" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="489.0" y="1827.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="489.0" y="1811.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="492.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="489.0" y="1795.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="492.0" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.40%)</title><rect x="490.2" y="1827.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="493.7" y="1811.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.59%)</title><rect x="494.9" y="1907.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="497.9" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.59%)</title><rect x="494.9" y="1891.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="497.9" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (101 samples, 10.00%)</title><rect x="501.9" y="1907.0" width="118.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.9" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (91 samples, 9.01%)</title><rect x="501.9" y="1891.0" width="106.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.9" y="1902.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (24 samples, 2.38%)</title><rect x="524.1" y="1875.0" width="28.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="527.1" y="1886.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.59%)</title><rect x="534.6" y="1859.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.30%)</title><rect x="538.1" y="1843.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="541.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.30%)</title><rect x="538.1" y="1827.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="541.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.30%)</title><rect x="538.1" y="1811.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="541.1" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.30%)</title><rect x="538.1" y="1795.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="541.1" y="1806.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.20%)</title><rect x="539.2" y="1779.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="542.2" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.20%)</title><rect x="539.2" y="1763.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="542.2" y="1774.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.20%)</title><rect x="539.2" y="1747.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="542.2" y="1758.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.20%)</title><rect x="539.2" y="1731.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="542.2" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.10%)</title><rect x="539.2" y="1715.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="542.2" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.10%)</title><rect x="539.2" y="1699.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="542.2" y="1710.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.10%)</title><rect x="539.2" y="1683.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="542.2" y="1694.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="540.4" y="1715.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="543.4" y="1726.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.10%)</title><rect x="540.4" y="1699.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="543.4" y="1710.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.20%)</title><rect x="541.6" y="1859.0" width="2.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="544.6" y="1870.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.69%)</title><rect x="543.9" y="1859.0" width="8.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="546.9" y="1870.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="552.1" y="1875.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="555.1" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (47 samples, 4.65%)</title><rect x="553.3" y="1875.0" width="54.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.3" y="1886.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (45 samples, 4.46%)</title><rect x="555.6" y="1859.0" width="52.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="558.6" y="1870.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.58%)</title><rect x="560.3" y="1843.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (16 samples, 1.58%)</title><rect x="560.3" y="1827.0" width="18.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="563.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (16 samples, 1.58%)</title><rect x="560.3" y="1811.0" width="18.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="563.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="579.0" y="1843.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="582.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="579.0" y="1827.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="582.0" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="579.0" y="1811.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="582.0" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (24 samples, 2.38%)</title><rect x="580.1" y="1843.0" width="28.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="583.1" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (24 samples, 2.38%)</title><rect x="580.1" y="1827.0" width="28.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.1" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.50%)</title><rect x="581.3" y="1811.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="584.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.50%)</title><rect x="581.3" y="1795.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="584.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.50%)</title><rect x="581.3" y="1779.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="584.3" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.20%)</title><rect x="584.8" y="1763.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="587.8" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (18 samples, 1.78%)</title><rect x="587.1" y="1811.0" width="21.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="590.1" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.69%)</title><rect x="598.8" y="1795.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="601.8" y="1806.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="607.0" y="1795.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="610.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (10 samples, 0.99%)</title><rect x="608.2" y="1891.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="611.2" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (10 samples, 0.99%)</title><rect x="608.2" y="1875.0" width="11.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.99%)</title><rect x="608.2" y="1859.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="611.2" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.89%)</title><rect x="608.2" y="1843.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="611.2" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.59%)</title><rect x="611.7" y="1827.0" width="7.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="614.7" y="1838.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.59%)</title><rect x="611.7" y="1811.0" width="7.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="614.7" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="618.7" y="1843.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="621.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (37 samples, 3.66%)</title><rect x="619.9" y="1907.0" width="43.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="622.9" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (36 samples, 3.56%)</title><rect x="621.0" y="1891.0" width="42.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="624.0" y="1902.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="625.7" y="1875.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="628.7" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="625.7" y="1859.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="628.7" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="625.7" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="628.7" y="1854.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="625.7" y="1827.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="628.7" y="1838.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.10%)</title><rect x="625.7" y="1811.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="628.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$398/1062214266.process (13 samples, 1.29%)</title><rect x="626.9" y="1875.0" width="15.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (13 samples, 1.29%)</title><rect x="626.9" y="1859.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="629.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (13 samples, 1.29%)</title><rect x="626.9" y="1843.0" width="15.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="629.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.29%)</title><rect x="626.9" y="1827.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="629.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (13 samples, 1.29%)</title><rect x="626.9" y="1811.0" width="15.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="629.9" y="1822.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="636.2" y="1795.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="639.2" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="636.2" y="1779.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="639.2" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.40%)</title><rect x="637.4" y="1795.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="640.4" y="1806.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="637.4" y="1779.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="640.4" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.30%)</title><rect x="642.1" y="1875.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="645.6" y="1875.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="648.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="645.6" y="1859.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="648.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.30%)</title><rect x="646.7" y="1875.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="649.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.20%)</title><rect x="650.2" y="1875.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="653.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.20%)</title><rect x="650.2" y="1859.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.2" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (2 samples, 0.20%)</title><rect x="650.2" y="1843.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="653.2" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (2 samples, 0.20%)</title><rect x="650.2" y="1827.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="653.2" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.20%)</title><rect x="652.6" y="1875.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="655.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="653.7" y="1859.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.7" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.10%)</title><rect x="653.7" y="1843.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.7" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="653.7" y="1827.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="656.7" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="653.7" y="1811.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="656.7" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="653.7" y="1795.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="656.7" y="1806.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="653.7" y="1779.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="656.7" y="1790.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="653.7" y="1763.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="656.7" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.10%)</title><rect x="653.7" y="1747.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="656.7" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.10%)</title><rect x="653.7" y="1731.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="656.7" y="1742.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="653.7" y="1715.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="656.7" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="653.7" y="1699.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="656.7" y="1710.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.10%)</title><rect x="653.7" y="1683.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="656.7" y="1694.0"></text>
</g>
<g>
<title>G1RemSet::num_par_rem_sets() (1 samples, 0.10%)</title><rect x="653.7" y="1667.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="656.7" y="1678.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.69%)</title><rect x="654.9" y="1875.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.9" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.69%)</title><rect x="654.9" y="1859.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="657.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.69%)</title><rect x="654.9" y="1843.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.9" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.50%)</title><rect x="654.9" y="1827.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$472/279178276.accept (1 samples, 0.10%)</title><rect x="658.4" y="1811.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="661.4" y="1822.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="659.6" y="1811.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="662.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.20%)</title><rect x="660.8" y="1827.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.99%)</title><rect x="663.1" y="1907.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="666.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.99%)</title><rect x="663.1" y="1891.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.1" y="1902.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="664.3" y="1875.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="667.3" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="664.3" y="1859.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="667.3" y="1870.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="665.4" y="1875.0" width="3.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="668.4" y="1886.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="665.4" y="1859.0" width="3.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="668.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.40%)</title><rect x="668.9" y="1875.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="671.9" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.10%)</title><rect x="668.9" y="1859.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.9" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.30%)</title><rect x="670.1" y="1859.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="673.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$473/1569115650.accept (2 samples, 0.20%)</title><rect x="671.3" y="1843.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.3" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.20%)</title><rect x="671.3" y="1827.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="674.3" y="1838.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="671.3" y="1811.0" width="2.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="674.3" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="673.6" y="1875.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="676.6" y="1886.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.50%)</title><rect x="674.8" y="1907.0" width="5.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="677.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.10%)</title><rect x="680.6" y="1939.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="683.6" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="680.6" y="1923.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="683.6" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="680.6" y="1907.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="683.6" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="680.6" y="1891.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="683.6" y="1902.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="680.6" y="1875.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="683.6" y="1886.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="680.6" y="1859.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="683.6" y="1870.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="680.6" y="1843.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="683.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.10%)</title><rect x="680.6" y="1827.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="683.6" y="1838.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="680.6" y="1811.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="683.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.69%)</title><rect x="681.8" y="1987.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.8" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.69%)</title><rect x="681.8" y="1971.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="684.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.69%)</title><rect x="681.8" y="1955.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="684.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.50%)</title><rect x="684.1" y="1939.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (214 samples, 21.19%)</title><rect x="690.0" y="1987.0" width="250.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="693.0" y="1998.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (213 samples, 21.09%)</title><rect x="691.1" y="1971.0" width="248.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.1" y="1982.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (185 samples, 18.32%)</title><rect x="691.1" y="1955.0" width="216.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="694.1" y="1966.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (14 samples, 1.39%)</title><rect x="691.1" y="1939.0" width="16.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="694.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.59%)</title><rect x="707.5" y="1939.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="710.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.59%)</title><rect x="707.5" y="1923.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="710.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.30%)</title><rect x="711.0" y="1907.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="714.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (11 samples, 1.09%)</title><rect x="714.5" y="1939.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="717.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (11 samples, 1.09%)</title><rect x="714.5" y="1923.0" width="12.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.5" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (154 samples, 15.25%)</title><rect x="727.3" y="1939.0" width="180.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="730.3" y="1950.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (153 samples, 15.15%)</title><rect x="728.5" y="1923.0" width="178.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.5" y="1934.0">jdk/internal/misc/Unsaf..</text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.30%)</title><rect x="733.2" y="1907.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="736.2" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (143 samples, 14.16%)</title><rect x="736.7" y="1907.0" width="167.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="739.7" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.10%)</title><rect x="739.0" y="1891.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.0" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 1.19%)</title><rect x="740.2" y="1891.0" width="14.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="743.2" y="1902.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="744.9" y="1875.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="747.9" y="1886.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="746.0" y="1875.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="749.0" y="1886.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.40%)</title><rect x="747.2" y="1875.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="750.2" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="751.9" y="1875.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="754.9" y="1886.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.10%)</title><rect x="753.0" y="1875.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="756.0" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (8 samples, 0.79%)</title><rect x="754.2" y="1891.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="757.2" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.20%)</title><rect x="763.6" y="1891.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="766.6" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 3.56%)</title><rect x="765.9" y="1891.0" width="42.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="768.9" y="1902.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (64 samples, 6.34%)</title><rect x="808.0" y="1891.0" width="74.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="811.0" y="1902.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.79%)</title><rect x="882.7" y="1891.0" width="9.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="885.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="892.1" y="1891.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="895.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="893.2" y="1891.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="896.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.30%)</title><rect x="895.6" y="1891.0" width="3.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="898.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="899.1" y="1891.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="902.1" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.10%)</title><rect x="900.3" y="1891.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="903.3" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.20%)</title><rect x="901.4" y="1891.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.30%)</title><rect x="903.8" y="1907.0" width="3.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="906.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.20%)</title><rect x="907.3" y="1955.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="910.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (26 samples, 2.57%)</title><rect x="909.6" y="1955.0" width="30.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="912.6" y="1966.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (26 samples, 2.57%)</title><rect x="909.6" y="1939.0" width="30.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="912.6" y="1950.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (26 samples, 2.57%)</title><rect x="909.6" y="1923.0" width="30.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="912.6" y="1934.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (26 samples, 2.57%)</title><rect x="909.6" y="1907.0" width="30.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="912.6" y="1918.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="940.0" y="2035.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="943.0" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="940.0" y="2019.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="943.0" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="940.0" y="2003.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="943.0" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="940.0" y="1987.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="943.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="940.0" y="1971.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="943.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="940.0" y="1955.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="943.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="940.0" y="1939.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="943.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="940.0" y="1923.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="943.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="940.0" y="1907.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="943.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.10%)</title><rect x="940.0" y="1891.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="943.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.responseData (1 samples, 0.10%)</title><rect x="940.0" y="1875.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="943.0" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.10%)</title><rect x="940.0" y="1859.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse$$Lambda$463/1724947510.accept (1 samples, 0.10%)</title><rect x="940.0" y="1843.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="943.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.lambda$responseData$1 (1 samples, 0.10%)</title><rect x="940.0" y="1827.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="943.0" y="1838.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.10%)</title><rect x="940.0" y="1811.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="943.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse$$Lambda$464/629423852.accept (1 samples, 0.10%)</title><rect x="940.0" y="1795.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="943.0" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.lambda$null$0 (1 samples, 0.10%)</title><rect x="940.0" y="1779.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="943.0" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="940.0" y="1763.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="943.0" y="1774.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="940.0" y="1747.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="943.0" y="1758.0"></text>
</g>
<g>
<title>start_thread (213 samples, 21.09%)</title><rect x="941.1" y="2035.0" width="248.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="944.1" y="2046.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (213 samples, 21.09%)</title><rect x="941.1" y="2019.0" width="248.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="944.1" y="2030.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (213 samples, 21.09%)</title><rect x="941.1" y="2003.0" width="248.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="944.1" y="2014.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 0.69%)</title><rect x="941.1" y="1987.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.1" y="1998.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 0.59%)</title><rect x="941.1" y="1971.0" width="7.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.1" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.20%)</title><rect x="941.1" y="1955.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="944.1" y="1966.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.20%)</title><rect x="941.1" y="1939.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.1" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.20%)</title><rect x="941.1" y="1923.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.1" y="1934.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.20%)</title><rect x="941.1" y="1907.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.1" y="1918.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.20%)</title><rect x="941.1" y="1891.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="944.1" y="1902.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (2 samples, 0.20%)</title><rect x="941.1" y="1875.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="944.1" y="1886.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.20%)</title><rect x="941.1" y="1859.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="944.1" y="1870.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.10%)</title><rect x="942.3" y="1843.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="945.3" y="1854.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.10%)</title><rect x="943.5" y="1955.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.5" y="1966.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.10%)</title><rect x="943.5" y="1939.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.5" y="1950.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="943.5" y="1923.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.5" y="1934.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.10%)</title><rect x="943.5" y="1907.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="946.5" y="1918.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.30%)</title><rect x="944.7" y="1955.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="947.7" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.30%)</title><rect x="944.7" y="1939.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="947.7" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="944.7" y="1923.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.7" y="1934.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.10%)</title><rect x="944.7" y="1907.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="947.7" y="1918.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.10%)</title><rect x="944.7" y="1891.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="947.7" y="1902.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.20%)</title><rect x="945.8" y="1923.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.8" y="1934.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.20%)</title><rect x="945.8" y="1907.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.8" y="1918.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.10%)</title><rect x="945.8" y="1891.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.8" y="1902.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.10%)</title><rect x="945.8" y="1875.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="948.8" y="1886.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.10%)</title><rect x="945.8" y="1859.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="948.8" y="1870.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="947.0" y="1891.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="950.0" y="1902.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="948.2" y="1971.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="951.2" y="1982.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.10%)</title><rect x="948.2" y="1955.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.2" y="1966.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (206 samples, 20.40%)</title><rect x="949.3" y="1987.0" width="240.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="952.3" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (205 samples, 20.30%)</title><rect x="949.3" y="1971.0" width="239.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="952.3" y="1982.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (205 samples, 20.30%)</title><rect x="949.3" y="1955.0" width="239.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="952.3" y="1966.0">CompileBroker::invoke_compiler_o..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (202 samples, 20.00%)</title><rect x="949.3" y="1939.0" width="236.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="952.3" y="1950.0">C2Compiler::compile_method(ciEn..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (202 samples, 20.00%)</title><rect x="949.3" y="1923.0" width="236.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="952.3" y="1934.0">Compile::Compile(ciEnv*, C2Comp..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.10%)</title><rect x="949.3" y="1907.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="952.3" y="1918.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.10%)</title><rect x="949.3" y="1891.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="952.3" y="1902.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="949.3" y="1875.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="952.3" y="1886.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="949.3" y="1859.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.3" y="1870.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="949.3" y="1843.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="952.3" y="1854.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="949.3" y="1827.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="952.3" y="1838.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="949.3" y="1811.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.3" y="1822.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="949.3" y="1795.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.3" y="1806.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_ldc(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="949.3" y="1779.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="952.3" y="1790.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_constant() (1 samples, 0.10%)</title><rect x="949.3" y="1763.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="952.3" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index(constantPoolHandle const&amp;, int, int, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="949.3" y="1747.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="952.3" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_constant_by_index_impl(constantPoolHandle const&amp;, int, int, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="949.3" y="1731.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="952.3" y="1742.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.10%)</title><rect x="949.3" y="1715.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.3" y="1726.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="949.3" y="1699.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="952.3" y="1710.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (87 samples, 8.61%)</title><rect x="950.5" y="1907.0" width="101.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="953.5" y="1918.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.20%)</title><rect x="950.5" y="1891.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="953.5" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="950.5" y="1875.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.5" y="1886.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.10%)</title><rect x="950.5" y="1859.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="953.5" y="1870.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="951.7" y="1875.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.7" y="1886.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="951.7" y="1859.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="954.7" y="1870.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.10%)</title><rect x="951.7" y="1843.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="954.7" y="1854.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.10%)</title><rect x="951.7" y="1827.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="954.7" y="1838.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="952.8" y="1891.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="955.8" y="1902.0"></text>
</g>
<g>
<title>MachNode::ideal_Opcode() const (1 samples, 0.10%)</title><rect x="952.8" y="1875.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="955.8" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (12 samples, 1.19%)</title><rect x="954.0" y="1891.0" width="14.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="957.0" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="954.0" y="1875.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="957.0" y="1886.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.10%)</title><rect x="954.0" y="1859.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="957.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 1.09%)</title><rect x="955.2" y="1875.0" width="12.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="958.2" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.30%)</title><rect x="956.3" y="1859.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="959.3" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.10%)</title><rect x="959.8" y="1859.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="962.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (5 samples, 0.50%)</title><rect x="961.0" y="1859.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.0" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.10%)</title><rect x="962.2" y="1843.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.2" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.30%)</title><rect x="963.3" y="1843.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="966.3" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.20%)</title><rect x="963.3" y="1827.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="966.3" y="1838.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.10%)</title><rect x="964.5" y="1811.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="967.5" y="1822.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="965.7" y="1827.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="968.7" y="1838.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="966.9" y="1859.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.79%)</title><rect x="968.0" y="1891.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="971.0" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.79%)</title><rect x="968.0" y="1875.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="968.0" y="1859.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="971.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.10%)</title><rect x="969.2" y="1843.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="972.2" y="1854.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.10%)</title><rect x="969.2" y="1827.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="972.2" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="969.2" y="1811.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="972.2" y="1822.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.20%)</title><rect x="970.4" y="1859.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.10%)</title><rect x="970.4" y="1843.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_exit_block_pressure(Block*) (1 samples, 0.10%)</title><rect x="971.5" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="974.5" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="971.5" y="1827.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="974.5" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.20%)</title><rect x="972.7" y="1859.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.7" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.10%)</title><rect x="973.9" y="1843.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.9" y="1854.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.20%)</title><rect x="975.0" y="1859.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="978.0" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="976.2" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (64 samples, 6.34%)</title><rect x="977.4" y="1891.0" width="74.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="980.4" y="1902.0">PhaseCha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="977.4" y="1875.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="980.4" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.10%)</title><rect x="978.5" y="1875.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.40%)</title><rect x="979.7" y="1875.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="982.7" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="980.9" y="1859.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="983.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.20%)</title><rect x="982.0" y="1859.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="983.2" y="1843.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.20%)</title><rect x="984.4" y="1875.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.20%)</title><rect x="984.4" y="1859.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="985.5" y="1843.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.99%)</title><rect x="986.7" y="1875.0" width="11.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.10%)</title><rect x="996.1" y="1859.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="999.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.10%)</title><rect x="996.1" y="1843.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.1" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.10%)</title><rect x="996.1" y="1827.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="999.1" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.10%)</title><rect x="997.2" y="1859.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.2" y="1870.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="997.2" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 1.29%)</title><rect x="998.4" y="1875.0" width="15.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.40%)</title><rect x="1004.2" y="1859.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1007.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1007.7" y="1843.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.30%)</title><rect x="1008.9" y="1859.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.9" y="1870.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.20%)</title><rect x="1010.1" y="1843.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.1" y="1854.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="1012.4" y="1859.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1015.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1013.6" y="1875.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1013.6" y="1859.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1016.6" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1013.6" y="1843.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1016.6" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.59%)</title><rect x="1014.8" y="1875.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.8" y="1886.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.10%)</title><rect x="1017.1" y="1859.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.1" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.30%)</title><rect x="1018.3" y="1859.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1021.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (2 samples, 0.20%)</title><rect x="1021.8" y="1875.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.8" y="1886.0"></text>
</g>
<g>
<title>rRegLOper::in_RegMask(int) const (1 samples, 0.10%)</title><rect x="1022.9" y="1859.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1025.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1024.1" y="1875.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.89%)</title><rect x="1025.3" y="1875.0" width="10.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.40%)</title><rect x="1029.9" y="1859.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1032.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) [clone .part.47] (1 samples, 0.10%)</title><rect x="1033.4" y="1843.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.4" y="1854.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.10%)</title><rect x="1033.4" y="1827.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.4" y="1838.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.10%)</title><rect x="1034.6" y="1859.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1037.6" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.50%)</title><rect x="1035.8" y="1875.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.8" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1035.8" y="1859.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.8" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.30%)</title><rect x="1037.0" y="1859.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1040.0" y="1870.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.10%)</title><rect x="1039.3" y="1843.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1042.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.10%)</title><rect x="1040.5" y="1859.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1041.6" y="1875.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1041.6" y="1859.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1044.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.30%)</title><rect x="1042.8" y="1875.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.30%)</title><rect x="1042.8" y="1859.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.40%)</title><rect x="1046.3" y="1875.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1049.3" y="1886.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1048.6" y="1859.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1051.6" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1049.8" y="1859.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1052.8" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1051.0" y="1875.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1054.0" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (99 samples, 9.80%)</title><rect x="1052.1" y="1907.0" width="115.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.1" y="1918.0">Compile::Optim..</text>
</g>
<g>
<title>BoolNode::Value(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1052.1" y="1891.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1055.1" y="1902.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (42 samples, 4.16%)</title><rect x="1053.3" y="1891.0" width="49.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.3" y="1902.0">Compi..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (42 samples, 4.16%)</title><rect x="1053.3" y="1875.0" width="49.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.3" y="1886.0">Phase..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1053.3" y="1859.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.3" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1053.3" y="1843.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.3" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1053.3" y="1827.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1056.3" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1053.3" y="1811.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.3" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1053.3" y="1795.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.3" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1053.3" y="1779.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.3" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1053.3" y="1763.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1056.3" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1053.3" y="1747.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.3" y="1758.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1053.3" y="1731.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.3" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&amp;) (1 samples, 0.10%)</title><rect x="1053.3" y="1715.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.3" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.10%)</title><rect x="1053.3" y="1699.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.3" y="1710.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1053.3" y="1683.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1056.3" y="1694.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1054.5" y="1859.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.5" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1054.5" y="1843.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1054.5" y="1827.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1057.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*&amp;, Node*, CountedLoopNode*&amp;) (1 samples, 0.10%)</title><rect x="1054.5" y="1811.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.5" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.10%)</title><rect x="1054.5" y="1795.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.5" y="1806.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1054.5" y="1779.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.5" y="1790.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.10%)</title><rect x="1054.5" y="1763.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.5" y="1774.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="1054.5" y="1747.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1057.5" y="1758.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1055.6" y="1859.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1058.6" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1055.6" y="1843.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1058.6" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1055.6" y="1827.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.6" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1055.6" y="1811.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.6" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1055.6" y="1795.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.6" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.10%)</title><rect x="1055.6" y="1779.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1058.6" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1055.6" y="1763.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.6" y="1774.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.10%)</title><rect x="1055.6" y="1747.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.6" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1056.8" y="1859.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1059.8" y="1870.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1056.8" y="1843.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1058.0" y="1859.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (30 samples, 2.97%)</title><rect x="1059.1" y="1859.0" width="35.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1062.1" y="1870.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (29 samples, 2.87%)</title><rect x="1060.3" y="1843.0" width="33.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1063.3" y="1854.0">Ph..</text>
</g>
<g>
<title>MemBarCPUOrderNode::Opcode() const (1 samples, 0.10%)</title><rect x="1060.3" y="1827.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (27 samples, 2.67%)</title><rect x="1061.5" y="1827.0" width="31.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.5" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.30%)</title><rect x="1062.7" y="1811.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.30%)</title><rect x="1062.7" y="1795.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.7" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.10%)</title><rect x="1065.0" y="1779.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.0" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1066.2" y="1811.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.2" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (22 samples, 2.18%)</title><rect x="1067.3" y="1811.0" width="25.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.3" y="1822.0">P..</text>
</g>
<g>
<title>Unique_Node_List::push(Node*) [clone .constprop.237] (1 samples, 0.10%)</title><rect x="1093.0" y="1827.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1094.2" y="1859.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.40%)</title><rect x="1095.4" y="1859.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.20%)</title><rect x="1097.7" y="1843.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.10%)</title><rect x="1097.7" y="1827.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1100.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.10%)</title><rect x="1097.7" y="1811.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1100.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1098.9" y="1827.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.9" y="1838.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1098.9" y="1811.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.9" y="1822.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.10%)</title><rect x="1098.9" y="1795.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.9" y="1806.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.20%)</title><rect x="1100.0" y="1859.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.20%)</title><rect x="1100.0" y="1843.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.0" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1101.2" y="1827.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.2" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.10%)</title><rect x="1101.2" y="1811.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.2" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1795.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.2" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1779.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.2" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1763.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.2" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1747.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.2" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1731.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.2" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1715.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.2" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1699.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.2" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1683.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.2" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1667.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.2" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1651.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.2" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1635.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.2" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1619.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1104.2" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1603.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.2" y="1614.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1101.2" y="1587.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.2" y="1598.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1101.2" y="1571.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (10 samples, 0.99%)</title><rect x="1102.4" y="1891.0" width="11.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.4" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (10 samples, 0.99%)</title><rect x="1102.4" y="1875.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.4" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1102.4" y="1859.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.4" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.10%)</title><rect x="1102.4" y="1843.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.4" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.10%)</title><rect x="1102.4" y="1827.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.4" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (9 samples, 0.89%)</title><rect x="1103.5" y="1859.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (8 samples, 0.79%)</title><rect x="1104.7" y="1843.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1827.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1811.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.7" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1795.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1779.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.7" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1763.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1747.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1731.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1715.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1699.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1683.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1667.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1651.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1635.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1619.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1603.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1587.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1571.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1555.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1539.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1523.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1507.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1491.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1475.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1459.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1443.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1427.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1411.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1395.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1379.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1363.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1347.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.7" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1331.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1315.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1299.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1283.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1267.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.7" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1251.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1235.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1219.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1203.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1187.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1171.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1155.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1139.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1123.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1107.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1091.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1075.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1059.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1043.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1027.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="1011.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="995.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="979.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="963.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="947.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="931.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="915.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="899.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="883.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="867.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="851.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="835.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="819.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="803.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="787.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="771.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="755.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="739.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="723.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="707.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="691.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="675.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="659.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="643.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="627.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="611.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="579.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="563.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="547.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="531.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="515.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="499.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="483.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1107.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="467.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="451.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="419.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="403.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="387.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="371.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="355.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="339.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="323.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="307.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1107.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="291.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="275.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="259.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="243.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="227.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.7" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="211.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="195.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.7" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="179.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.7" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="163.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.7" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="147.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.7" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="131.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.7" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="115.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.7" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="99.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.7" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1104.7" y="83.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.7" y="94.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1104.7" y="67.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.7" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (7 samples, 0.69%)</title><rect x="1105.9" y="1827.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.9" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.20%)</title><rect x="1105.9" y="1811.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.9" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1107.0" y="1795.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.50%)</title><rect x="1108.2" y="1811.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1795.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1779.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1111.2" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1763.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1747.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1731.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1715.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1111.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1699.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1683.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1667.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1651.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1108.2" y="1635.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.2" y="1646.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.10%)</title><rect x="1108.2" y="1619.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.40%)</title><rect x="1109.4" y="1795.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.40%)</title><rect x="1109.4" y="1779.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.4" y="1763.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.4" y="1747.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.4" y="1731.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.4" y="1715.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.4" y="1699.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.4" y="1683.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1109.4" y="1667.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.6" y="1667.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.6" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.6" y="1651.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1113.6" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1110.6" y="1635.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.6" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1111.7" y="1763.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1111.7" y="1747.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1111.7" y="1731.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1715.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1699.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1683.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1667.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1651.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1635.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1619.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1603.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1587.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1571.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1555.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1539.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1523.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1507.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1491.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1475.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1459.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1443.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1427.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1411.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1395.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.7" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1379.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.7" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1363.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.7" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1347.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.7" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1331.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.7" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1315.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.7" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1299.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1283.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.7" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1267.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.7" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1251.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.7" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1235.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.7" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1219.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.7" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1203.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1187.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1171.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1155.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1139.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1123.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1107.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1091.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1075.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1059.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1043.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1027.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="1011.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="995.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="979.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="963.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="947.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="931.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="915.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="899.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1111.7" y="883.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.7" y="894.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1111.7" y="867.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1112.9" y="1715.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.9" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1112.9" y="1699.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.9" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1112.9" y="1683.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.9" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1112.9" y="1667.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.9" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1112.9" y="1651.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.9" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1112.9" y="1635.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.9" y="1646.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1112.9" y="1619.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.9" y="1630.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1114.1" y="1891.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (20 samples, 1.98%)</title><rect x="1115.2" y="1891.0" width="23.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.2" y="1902.0">P..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1115.2" y="1875.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.2" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1115.2" y="1859.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.2" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1115.2" y="1843.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1118.2" y="1854.0"></text>
</g>
<g>
<title>CountedLoopEndNode::Opcode() const (1 samples, 0.10%)</title><rect x="1115.2" y="1827.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.20%)</title><rect x="1116.4" y="1875.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.4" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1117.6" y="1859.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 1.29%)</title><rect x="1118.7" y="1875.0" width="15.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (12 samples, 1.19%)</title><rect x="1119.9" y="1859.0" width="14.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 1.19%)</title><rect x="1119.9" y="1843.0" width="14.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1122.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.20%)</title><rect x="1119.9" y="1827.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1121.1" y="1811.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.1" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1122.2" y="1827.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (9 samples, 0.89%)</title><rect x="1123.4" y="1827.0" width="10.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1133.9" y="1875.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.30%)</title><rect x="1135.1" y="1875.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.30%)</title><rect x="1135.1" y="1859.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.1" y="1870.0"></text>
</g>
<g>
<title>LoadNKlassNode::Identity(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1135.1" y="1843.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.1" y="1854.0"></text>
</g>
<g>
<title>LoadNode::klass_identity_common(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1135.1" y="1827.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.1" y="1838.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1135.1" y="1811.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.1" y="1822.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1135.1" y="1795.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.1" y="1806.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1136.3" y="1843.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.3" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (2 samples, 0.20%)</title><rect x="1136.3" y="1827.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.3" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1811.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.3" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1795.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.3" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1779.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.3" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1763.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.3" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1747.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.3" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1731.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.3" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1715.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.3" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1699.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.3" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1683.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.3" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1667.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.3" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1136.3" y="1651.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.3" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1136.3" y="1635.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.3" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1136.3" y="1619.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.3" y="1630.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1136.3" y="1603.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.3" y="1614.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1136.3" y="1587.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.3" y="1598.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1137.4" y="1635.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.4" y="1646.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1137.4" y="1619.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.4" y="1630.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (22 samples, 2.18%)</title><rect x="1138.6" y="1891.0" width="25.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.6" y="1902.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1138.6" y="1875.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (20 samples, 1.98%)</title><rect x="1139.8" y="1875.0" width="23.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.8" y="1886.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1139.8" y="1859.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.8" y="1870.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1139.8" y="1843.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.8" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1140.9" y="1859.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1140.9" y="1843.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1140.9" y="1827.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.9" y="1838.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.10%)</title><rect x="1140.9" y="1811.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.9" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1142.1" y="1859.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.1" y="1870.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.10%)</title><rect x="1144.4" y="1859.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.4" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.20%)</title><rect x="1145.6" y="1859.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.6" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.10%)</title><rect x="1146.8" y="1843.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::is_IterGVN() (1 samples, 0.10%)</title><rect x="1147.9" y="1859.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.30%)</title><rect x="1149.1" y="1859.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.20%)</title><rect x="1150.3" y="1843.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.3" y="1854.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.20%)</title><rect x="1150.3" y="1827.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.3" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1152.6" y="1859.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1152.6" y="1843.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.6" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1152.6" y="1827.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.6" y="1838.0"></text>
</g>
<g>
<title>PhiNode::wait_for_region_igvn(PhaseGVN*) (1 samples, 0.10%)</title><rect x="1153.8" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1155.0" y="1859.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.0" y="1870.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.10%)</title><rect x="1156.1" y="1859.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.1" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1157.3" y="1859.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.3" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.10%)</title><rect x="1157.3" y="1843.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.3" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1158.5" y="1843.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.5" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.30%)</title><rect x="1159.6" y="1859.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (3 samples, 0.30%)</title><rect x="1159.6" y="1843.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1159.6" y="1827.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1159.6" y="1811.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.6" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1795.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1779.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1763.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1747.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1731.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.6" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1715.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.6" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1699.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1683.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.6" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1667.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1651.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.6" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1635.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1619.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.6" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1603.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.6" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1587.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.6" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1571.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.6" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1159.6" y="1555.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1159.6" y="1539.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="1550.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1159.6" y="1523.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="1534.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1159.6" y="1507.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.6" y="1518.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1159.6" y="1491.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.6" y="1502.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1159.6" y="1475.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="1486.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1160.8" y="1555.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.8" y="1566.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1160.8" y="1539.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.8" y="1550.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1162.0" y="1795.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="1806.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1162.0" y="1779.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.0" y="1790.0"></text>
</g>
<g>
<title>StoreCMNode::hash() const (1 samples, 0.10%)</title><rect x="1163.1" y="1875.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.1" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.10%)</title><rect x="1164.3" y="1891.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1164.3" y="1875.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1164.3" y="1859.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="1870.0"></text>
</g>
<g>
<title>URShiftLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1164.3" y="1843.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1164.3" y="1827.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1164.3" y="1811.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.3" y="1822.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1164.3" y="1795.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.3" y="1806.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.20%)</title><rect x="1165.5" y="1891.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.5" y="1902.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.10%)</title><rect x="1166.6" y="1875.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.6" y="1886.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1166.6" y="1859.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.6" y="1870.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 1.29%)</title><rect x="1167.8" y="1907.0" width="15.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.8" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 1.29%)</title><rect x="1167.8" y="1891.0" width="15.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (13 samples, 1.29%)</title><rect x="1167.8" y="1875.0" width="15.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.8" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (13 samples, 1.29%)</title><rect x="1167.8" y="1859.0" width="15.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (13 samples, 1.29%)</title><rect x="1167.8" y="1843.0" width="15.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 1.19%)</title><rect x="1167.8" y="1827.0" width="14.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.8" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1167.8" y="1811.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.8" y="1822.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1167.8" y="1795.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="1806.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1167.8" y="1779.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="1790.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1167.8" y="1763.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.8" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1167.8" y="1747.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1167.8" y="1731.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1167.8" y="1715.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1167.8" y="1699.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.8" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1167.8" y="1683.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1167.8" y="1667.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.8" y="1678.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1167.8" y="1651.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.8" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1167.8" y="1635.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.8" y="1646.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1167.8" y="1619.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="1630.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.10%)</title><rect x="1167.8" y="1603.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.8" y="1614.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.10%)</title><rect x="1167.8" y="1587.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.8" y="1598.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.10%)</title><rect x="1167.8" y="1571.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="1582.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.10%)</title><rect x="1167.8" y="1555.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.10%)</title><rect x="1167.8" y="1539.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.8" y="1550.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.10%)</title><rect x="1167.8" y="1523.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.99%)</title><rect x="1169.0" y="1811.0" width="11.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.0" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.99%)</title><rect x="1169.0" y="1795.0" width="11.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.0" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.99%)</title><rect x="1169.0" y="1779.0" width="11.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.0" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.99%)</title><rect x="1169.0" y="1763.0" width="11.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.0" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.99%)</title><rect x="1169.0" y="1747.0" width="11.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.0" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.99%)</title><rect x="1169.0" y="1731.0" width="11.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.0" y="1742.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.10%)</title><rect x="1169.0" y="1715.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.0" y="1726.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.10%)</title><rect x="1169.0" y="1699.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.0" y="1710.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.10%)</title><rect x="1169.0" y="1683.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.0" y="1694.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.10%)</title><rect x="1169.0" y="1667.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.0" y="1678.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.10%)</title><rect x="1170.1" y="1715.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="1726.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.10%)</title><rect x="1170.1" y="1699.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.1" y="1710.0"></text>
</g>
<g>
<title>TypeTuple::fields(unsigned int) (1 samples, 0.10%)</title><rect x="1170.1" y="1683.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.1" y="1694.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1171.3" y="1715.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.3" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1171.3" y="1699.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.3" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1171.3" y="1683.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1171.3" y="1667.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1171.3" y="1651.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1171.3" y="1635.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1171.3" y="1619.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1171.3" y="1603.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1172.5" y="1587.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1172.5" y="1571.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1172.5" y="1555.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.10%)</title><rect x="1172.5" y="1539.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="1550.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.10%)</title><rect x="1172.5" y="1523.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="1534.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool, bool) (1 samples, 0.10%)</title><rect x="1172.5" y="1507.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="1518.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.10%)</title><rect x="1172.5" y="1491.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="1502.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (6 samples, 0.59%)</title><rect x="1173.6" y="1715.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.6" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.59%)</title><rect x="1173.6" y="1699.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.59%)</title><rect x="1173.6" y="1683.0" width="7.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.59%)</title><rect x="1173.6" y="1667.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.59%)</title><rect x="1173.6" y="1651.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.59%)</title><rect x="1173.6" y="1635.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.50%)</title><rect x="1173.6" y="1619.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.40%)</title><rect x="1173.6" y="1603.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.40%)</title><rect x="1173.6" y="1587.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.40%)</title><rect x="1173.6" y="1571.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.40%)</title><rect x="1173.6" y="1555.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.40%)</title><rect x="1173.6" y="1539.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1173.6" y="1523.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.6" y="1534.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1173.6" y="1507.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.6" y="1518.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="1491.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="1502.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1173.6" y="1475.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="1486.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1173.6" y="1459.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.6" y="1470.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1173.6" y="1443.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="1454.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1173.6" y="1427.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="1438.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1173.6" y="1411.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="1422.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1173.6" y="1395.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="1406.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1173.6" y="1379.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.6" y="1390.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1173.6" y="1363.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.6" y="1374.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1173.6" y="1347.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.6" y="1358.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1173.6" y="1331.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.6" y="1342.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.10%)</title><rect x="1173.6" y="1315.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.6" y="1326.0"></text>
</g>
<g>
<title>ciObjectFactory::vm_symbol_at(int) (1 samples, 0.10%)</title><rect x="1173.6" y="1299.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1174.8" y="1507.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1174.8" y="1491.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1174.8" y="1475.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1174.8" y="1459.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1174.8" y="1443.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1174.8" y="1427.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1174.8" y="1411.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1174.8" y="1395.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1174.8" y="1379.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1174.8" y="1363.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1174.8" y="1347.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1174.8" y="1331.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="1342.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1174.8" y="1315.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="1326.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1174.8" y="1299.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="1310.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1174.8" y="1283.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1174.8" y="1267.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1174.8" y="1251.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1174.8" y="1235.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1174.8" y="1219.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1174.8" y="1203.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.8" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1174.8" y="1187.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="1198.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1174.8" y="1171.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1174.8" y="1155.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="1166.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1174.8" y="1139.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.8" y="1150.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.10%)</title><rect x="1174.8" y="1123.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1176.0" y="1315.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.0" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1176.0" y="1299.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.0" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1176.0" y="1283.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1176.0" y="1267.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1176.0" y="1251.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1176.0" y="1235.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1176.0" y="1219.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="1230.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.10%)</title><rect x="1176.0" y="1203.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="1214.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1176.0" y="1187.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="1198.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1176.0" y="1171.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.0" y="1182.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.10%)</title><rect x="1176.0" y="1155.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="1166.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.10%)</title><rect x="1176.0" y="1139.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.1" y="1411.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.1" y="1395.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1177.1" y="1379.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1177.1" y="1363.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1177.1" y="1347.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1177.1" y="1331.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1177.1" y="1315.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.1" y="1299.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1177.1" y="1283.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1177.1" y="1267.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1177.1" y="1251.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1177.1" y="1235.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1177.1" y="1219.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.1" y="1203.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1177.1" y="1187.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1177.1" y="1171.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1177.1" y="1155.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1177.1" y="1139.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="1150.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.10%)</title><rect x="1177.1" y="1123.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="1134.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.10%)</title><rect x="1177.1" y="1107.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="1118.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1177.1" y="1091.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="1102.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1177.1" y="1075.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="1086.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.10%)</title><rect x="1177.1" y="1059.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="1070.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1177.1" y="1043.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.3" y="1603.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="1614.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.3" y="1587.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="1598.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.3" y="1571.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.3" y="1555.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.3" y="1539.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="1550.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.3" y="1523.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="1534.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1178.3" y="1507.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1178.3" y="1491.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="1502.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.10%)</title><rect x="1178.3" y="1475.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="1486.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1178.3" y="1459.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="1470.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.10%)</title><rect x="1178.3" y="1443.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="1454.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.10%)</title><rect x="1178.3" y="1427.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="1438.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.10%)</title><rect x="1178.3" y="1411.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="1422.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.10%)</title><rect x="1178.3" y="1395.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="1406.0"></text>
</g>
<g>
<title>ciInstanceKlass::super() (1 samples, 0.10%)</title><rect x="1178.3" y="1379.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="1390.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1178.3" y="1363.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.10%)</title><rect x="1179.5" y="1619.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="1630.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.10%)</title><rect x="1179.5" y="1603.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="1614.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1179.5" y="1587.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="1598.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.10%)</title><rect x="1179.5" y="1571.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.5" y="1582.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1179.5" y="1555.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="1566.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1179.5" y="1539.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.5" y="1550.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1179.5" y="1523.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="1534.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.7" y="1811.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.7" y="1795.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.7" y="1779.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.7" y="1763.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.7" y="1747.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.7" y="1731.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.7" y="1715.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.7" y="1699.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.7" y="1683.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="1694.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1180.7" y="1667.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="1678.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.10%)</title><rect x="1180.7" y="1651.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="1662.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.10%)</title><rect x="1181.8" y="1827.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="1838.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.10%)</title><rect x="1181.8" y="1811.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1822.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1181.8" y="1795.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="1806.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1181.8" y="1779.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="1790.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1181.8" y="1763.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="1774.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.10%)</title><rect x="1181.8" y="1747.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="1758.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.20%)</title><rect x="1183.0" y="1907.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.20%)</title><rect x="1183.0" y="1891.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.20%)</title><rect x="1185.3" y="1939.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.20%)</title><rect x="1185.3" y="1923.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.20%)</title><rect x="1185.3" y="1907.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.3" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.20%)</title><rect x="1185.3" y="1891.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.3" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.10%)</title><rect x="1185.3" y="1875.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.3" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1185.3" y="1859.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.3" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.10%)</title><rect x="1185.3" y="1843.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.3" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.10%)</title><rect x="1185.3" y="1827.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.3" y="1811.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.3" y="1795.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.3" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.3" y="1779.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.3" y="1763.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.3" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.3" y="1747.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.3" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.3" y="1731.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.3" y="1715.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.3" y="1699.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.3" y="1710.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.3" y="1683.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.3" y="1694.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.3" y="1667.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="1678.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.10%)</title><rect x="1185.3" y="1651.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.3" y="1662.0"></text>
</g>
<g>
<title>BlockListBuilder::mark_loops() (1 samples, 0.10%)</title><rect x="1185.3" y="1635.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="1646.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.10%)</title><rect x="1186.5" y="1875.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.5" y="1886.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.10%)</title><rect x="1186.5" y="1859.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.5" y="1870.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.10%)</title><rect x="1186.5" y="1843.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.5" y="1854.0"></text>
</g>
<g>
<title>LIR_List::move(LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*) [clone .constprop.269] (1 samples, 0.10%)</title><rect x="1186.5" y="1827.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="1838.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*) (1 samples, 0.10%)</title><rect x="1187.7" y="1939.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.7" y="1950.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (1 samples, 0.10%)</title><rect x="1187.7" y="1923.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.7" y="1934.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.10%)</title><rect x="1188.8" y="1971.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.8" y="1982.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.10%)</title><rect x="1188.8" y="1955.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.10%)</title><rect x="1188.8" y="1939.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.8" y="1950.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.10%)</title><rect x="1188.8" y="1923.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.10%)</title><rect x="1188.8" y="1907.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.10%)</title><rect x="1188.8" y="1891.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="1902.0"></text>
</g>
</g>
</svg>
