<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (172 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (15 samples, 8.72%)</title><rect x="10.0" y="1251.0" width="102.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (15 samples, 8.72%)</title><rect x="10.0" y="1235.0" width="102.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.58%)</title><rect x="10.0" y="1219.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.58%)</title><rect x="10.0" y="1203.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.58%)</title><rect x="10.0" y="1187.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.58%)</title><rect x="10.0" y="1171.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.58%)</title><rect x="10.0" y="1155.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.58%)</title><rect x="10.0" y="1139.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.58%)</title><rect x="10.0" y="1123.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.58%)</title><rect x="10.0" y="1107.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="10.0" y="1091.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="10.0" y="1075.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.58%)</title><rect x="10.0" y="1059.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.58%)</title><rect x="10.0" y="1043.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.58%)</title><rect x="10.0" y="1027.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.addSize (1 samples, 0.58%)</title><rect x="10.0" y="1011.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.58%)</title><rect x="10.0" y="995.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (14 samples, 8.14%)</title><rect x="16.9" y="1219.0" width="96.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1230.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.58%)</title><rect x="16.9" y="1203.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.58%)</title><rect x="16.9" y="1187.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.58%)</title><rect x="16.9" y="1171.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$241/1117399295.accept (1 samples, 0.58%)</title><rect x="16.9" y="1155.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.58%)</title><rect x="16.9" y="1139.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.58%)</title><rect x="16.9" y="1123.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.58%)</title><rect x="16.9" y="1107.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.91%)</title><rect x="23.7" y="1203.0" width="34.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.7" y="1214.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$240/1892218646.accept (4 samples, 2.33%)</title><rect x="23.7" y="1187.0" width="27.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.7" y="1198.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 2.33%)</title><rect x="23.7" y="1171.0" width="27.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.7" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (4 samples, 2.33%)</title><rect x="23.7" y="1155.0" width="27.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.7" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 2.33%)</title><rect x="23.7" y="1139.0" width="27.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 2.33%)</title><rect x="23.7" y="1123.0" width="27.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.7" y="1134.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 2.33%)</title><rect x="23.7" y="1107.0" width="27.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.7" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 2.33%)</title><rect x="23.7" y="1091.0" width="27.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.7" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 2.33%)</title><rect x="23.7" y="1075.0" width="27.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.7" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 2.33%)</title><rect x="23.7" y="1059.0" width="27.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 2.33%)</title><rect x="23.7" y="1043.0" width="27.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.7" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.58%)</title><rect x="44.3" y="1027.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.58%)</title><rect x="44.3" y="1011.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.58%)</title><rect x="51.2" y="1187.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.58%)</title><rect x="51.2" y="1171.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.58%)</title><rect x="51.2" y="1155.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.58%)</title><rect x="51.2" y="1139.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="54.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.65%)</title><rect x="58.0" y="1203.0" width="54.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.0" y="1214.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.65%)</title><rect x="58.0" y="1187.0" width="54.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.0" y="1198.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 3.49%)</title><rect x="58.0" y="1171.0" width="41.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.0" y="1182.0">org..</text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.58%)</title><rect x="58.0" y="1155.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="61.0" y="1166.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_method(JavaThread*, Thread*) (1 samples, 0.58%)</title><rect x="58.0" y="1139.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="61.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 2.33%)</title><rect x="64.9" y="1155.0" width="27.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.9" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 2.33%)</title><rect x="64.9" y="1139.0" width="27.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.9" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.16%)</title><rect x="64.9" y="1123.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.16%)</title><rect x="64.9" y="1107.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.58%)</title><rect x="64.9" y="1091.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.58%)</title><rect x="64.9" y="1075.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.58%)</title><rect x="64.9" y="1059.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.58%)</title><rect x="64.9" y="1043.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.58%)</title><rect x="64.9" y="1027.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.58%)</title><rect x="64.9" y="1011.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.58%)</title><rect x="64.9" y="995.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.58%)</title><rect x="64.9" y="979.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.58%)</title><rect x="71.7" y="1091.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.7" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.58%)</title><rect x="71.7" y="1075.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.7" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.58%)</title><rect x="71.7" y="1059.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$237/1227080372.shouldBlock (2 samples, 1.16%)</title><rect x="78.6" y="1123.0" width="13.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="81.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (2 samples, 1.16%)</title><rect x="78.6" y="1107.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (2 samples, 1.16%)</title><rect x="78.6" y="1091.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (2 samples, 1.16%)</title><rect x="78.6" y="1075.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 1.16%)</title><rect x="78.6" y="1059.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.58%)</title><rect x="85.5" y="1043.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.58%)</title><rect x="85.5" y="1027.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.58%)</title><rect x="85.5" y="1011.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.58%)</title><rect x="85.5" y="995.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.58%)</title><rect x="85.5" y="979.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.58%)</title><rect x="85.5" y="963.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$BooleanTerminalSink.cancellationRequested (1 samples, 0.58%)</title><rect x="85.5" y="947.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (1 samples, 0.58%)</title><rect x="92.3" y="1155.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.58%)</title><rect x="92.3" y="1139.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.58%)</title><rect x="99.2" y="1171.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.58%)</title><rect x="99.2" y="1155.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.58%)</title><rect x="99.2" y="1139.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="99.2" y="1123.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="99.2" y="1107.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.58%)</title><rect x="99.2" y="1091.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.58%)</title><rect x="99.2" y="1075.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.58%)</title><rect x="99.2" y="1059.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.2" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.58%)</title><rect x="99.2" y="1043.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.58%)</title><rect x="106.0" y="1171.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.58%)</title><rect x="106.0" y="1155.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.58%)</title><rect x="106.0" y="1139.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="109.0" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.58%)</title><rect x="106.0" y="1123.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="109.0" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.58%)</title><rect x="106.0" y="1107.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="109.0" y="1118.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.58%)</title><rect x="106.0" y="1091.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="109.0" y="1102.0"></text>
</g>
<g>
<title>InlineCacheBuffer::contains(unsigned char*) (1 samples, 0.58%)</title><rect x="106.0" y="1075.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="109.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (68 samples, 39.53%)</title><rect x="112.9" y="1251.0" width="466.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="115.9" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (68 samples, 39.53%)</title><rect x="112.9" y="1235.0" width="466.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.9" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (68 samples, 39.53%)</title><rect x="112.9" y="1219.0" width="466.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.9" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/1480519614.run (66 samples, 38.37%)</title><rect x="119.8" y="1203.0" width="452.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.8" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (66 samples, 38.37%)</title><rect x="119.8" y="1187.0" width="452.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.8" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (66 samples, 38.37%)</title><rect x="119.8" y="1171.0" width="452.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="122.8" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (66 samples, 38.37%)</title><rect x="119.8" y="1155.0" width="452.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.8" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipelin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (8 samples, 4.65%)</title><rect x="126.6" y="1139.0" width="54.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.6" y="1150.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 4.65%)</title><rect x="126.6" y="1123.0" width="54.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.6" y="1134.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 4.65%)</title><rect x="126.6" y="1107.0" width="54.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="129.6" y="1118.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 3.49%)</title><rect x="140.3" y="1091.0" width="41.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.3" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.58%)</title><rect x="140.3" y="1075.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$490/220752887.accept (1 samples, 0.58%)</title><rect x="140.3" y="1059.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 2.91%)</title><rect x="147.2" y="1075.0" width="34.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.2" y="1086.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$490/220752887.accept (5 samples, 2.91%)</title><rect x="147.2" y="1059.0" width="34.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="150.2" y="1070.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (5 samples, 2.91%)</title><rect x="147.2" y="1043.0" width="34.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.2" y="1054.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 2.91%)</title><rect x="147.2" y="1027.0" width="34.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.2" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 2.91%)</title><rect x="147.2" y="1011.0" width="34.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.2" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 2.91%)</title><rect x="147.2" y="995.0" width="34.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="150.2" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.58%)</title><rect x="147.2" y="979.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 2.33%)</title><rect x="154.1" y="979.0" width="27.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.1" y="990.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (8 samples, 4.65%)</title><rect x="181.5" y="1139.0" width="54.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.5" y="1150.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (8 samples, 4.65%)</title><rect x="181.5" y="1123.0" width="54.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="184.5" y="1134.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 4.65%)</title><rect x="181.5" y="1107.0" width="54.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="184.5" y="1118.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.65%)</title><rect x="181.5" y="1091.0" width="54.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="184.5" y="1102.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.65%)</title><rect x="181.5" y="1075.0" width="54.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="184.5" y="1086.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 4.65%)</title><rect x="181.5" y="1059.0" width="54.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.5" y="1070.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 2.91%)</title><rect x="181.5" y="1043.0" width="34.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.5" y="1054.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.58%)</title><rect x="181.5" y="1027.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.58%)</title><rect x="181.5" y="1011.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="184.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.58%)</title><rect x="181.5" y="995.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.58%)</title><rect x="181.5" y="979.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.58%)</title><rect x="181.5" y="963.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.5" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.58%)</title><rect x="181.5" y="947.0" width="6.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="184.5" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="181.5" y="931.0" width="6.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="184.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 2.33%)</title><rect x="188.4" y="1027.0" width="27.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.4" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 2.33%)</title><rect x="188.4" y="1011.0" width="27.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="191.4" y="1022.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.58%)</title><rect x="188.4" y="995.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="191.4" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.58%)</title><rect x="188.4" y="979.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="191.4" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.58%)</title><rect x="188.4" y="963.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="191.4" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.58%)</title><rect x="188.4" y="947.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="191.4" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.58%)</title><rect x="188.4" y="931.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="191.4" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.58%)</title><rect x="188.4" y="915.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="191.4" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.58%)</title><rect x="188.4" y="899.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="191.4" y="910.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.58%)</title><rect x="188.4" y="883.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="191.4" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.58%)</title><rect x="188.4" y="867.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="191.4" y="878.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.58%)</title><rect x="188.4" y="851.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="191.4" y="862.0"></text>
</g>
<g>
<title>G1RemSet::num_par_rem_sets() (1 samples, 0.58%)</title><rect x="188.4" y="835.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="191.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.74%)</title><rect x="195.2" y="995.0" width="20.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="198.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 1.74%)</title><rect x="195.2" y="979.0" width="20.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (3 samples, 1.74%)</title><rect x="195.2" y="963.0" width="20.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="198.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (3 samples, 1.74%)</title><rect x="195.2" y="947.0" width="20.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 1.74%)</title><rect x="215.8" y="1043.0" width="20.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (3 samples, 1.74%)</title><rect x="215.8" y="1027.0" width="20.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.74%)</title><rect x="215.8" y="1011.0" width="20.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="218.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.74%)</title><rect x="215.8" y="995.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.74%)</title><rect x="215.8" y="979.0" width="20.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.74%)</title><rect x="215.8" y="963.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.16%)</title><rect x="215.8" y="947.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.58%)</title><rect x="215.8" y="931.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.58%)</title><rect x="215.8" y="915.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.58%)</title><rect x="222.7" y="931.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.58%)</title><rect x="222.7" y="915.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.58%)</title><rect x="222.7" y="899.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.58%)</title><rect x="229.5" y="947.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.58%)</title><rect x="229.5" y="931.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.58%)</title><rect x="229.5" y="915.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.5" y="926.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.58%)</title><rect x="229.5" y="899.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.5" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.58%)</title><rect x="229.5" y="883.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (49 samples, 28.49%)</title><rect x="236.4" y="1139.0" width="336.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.4" y="1150.0">com/linecorp/decaton/processor/runtime/interna..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (4 samples, 2.33%)</title><rect x="236.4" y="1123.0" width="27.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.4" y="1134.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.33%)</title><rect x="236.4" y="1107.0" width="27.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.4" y="1118.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.33%)</title><rect x="236.4" y="1091.0" width="27.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.4" y="1102.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.16%)</title><rect x="236.4" y="1075.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.16%)</title><rect x="236.4" y="1059.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.16%)</title><rect x="236.4" y="1043.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.16%)</title><rect x="250.1" y="1075.0" width="13.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.58%)</title><rect x="257.0" y="1059.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.58%)</title><rect x="257.0" y="1043.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (7 samples, 4.07%)</title><rect x="263.8" y="1123.0" width="48.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="266.8" y="1134.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (7 samples, 4.07%)</title><rect x="263.8" y="1107.0" width="48.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.8" y="1118.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.16%)</title><rect x="277.6" y="1091.0" width="13.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.6" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.74%)</title><rect x="291.3" y="1091.0" width="20.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.3" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.74%)</title><rect x="291.3" y="1075.0" width="20.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.74%)</title><rect x="291.3" y="1059.0" width="20.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.74%)</title><rect x="291.3" y="1043.0" width="20.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.74%)</title><rect x="291.3" y="1027.0" width="20.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.3" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.58%)</title><rect x="305.0" y="1011.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.0" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.58%)</title><rect x="305.0" y="995.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="308.0" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.58%)</title><rect x="305.0" y="979.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="308.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.58%)</title><rect x="305.0" y="963.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="308.0" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.58%)</title><rect x="305.0" y="947.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="308.0" y="958.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.58%)</title><rect x="305.0" y="931.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="308.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (37 samples, 21.51%)</title><rect x="311.9" y="1123.0" width="253.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.9" y="1134.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (36 samples, 20.93%)</title><rect x="318.7" y="1107.0" width="247.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.7" y="1118.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$398/1111994473.process (29 samples, 16.86%)</title><rect x="332.4" y="1091.0" width="199.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="335.4" y="1102.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (28 samples, 16.28%)</title><rect x="339.3" y="1075.0" width="192.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.3" y="1086.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (28 samples, 16.28%)</title><rect x="339.3" y="1059.0" width="192.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.3" y="1070.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.58%)</title><rect x="353.0" y="1043.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.0" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.58%)</title><rect x="353.0" y="1027.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.0" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.58%)</title><rect x="353.0" y="1011.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="356.0" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.58%)</title><rect x="353.0" y="995.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.58%)</title><rect x="353.0" y="979.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.58%)</title><rect x="353.0" y="963.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (25 samples, 14.53%)</title><rect x="359.9" y="1043.0" width="171.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.9" y="1054.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (24 samples, 13.95%)</title><rect x="366.7" y="1027.0" width="164.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.7" y="1038.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (24 samples, 13.95%)</title><rect x="366.7" y="1011.0" width="164.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="369.7" y="1022.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.58%)</title><rect x="373.6" y="995.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="376.6" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.253] (1 samples, 0.58%)</title><rect x="380.5" y="995.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="383.5" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.33%)</title><rect x="387.3" y="995.0" width="27.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="390.3" y="1006.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 5.23%)</title><rect x="414.8" y="995.0" width="61.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="417.8" y="1006.0">__pthr..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.58%)</title><rect x="476.5" y="995.0" width="6.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="479.5" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.58%)</title><rect x="483.4" y="995.0" width="6.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="486.4" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 1.16%)</title><rect x="490.2" y="995.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="493.2" y="1006.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (4 samples, 2.33%)</title><rect x="504.0" y="995.0" width="27.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="507.0" y="1006.0">o..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.16%)</title><rect x="504.0" y="979.0" width="13.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="507.0" y="990.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.16%)</title><rect x="504.0" y="963.0" width="13.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="507.0" y="974.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 1.16%)</title><rect x="517.7" y="979.0" width="13.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="520.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.58%)</title><rect x="531.4" y="1091.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="534.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.58%)</title><rect x="531.4" y="1075.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.58%)</title><rect x="531.4" y="1059.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.58%)</title><rect x="531.4" y="1043.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="534.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.58%)</title><rect x="531.4" y="1027.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.58%)</title><rect x="531.4" y="1011.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.58%)</title><rect x="538.3" y="1091.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="541.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.74%)</title><rect x="545.1" y="1091.0" width="20.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.74%)</title><rect x="545.1" y="1075.0" width="20.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.74%)</title><rect x="545.1" y="1059.0" width="20.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="548.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 1.16%)</title><rect x="545.1" y="1043.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="548.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.58%)</title><rect x="558.8" y="1043.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="561.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="565.7" y="1123.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="565.7" y="1107.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="568.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.58%)</title><rect x="572.6" y="1203.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="575.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.58%)</title><rect x="572.6" y="1187.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="575.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.58%)</title><rect x="572.6" y="1171.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.58%)</title><rect x="572.6" y="1155.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="575.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.58%)</title><rect x="572.6" y="1139.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="575.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.58%)</title><rect x="572.6" y="1123.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="575.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 1.16%)</title><rect x="579.4" y="1251.0" width="13.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/Object.wait (2 samples, 1.16%)</title><rect x="579.4" y="1235.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.4" y="1246.0"></text>
</g>
<g>
<title>JVM_MonitorWait (2 samples, 1.16%)</title><rect x="579.4" y="1219.0" width="13.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="582.4" y="1230.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (2 samples, 1.16%)</title><rect x="579.4" y="1203.0" width="13.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="582.4" y="1214.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.58%)</title><rect x="586.3" y="1187.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="589.3" y="1198.0"></text>
</g>
<g>
<title>start_thread (87 samples, 50.58%)</title><rect x="593.1" y="1251.0" width="596.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="596.1" y="1262.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (87 samples, 50.58%)</title><rect x="593.1" y="1235.0" width="596.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="596.1" y="1246.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (87 samples, 50.58%)</title><rect x="593.1" y="1219.0" width="596.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="596.1" y="1230.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 4.65%)</title><rect x="593.1" y="1203.0" width="54.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="596.1" y="1214.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 4.07%)</title><rect x="593.1" y="1187.0" width="48.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="596.1" y="1198.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.33%)</title><rect x="593.1" y="1171.0" width="27.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="596.1" y="1182.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.74%)</title><rect x="600.0" y="1155.0" width="20.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="603.0" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.16%)</title><rect x="606.9" y="1139.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="609.9" y="1150.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.58%)</title><rect x="613.7" y="1123.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="616.7" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 1.16%)</title><rect x="620.6" y="1171.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.6" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 1.16%)</title><rect x="620.6" y="1155.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="623.6" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 1.16%)</title><rect x="620.6" y="1139.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="623.6" y="1150.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 1.16%)</title><rect x="620.6" y="1123.0" width="13.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="623.6" y="1134.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 1.16%)</title><rect x="620.6" y="1107.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.6" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.58%)</title><rect x="620.6" y="1091.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.6" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.58%)</title><rect x="627.4" y="1091.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="630.4" y="1102.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.58%)</title><rect x="627.4" y="1075.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="630.4" y="1086.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.58%)</title><rect x="634.3" y="1171.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="637.3" y="1182.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.58%)</title><rect x="641.2" y="1187.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="644.2" y="1198.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.58%)</title><rect x="641.2" y="1171.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="644.2" y="1182.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.58%)</title><rect x="641.2" y="1155.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="644.2" y="1166.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.58%)</title><rect x="641.2" y="1139.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="644.2" y="1150.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (79 samples, 45.93%)</title><rect x="648.0" y="1203.0" width="542.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="651.0" y="1214.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (79 samples, 45.93%)</title><rect x="648.0" y="1187.0" width="542.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="651.0" y="1198.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (79 samples, 45.93%)</title><rect x="648.0" y="1171.0" width="542.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="651.0" y="1182.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (74 samples, 43.02%)</title><rect x="648.0" y="1155.0" width="507.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="651.0" y="1166.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (74 samples, 43.02%)</title><rect x="648.0" y="1139.0" width="507.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="651.0" y="1150.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (46 samples, 26.74%)</title><rect x="648.0" y="1123.0" width="315.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="651.0" y="1134.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.58%)</title><rect x="648.0" y="1107.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="651.0" y="1118.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.58%)</title><rect x="648.0" y="1091.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="651.0" y="1102.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.58%)</title><rect x="648.0" y="1075.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="651.0" y="1086.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.58%)</title><rect x="648.0" y="1059.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="651.0" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.58%)</title><rect x="654.9" y="1107.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="657.9" y="1118.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.58%)</title><rect x="654.9" y="1091.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="657.9" y="1102.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 3.49%)</title><rect x="661.7" y="1107.0" width="41.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="664.7" y="1118.0">Mat..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.58%)</title><rect x="661.7" y="1091.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="664.7" y="1102.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) [clone .part.135] (1 samples, 0.58%)</title><rect x="661.7" y="1075.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="664.7" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.91%)</title><rect x="668.6" y="1091.0" width="34.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="671.6" y="1102.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 1.16%)</title><rect x="668.6" y="1075.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="671.6" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.58%)</title><rect x="682.3" y="1075.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="685.3" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.58%)</title><rect x="682.3" y="1059.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="685.3" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.58%)</title><rect x="682.3" y="1043.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="685.3" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.58%)</title><rect x="682.3" y="1027.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="685.3" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.58%)</title><rect x="689.2" y="1075.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="692.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.58%)</title><rect x="689.2" y="1059.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="692.2" y="1070.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.58%)</title><rect x="689.2" y="1043.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="692.2" y="1054.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.58%)</title><rect x="696.0" y="1075.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="699.0" y="1086.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.58%)</title><rect x="702.9" y="1107.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.9" y="1118.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.58%)</title><rect x="702.9" y="1091.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="705.9" y="1102.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.58%)</title><rect x="702.9" y="1075.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="705.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 2.91%)</title><rect x="709.8" y="1107.0" width="34.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="712.8" y="1118.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 2.91%)</title><rect x="709.8" y="1091.0" width="34.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="712.8" y="1102.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.58%)</title><rect x="709.8" y="1075.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="712.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.58%)</title><rect x="709.8" y="1059.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.58%)</title><rect x="716.6" y="1075.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="719.6" y="1086.0"></text>
</g>
<g>
<title>rax_RegIOper::type() const (1 samples, 0.58%)</title><rect x="716.6" y="1059.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.6" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.74%)</title><rect x="723.5" y="1075.0" width="20.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="726.5" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.58%)</title><rect x="723.5" y="1059.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="726.5" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.16%)</title><rect x="730.3" y="1059.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="733.3" y="1070.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.58%)</title><rect x="737.2" y="1043.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="740.2" y="1054.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.58%)</title><rect x="737.2" y="1027.0" width="6.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="740.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 18.60%)</title><rect x="744.1" y="1107.0" width="219.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="747.1" y="1118.0">PhaseChaitin::Register_Alloca..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.58%)</title><rect x="744.1" y="1091.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="747.1" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.58%)</title><rect x="750.9" y="1091.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="753.9" y="1102.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.58%)</title><rect x="757.8" y="1091.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="760.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.58%)</title><rect x="764.7" y="1091.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.7" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.16%)</title><rect x="771.5" y="1091.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="774.5" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.58%)</title><rect x="778.4" y="1075.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="781.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.74%)</title><rect x="785.2" y="1091.0" width="20.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.2" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::prompt_use(Block*, unsigned int) (1 samples, 0.58%)</title><rect x="792.1" y="1075.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="795.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.58%)</title><rect x="799.0" y="1075.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.58%)</title><rect x="799.0" y="1059.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="802.0" y="1070.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.58%)</title><rect x="799.0" y="1043.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="802.0" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 3.49%)</title><rect x="805.8" y="1091.0" width="41.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.8" y="1102.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.58%)</title><rect x="826.4" y="1075.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="829.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.16%)</title><rect x="833.3" y="1075.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="836.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.58%)</title><rect x="847.0" y="1091.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="850.0" y="1102.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.58%)</title><rect x="847.0" y="1075.0" width="6.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="850.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.58%)</title><rect x="853.8" y="1091.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="856.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.16%)</title><rect x="860.7" y="1091.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="863.7" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.58%)</title><rect x="874.4" y="1091.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="877.4" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.33%)</title><rect x="881.3" y="1091.0" width="27.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="884.3" y="1102.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.74%)</title><rect x="888.1" y="1075.0" width="20.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.1" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.58%)</title><rect x="908.7" y="1091.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.7" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.58%)</title><rect x="908.7" y="1075.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.58%)</title><rect x="915.6" y="1091.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="918.6" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="915.6" y="1075.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="918.6" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.74%)</title><rect x="922.4" y="1091.0" width="20.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="925.4" y="1102.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.58%)</title><rect x="922.4" y="1075.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.4" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.58%)</title><rect x="929.3" y="1075.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="932.3" y="1086.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.58%)</title><rect x="929.3" y="1059.0" width="6.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="932.3" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.58%)</title><rect x="936.2" y="1075.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="939.2" y="1086.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.58%)</title><rect x="943.0" y="1091.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.0" y="1102.0"></text>
</g>
<g>
<title>addI_rReg_immNode::two_adr() const (1 samples, 0.58%)</title><rect x="949.9" y="1091.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.9" y="1102.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.58%)</title><rect x="956.7" y="1091.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.7" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 11.63%)</title><rect x="963.6" y="1123.0" width="137.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.6" y="1134.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (8 samples, 4.65%)</title><rect x="963.6" y="1107.0" width="54.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="966.6" y="1118.0">Compi..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (8 samples, 4.65%)</title><rect x="963.6" y="1091.0" width="54.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.6" y="1102.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.58%)</title><rect x="963.6" y="1075.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="966.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.33%)</title><rect x="970.5" y="1075.0" width="27.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="973.5" y="1086.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.33%)</title><rect x="970.5" y="1059.0" width="27.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.5" y="1070.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.74%)</title><rect x="970.5" y="1043.0" width="20.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.58%)</title><rect x="970.5" y="1027.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.16%)</title><rect x="977.3" y="1027.0" width="13.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="980.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.58%)</title><rect x="991.0" y="1043.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 1.16%)</title><rect x="997.9" y="1075.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.58%)</title><rect x="1004.8" y="1059.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.58%)</title><rect x="1011.6" y="1075.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.6" y="1086.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.58%)</title><rect x="1011.6" y="1059.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1014.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.58%)</title><rect x="1018.5" y="1107.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1021.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.58%)</title><rect x="1018.5" y="1091.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="1075.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="1059.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="1043.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1021.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="1027.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1021.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="1011.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="995.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="979.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1021.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="963.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1021.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="947.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1021.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="931.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1021.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="915.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1021.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="899.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="883.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1021.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="867.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1021.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="851.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="835.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="819.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1021.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="803.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="787.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="771.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="755.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="739.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1021.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="723.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1021.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="707.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1021.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="691.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1021.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="675.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="659.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1021.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="643.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="627.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="611.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1021.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="595.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="579.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1021.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="563.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="547.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1021.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="531.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="515.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1021.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="499.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="483.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1021.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="467.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1021.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.58%)</title><rect x="1018.5" y="451.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1021.5" y="462.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.58%)</title><rect x="1018.5" y="435.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.5" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 4.07%)</title><rect x="1025.3" y="1107.0" width="48.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.3" y="1118.0">Phas..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.58%)</title><rect x="1025.3" y="1091.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1028.3" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.58%)</title><rect x="1025.3" y="1075.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.3" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.58%)</title><rect x="1025.3" y="1059.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.3" y="1070.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.58%)</title><rect x="1025.3" y="1043.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.3" y="1054.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.58%)</title><rect x="1025.3" y="1027.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1028.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*&amp;) (1 samples, 0.58%)</title><rect x="1025.3" y="1011.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.58%)</title><rect x="1025.3" y="995.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1028.3" y="1006.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.58%)</title><rect x="1025.3" y="979.0" width="6.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1028.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.58%)</title><rect x="1032.2" y="1091.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1035.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.16%)</title><rect x="1039.1" y="1091.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1042.1" y="1102.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.58%)</title><rect x="1045.9" y="1075.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.16%)</title><rect x="1052.8" y="1091.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.16%)</title><rect x="1052.8" y="1075.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.16%)</title><rect x="1052.8" y="1059.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.16%)</title><rect x="1052.8" y="1043.0" width="13.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.58%)</title><rect x="1066.5" y="1091.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.5" y="1102.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseGVN*) const (1 samples, 0.58%)</title><rect x="1066.5" y="1075.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.74%)</title><rect x="1073.4" y="1107.0" width="20.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.74%)</title><rect x="1073.4" y="1091.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.4" y="1102.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 1.16%)</title><rect x="1073.4" y="1075.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.58%)</title><rect x="1073.4" y="1059.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.58%)</title><rect x="1073.4" y="1043.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.4" y="1054.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.58%)</title><rect x="1073.4" y="1027.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.4" y="1038.0"></text>
</g>
<g>
<title>split_if(IfNode*, PhaseIterGVN*) (1 samples, 0.58%)</title><rect x="1080.2" y="1059.0" width="6.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1083.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.58%)</title><rect x="1080.2" y="1043.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.58%)</title><rect x="1087.1" y="1075.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.1" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.58%)</title><rect x="1094.0" y="1107.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.58%)</title><rect x="1094.0" y="1091.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.58%)</title><rect x="1094.0" y="1075.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.58%)</title><rect x="1094.0" y="1059.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.0" y="1070.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.58%)</title><rect x="1094.0" y="1043.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1097.0" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.65%)</title><rect x="1100.8" y="1123.0" width="54.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.8" y="1134.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.65%)</title><rect x="1100.8" y="1107.0" width="54.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.8" y="1118.0">Parse..</text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.58%)</title><rect x="1100.8" y="1091.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.8" y="1102.0"></text>
</g>
<g>
<title>SafePointNode::bottom_type() const (1 samples, 0.58%)</title><rect x="1100.8" y="1075.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.07%)</title><rect x="1107.7" y="1091.0" width="48.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.7" y="1102.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.07%)</title><rect x="1107.7" y="1075.0" width="48.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.7" y="1086.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 4.07%)</title><rect x="1107.7" y="1059.0" width="48.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.7" y="1070.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.91%)</title><rect x="1107.7" y="1043.0" width="34.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.7" y="1054.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.91%)</title><rect x="1107.7" y="1027.0" width="34.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.7" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.91%)</title><rect x="1107.7" y="1011.0" width="34.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.7" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.91%)</title><rect x="1107.7" y="995.0" width="34.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.7" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.91%)</title><rect x="1107.7" y="979.0" width="34.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.7" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.91%)</title><rect x="1107.7" y="963.0" width="34.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.7" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.91%)</title><rect x="1107.7" y="947.0" width="34.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.7" y="958.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1107.7" y="931.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.7" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1107.7" y="915.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1107.7" y="899.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1107.7" y="883.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1107.7" y="867.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1107.7" y="851.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.7" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1107.7" y="835.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.7" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1107.7" y="819.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1107.7" y="803.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1107.7" y="787.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1107.7" y="771.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1107.7" y="755.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.7" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1107.7" y="739.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1107.7" y="723.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1107.7" y="707.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1107.7" y="691.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1107.7" y="675.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1107.7" y="659.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1107.7" y="643.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1107.7" y="627.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1107.7" y="611.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1107.7" y="595.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1107.7" y="579.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1107.7" y="563.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1107.7" y="547.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1107.7" y="531.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1107.7" y="515.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1107.7" y="499.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1107.7" y="483.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1107.7" y="467.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1107.7" y="451.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1107.7" y="435.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1107.7" y="419.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1107.7" y="403.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1107.7" y="387.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1107.7" y="371.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1107.7" y="355.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1107.7" y="339.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1107.7" y="323.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1107.7" y="307.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1107.7" y="291.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1107.7" y="275.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1107.7" y="259.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1107.7" y="243.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.7" y="254.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.58%)</title><rect x="1107.7" y="227.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.7" y="238.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.58%)</title><rect x="1107.7" y="211.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.7" y="222.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.58%)</title><rect x="1107.7" y="195.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.7" y="206.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.58%)</title><rect x="1107.7" y="179.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.7" y="190.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.58%)</title><rect x="1107.7" y="163.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.7" y="174.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.58%)</title><rect x="1107.7" y="147.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.7" y="158.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.58%)</title><rect x="1107.7" y="131.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.58%)</title><rect x="1114.5" y="851.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1114.5" y="835.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.5" y="846.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.58%)</title><rect x="1114.5" y="819.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.5" y="830.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.58%)</title><rect x="1114.5" y="803.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.5" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1121.4" y="931.0" width="20.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1121.4" y="915.0" width="20.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.74%)</title><rect x="1121.4" y="899.0" width="20.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.74%)</title><rect x="1121.4" y="883.0" width="20.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.74%)</title><rect x="1121.4" y="867.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.74%)</title><rect x="1121.4" y="851.0" width="20.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.74%)</title><rect x="1121.4" y="835.0" width="20.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1121.4" y="819.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.74%)</title><rect x="1121.4" y="803.0" width="20.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.74%)</title><rect x="1121.4" y="787.0" width="20.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.74%)</title><rect x="1121.4" y="771.0" width="20.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.74%)</title><rect x="1121.4" y="755.0" width="20.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.74%)</title><rect x="1121.4" y="739.0" width="20.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1121.4" y="723.0" width="20.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.74%)</title><rect x="1121.4" y="707.0" width="20.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.4" y="718.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.58%)</title><rect x="1121.4" y="691.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.4" y="702.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.58%)</title><rect x="1121.4" y="675.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.4" y="686.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.58%)</title><rect x="1121.4" y="659.0" width="6.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1124.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1128.3" y="691.0" width="13.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1128.3" y="675.0" width="13.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1128.3" y="659.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1128.3" y="643.0" width="13.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1128.3" y="627.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1128.3" y="611.0" width="13.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1128.3" y="595.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1128.3" y="579.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1128.3" y="563.0" width="13.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1128.3" y="547.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1128.3" y="531.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1128.3" y="515.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1128.3" y="499.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1128.3" y="483.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1128.3" y="467.0" width="13.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1128.3" y="451.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1128.3" y="435.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1128.3" y="419.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1128.3" y="403.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1128.3" y="387.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1128.3" y="371.0" width="13.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1128.3" y="355.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1128.3" y="339.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1128.3" y="323.0" width="13.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1128.3" y="307.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1128.3" y="291.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1128.3" y="275.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1128.3" y="259.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.3" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1128.3" y="243.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.3" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1128.3" y="227.0" width="13.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1128.3" y="211.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1128.3" y="195.0" width="13.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1128.3" y="179.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1128.3" y="163.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.3" y="174.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1128.3" y="147.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.3" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.58%)</title><rect x="1128.3" y="131.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.3" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::AccessKind) [clone .part.171] (1 samples, 0.58%)</title><rect x="1128.3" y="115.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::access_atomic_cmpxchg_bool_at(Node*, Node*, Node*, TypePtr const*, int, Node*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.58%)</title><rect x="1128.3" y="99.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.3" y="110.0"></text>
</g>
<g>
<title>BarrierSetC2::atomic_cmpxchg_bool_at(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.58%)</title><rect x="1128.3" y="83.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.3" y="94.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::atomic_cmpxchg_bool_at_resolved(C2AtomicAccess&amp;, Node*, Node*, Type const*) const (1 samples, 0.58%)</title><rect x="1128.3" y="67.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.3" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::bottom_type() const (1 samples, 0.58%)</title><rect x="1128.3" y="51.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.3" y="62.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1135.1" y="147.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.1" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1135.1" y="131.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1135.1" y="115.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1135.1" y="99.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1135.1" y="83.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::null_check_oop(Node*, Node**, bool, bool, bool) (1 samples, 0.58%)</title><rect x="1135.1" y="67.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.1" y="78.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.58%)</title><rect x="1135.1" y="51.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.1" y="62.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.58%)</title><rect x="1135.1" y="35.0" width="6.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1138.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 1.16%)</title><rect x="1142.0" y="1043.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1142.0" y="1027.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.0" y="1038.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1142.0" y="1011.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.0" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.58%)</title><rect x="1142.0" y="995.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.0" y="1006.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.58%)</title><rect x="1142.0" y="979.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1148.8" y="1027.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.8" y="1038.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.58%)</title><rect x="1148.8" y="1011.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.8" y="1022.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.58%)</title><rect x="1148.8" y="995.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.8" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 2.33%)</title><rect x="1155.7" y="1155.0" width="27.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.7" y="1166.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 2.33%)</title><rect x="1155.7" y="1139.0" width="27.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.7" y="1150.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 2.33%)</title><rect x="1155.7" y="1123.0" width="27.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.7" y="1134.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 2.33%)</title><rect x="1155.7" y="1107.0" width="27.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.7" y="1118.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.58%)</title><rect x="1155.7" y="1091.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.7" y="1102.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.58%)</title><rect x="1155.7" y="1075.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.7" y="1086.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.58%)</title><rect x="1155.7" y="1059.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.7" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.58%)</title><rect x="1155.7" y="1043.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.7" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1155.7" y="1027.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.7" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1155.7" y="1011.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.7" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1155.7" y="995.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.7" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.58%)</title><rect x="1155.7" y="979.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.7" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.58%)</title><rect x="1155.7" y="963.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.7" y="974.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.58%)</title><rect x="1155.7" y="947.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.7" y="958.0"></text>
</g>
<g>
<title>ValueStack::is_same(ValueStack*) (1 samples, 0.58%)</title><rect x="1155.7" y="931.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.7" y="942.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.58%)</title><rect x="1162.6" y="1091.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.58%)</title><rect x="1162.6" y="1075.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="1086.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.58%)</title><rect x="1162.6" y="1059.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.6" y="1070.0"></text>
</g>
<g>
<title>LIR_Assembler::ic_call(LIR_OpJavaCall*) (1 samples, 0.58%)</title><rect x="1162.6" y="1043.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="1054.0"></text>
</g>
<g>
<title>MacroAssembler::ic_call(unsigned char*, int) (1 samples, 0.58%)</title><rect x="1162.6" y="1027.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.58%)</title><rect x="1169.4" y="1091.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.4" y="1102.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.58%)</title><rect x="1169.4" y="1075.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.4" y="1086.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.58%)</title><rect x="1169.4" y="1059.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.4" y="1070.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.58%)</title><rect x="1169.4" y="1043.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.4" y="1054.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter_impl(CodeEmitInfo*, ciMethod*, LIR_OprDesc*, int, int, bool, bool) (1 samples, 0.58%)</title><rect x="1169.4" y="1027.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.4" y="1038.0"></text>
</g>
<g>
<title>LIR_List::store(LIR_OprDesc*, LIR_Address*, CodeEmitInfo*, LIR_PatchCode) (1 samples, 0.58%)</title><rect x="1169.4" y="1011.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.4" y="1022.0"></text>
</g>
<g>
<title>RangeCheckElimination::eliminate(IR*) (1 samples, 0.58%)</title><rect x="1176.3" y="1091.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.58%)</title><rect x="1183.1" y="1155.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="1166.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.58%)</title><rect x="1183.1" y="1139.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="1150.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.58%)</title><rect x="1183.1" y="1123.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.1" y="1134.0"></text>
</g>
</g>
</svg>
