<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (205 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (15 samples, 7.32%)</title><rect x="10.0" y="915.0" width="86.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (15 samples, 7.32%)</title><rect x="10.0" y="899.0" width="86.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (15 samples, 7.32%)</title><rect x="10.0" y="883.0" width="86.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="894.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.49%)</title><rect x="10.0" y="867.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.49%)</title><rect x="10.0" y="851.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.49%)</title><rect x="10.0" y="835.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.44%)</title><rect x="15.8" y="867.0" width="28.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.8" y="878.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/618821375.accept (5 samples, 2.44%)</title><rect x="15.8" y="851.0" width="28.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.8" y="862.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 2.44%)</title><rect x="15.8" y="835.0" width="28.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.8" y="846.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.49%)</title><rect x="15.8" y="819.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.49%)</title><rect x="15.8" y="803.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.49%)</title><rect x="15.8" y="787.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.49%)</title><rect x="15.8" y="771.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.49%)</title><rect x="15.8" y="755.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.49%)</title><rect x="15.8" y="739.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.49%)</title><rect x="15.8" y="723.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 1.46%)</title><rect x="21.5" y="819.0" width="17.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 1.46%)</title><rect x="21.5" y="803.0" width="17.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.49%)</title><rect x="33.0" y="787.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.49%)</title><rect x="33.0" y="771.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.49%)</title><rect x="33.0" y="755.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.49%)</title><rect x="33.0" y="739.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.49%)</title><rect x="33.0" y="723.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.49%)</title><rect x="38.8" y="819.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.49%)</title><rect x="38.8" y="803.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.49%)</title><rect x="38.8" y="787.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.49%)</title><rect x="38.8" y="771.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.49%)</title><rect x="38.8" y="755.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.39%)</title><rect x="44.5" y="867.0" width="51.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.5" y="878.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.39%)</title><rect x="44.5" y="851.0" width="51.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.5" y="862.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.93%)</title><rect x="44.5" y="835.0" width="34.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.5" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.46%)</title><rect x="44.5" y="819.0" width="17.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.46%)</title><rect x="44.5" y="803.0" width="17.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.98%)</title><rect x="44.5" y="787.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.98%)</title><rect x="44.5" y="771.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.49%)</title><rect x="44.5" y="755.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.49%)</title><rect x="44.5" y="739.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.49%)</title><rect x="44.5" y="723.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.49%)</title><rect x="44.5" y="707.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.49%)</title><rect x="44.5" y="691.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.49%)</title><rect x="44.5" y="675.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.49%)</title><rect x="44.5" y="659.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.49%)</title><rect x="50.3" y="755.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.3" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.49%)</title><rect x="50.3" y="739.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.49%)</title><rect x="50.3" y="723.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.49%)</title><rect x="50.3" y="707.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.3" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.49%)</title><rect x="50.3" y="691.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.49%)</title><rect x="50.3" y="675.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.49%)</title><rect x="50.3" y="659.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$130/2104580425.shouldBlock (1 samples, 0.49%)</title><rect x="56.0" y="787.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.49%)</title><rect x="56.0" y="771.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.49%)</title><rect x="56.0" y="755.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.49%)</title><rect x="56.0" y="739.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="56.0" y="723.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.49%)</title><rect x="56.0" y="707.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.49%)</title><rect x="56.0" y="691.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="56.0" y="675.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="56.0" y="659.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.49%)</title><rect x="56.0" y="643.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.49%)</title><rect x="56.0" y="627.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.49%)</title><rect x="56.0" y="611.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.49%)</title><rect x="56.0" y="595.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$131/1166572304.test (1 samples, 0.49%)</title><rect x="56.0" y="579.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (3 samples, 1.46%)</title><rect x="61.8" y="819.0" width="17.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.46%)</title><rect x="61.8" y="803.0" width="17.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (3 samples, 1.46%)</title><rect x="61.8" y="787.0" width="17.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.46%)</title><rect x="61.8" y="771.0" width="17.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.98%)</title><rect x="61.8" y="755.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.49%)</title><rect x="67.6" y="739.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.49%)</title><rect x="67.6" y="723.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.49%)</title><rect x="67.6" y="707.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.49%)</title><rect x="67.6" y="691.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.49%)</title><rect x="67.6" y="675.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.49%)</title><rect x="67.6" y="659.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.49%)</title><rect x="67.6" y="643.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.49%)</title><rect x="73.3" y="755.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.49%)</title><rect x="73.3" y="739.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.49%)</title><rect x="73.3" y="723.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.3" y="734.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.49%)</title><rect x="73.3" y="707.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.98%)</title><rect x="79.1" y="835.0" width="11.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.49%)</title><rect x="79.1" y="819.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.49%)</title><rect x="79.1" y="803.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="82.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.49%)</title><rect x="79.1" y="787.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.49%)</title><rect x="79.1" y="771.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.49%)</title><rect x="79.1" y="755.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="79.1" y="739.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.49%)</title><rect x="79.1" y="723.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="79.1" y="707.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="79.1" y="691.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.1" y="702.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.49%)</title><rect x="79.1" y="675.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.49%)</title><rect x="79.1" y="659.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="82.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.49%)</title><rect x="84.8" y="819.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.49%)</title><rect x="84.8" y="803.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAutoAssignedPartitions (1 samples, 0.49%)</title><rect x="84.8" y="787.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.8" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.49%)</title><rect x="84.8" y="771.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="87.8" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.49%)</title><rect x="84.8" y="755.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="87.8" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.49%)</title><rect x="84.8" y="739.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="87.8" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin_VaryDuration(Thread*) (1 samples, 0.49%)</title><rect x="84.8" y="723.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="87.8" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.49%)</title><rect x="84.8" y="707.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="87.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.49%)</title><rect x="90.6" y="835.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.49%)</title><rect x="90.6" y="819.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.49%)</title><rect x="90.6" y="803.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.6" y="814.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.49%)</title><rect x="90.6" y="787.0" width="5.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="93.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (78 samples, 38.05%)</title><rect x="96.3" y="915.0" width="449.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.3" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (78 samples, 38.05%)</title><rect x="96.3" y="899.0" width="449.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.3" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (78 samples, 38.05%)</title><rect x="96.3" y="883.0" width="449.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.3" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/245439147.run (73 samples, 35.61%)</title><rect x="102.1" y="867.0" width="420.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="105.1" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$80 (73 samples, 35.61%)</title><rect x="102.1" y="851.0" width="420.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="105.1" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (73 samples, 35.61%)</title><rect x="102.1" y="835.0" width="420.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="105.1" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (73 samples, 35.61%)</title><rect x="102.1" y="819.0" width="420.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.1" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessPip..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.49%)</title><rect x="102.1" y="803.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="105.1" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.49%)</title><rect x="102.1" y="787.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.49%)</title><rect x="102.1" y="771.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.49%)</title><rect x="102.1" y="755.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (7 samples, 3.41%)</title><rect x="107.9" y="803.0" width="40.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.9" y="814.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.49%)</title><rect x="119.4" y="787.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.95%)</title><rect x="125.1" y="787.0" width="23.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="128.1" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.95%)</title><rect x="125.1" y="771.0" width="23.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="128.1" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.95%)</title><rect x="125.1" y="755.0" width="23.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.1" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.95%)</title><rect x="125.1" y="739.0" width="23.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.1" y="750.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$374/1804963098.accept (4 samples, 1.95%)</title><rect x="125.1" y="723.0" width="23.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.1" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (4 samples, 1.95%)</title><rect x="125.1" y="707.0" width="23.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="128.1" y="718.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 1.95%)</title><rect x="125.1" y="691.0" width="23.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.1" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 1.95%)</title><rect x="125.1" y="675.0" width="23.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.1" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.95%)</title><rect x="125.1" y="659.0" width="23.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.1" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.49%)</title><rect x="125.1" y="643.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="128.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.49%)</title><rect x="125.1" y="627.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="128.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$356/809063122.accept (1 samples, 0.49%)</title><rect x="125.1" y="611.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.46%)</title><rect x="130.9" y="643.0" width="17.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="133.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (10 samples, 4.88%)</title><rect x="148.1" y="803.0" width="57.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="151.1" y="814.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (10 samples, 4.88%)</title><rect x="148.1" y="787.0" width="57.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.1" y="798.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (10 samples, 4.88%)</title><rect x="148.1" y="771.0" width="57.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.1" y="782.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.88%)</title><rect x="148.1" y="755.0" width="57.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.1" y="766.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.88%)</title><rect x="148.1" y="739.0" width="57.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.1" y="750.0">com/li..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 4.88%)</title><rect x="148.1" y="723.0" width="57.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.1" y="734.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.49%)</title><rect x="148.1" y="707.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="151.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 4.39%)</title><rect x="153.9" y="707.0" width="51.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.9" y="718.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.49%)</title><rect x="153.9" y="691.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="156.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.49%)</title><rect x="153.9" y="675.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="156.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.46%)</title><rect x="159.7" y="691.0" width="17.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="162.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.49%)</title><rect x="171.2" y="675.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="174.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.49%)</title><rect x="171.2" y="659.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="174.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.49%)</title><rect x="171.2" y="643.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.49%)</title><rect x="171.2" y="627.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="174.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.49%)</title><rect x="176.9" y="691.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.49%)</title><rect x="176.9" y="675.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.49%)</title><rect x="176.9" y="659.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="179.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (4 samples, 1.95%)</title><rect x="182.7" y="691.0" width="23.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.7" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 1.95%)</title><rect x="182.7" y="675.0" width="23.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.7" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.95%)</title><rect x="182.7" y="659.0" width="23.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.7" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.95%)</title><rect x="182.7" y="643.0" width="23.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.7" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.46%)</title><rect x="188.4" y="627.0" width="17.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.98%)</title><rect x="188.4" y="611.0" width="11.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.49%)</title><rect x="194.2" y="595.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.49%)</title><rect x="200.0" y="611.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (55 samples, 26.83%)</title><rect x="205.7" y="803.0" width="316.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.7" y="814.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (8 samples, 3.90%)</title><rect x="223.0" y="787.0" width="46.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.0" y="798.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 2.93%)</title><rect x="234.5" y="771.0" width="34.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.5" y="782.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 2.93%)</title><rect x="234.5" y="755.0" width="34.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.5" y="766.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.49%)</title><rect x="234.5" y="739.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.49%)</title><rect x="234.5" y="723.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.49%)</title><rect x="234.5" y="707.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="237.5" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.49%)</title><rect x="234.5" y="691.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.5" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 2.44%)</title><rect x="240.2" y="739.0" width="28.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.2" y="750.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.98%)</title><rect x="257.5" y="723.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.49%)</title><rect x="257.5" y="707.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.49%)</title><rect x="263.3" y="707.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="269.0" y="787.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.0" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.49%)</title><rect x="269.0" y="771.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (18 samples, 8.78%)</title><rect x="274.8" y="787.0" width="103.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="277.8" y="798.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (14 samples, 6.83%)</title><rect x="274.8" y="771.0" width="80.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.8" y="782.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.44%)</title><rect x="274.8" y="755.0" width="28.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.8" y="766.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.95%)</title><rect x="274.8" y="739.0" width="23.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.8" y="750.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.95%)</title><rect x="274.8" y="723.0" width="23.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.8" y="734.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.46%)</title><rect x="274.8" y="707.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.8" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.46%)</title><rect x="274.8" y="691.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.8" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.46%)</title><rect x="274.8" y="675.0" width="17.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.46%)</title><rect x="274.8" y="659.0" width="17.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="277.8" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.49%)</title><rect x="274.8" y="643.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="277.8" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.49%)</title><rect x="274.8" y="627.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="277.8" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.98%)</title><rect x="280.5" y="643.0" width="11.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="283.5" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.49%)</title><rect x="286.3" y="627.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="289.3" y="638.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.49%)</title><rect x="286.3" y="611.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="289.3" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.49%)</title><rect x="292.0" y="707.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.0" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.49%)</title><rect x="297.8" y="739.0" width="5.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="300.8" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 4.39%)</title><rect x="303.6" y="755.0" width="51.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="306.6" y="766.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (9 samples, 4.39%)</title><rect x="303.6" y="739.0" width="51.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.6" y="750.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.49%)</title><rect x="303.6" y="723.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.49%)</title><rect x="303.6" y="707.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.49%)</title><rect x="303.6" y="691.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.49%)</title><rect x="303.6" y="675.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.6" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 3.90%)</title><rect x="309.3" y="723.0" width="46.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.3" y="734.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.93%)</title><rect x="320.8" y="707.0" width="34.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.8" y="718.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.46%)</title><rect x="338.1" y="691.0" width="17.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="341.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.49%)</title><rect x="349.6" y="675.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 1.95%)</title><rect x="355.4" y="771.0" width="23.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.4" y="782.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 1.95%)</title><rect x="355.4" y="755.0" width="23.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.4" y="766.0">j..</text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 1.95%)</title><rect x="355.4" y="739.0" width="23.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.4" y="750.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 1.95%)</title><rect x="355.4" y="723.0" width="23.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.4" y="734.0">j..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.46%)</title><rect x="361.1" y="707.0" width="17.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="364.1" y="718.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.46%)</title><rect x="361.1" y="691.0" width="17.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="364.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (24 samples, 11.71%)</title><rect x="378.4" y="787.0" width="138.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.4" y="798.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (24 samples, 11.71%)</title><rect x="378.4" y="771.0" width="138.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="381.4" y="782.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/1729252325.process (21 samples, 10.24%)</title><rect x="378.4" y="755.0" width="120.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.4" y="766.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (21 samples, 10.24%)</title><rect x="378.4" y="739.0" width="120.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.4" y="750.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 10.24%)</title><rect x="378.4" y="723.0" width="120.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.4" y="734.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (21 samples, 10.24%)</title><rect x="378.4" y="707.0" width="120.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="381.4" y="718.0">com/linecorp/de..</text>
</g>
<g>
<title>java/lang/Thread.sleep (21 samples, 10.24%)</title><rect x="378.4" y="691.0" width="120.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="381.4" y="702.0">java/lang/Threa..</text>
</g>
<g>
<title>JVM_Sleep (19 samples, 9.27%)</title><rect x="389.9" y="675.0" width="109.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="392.9" y="686.0">JVM_Sleep</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.46%)</title><rect x="395.7" y="659.0" width="17.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="398.7" y="670.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.46%)</title><rect x="395.7" y="643.0" width="17.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="398.7" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.49%)</title><rect x="412.9" y="659.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="415.9" y="670.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (14 samples, 6.83%)</title><rect x="418.7" y="659.0" width="80.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="421.7" y="670.0">os::sleep..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.49%)</title><rect x="430.2" y="643.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="433.2" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.49%)</title><rect x="436.0" y="643.0" width="5.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="439.0" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 3.90%)</title><rect x="441.7" y="643.0" width="46.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="444.7" y="654.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.49%)</title><rect x="487.8" y="643.0" width="5.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="490.8" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.49%)</title><rect x="493.5" y="643.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="496.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.49%)</title><rect x="499.3" y="755.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="502.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="505.0" y="755.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="508.0" y="766.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.49%)</title><rect x="505.0" y="739.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.49%)</title><rect x="510.8" y="755.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="513.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.49%)</title><rect x="516.5" y="787.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.49%)</title><rect x="516.5" y="771.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.49%)</title><rect x="516.5" y="755.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.49%)</title><rect x="516.5" y="739.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$371/1612509833.accept (1 samples, 0.49%)</title><rect x="516.5" y="723.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$73 (1 samples, 0.49%)</title><rect x="516.5" y="707.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.49%)</title><rect x="516.5" y="691.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="519.5" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.49%)</title><rect x="516.5" y="675.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="519.5" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.49%)</title><rect x="516.5" y="659.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.5" y="670.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.49%)</title><rect x="516.5" y="643.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="519.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.95%)</title><rect x="522.3" y="867.0" width="23.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="525.3" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.95%)</title><rect x="522.3" y="851.0" width="23.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="525.3" y="862.0">j..</text>
</g>
<g>
<title>start_thread (112 samples, 54.63%)</title><rect x="545.3" y="915.0" width="644.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="548.3" y="926.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (112 samples, 54.63%)</title><rect x="545.3" y="899.0" width="644.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="548.3" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 6.34%)</title><rect x="545.3" y="883.0" width="74.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="548.3" y="894.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 6.34%)</title><rect x="545.3" y="867.0" width="74.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="548.3" y="878.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 6.34%)</title><rect x="545.3" y="851.0" width="74.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="548.3" y="862.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 6.34%)</title><rect x="545.3" y="835.0" width="74.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="548.3" y="846.0">G1ParSca..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 3.90%)</title><rect x="574.1" y="819.0" width="46.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="577.1" y="830.0">G1Pa..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.95%)</title><rect x="597.1" y="803.0" width="23.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="600.1" y="814.0">I..</text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.49%)</title><rect x="614.4" y="787.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="617.4" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (99 samples, 48.29%)</title><rect x="620.1" y="883.0" width="569.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="623.1" y="894.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (99 samples, 48.29%)</title><rect x="620.1" y="867.0" width="569.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.1" y="878.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (99 samples, 48.29%)</title><rect x="620.1" y="851.0" width="569.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="623.1" y="862.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (98 samples, 47.80%)</title><rect x="620.1" y="835.0" width="564.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="623.1" y="846.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (96 samples, 46.83%)</title><rect x="620.1" y="819.0" width="552.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="623.1" y="830.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (96 samples, 46.83%)</title><rect x="620.1" y="803.0" width="552.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.1" y="814.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (33 samples, 16.10%)</title><rect x="620.1" y="787.0" width="190.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.1" y="798.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.49%)</title><rect x="620.1" y="771.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="623.1" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.49%)</title><rect x="620.1" y="755.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="623.1" y="766.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.49%)</title><rect x="620.1" y="739.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.1" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.49%)</title><rect x="625.9" y="771.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="628.9" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.49%)</title><rect x="625.9" y="755.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="628.9" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.49%)</title><rect x="625.9" y="739.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="628.9" y="750.0"></text>
</g>
<g>
<title>MachSpillCopyNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.49%)</title><rect x="631.7" y="771.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="634.7" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.95%)</title><rect x="637.4" y="771.0" width="23.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="640.4" y="782.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.49%)</title><rect x="637.4" y="755.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="640.4" y="766.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.49%)</title><rect x="637.4" y="739.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="640.4" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.46%)</title><rect x="643.2" y="755.0" width="17.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="646.2" y="766.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.49%)</title><rect x="648.9" y="739.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="651.9" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.49%)</title><rect x="654.7" y="739.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="657.7" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.49%)</title><rect x="654.7" y="723.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="657.7" y="734.0"></text>
</g>
<g>
<title>LoadINode::ideal_reg() const (1 samples, 0.49%)</title><rect x="654.7" y="707.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="657.7" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.98%)</title><rect x="660.4" y="771.0" width="11.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.4" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.98%)</title><rect x="660.4" y="755.0" width="11.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="663.4" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.49%)</title><rect x="660.4" y="739.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="663.4" y="750.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.49%)</title><rect x="660.4" y="723.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="663.4" y="734.0"></text>
</g>
<g>
<title>testI_regNode::ideal_Opcode() const (1 samples, 0.49%)</title><rect x="666.2" y="739.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="669.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (24 samples, 11.71%)</title><rect x="672.0" y="771.0" width="138.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="675.0" y="782.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.49%)</title><rect x="672.0" y="755.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="675.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.98%)</title><rect x="677.7" y="755.0" width="11.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.7" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="677.7" y="739.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="680.7" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.49%)</title><rect x="683.5" y="739.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="686.5" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="683.5" y="723.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="686.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.46%)</title><rect x="689.2" y="755.0" width="17.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="692.2" y="766.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.49%)</title><rect x="700.7" y="739.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="703.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 3.90%)</title><rect x="706.5" y="755.0" width="46.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="709.5" y="766.0">Phas..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="723.8" y="739.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="726.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.98%)</title><rect x="729.5" y="739.0" width="11.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="732.5" y="750.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.49%)</title><rect x="735.3" y="723.0" width="5.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="738.3" y="734.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.49%)</title><rect x="741.0" y="739.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="744.0" y="750.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.49%)</title><rect x="746.8" y="739.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="749.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.49%)</title><rect x="752.5" y="755.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="755.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.49%)</title><rect x="752.5" y="739.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="755.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.46%)</title><rect x="758.3" y="755.0" width="17.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="761.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.98%)</title><rect x="775.6" y="755.0" width="11.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="778.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.98%)</title><rect x="775.6" y="739.0" width="11.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="778.6" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.98%)</title><rect x="787.1" y="755.0" width="11.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="790.1" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="792.8" y="739.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="795.8" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.49%)</title><rect x="798.6" y="755.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="801.6" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.49%)</title><rect x="798.6" y="739.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="801.6" y="750.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.49%)</title><rect x="798.6" y="723.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="801.6" y="734.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.49%)</title><rect x="804.3" y="755.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="807.3" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (54 samples, 26.34%)</title><rect x="810.1" y="787.0" width="310.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="813.1" y="798.0">Compile::Optimize()</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (46 samples, 22.44%)</title><rect x="810.1" y="771.0" width="264.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="813.1" y="782.0">PhaseIdealLoop::build_and_optimize(..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.49%)</title><rect x="810.1" y="755.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="813.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.49%)</title><rect x="815.9" y="755.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="818.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (38 samples, 18.54%)</title><rect x="821.6" y="755.0" width="218.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="824.6" y="766.0">PhaseIdealLoop::build_loop_la..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.49%)</title><rect x="827.4" y="739.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="830.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (36 samples, 17.56%)</title><rect x="833.1" y="739.0" width="207.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="836.1" y="750.0">PhaseIdealLoop::build_loop_..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 1.46%)</title><rect x="856.1" y="723.0" width="17.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="859.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (29 samples, 14.15%)</title><rect x="873.4" y="723.0" width="166.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="876.4" y="734.0">PhaseIdealLoop::get_l..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.95%)</title><rect x="1017.3" y="707.0" width="23.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.3" y="718.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.98%)</title><rect x="1040.3" y="755.0" width="11.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.49%)</title><rect x="1051.9" y="755.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1054.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.49%)</title><rect x="1051.9" y="739.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.49%)</title><rect x="1051.9" y="723.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.98%)</title><rect x="1057.6" y="755.0" width="11.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.6" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.98%)</title><rect x="1057.6" y="739.0" width="11.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.6" y="750.0"></text>
</g>
<g>
<title>IfNode::Value(PhaseTransform*) const (1 samples, 0.49%)</title><rect x="1057.6" y="723.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.6" y="734.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1063.4" y="723.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.4" y="734.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.49%)</title><rect x="1063.4" y="707.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.4" y="718.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.49%)</title><rect x="1063.4" y="691.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.4" y="702.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="1063.4" y="675.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.4" y="686.0"></text>
</g>
<g>
<title>SuperWord::SuperWord(PhaseIdealLoop*) (1 samples, 0.49%)</title><rect x="1069.1" y="755.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.1" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 3.41%)</title><rect x="1074.9" y="771.0" width="40.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.9" y="782.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 3.41%)</title><rect x="1074.9" y="755.0" width="40.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.9" y="766.0">Pha..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1074.9" y="739.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.9" y="750.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.49%)</title><rect x="1074.9" y="723.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.9" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.49%)</title><rect x="1080.6" y="739.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1083.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.49%)</title><rect x="1086.4" y="739.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.4" y="750.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1092.1" y="739.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.1" y="750.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.49%)</title><rect x="1092.1" y="723.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.1" y="734.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.49%)</title><rect x="1097.9" y="739.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.9" y="750.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.98%)</title><rect x="1103.7" y="739.0" width="11.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.7" y="750.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.98%)</title><rect x="1103.7" y="723.0" width="11.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.7" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="707.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.7" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="691.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.7" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="675.0" width="11.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.7" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="659.0" width="11.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.7" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="643.0" width="11.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.7" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="627.0" width="11.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.7" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="611.0" width="11.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.7" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="595.0" width="11.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.7" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="579.0" width="11.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.7" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="563.0" width="11.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.7" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="547.0" width="11.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1106.7" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="531.0" width="11.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.7" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.98%)</title><rect x="1103.7" y="515.0" width="11.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.7" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1103.7" y="499.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.7" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1103.7" y="483.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.7" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1103.7" y="467.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.7" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1103.7" y="451.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.7" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1103.7" y="435.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.7" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1103.7" y="419.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.7" y="430.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.49%)</title><rect x="1103.7" y="403.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.7" y="414.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="1103.7" y="387.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.7" y="398.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.49%)</title><rect x="1109.4" y="499.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.4" y="510.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="1109.4" y="483.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.4" y="494.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.49%)</title><rect x="1115.2" y="771.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.2" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.49%)</title><rect x="1115.2" y="755.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.2" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.49%)</title><rect x="1115.2" y="739.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.2" y="750.0"></text>
</g>
<g>
<title>ciField::compute_type() (1 samples, 0.49%)</title><rect x="1115.2" y="723.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.2" y="734.0"></text>
</g>
<g>
<title>ciField::compute_type_impl() (1 samples, 0.49%)</title><rect x="1115.2" y="707.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.2" y="718.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.49%)</title><rect x="1115.2" y="691.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.90%)</title><rect x="1120.9" y="787.0" width="46.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.9" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.90%)</title><rect x="1120.9" y="771.0" width="46.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.9" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.90%)</title><rect x="1120.9" y="755.0" width="46.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.9" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.90%)</title><rect x="1120.9" y="739.0" width="46.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.9" y="750.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.90%)</title><rect x="1120.9" y="723.0" width="46.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.9" y="734.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 3.90%)</title><rect x="1120.9" y="707.0" width="46.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.9" y="718.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.49%)</title><rect x="1126.7" y="691.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.7" y="702.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.49%)</title><rect x="1126.7" y="675.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.7" y="686.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.49%)</title><rect x="1126.7" y="659.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.7" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.49%)</title><rect x="1126.7" y="643.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.7" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.49%)</title><rect x="1126.7" y="627.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.7" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.49%)</title><rect x="1126.7" y="611.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.7" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.49%)</title><rect x="1126.7" y="595.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.7" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.49%)</title><rect x="1126.7" y="579.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.7" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.49%)</title><rect x="1126.7" y="563.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.7" y="574.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.49%)</title><rect x="1126.7" y="547.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.7" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1126.7" y="531.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.7" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1126.7" y="515.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.7" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.49%)</title><rect x="1126.7" y="499.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.7" y="510.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.49%)</title><rect x="1126.7" y="483.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.7" y="494.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1126.7" y="467.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.7" y="478.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.49%)</title><rect x="1126.7" y="451.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.7" y="462.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.49%)</title><rect x="1126.7" y="435.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.7" y="446.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.49%)</title><rect x="1126.7" y="419.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.93%)</title><rect x="1132.4" y="691.0" width="34.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.4" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.93%)</title><rect x="1132.4" y="675.0" width="34.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.4" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.44%)</title><rect x="1132.4" y="659.0" width="28.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.4" y="670.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.44%)</title><rect x="1132.4" y="643.0" width="28.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.4" y="654.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.44%)</title><rect x="1132.4" y="627.0" width="28.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.4" y="638.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.44%)</title><rect x="1132.4" y="611.0" width="28.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.4" y="622.0">Pa..</text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1132.4" y="595.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.4" y="606.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.49%)</title><rect x="1132.4" y="579.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.4" y="590.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.49%)</title><rect x="1132.4" y="563.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.4" y="574.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.49%)</title><rect x="1132.4" y="547.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.4" y="558.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.49%)</title><rect x="1132.4" y="531.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.4" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1132.4" y="515.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.4" y="526.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1132.4" y="499.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.4" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1132.4" y="483.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.4" y="494.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1132.4" y="467.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.46%)</title><rect x="1138.2" y="595.0" width="17.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.46%)</title><rect x="1138.2" y="579.0" width="17.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.46%)</title><rect x="1138.2" y="563.0" width="17.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.46%)</title><rect x="1138.2" y="547.0" width="17.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.46%)</title><rect x="1138.2" y="531.0" width="17.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.46%)</title><rect x="1138.2" y="515.0" width="17.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.2" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.49%)</title><rect x="1138.2" y="499.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.2" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.49%)</title><rect x="1138.2" y="483.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.2" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.49%)</title><rect x="1138.2" y="467.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.2" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.49%)</title><rect x="1138.2" y="451.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.2" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.49%)</title><rect x="1138.2" y="435.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.2" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.49%)</title><rect x="1138.2" y="419.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.2" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.49%)</title><rect x="1138.2" y="403.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.2" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.49%)</title><rect x="1138.2" y="387.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.2" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.49%)</title><rect x="1138.2" y="371.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.2" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.49%)</title><rect x="1138.2" y="355.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.2" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1138.2" y="339.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.2" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1138.2" y="323.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.2" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.49%)</title><rect x="1138.2" y="307.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.2" y="318.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.49%)</title><rect x="1138.2" y="291.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.2" y="302.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.49%)</title><rect x="1144.0" y="499.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.0" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1144.0" y="483.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="494.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.49%)</title><rect x="1144.0" y="467.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.0" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1149.7" y="499.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1149.7" y="483.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1149.7" y="467.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1149.7" y="451.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1149.7" y="435.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1149.7" y="419.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1149.7" y="403.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.7" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1149.7" y="387.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1149.7" y="371.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.7" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1149.7" y="355.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1149.7" y="339.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1149.7" y="323.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1149.7" y="307.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1149.7" y="291.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.7" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1149.7" y="275.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.7" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1149.7" y="259.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1149.7" y="243.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1149.7" y="227.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1149.7" y="211.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.49%)</title><rect x="1149.7" y="195.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.49%)</title><rect x="1149.7" y="179.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.7" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1149.7" y="163.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.7" y="174.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.49%)</title><rect x="1149.7" y="147.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.7" y="158.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.49%)</title><rect x="1149.7" y="131.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.7" y="142.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.49%)</title><rect x="1149.7" y="115.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.7" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.5" y="595.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.5" y="579.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.5" y="563.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.5" y="547.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.5" y="531.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.5" y="515.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.5" y="499.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.5" y="483.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.5" y="467.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.5" y="451.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.5" y="435.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.5" y="419.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.5" y="403.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.5" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.5" y="387.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.5" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.5" y="371.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.5" y="355.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.5" y="339.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.5" y="323.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.5" y="307.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.5" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.5" y="291.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.5" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.5" y="275.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.5" y="259.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.5" y="243.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.5" y="227.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1155.5" y="211.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.5" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1155.5" y="195.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.5" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1155.5" y="179.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1155.5" y="163.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1155.5" y="147.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1155.5" y="131.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.49%)</title><rect x="1155.5" y="115.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.49%)</title><rect x="1155.5" y="99.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.5" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.49%)</title><rect x="1155.5" y="83.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.5" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.49%)</title><rect x="1155.5" y="67.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.5" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.49%)</title><rect x="1155.5" y="51.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.5" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.49%)</title><rect x="1155.5" y="35.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.5" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.49%)</title><rect x="1161.2" y="659.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.2" y="670.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.49%)</title><rect x="1161.2" y="643.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.2" y="654.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.49%)</title><rect x="1167.0" y="787.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.0" y="798.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.49%)</title><rect x="1167.0" y="771.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.0" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.49%)</title><rect x="1172.7" y="819.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.7" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.49%)</title><rect x="1172.7" y="803.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.7" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.49%)</title><rect x="1172.7" y="787.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.7" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.49%)</title><rect x="1172.7" y="771.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.7" y="782.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.49%)</title><rect x="1172.7" y="755.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.7" y="766.0"></text>
</g>
<g>
<title>IR::compute_code() (1 samples, 0.49%)</title><rect x="1172.7" y="739.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="750.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (1 samples, 0.49%)</title><rect x="1172.7" y="723.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="734.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_dominator(BlockBegin*, BlockBegin*) (1 samples, 0.49%)</title><rect x="1172.7" y="707.0" width="5.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="718.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.49%)</title><rect x="1178.5" y="819.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.49%)</title><rect x="1184.2" y="835.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="846.0"></text>
</g>
</g>
</svg>
