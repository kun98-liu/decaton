<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (1,371 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.15%)</title><rect x="10.0" y="915.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.15%)</title><rect x="10.0" y="899.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.15%)</title><rect x="10.0" y="883.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="10.9" y="867.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.9" y="878.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.07%)</title><rect x="10.9" y="851.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.9" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="10.9" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.9" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.07%)</title><rect x="10.9" y="819.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.9" y="830.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.22%)</title><rect x="11.7" y="915.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="14.7" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="11.7" y="899.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.7" y="910.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.07%)</title><rect x="11.7" y="883.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.7" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="12.6" y="899.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.6" y="910.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.07%)</title><rect x="12.6" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.6" y="894.0"></text>
</g>
<g>
<title>monitorenter_nofpu Runtime1 stub (1 samples, 0.07%)</title><rect x="13.4" y="899.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="16.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (226 samples, 16.48%)</title><rect x="14.3" y="915.0" width="194.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.3" y="926.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (226 samples, 16.48%)</title><rect x="14.3" y="899.0" width="194.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.3" y="910.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (222 samples, 16.19%)</title><rect x="14.3" y="883.0" width="191.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="894.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.29%)</title><rect x="14.3" y="867.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.29%)</title><rect x="14.3" y="851.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="17.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.29%)</title><rect x="14.3" y="835.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.3" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.29%)</title><rect x="14.3" y="819.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.29%)</title><rect x="14.3" y="803.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.29%)</title><rect x="14.3" y="787.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="14.3" y="771.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.15%)</title><rect x="14.3" y="755.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.3" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="14.3" y="739.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="17.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="15.2" y="739.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="15.2" y="723.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="15.2" y="707.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/521126357.test (1 samples, 0.07%)</title><rect x="15.2" y="691.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsPause$5 (1 samples, 0.07%)</title><rect x="15.2" y="675.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.shouldPausePartition (1 samples, 0.07%)</title><rect x="15.2" y="659.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.pendingTasksCount (1 samples, 0.07%)</title><rect x="15.2" y="643.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="16.0" y="755.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.0" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="16.0" y="739.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="16.9" y="771.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="16.9" y="755.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="16.9" y="739.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="16.9" y="723.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.07%)</title><rect x="17.7" y="867.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="17.7" y="851.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="17.7" y="835.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="17.7" y="819.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="17.7" y="803.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="17.7" y="787.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="17.7" y="771.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="17.7" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="17.7" y="739.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="17.7" y="723.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="734.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="17.7" y="707.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="20.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.51%)</title><rect x="18.6" y="867.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.51%)</title><rect x="18.6" y="851.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.51%)</title><rect x="18.6" y="835.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$272/1582746875.accept (7 samples, 0.51%)</title><rect x="18.6" y="819.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (7 samples, 0.51%)</title><rect x="18.6" y="803.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="21.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.51%)</title><rect x="18.6" y="787.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.6" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.44%)</title><rect x="19.5" y="771.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.5" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.22%)</title><rect x="24.6" y="867.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.6" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (2 samples, 0.15%)</title><rect x="24.6" y="851.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.6" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (2 samples, 0.15%)</title><rect x="24.6" y="835.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.6" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (2 samples, 0.15%)</title><rect x="24.6" y="819.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.6" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.15%)</title><rect x="24.6" y="803.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.6" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.15%)</title><rect x="24.6" y="787.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.6" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="25.5" y="771.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="28.5" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="25.5" y="755.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="28.5" y="766.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.07%)</title><rect x="26.4" y="851.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1 samples, 0.07%)</title><rect x="26.4" y="835.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (171 samples, 12.47%)</title><rect x="27.2" y="867.0" width="147.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.2" y="878.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/1649294436.accept (162 samples, 11.82%)</title><rect x="27.2" y="851.0" width="139.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.2" y="862.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (162 samples, 11.82%)</title><rect x="27.2" y="835.0" width="139.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.2" y="846.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (149 samples, 10.87%)</title><rect x="27.2" y="819.0" width="128.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.2" y="830.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/NoopQuotaApplier.apply (1 samples, 0.07%)</title><rect x="28.9" y="803.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (143 samples, 10.43%)</title><rect x="29.8" y="803.0" width="123.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.8" y="814.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (143 samples, 10.43%)</title><rect x="29.8" y="787.0" width="123.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.8" y="798.0">com/linecorp/de..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (18 samples, 1.31%)</title><rect x="29.8" y="771.0" width="15.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.8" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (18 samples, 1.31%)</title><rect x="29.8" y="755.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.8" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepCounter.increment (2 samples, 0.15%)</title><rect x="32.4" y="739.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/DoubleAdder.add (2 samples, 0.15%)</title><rect x="32.4" y="723.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.4" y="734.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (13 samples, 0.95%)</title><rect x="34.1" y="739.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (1 samples, 0.07%)</title><rect x="44.4" y="723.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (125 samples, 9.12%)</title><rect x="45.3" y="771.0" width="107.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.3" y="782.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (125 samples, 9.12%)</title><rect x="45.3" y="755.0" width="107.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.3" y="766.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (120 samples, 8.75%)</title><rect x="49.6" y="739.0" width="103.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.6" y="750.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 7.59%)</title><rect x="49.6" y="723.0" width="89.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="52.6" y="734.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (8 samples, 0.58%)</title><rect x="49.6" y="707.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (8 samples, 0.58%)</title><rect x="49.6" y="691.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (8 samples, 0.58%)</title><rect x="49.6" y="675.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (8 samples, 0.58%)</title><rect x="49.6" y="659.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.88%)</title><rect x="56.5" y="707.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (12 samples, 0.88%)</title><rect x="56.5" y="691.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.07%)</title><rect x="64.2" y="675.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.15%)</title><rect x="65.1" y="675.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.15%)</title><rect x="65.1" y="659.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (84 samples, 6.13%)</title><rect x="66.8" y="707.0" width="72.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.8" y="718.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (84 samples, 6.13%)</title><rect x="66.8" y="691.0" width="72.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.8" y="702.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 5.98%)</title><rect x="68.5" y="675.0" width="70.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.5" y="686.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 5.98%)</title><rect x="68.5" y="659.0" width="70.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.5" y="670.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (81 samples, 5.91%)</title><rect x="69.4" y="643.0" width="69.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.4" y="654.0">jdk/int..</text>
</g>
<g>
<title>Unsafe_Unpark (35 samples, 2.55%)</title><rect x="69.4" y="627.0" width="30.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="72.4" y="638.0">Un..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.07%)</title><rect x="71.1" y="611.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="74.1" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.15%)</title><rect x="72.0" y="611.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="75.0" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.15%)</title><rect x="73.7" y="611.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="76.7" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.29%)</title><rect x="75.4" y="611.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="78.4" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="77.1" y="595.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="80.1" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.07%)</title><rect x="78.0" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="81.0" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.15%)</title><rect x="78.9" y="611.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="81.9" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.22%)</title><rect x="80.6" y="611.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="83.6" y="622.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="83.2" y="611.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="86.2" y="622.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (6 samples, 0.44%)</title><rect x="84.0" y="611.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="87.0" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.88%)</title><rect x="89.2" y="611.0" width="10.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="92.2" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 3.21%)</title><rect x="99.5" y="627.0" width="37.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="102.5" y="638.0">__p..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.15%)</title><rect x="137.4" y="627.0" width="1.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="140.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 1.17%)</title><rect x="139.1" y="723.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 1.17%)</title><rect x="139.1" y="707.0" width="13.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.66%)</title><rect x="145.1" y="691.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="148.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.66%)</title><rect x="145.1" y="675.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="148.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (2 samples, 0.15%)</title><rect x="152.9" y="803.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.07%)</title><rect x="154.6" y="803.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (8 samples, 0.58%)</title><rect x="155.5" y="819.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (8 samples, 0.58%)</title><rect x="155.5" y="803.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.51%)</title><rect x="156.3" y="787.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.51%)</title><rect x="156.3" y="771.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.29%)</title><rect x="158.9" y="755.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (4 samples, 0.29%)</title><rect x="158.9" y="739.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.15%)</title><rect x="162.3" y="819.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.15%)</title><rect x="162.3" y="803.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.15%)</title><rect x="162.3" y="787.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="165.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.22%)</title><rect x="164.1" y="819.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.22%)</title><rect x="164.1" y="803.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.22%)</title><rect x="164.1" y="787.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.22%)</title><rect x="164.1" y="771.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.1" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.07%)</title><rect x="166.6" y="851.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.51%)</title><rect x="167.5" y="851.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.51%)</title><rect x="167.5" y="835.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.29%)</title><rect x="167.5" y="819.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.29%)</title><rect x="167.5" y="803.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (4 samples, 0.29%)</title><rect x="167.5" y="787.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (3 samples, 0.22%)</title><rect x="170.9" y="819.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.07%)</title><rect x="173.5" y="851.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="173.5" y="835.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="173.5" y="819.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.07%)</title><rect x="173.5" y="803.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (36 samples, 2.63%)</title><rect x="174.4" y="867.0" width="31.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="177.4" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (36 samples, 2.63%)</title><rect x="174.4" y="851.0" width="31.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.4" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (26 samples, 1.90%)</title><rect x="174.4" y="835.0" width="22.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="177.4" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.15%)</title><rect x="174.4" y="819.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="177.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.15%)</title><rect x="174.4" y="803.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (2 samples, 0.15%)</title><rect x="174.4" y="787.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (24 samples, 1.75%)</title><rect x="176.1" y="819.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.07%)</title><rect x="177.0" y="803.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.07%)</title><rect x="177.0" y="787.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.0" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.07%)</title><rect x="177.0" y="771.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$503/404628462.accept (1 samples, 0.07%)</title><rect x="177.0" y="755.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.07%)</title><rect x="177.0" y="739.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="177.0" y="723.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="177.0" y="707.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 1.60%)</title><rect x="177.8" y="803.0" width="19.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (15 samples, 1.09%)</title><rect x="177.8" y="787.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="180.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (15 samples, 1.09%)</title><rect x="177.8" y="771.0" width="12.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (5 samples, 0.36%)</title><rect x="178.7" y="755.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="178.7" y="739.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.07%)</title><rect x="178.7" y="723.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="181.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4000 (1 samples, 0.07%)</title><rect x="178.7" y="707.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="181.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.07%)</title><rect x="178.7" y="691.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="178.7" y="675.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="178.7" y="659.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="181.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.07%)</title><rect x="179.6" y="739.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.07%)</title><rect x="179.6" y="723.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.07%)</title><rect x="179.6" y="707.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="182.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.07%)</title><rect x="179.6" y="691.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.07%)</title><rect x="179.6" y="675.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="182.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.07%)</title><rect x="179.6" y="659.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.07%)</title><rect x="179.6" y="643.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.07%)</title><rect x="179.6" y="627.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.07%)</title><rect x="179.6" y="611.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.6" y="622.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.07%)</title><rect x="179.6" y="595.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="182.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.22%)</title><rect x="180.4" y="739.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.22%)</title><rect x="180.4" y="723.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (3 samples, 0.22%)</title><rect x="180.4" y="707.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (3 samples, 0.22%)</title><rect x="180.4" y="691.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (3 samples, 0.22%)</title><rect x="180.4" y="675.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (9 samples, 0.66%)</title><rect x="183.0" y="755.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.07%)</title><rect x="183.9" y="739.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.51%)</title><rect x="184.7" y="739.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.51%)</title><rect x="184.7" y="723.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="187.7" y="734.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.51%)</title><rect x="184.7" y="707.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="187.7" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="189.9" y="691.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="192.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (4 samples, 0.29%)</title><rect x="190.7" y="787.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (4 samples, 0.29%)</title><rect x="190.7" y="771.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="190.7" y="755.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="190.7" y="739.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="190.7" y="723.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="193.7" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.07%)</title><rect x="190.7" y="707.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.22%)</title><rect x="191.6" y="755.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.07%)</title><rect x="193.3" y="739.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="193.3" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.07%)</title><rect x="194.2" y="787.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (1 samples, 0.07%)</title><rect x="195.0" y="787.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="195.9" y="787.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.07%)</title><rect x="195.9" y="771.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.22%)</title><rect x="196.8" y="835.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.15%)</title><rect x="196.8" y="819.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.15%)</title><rect x="196.8" y="803.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="197.6" y="787.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="197.6" y="771.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="200.6" y="782.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="197.6" y="755.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="197.6" y="739.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="200.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="197.6" y="723.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="198.5" y="819.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnreadySync (1 samples, 0.07%)</title><rect x="198.5" y="803.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="201.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="198.5" y="787.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="198.5" y="771.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="198.5" y="755.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.07%)</title><rect x="198.5" y="739.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.07%)</title><rect x="198.5" y="723.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="198.5" y="707.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="198.5" y="691.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="198.5" y="675.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.5" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.07%)</title><rect x="198.5" y="659.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.22%)</title><rect x="199.4" y="835.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.22%)</title><rect x="199.4" y="819.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="202.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.22%)</title><rect x="199.4" y="803.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="200.2" y="787.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.07%)</title><rect x="200.2" y="771.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="200.2" y="755.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.07%)</title><rect x="200.2" y="739.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="200.2" y="723.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="203.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.07%)</title><rect x="201.1" y="787.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="201.1" y="771.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="201.1" y="755.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="201.1" y="739.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="201.1" y="723.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="204.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="201.1" y="707.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="201.1" y="691.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.1" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="201.1" y="675.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.1" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="201.1" y="659.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.07%)</title><rect x="201.1" y="643.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.1" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="201.1" y="627.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="201.1" y="611.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="201.1" y="595.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.1" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="201.1" y="579.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="204.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.22%)</title><rect x="201.9" y="835.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.22%)</title><rect x="201.9" y="819.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="201.9" y="803.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.07%)</title><rect x="201.9" y="787.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="204.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="201.9" y="771.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="202.8" y="803.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="205.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="202.8" y="787.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.07%)</title><rect x="202.8" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.8" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.07%)</title><rect x="202.8" y="755.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="203.7" y="803.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="203.7" y="787.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="206.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="204.5" y="835.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="204.5" y="819.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.07%)</title><rect x="204.5" y="803.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="207.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="204.5" y="787.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="204.5" y="771.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.5" y="782.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="204.5" y="755.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="207.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (2 samples, 0.15%)</title><rect x="205.4" y="883.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="205.4" y="867.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="205.4" y="851.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="205.4" y="835.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="205.4" y="819.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="208.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="205.4" y="803.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="205.4" y="787.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="208.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="205.4" y="771.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$281/1150526339.test (1 samples, 0.07%)</title><rect x="205.4" y="755.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="206.2" y="803.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.2" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.15%)</title><rect x="207.1" y="883.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.1" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (1 samples, 0.07%)</title><rect x="207.1" y="867.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="210.1" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (1 samples, 0.07%)</title><rect x="207.1" y="851.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.1" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="207.1" y="835.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.1" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (1 samples, 0.07%)</title><rect x="207.1" y="819.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.1" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="207.1" y="803.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.1" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="207.1" y="787.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="210.1" y="798.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (1 samples, 0.07%)</title><rect x="207.1" y="771.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.1" y="782.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (1 samples, 0.07%)</title><rect x="207.1" y="755.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.1" y="766.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (1 samples, 0.07%)</title><rect x="207.1" y="739.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="210.1" y="750.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (1 samples, 0.07%)</title><rect x="207.1" y="723.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="210.1" y="734.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (1 samples, 0.07%)</title><rect x="207.1" y="707.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="210.1" y="718.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (1 samples, 0.07%)</title><rect x="207.1" y="691.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.1" y="702.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.07%)</title><rect x="208.0" y="867.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="211.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,084 samples, 79.07%)</title><rect x="208.8" y="915.0" width="933.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.8" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,084 samples, 79.07%)</title><rect x="208.8" y="899.0" width="933.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.8" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,084 samples, 79.07%)</title><rect x="208.8" y="883.0" width="933.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.8" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/2008654582.run (862 samples, 62.87%)</title><rect x="212.3" y="867.0" width="741.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.3" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/2008654582.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (862 samples, 62.87%)</title><rect x="212.3" y="851.0" width="741.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.3" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (862 samples, 62.87%)</title><rect x="212.3" y="835.0" width="741.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.3" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (827 samples, 60.32%)</title><rect x="212.3" y="819.0" width="711.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.3" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (54 samples, 3.94%)</title><rect x="212.3" y="803.0" width="46.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.3" y="814.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (54 samples, 3.94%)</title><rect x="212.3" y="787.0" width="46.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.3" y="798.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (54 samples, 3.94%)</title><rect x="212.3" y="771.0" width="46.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.3" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (39 samples, 2.84%)</title><rect x="225.2" y="755.0" width="33.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.2" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.29%)</title><rect x="225.2" y="739.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$520/1367584521.accept (2 samples, 0.15%)</title><rect x="226.9" y="723.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (35 samples, 2.55%)</title><rect x="228.6" y="739.0" width="30.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.6" y="750.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$520/1367584521.accept (35 samples, 2.55%)</title><rect x="228.6" y="723.0" width="30.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.6" y="734.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (35 samples, 2.55%)</title><rect x="228.6" y="707.0" width="30.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.6" y="718.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (35 samples, 2.55%)</title><rect x="228.6" y="691.0" width="30.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.6" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (23 samples, 1.68%)</title><rect x="228.6" y="675.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.6" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (23 samples, 1.68%)</title><rect x="228.6" y="659.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.6" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (23 samples, 1.68%)</title><rect x="228.6" y="643.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$505/126270459.accept (1 samples, 0.07%)</title><rect x="246.7" y="627.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.7" y="638.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="247.5" y="627.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="250.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (12 samples, 0.88%)</title><rect x="248.4" y="675.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 0.66%)</title><rect x="251.0" y="659.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.15%)</title><rect x="251.0" y="643.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.51%)</title><rect x="252.7" y="643.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$505/126270459.accept (1 samples, 0.07%)</title><rect x="255.3" y="627.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$0 (1 samples, 0.07%)</title><rect x="255.3" y="611.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.22%)</title><rect x="256.2" y="627.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (3 samples, 0.22%)</title><rect x="256.2" y="611.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.2" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.22%)</title><rect x="256.2" y="595.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.2" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.weakCompareAndSet (3 samples, 0.22%)</title><rect x="256.2" y="579.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (3 samples, 0.22%)</title><rect x="258.7" y="803.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (3 samples, 0.22%)</title><rect x="258.7" y="787.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.7" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.22%)</title><rect x="258.7" y="771.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.22%)</title><rect x="258.7" y="755.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.22%)</title><rect x="258.7" y="739.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (190 samples, 13.86%)</title><rect x="261.3" y="803.0" width="163.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.3" y="814.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (190 samples, 13.86%)</title><rect x="261.3" y="787.0" width="163.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.3" y="798.0">io/micrometer/core/in..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (175 samples, 12.76%)</title><rect x="261.3" y="771.0" width="150.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.3" y="782.0">io/micrometer/core/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (125 samples, 9.12%)</title><rect x="261.3" y="755.0" width="107.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.3" y="766.0">io/micrometer..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (125 samples, 9.12%)</title><rect x="261.3" y="739.0" width="107.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="264.3" y="750.0">io/micrometer..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (114 samples, 8.32%)</title><rect x="266.5" y="723.0" width="98.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.5" y="734.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (114 samples, 8.32%)</title><rect x="266.5" y="707.0" width="98.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.5" y="718.0">io/micromete..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (114 samples, 8.32%)</title><rect x="266.5" y="691.0" width="98.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.5" y="702.0">org/HdrHisto..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (114 samples, 8.32%)</title><rect x="266.5" y="675.0" width="98.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.5" y="686.0">org/HdrHisto..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (114 samples, 8.32%)</title><rect x="266.5" y="659.0" width="98.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.5" y="670.0">org/HdrHisto..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (81 samples, 5.91%)</title><rect x="266.5" y="643.0" width="69.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.5" y="654.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (47 samples, 3.43%)</title><rect x="266.5" y="627.0" width="40.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.5" y="638.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (47 samples, 3.43%)</title><rect x="266.5" y="611.0" width="40.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.5" y="622.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (34 samples, 2.48%)</title><rect x="306.9" y="627.0" width="29.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="309.9" y="638.0">or..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (34 samples, 2.48%)</title><rect x="306.9" y="611.0" width="29.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.9" y="622.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (34 samples, 2.48%)</title><rect x="306.9" y="595.0" width="29.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.9" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (34 samples, 2.48%)</title><rect x="306.9" y="579.0" width="29.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.9" y="590.0">ja..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (33 samples, 2.41%)</title><rect x="336.2" y="643.0" width="28.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.2" y="654.0">or..</text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.36%)</title><rect x="364.6" y="723.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="367.6" y="734.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="364.6" y="707.0" width="4.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="367.6" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (50 samples, 3.65%)</title><rect x="368.9" y="755.0" width="43.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.9" y="766.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (49 samples, 3.57%)</title><rect x="368.9" y="739.0" width="42.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="371.9" y="750.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (12 samples, 0.88%)</title><rect x="399.9" y="723.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="402.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="400.8" y="707.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="403.8" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.73%)</title><rect x="401.6" y="707.0" width="8.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="404.6" y="718.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.73%)</title><rect x="401.6" y="691.0" width="8.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="404.6" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="410.2" y="723.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (1 samples, 0.07%)</title><rect x="411.1" y="739.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="414.1" y="750.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (15 samples, 1.09%)</title><rect x="411.9" y="771.0" width="13.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="414.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (1 samples, 0.07%)</title><rect x="420.5" y="755.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.5" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="421.4" y="755.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="424.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="421.4" y="739.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="424.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (90 samples, 6.56%)</title><rect x="424.9" y="803.0" width="77.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.9" y="814.0">com/linec..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.36%)</title><rect x="425.7" y="787.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="428.7" y="798.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="427.4" y="771.0" width="2.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="430.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (84 samples, 6.13%)</title><rect x="430.0" y="787.0" width="72.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="433.0" y="798.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (84 samples, 6.13%)</title><rect x="430.0" y="771.0" width="72.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="433.0" y="782.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (84 samples, 6.13%)</title><rect x="430.0" y="755.0" width="72.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="433.0" y="766.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (84 samples, 6.13%)</title><rect x="430.0" y="739.0" width="72.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="433.0" y="750.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (84 samples, 6.13%)</title><rect x="430.0" y="723.0" width="72.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="433.0" y="734.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (24 samples, 1.75%)</title><rect x="430.0" y="707.0" width="20.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.07%)</title><rect x="430.0" y="691.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="433.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.07%)</title><rect x="430.0" y="675.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="433.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="430.0" y="659.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="433.0" y="670.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.07%)</title><rect x="430.0" y="643.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="433.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.07%)</title><rect x="430.9" y="691.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.9" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="430.9" y="675.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="433.9" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="430.9" y="659.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="433.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="430.9" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="433.9" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="430.9" y="627.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="433.9" y="638.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.07%)</title><rect x="430.9" y="611.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="433.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.60%)</title><rect x="431.7" y="691.0" width="19.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="434.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.60%)</title><rect x="431.7" y="675.0" width="19.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="434.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="431.7" y="659.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="434.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="431.7" y="643.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="434.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="431.7" y="627.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="434.7" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="431.7" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="434.7" y="622.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="431.7" y="595.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="434.7" y="606.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.07%)</title><rect x="432.6" y="643.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="435.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (20 samples, 1.46%)</title><rect x="433.5" y="659.0" width="17.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="436.5" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="433.5" y="643.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="436.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (19 samples, 1.39%)</title><rect x="434.3" y="643.0" width="16.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="437.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.07%)</title><rect x="449.8" y="627.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (58 samples, 4.23%)</title><rect x="450.7" y="707.0" width="49.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="453.7" y="718.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.22%)</title><rect x="450.7" y="691.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="453.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.22%)</title><rect x="450.7" y="675.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="453.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.80%)</title><rect x="453.3" y="691.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="456.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.29%)</title><rect x="459.3" y="675.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="462.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.22%)</title><rect x="460.1" y="659.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.22%)</title><rect x="460.1" y="643.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="463.1" y="654.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.07%)</title><rect x="461.9" y="627.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="464.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (44 samples, 3.21%)</title><rect x="462.7" y="691.0" width="37.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="465.7" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (44 samples, 3.21%)</title><rect x="462.7" y="675.0" width="37.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.7" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.80%)</title><rect x="462.7" y="659.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="465.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.07%)</title><rect x="463.6" y="643.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="466.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.07%)</title><rect x="463.6" y="627.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.07%)</title><rect x="463.6" y="611.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="466.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.66%)</title><rect x="464.4" y="643.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="467.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (33 samples, 2.41%)</title><rect x="472.2" y="659.0" width="28.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.2" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (33 samples, 2.41%)</title><rect x="472.2" y="643.0" width="28.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="475.2" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (33 samples, 2.41%)</title><rect x="472.2" y="627.0" width="28.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.2" y="638.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.02%)</title><rect x="473.9" y="611.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="476.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="478.2" y="595.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="481.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="478.2" y="579.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.29%)</title><rect x="479.1" y="595.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.29%)</title><rect x="479.1" y="579.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.29%)</title><rect x="479.1" y="563.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="482.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.22%)</title><rect x="479.9" y="547.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.15%)</title><rect x="482.5" y="595.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.15%)</title><rect x="484.2" y="595.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="487.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.15%)</title><rect x="484.2" y="579.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="487.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.15%)</title><rect x="486.0" y="611.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="489.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.15%)</title><rect x="486.0" y="595.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="489.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (2 samples, 0.15%)</title><rect x="486.0" y="579.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (2 samples, 0.15%)</title><rect x="486.0" y="563.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="489.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (2 samples, 0.15%)</title><rect x="486.0" y="547.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="489.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (2 samples, 0.15%)</title><rect x="486.0" y="531.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="489.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (2 samples, 0.15%)</title><rect x="486.0" y="515.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="489.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (2 samples, 0.15%)</title><rect x="486.0" y="499.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="489.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.22%)</title><rect x="487.7" y="611.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.22%)</title><rect x="487.7" y="595.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="490.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.22%)</title><rect x="487.7" y="579.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.22%)</title><rect x="487.7" y="563.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.7" y="574.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.22%)</title><rect x="487.7" y="547.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.22%)</title><rect x="487.7" y="531.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="490.7" y="542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.07%)</title><rect x="489.4" y="515.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.22%)</title><rect x="490.3" y="611.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.3" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.22%)</title><rect x="490.3" y="595.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.22%)</title><rect x="490.3" y="579.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="493.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.07%)</title><rect x="492.8" y="611.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="495.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="492.8" y="595.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="495.8" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="492.8" y="579.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="495.8" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="492.8" y="563.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="495.8" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="492.8" y="547.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="495.8" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="492.8" y="531.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="495.8" y="542.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.07%)</title><rect x="492.8" y="515.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="495.8" y="526.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor5.newInstance (5 samples, 0.36%)</title><rect x="493.7" y="611.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.7" y="622.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.22%)</title><rect x="498.0" y="611.0" width="2.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="501.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.15%)</title><rect x="500.6" y="707.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="503.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.15%)</title><rect x="500.6" y="691.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="503.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.15%)</title><rect x="500.6" y="675.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.15%)</title><rect x="500.6" y="659.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.15%)</title><rect x="500.6" y="643.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="503.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (486 samples, 35.45%)</title><rect x="502.3" y="803.0" width="418.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.3" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessPi..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (48 samples, 3.50%)</title><rect x="503.2" y="787.0" width="41.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="506.2" y="798.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (46 samples, 3.36%)</title><rect x="504.9" y="771.0" width="39.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.9" y="782.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 3.21%)</title><rect x="506.6" y="755.0" width="37.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="509.6" y="766.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (26 samples, 1.90%)</title><rect x="506.6" y="739.0" width="22.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="509.6" y="750.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.29%)</title><rect x="508.3" y="723.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="511.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.29%)</title><rect x="508.3" y="707.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (20 samples, 1.46%)</title><rect x="511.8" y="723.0" width="17.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="514.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (20 samples, 1.46%)</title><rect x="511.8" y="707.0" width="17.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="514.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.51%)</title><rect x="529.0" y="739.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="532.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.22%)</title><rect x="532.4" y="723.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="535.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 0.80%)</title><rect x="535.0" y="739.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="538.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 0.80%)</title><rect x="535.0" y="723.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="538.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="535.0" y="707.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="538.0" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="535.0" y="691.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="538.0" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.07%)</title><rect x="535.0" y="675.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.73%)</title><rect x="535.9" y="707.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="538.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.29%)</title><rect x="541.0" y="691.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="544.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.44%)</title><rect x="544.5" y="787.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="547.5" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.44%)</title><rect x="544.5" y="771.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="547.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (106 samples, 7.73%)</title><rect x="549.6" y="787.0" width="91.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.6" y="798.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (80 samples, 5.84%)</title><rect x="549.6" y="771.0" width="68.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="552.6" y="782.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (33 samples, 2.41%)</title><rect x="558.3" y="755.0" width="28.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="561.3" y="766.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.22%)</title><rect x="566.9" y="739.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.9" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.22%)</title><rect x="566.9" y="723.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.9" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.22%)</title><rect x="566.9" y="707.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="569.9" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.22%)</title><rect x="566.9" y="691.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.9" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.15%)</title><rect x="569.4" y="739.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="572.4" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.15%)</title><rect x="569.4" y="723.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="572.4" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="569.4" y="707.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="572.4" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="569.4" y="691.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="572.4" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.15%)</title><rect x="569.4" y="675.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="572.4" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.15%)</title><rect x="569.4" y="659.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="572.4" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="569.4" y="643.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="572.4" y="654.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="569.4" y="627.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="572.4" y="638.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.07%)</title><rect x="570.3" y="643.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="573.3" y="654.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.15%)</title><rect x="571.2" y="739.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="574.2" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (16 samples, 1.17%)</title><rect x="572.9" y="739.0" width="13.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="575.9" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="586.7" y="755.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="589.7" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (36 samples, 2.63%)</title><rect x="587.5" y="755.0" width="31.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="590.5" y="766.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (36 samples, 2.63%)</title><rect x="587.5" y="739.0" width="31.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="590.5" y="750.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (18 samples, 1.31%)</title><rect x="587.5" y="723.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="590.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.44%)</title><rect x="597.8" y="707.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="600.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.44%)</title><rect x="597.8" y="691.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="600.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (18 samples, 1.31%)</title><rect x="603.0" y="723.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (18 samples, 1.31%)</title><rect x="603.0" y="707.0" width="15.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="606.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.22%)</title><rect x="603.0" y="691.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="606.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.22%)</title><rect x="603.0" y="675.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="606.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.22%)</title><rect x="603.0" y="659.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.07%)</title><rect x="604.7" y="643.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (15 samples, 1.09%)</title><rect x="605.6" y="691.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="608.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="617.6" y="675.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.6" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="617.6" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="620.6" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="617.6" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="620.6" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="617.6" y="627.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="620.6" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="617.6" y="611.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="620.6" y="622.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.07%)</title><rect x="617.6" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="620.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (26 samples, 1.90%)</title><rect x="618.5" y="771.0" width="22.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="621.5" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (25 samples, 1.82%)</title><rect x="619.4" y="755.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="622.4" y="766.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (23 samples, 1.68%)</title><rect x="620.2" y="739.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.80%)</title><rect x="621.1" y="723.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="624.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.80%)</title><rect x="621.1" y="707.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="624.1" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.15%)</title><rect x="628.8" y="691.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="631.8" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (11 samples, 0.80%)</title><rect x="630.6" y="723.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.6" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.36%)</title><rect x="630.6" y="707.0" width="4.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="633.6" y="718.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="630.6" y="691.0" width="4.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="633.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.36%)</title><rect x="634.9" y="707.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.9" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.36%)</title><rect x="634.9" y="691.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="637.9" y="702.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="634.9" y="675.0" width="4.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="637.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="639.2" y="707.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="642.2" y="718.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.07%)</title><rect x="640.0" y="739.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="643.0" y="750.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (1 samples, 0.07%)</title><rect x="640.0" y="723.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="640.0" y="707.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="643.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (62 samples, 4.52%)</title><rect x="640.9" y="787.0" width="53.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="643.9" y="798.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (62 samples, 4.52%)</title><rect x="640.9" y="771.0" width="53.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="643.9" y="782.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="652.1" y="755.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="655.1" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="652.1" y="739.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="655.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.15%)</title><rect x="652.1" y="723.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="655.1" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.15%)</title><rect x="652.1" y="707.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="655.1" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="652.1" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="655.1" y="702.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.07%)</title><rect x="652.1" y="675.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="655.1" y="686.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.07%)</title><rect x="652.9" y="691.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="655.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$430/324674702.process (19 samples, 1.39%)</title><rect x="653.8" y="755.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (19 samples, 1.39%)</title><rect x="653.8" y="739.0" width="16.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="656.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (19 samples, 1.39%)</title><rect x="653.8" y="723.0" width="16.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="656.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.80%)</title><rect x="660.7" y="707.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="663.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 0.73%)</title><rect x="661.5" y="691.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="664.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (9 samples, 0.66%)</title><rect x="670.1" y="755.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="671.0" y="739.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="674.0" y="750.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="671.0" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="674.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="671.9" y="739.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="674.9" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.36%)</title><rect x="672.7" y="739.0" width="4.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="675.7" y="750.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="672.7" y="723.0" width="4.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="675.7" y="734.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="677.0" y="739.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="680.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.taskDataBytes (1 samples, 0.07%)</title><rect x="677.9" y="755.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="680.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (3 samples, 0.22%)</title><rect x="678.8" y="755.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="681.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (3 samples, 0.22%)</title><rect x="678.8" y="739.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.29%)</title><rect x="681.3" y="755.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="684.3" y="766.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.29%)</title><rect x="681.3" y="739.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="684.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="683.1" y="723.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="686.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="683.1" y="707.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="686.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.15%)</title><rect x="683.1" y="691.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="686.1" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.15%)</title><rect x="683.1" y="675.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="686.1" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.15%)</title><rect x="683.1" y="659.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="686.1" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.07%)</title><rect x="683.1" y="643.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="686.1" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.07%)</title><rect x="683.1" y="627.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="686.1" y="638.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="683.1" y="611.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="686.1" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="683.1" y="595.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="686.1" y="606.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="683.1" y="579.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="686.1" y="590.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.07%)</title><rect x="683.1" y="563.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="686.1" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.07%)</title><rect x="683.1" y="547.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="686.1" y="558.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="683.1" y="531.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="686.1" y="542.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="683.9" y="643.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="686.9" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (1 samples, 0.07%)</title><rect x="684.8" y="755.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="687.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.07%)</title><rect x="685.6" y="755.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.6" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.07%)</title><rect x="685.6" y="739.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="688.6" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="686.5" y="755.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.5" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="686.5" y="739.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="689.5" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.07%)</title><rect x="686.5" y="723.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.5" y="734.0"></text>
</g>
<g>
<title>java/util/Objects.checkIndex (1 samples, 0.07%)</title><rect x="686.5" y="707.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="689.5" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.22%)</title><rect x="687.4" y="755.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.4" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.22%)</title><rect x="687.4" y="739.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="690.4" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="689.1" y="723.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="692.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="689.1" y="707.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="692.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.36%)</title><rect x="689.9" y="755.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="692.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.36%)</title><rect x="689.9" y="739.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="692.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.36%)</title><rect x="689.9" y="723.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="692.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.36%)</title><rect x="689.9" y="707.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$511/1430879301.accept (1 samples, 0.07%)</title><rect x="691.7" y="691.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.7" y="702.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.15%)</title><rect x="692.5" y="691.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="695.5" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (1 samples, 0.07%)</title><rect x="694.2" y="787.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="697.2" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (1 samples, 0.07%)</title><rect x="694.2" y="771.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="697.2" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (135 samples, 9.85%)</title><rect x="695.1" y="787.0" width="116.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.1" y="798.0">io/micrometer/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (134 samples, 9.77%)</title><rect x="695.1" y="771.0" width="115.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="698.1" y="782.0">io/micrometer/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (133 samples, 9.70%)</title><rect x="695.1" y="755.0" width="114.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="698.1" y="766.0">io/micrometer/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (109 samples, 7.95%)</title><rect x="695.1" y="739.0" width="93.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="698.1" y="750.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (109 samples, 7.95%)</title><rect x="695.1" y="723.0" width="93.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="698.1" y="734.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (95 samples, 6.93%)</title><rect x="702.9" y="707.0" width="81.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="705.9" y="718.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (95 samples, 6.93%)</title><rect x="702.9" y="691.0" width="81.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="705.9" y="702.0">io/microm..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (95 samples, 6.93%)</title><rect x="702.9" y="675.0" width="81.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="705.9" y="686.0">org/HdrHi..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (95 samples, 6.93%)</title><rect x="702.9" y="659.0" width="81.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="705.9" y="670.0">org/HdrHi..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (95 samples, 6.93%)</title><rect x="702.9" y="643.0" width="81.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="705.9" y="654.0">org/HdrHi..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (64 samples, 4.67%)</title><rect x="702.9" y="627.0" width="55.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="705.9" y="638.0">org/H..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (41 samples, 2.99%)</title><rect x="702.9" y="611.0" width="35.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="705.9" y="622.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (41 samples, 2.99%)</title><rect x="702.9" y="595.0" width="35.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="705.9" y="606.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (23 samples, 1.68%)</title><rect x="738.1" y="611.0" width="19.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="741.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (23 samples, 1.68%)</title><rect x="738.1" y="595.0" width="19.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="741.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (23 samples, 1.68%)</title><rect x="738.1" y="579.0" width="19.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="741.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (23 samples, 1.68%)</title><rect x="738.1" y="563.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="741.1" y="574.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (31 samples, 2.26%)</title><rect x="757.9" y="627.0" width="26.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="760.9" y="638.0">o..</text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.36%)</title><rect x="784.6" y="707.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="787.6" y="718.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.36%)</title><rect x="784.6" y="691.0" width="4.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="787.6" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (24 samples, 1.75%)</title><rect x="788.9" y="739.0" width="20.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.9" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (23 samples, 1.68%)</title><rect x="788.9" y="723.0" width="19.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.9" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (5 samples, 0.36%)</title><rect x="804.4" y="707.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="807.4" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="805.3" y="691.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="808.3" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.22%)</title><rect x="806.1" y="691.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="809.1" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="807.0" y="675.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="810.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (1 samples, 0.07%)</title><rect x="808.7" y="723.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.7" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.07%)</title><rect x="808.7" y="707.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="811.7" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.toNanos (1 samples, 0.07%)</title><rect x="809.6" y="755.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.6" y="766.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$ValueIterator.next (1 samples, 0.07%)</title><rect x="810.4" y="771.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="813.4" y="782.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.nextIndex (1 samples, 0.07%)</title><rect x="810.4" y="755.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="813.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (127 samples, 9.26%)</title><rect x="811.3" y="787.0" width="109.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="814.3" y="798.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (127 samples, 9.26%)</title><rect x="811.3" y="771.0" width="109.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="814.3" y="782.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (127 samples, 9.26%)</title><rect x="811.3" y="755.0" width="109.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.3" y="766.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.07%)</title><rect x="811.3" y="739.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="814.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$517/161408823.accept (1 samples, 0.07%)</title><rect x="811.3" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (126 samples, 9.19%)</title><rect x="812.2" y="739.0" width="108.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.2" y="750.0">java/util/con..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$517/161408823.accept (126 samples, 9.19%)</title><rect x="812.2" y="723.0" width="108.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="815.2" y="734.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (126 samples, 9.19%)</title><rect x="812.2" y="707.0" width="108.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.2" y="718.0">com/linecorp/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (126 samples, 9.19%)</title><rect x="812.2" y="691.0" width="108.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="815.2" y="702.0">io/micrometer..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (119 samples, 8.68%)</title><rect x="812.2" y="675.0" width="102.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="815.2" y="686.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (118 samples, 8.61%)</title><rect x="813.0" y="659.0" width="101.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="816.0" y="670.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (96 samples, 7.00%)</title><rect x="813.0" y="643.0" width="82.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.0" y="654.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (96 samples, 7.00%)</title><rect x="813.0" y="627.0" width="82.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.0" y="638.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (86 samples, 6.27%)</title><rect x="819.0" y="611.0" width="74.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="822.0" y="622.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (86 samples, 6.27%)</title><rect x="819.0" y="595.0" width="74.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.0" y="606.0">io/micro..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (86 samples, 6.27%)</title><rect x="819.0" y="579.0" width="74.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="822.0" y="590.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (86 samples, 6.27%)</title><rect x="819.0" y="563.0" width="74.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.0" y="574.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (86 samples, 6.27%)</title><rect x="819.0" y="547.0" width="74.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.0" y="558.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (67 samples, 4.89%)</title><rect x="819.0" y="531.0" width="57.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.0" y="542.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (42 samples, 3.06%)</title><rect x="819.0" y="515.0" width="36.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="822.0" y="526.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (42 samples, 3.06%)</title><rect x="819.0" y="499.0" width="36.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="822.0" y="510.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (25 samples, 1.82%)</title><rect x="855.2" y="515.0" width="21.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="858.2" y="526.0">o..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (25 samples, 1.82%)</title><rect x="855.2" y="499.0" width="21.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="858.2" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (25 samples, 1.82%)</title><rect x="855.2" y="483.0" width="21.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="858.2" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (25 samples, 1.82%)</title><rect x="855.2" y="467.0" width="21.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.2" y="478.0">j..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (19 samples, 1.39%)</title><rect x="876.7" y="531.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.7" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.22%)</title><rect x="893.1" y="611.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="896.1" y="622.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="893.1" y="595.0" width="2.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="896.1" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (22 samples, 1.60%)</title><rect x="895.6" y="643.0" width="19.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="898.6" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (22 samples, 1.60%)</title><rect x="895.6" y="627.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="898.6" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.15%)</title><rect x="912.9" y="611.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="915.9" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.15%)</title><rect x="912.9" y="595.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.9" y="606.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="912.9" y="579.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="915.9" y="590.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (7 samples, 0.51%)</title><rect x="914.6" y="675.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="917.6" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.29%)</title><rect x="916.3" y="659.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="919.3" y="670.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="916.3" y="643.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="919.3" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="919.7" y="659.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="922.7" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="920.6" y="803.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="923.6" y="814.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="921.5" y="787.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="924.5" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (35 samples, 2.55%)</title><rect x="924.0" y="819.0" width="30.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="927.0" y="830.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (15 samples, 1.09%)</title><rect x="924.0" y="803.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.0" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (12 samples, 0.88%)</title><rect x="926.6" y="787.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="929.6" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (12 samples, 0.88%)</title><rect x="926.6" y="771.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="929.6" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (12 samples, 0.88%)</title><rect x="926.6" y="755.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="929.6" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (9 samples, 0.66%)</title><rect x="929.2" y="739.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="932.2" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.58%)</title><rect x="930.1" y="723.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="933.1" y="734.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="930.9" y="707.0" width="6.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="933.9" y="718.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (20 samples, 1.46%)</title><rect x="937.0" y="803.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="940.0" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.58%)</title><rect x="947.3" y="787.0" width="6.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="950.3" y="798.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="948.1" y="771.0" width="6.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="951.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.07%)</title><rect x="954.2" y="867.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="957.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="954.2" y="851.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="957.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (217 samples, 15.83%)</title><rect x="955.0" y="867.0" width="186.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="958.0" y="878.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (212 samples, 15.46%)</title><rect x="958.5" y="851.0" width="182.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="961.5" y="862.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (197 samples, 14.37%)</title><rect x="958.5" y="835.0" width="169.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="961.5" y="846.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (15 samples, 1.09%)</title><rect x="964.5" y="819.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="967.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.15%)</title><rect x="975.7" y="803.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="978.7" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (1 samples, 0.07%)</title><rect x="975.7" y="787.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="978.7" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.set (1 samples, 0.07%)</title><rect x="975.7" y="771.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="978.7" y="782.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.07%)</title><rect x="975.7" y="755.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="978.7" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.07%)</title><rect x="976.5" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="979.5" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.07%)</title><rect x="976.5" y="771.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="979.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.09%)</title><rect x="977.4" y="819.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="980.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.07%)</title><rect x="990.3" y="819.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="993.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.07%)</title><rect x="990.3" y="803.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="993.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (159 samples, 11.60%)</title><rect x="991.2" y="819.0" width="136.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="994.2" y="830.0">java/util/concurr..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (156 samples, 11.38%)</title><rect x="993.8" y="803.0" width="134.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="996.8" y="814.0">jdk/internal/misc..</text>
</g>
<g>
<title>Unsafe_Park (150 samples, 10.94%)</title><rect x="995.5" y="787.0" width="129.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="998.5" y="798.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.15%)</title><rect x="997.2" y="771.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1000.2" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 1.39%)</title><rect x="998.9" y="771.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1001.9" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.15%)</title><rect x="1006.7" y="755.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1009.7" y="766.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="1007.5" y="739.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1010.5" y="750.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="1008.4" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.4" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.22%)</title><rect x="1009.3" y="755.0" width="2.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1012.3" y="766.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.22%)</title><rect x="1011.8" y="755.0" width="2.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1014.8" y="766.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="1014.4" y="755.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1017.4" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (4 samples, 0.29%)</title><rect x="1015.3" y="771.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1018.3" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (53 samples, 3.87%)</title><rect x="1018.7" y="771.0" width="45.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1021.7" y="782.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (56 samples, 4.08%)</title><rect x="1064.3" y="771.0" width="48.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1067.3" y="782.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.15%)</title><rect x="1112.5" y="771.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1115.5" y="782.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="1114.3" y="771.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1117.3" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.15%)</title><rect x="1115.1" y="771.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1118.1" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="1116.8" y="771.0" width="1.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1119.8" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.15%)</title><rect x="1118.6" y="771.0" width="1.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1121.6" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="1120.3" y="771.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1123.3" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.15%)</title><rect x="1121.1" y="771.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1124.1" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="1122.9" y="771.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.9" y="782.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="1123.7" y="771.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.7" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.22%)</title><rect x="1124.6" y="787.0" width="2.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1127.6" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="1127.2" y="787.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (15 samples, 1.09%)</title><rect x="1128.0" y="835.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1131.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (15 samples, 1.09%)</title><rect x="1128.0" y="819.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1131.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (15 samples, 1.09%)</title><rect x="1128.0" y="803.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1131.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (15 samples, 1.09%)</title><rect x="1128.0" y="787.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1131.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.29%)</title><rect x="1134.1" y="771.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1137.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (3 samples, 0.22%)</title><rect x="1137.5" y="771.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1140.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.07%)</title><rect x="1140.1" y="771.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1143.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.07%)</title><rect x="1140.1" y="755.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1143.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.07%)</title><rect x="1140.9" y="851.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1143.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="1141.8" y="915.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1144.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="1141.8" y="899.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1144.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="1141.8" y="883.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1144.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="1141.8" y="867.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1144.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.07%)</title><rect x="1141.8" y="851.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1144.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.07%)</title><rect x="1141.8" y="835.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1144.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.07%)</title><rect x="1141.8" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1144.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="1141.8" y="803.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1144.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.07%)</title><rect x="1141.8" y="787.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1144.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (1 samples, 0.07%)</title><rect x="1141.8" y="771.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1144.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (1 samples, 0.07%)</title><rect x="1141.8" y="755.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1144.8" y="766.0"></text>
</g>
<g>
<title>start_thread (55 samples, 4.01%)</title><rect x="1142.7" y="915.0" width="47.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1145.7" y="926.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (55 samples, 4.01%)</title><rect x="1142.7" y="899.0" width="47.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1145.7" y="910.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (55 samples, 4.01%)</title><rect x="1142.7" y="883.0" width="47.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.7" y="894.0">Thre..</text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.22%)</title><rect x="1142.7" y="867.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.7" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.22%)</title><rect x="1142.7" y="851.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.7" y="862.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1142.7" y="835.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.7" y="846.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.07%)</title><rect x="1142.7" y="819.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.7" y="830.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="1142.7" y="803.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.7" y="814.0"></text>
</g>
<g>
<title>G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval&lt;CompositeCounterRepresentation, CompositeElapsedCounterSource&gt;&amp;, TimeInterval&lt;CompositeCounterRepresentation, CompositeElapsedCounterSource&gt;&amp;) (1 samples, 0.07%)</title><rect x="1142.7" y="787.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.7" y="798.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.07%)</title><rect x="1142.7" y="771.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.7" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="1142.7" y="755.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1145.7" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="1142.7" y="739.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1145.7" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.15%)</title><rect x="1143.5" y="835.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.5" y="846.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="1143.5" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.5" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.07%)</title><rect x="1144.4" y="819.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1144.4" y="803.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1144.4" y="787.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.4" y="798.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.07%)</title><rect x="1144.4" y="771.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (51 samples, 3.72%)</title><rect x="1145.2" y="867.0" width="43.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.2" y="878.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (51 samples, 3.72%)</title><rect x="1145.2" y="851.0" width="43.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.2" y="862.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (51 samples, 3.72%)</title><rect x="1145.2" y="835.0" width="43.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.2" y="846.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (48 samples, 3.50%)</title><rect x="1145.2" y="819.0" width="41.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.2" y="830.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (48 samples, 3.50%)</title><rect x="1145.2" y="803.0" width="41.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.2" y="814.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (21 samples, 1.53%)</title><rect x="1145.2" y="787.0" width="18.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.2" y="798.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.07%)</title><rect x="1145.2" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.2" y="782.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="1145.2" y="755.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.2" y="766.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="1145.2" y="739.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.2" y="750.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.07%)</title><rect x="1145.2" y="723.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.2" y="734.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.07%)</title><rect x="1146.1" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.1" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.07%)</title><rect x="1147.0" y="771.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.0" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.07%)</title><rect x="1147.0" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.0" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.15%)</title><rect x="1147.8" y="771.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.15%)</title><rect x="1147.8" y="755.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.07%)</title><rect x="1147.8" y="739.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.8" y="750.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.07%)</title><rect x="1147.8" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.8" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.07%)</title><rect x="1148.7" y="739.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 1.17%)</title><rect x="1149.5" y="771.0" width="13.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.5" y="782.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="1149.5" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="766.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.07%)</title><rect x="1150.4" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.15%)</title><rect x="1151.3" y="755.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1151.3" y="739.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.3" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.07%)</title><rect x="1152.1" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.15%)</title><rect x="1153.0" y="755.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.0" y="766.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.07%)</title><rect x="1153.9" y="739.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.15%)</title><rect x="1154.7" y="755.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.15%)</title><rect x="1154.7" y="739.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.15%)</title><rect x="1156.4" y="755.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.4" y="766.0"></text>
</g>
<g>
<title>TypeLong::make(long) (1 samples, 0.07%)</title><rect x="1157.3" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.07%)</title><rect x="1158.2" y="755.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.15%)</title><rect x="1159.0" y="755.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.0" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.07%)</title><rect x="1160.7" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.7" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="1160.7" y="739.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.7" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.07%)</title><rect x="1160.7" y="723.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.7" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.15%)</title><rect x="1161.6" y="755.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.6" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="1162.5" y="739.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.5" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 1.53%)</title><rect x="1163.3" y="787.0" width="18.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="798.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (8 samples, 0.58%)</title><rect x="1163.3" y="771.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (8 samples, 0.58%)</title><rect x="1163.3" y="755.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1163.3" y="739.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1163.3" y="723.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.3" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.36%)</title><rect x="1164.2" y="739.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 0.29%)</title><rect x="1165.0" y="723.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.29%)</title><rect x="1165.0" y="707.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.29%)</title><rect x="1165.0" y="691.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.07%)</title><rect x="1168.5" y="739.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1168.5" y="723.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.07%)</title><rect x="1169.3" y="739.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1169.3" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.3" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.07%)</title><rect x="1169.3" y="707.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.3" y="718.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.07%)</title><rect x="1170.2" y="771.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.07%)</title><rect x="1171.1" y="771.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.07%)</title><rect x="1171.1" y="755.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="739.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="707.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="691.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="675.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="659.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="643.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="627.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="611.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="595.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="579.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="563.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="547.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="531.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="515.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="499.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="483.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="467.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="451.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="435.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="419.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="403.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="387.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="371.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="355.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="339.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="323.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="307.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="291.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="275.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="243.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="227.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="211.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.1" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="195.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.1" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="179.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.1" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="163.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.1" y="174.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1171.1" y="147.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.1" y="158.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1171.1" y="131.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1174.1" y="142.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 0.29%)</title><rect x="1171.9" y="771.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.07%)</title><rect x="1171.9" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.9" y="766.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="1171.9" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1172.8" y="755.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.15%)</title><rect x="1173.6" y="755.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.07%)</title><rect x="1173.6" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="750.0"></text>
</g>
<g>
<title>MemBarAcquireNode::Opcode() const (1 samples, 0.07%)</title><rect x="1173.6" y="723.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.07%)</title><rect x="1174.5" y="739.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.44%)</title><rect x="1175.4" y="771.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.4" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.36%)</title><rect x="1175.4" y="755.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.4" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1175.4" y="739.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.4" y="750.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1176.2" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.2" y="750.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1177.1" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.07%)</title><rect x="1177.1" y="723.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1178.0" y="739.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.07%)</title><rect x="1178.0" y="723.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="707.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="691.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="675.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="659.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.0" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="643.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="627.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="611.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="595.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="579.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="563.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.0" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="547.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.0" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="531.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="515.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="499.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="510.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.07%)</title><rect x="1178.0" y="483.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="494.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1178.0" y="467.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="478.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1178.8" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.07%)</title><rect x="1178.8" y="707.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="718.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1179.7" y="755.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1180.5" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1180.5" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="766.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1180.5" y="739.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="750.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1181.4" y="787.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.36%)</title><rect x="1182.3" y="787.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.36%)</title><rect x="1182.3" y="771.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.36%)</title><rect x="1182.3" y="755.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.36%)</title><rect x="1182.3" y="739.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.36%)</title><rect x="1182.3" y="723.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.29%)</title><rect x="1182.3" y="707.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.29%)</title><rect x="1182.3" y="691.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.29%)</title><rect x="1182.3" y="675.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.29%)</title><rect x="1182.3" y="659.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.29%)</title><rect x="1182.3" y="643.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.29%)</title><rect x="1182.3" y="627.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1182.3" y="611.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1182.3" y="595.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1182.3" y="579.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1182.3" y="563.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1182.3" y="547.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1182.3" y="531.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1182.3" y="515.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1182.3" y="499.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1182.3" y="483.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1182.3" y="467.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1182.3" y="451.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1182.3" y="435.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1182.3" y="419.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="403.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1182.3" y="371.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1182.3" y="355.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1182.3" y="339.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1182.3" y="323.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1182.3" y="307.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1182.3" y="291.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1182.3" y="275.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1182.3" y="259.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.3" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1182.3" y="243.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.3" y="227.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.3" y="211.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="222.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1182.3" y="195.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="206.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1182.3" y="179.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="190.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1182.3" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="174.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.07%)</title><rect x="1182.3" y="147.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1183.1" y="403.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1183.1" y="387.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1183.1" y="371.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1183.1" y="355.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1183.1" y="339.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.1" y="323.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.1" y="307.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.1" y="291.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.1" y="275.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.1" y="259.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.1" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.1" y="227.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.1" y="211.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="222.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.07%)</title><rect x="1183.1" y="195.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="206.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1183.1" y="179.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="190.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.07%)</title><rect x="1183.1" y="163.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="174.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.07%)</title><rect x="1183.1" y="147.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="158.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1183.1" y="131.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="142.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.07%)</title><rect x="1183.1" y="115.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="126.0"></text>
</g>
<g>
<title>ciInstanceKlass::super() (1 samples, 0.07%)</title><rect x="1183.1" y="99.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="110.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1183.1" y="83.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="94.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.07%)</title><rect x="1183.1" y="67.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="78.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.07%)</title><rect x="1183.1" y="51.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="62.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1183.1" y="35.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1186.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="323.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="307.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.07%)</title><rect x="1184.0" y="291.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1184.0" y="275.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.0" y="286.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.07%)</title><rect x="1184.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="243.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="254.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.0" y="227.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.0" y="238.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="211.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="222.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.07%)</title><rect x="1184.0" y="195.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.0" y="206.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1184.0" y="179.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="190.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1184.0" y="163.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="174.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1184.0" y="147.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.0" y="158.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1184.0" y="131.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="142.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1184.0" y="115.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="126.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1184.0" y="99.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="110.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.07%)</title><rect x="1184.0" y="83.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1184.8" y="611.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="622.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1184.8" y="595.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1185.7" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.7" y="718.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1185.7" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="702.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1185.7" y="675.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="686.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.22%)</title><rect x="1186.6" y="819.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.6" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.22%)</title><rect x="1186.6" y="803.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.6" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.22%)</title><rect x="1186.6" y="787.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.22%)</title><rect x="1186.6" y="771.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="782.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (2 samples, 0.15%)</title><rect x="1186.6" y="755.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.15%)</title><rect x="1186.6" y="739.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="750.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.15%)</title><rect x="1186.6" y="723.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.15%)</title><rect x="1186.6" y="707.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.6" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.15%)</title><rect x="1186.6" y="691.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.6" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.15%)</title><rect x="1186.6" y="675.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.6" y="659.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="670.0"></text>
</g>
<g>
<title>ciInstanceKlass::java_mirror() (1 samples, 0.07%)</title><rect x="1186.6" y="643.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.6" y="654.0"></text>
</g>
<g>
<title>ciKlass::java_mirror() (1 samples, 0.07%)</title><rect x="1186.6" y="627.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.07%)</title><rect x="1186.6" y="611.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.07%)</title><rect x="1186.6" y="595.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="606.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.07%)</title><rect x="1186.6" y="579.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.6" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1187.4" y="659.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.4" y="670.0"></text>
</g>
<g>
<title>Instruction::as_NewArray() (1 samples, 0.07%)</title><rect x="1187.4" y="643.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.4" y="654.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.07%)</title><rect x="1188.3" y="755.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.3" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.07%)</title><rect x="1188.3" y="739.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.07%)</title><rect x="1188.3" y="723.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (1 samples, 0.07%)</title><rect x="1188.3" y="707.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.3" y="718.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, Address) (1 samples, 0.07%)</title><rect x="1188.3" y="691.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="702.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.1" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.1" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.1" y="851.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1189.1" y="835.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="846.0"></text>
</g>
</g>
</svg>
