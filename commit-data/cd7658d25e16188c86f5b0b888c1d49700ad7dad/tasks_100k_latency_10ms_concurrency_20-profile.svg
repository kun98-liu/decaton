<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (290 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.34%)</title><rect x="10.0" y="1075.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="10.0" y="1059.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.34%)</title><rect x="10.0" y="1043.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.34%)</title><rect x="10.0" y="1027.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.34%)</title><rect x="10.0" y="1011.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (17 samples, 5.86%)</title><rect x="14.1" y="1075.0" width="69.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.1" y="1086.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (17 samples, 5.86%)</title><rect x="14.1" y="1059.0" width="69.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.1" y="1070.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (17 samples, 5.86%)</title><rect x="14.1" y="1043.0" width="69.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.1" y="1054.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.34%)</title><rect x="14.1" y="1027.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.34%)</title><rect x="14.1" y="1011.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.38%)</title><rect x="18.1" y="1027.0" width="16.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/1015359200.accept (4 samples, 1.38%)</title><rect x="18.1" y="1011.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.38%)</title><rect x="18.1" y="995.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (2 samples, 0.69%)</title><rect x="18.1" y="979.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.69%)</title><rect x="18.1" y="963.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.69%)</title><rect x="18.1" y="947.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.69%)</title><rect x="18.1" y="931.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.69%)</title><rect x="18.1" y="915.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.69%)</title><rect x="18.1" y="899.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.34%)</title><rect x="18.1" y="883.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.34%)</title><rect x="18.1" y="867.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.34%)</title><rect x="18.1" y="851.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.34%)</title><rect x="22.2" y="883.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.34%)</title><rect x="22.2" y="867.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.34%)</title><rect x="22.2" y="851.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.34%)</title><rect x="22.2" y="835.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.34%)</title><rect x="26.3" y="979.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="29.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.34%)</title><rect x="26.3" y="963.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.34%)</title><rect x="26.3" y="947.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.34%)</title><rect x="30.3" y="979.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.34%)</title><rect x="30.3" y="963.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.34%)</title><rect x="30.3" y="947.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.34%)</title><rect x="30.3" y="931.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.14%)</title><rect x="34.4" y="1027.0" width="48.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.4" y="1038.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.14%)</title><rect x="34.4" y="1011.0" width="48.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.4" y="1022.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 3.10%)</title><rect x="34.4" y="995.0" width="36.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.4" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.03%)</title><rect x="34.4" y="979.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="37.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.03%)</title><rect x="34.4" y="963.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.34%)</title><rect x="34.4" y="947.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.34%)</title><rect x="34.4" y="931.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.34%)</title><rect x="34.4" y="915.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="37.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.34%)</title><rect x="34.4" y="899.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.4" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.34%)</title><rect x="34.4" y="883.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="37.4" y="894.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.34%)</title><rect x="34.4" y="867.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="37.4" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.34%)</title><rect x="34.4" y="851.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="37.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.69%)</title><rect x="38.5" y="947.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.34%)</title><rect x="38.5" y="931.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.34%)</title><rect x="38.5" y="915.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.34%)</title><rect x="42.6" y="931.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.34%)</title><rect x="42.6" y="915.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.34%)</title><rect x="42.6" y="899.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.34%)</title><rect x="42.6" y="883.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="45.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.34%)</title><rect x="42.6" y="867.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.34%)</title><rect x="42.6" y="851.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.34%)</title><rect x="42.6" y="835.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.6" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.34%)</title><rect x="42.6" y="819.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.6" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.34%)</title><rect x="42.6" y="803.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="42.6" y="787.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="45.6" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="42.6" y="771.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="45.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.34%)</title><rect x="42.6" y="755.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="45.6" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.34%)</title><rect x="42.6" y="739.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="45.6" y="750.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.34%)</title><rect x="42.6" y="723.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="45.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (5 samples, 1.72%)</title><rect x="46.6" y="979.0" width="20.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="49.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.34%)</title><rect x="46.6" y="963.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.appendRelaxed (1 samples, 0.34%)</title><rect x="46.6" y="947.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="49.6" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.34%)</title><rect x="46.6" y="931.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="49.6" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.34%)</title><rect x="46.6" y="915.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1500 (2 samples, 0.69%)</title><rect x="50.7" y="963.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.34%)</title><rect x="54.8" y="947.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.69%)</title><rect x="58.8" y="963.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.34%)</title><rect x="58.8" y="947.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.34%)</title><rect x="58.8" y="931.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.34%)</title><rect x="58.8" y="915.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.34%)</title><rect x="58.8" y="899.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.34%)</title><rect x="58.8" y="883.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="61.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.34%)</title><rect x="58.8" y="867.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.34%)</title><rect x="58.8" y="851.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="61.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.34%)</title><rect x="62.9" y="947.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.34%)</title><rect x="62.9" y="931.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.34%)</title><rect x="62.9" y="915.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.34%)</title><rect x="62.9" y="899.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.9" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.34%)</title><rect x="62.9" y="883.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.9" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.34%)</title><rect x="62.9" y="867.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.34%)</title><rect x="67.0" y="979.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.34%)</title><rect x="67.0" y="963.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.34%)</title><rect x="67.0" y="947.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.34%)</title><rect x="67.0" y="931.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.34%)</title><rect x="67.0" y="915.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.0" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.34%)</title><rect x="67.0" y="899.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$267/1963245565.accept (1 samples, 0.34%)</title><rect x="67.0" y="883.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.34%)</title><rect x="67.0" y="867.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="70.0" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.34%)</title><rect x="67.0" y="851.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.0" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.34%)</title><rect x="67.0" y="835.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.0" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.34%)</title><rect x="67.0" y="819.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.0" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.34%)</title><rect x="67.0" y="803.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.0" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.34%)</title><rect x="67.0" y="787.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.34%)</title><rect x="71.0" y="995.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="74.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.34%)</title><rect x="71.0" y="979.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.34%)</title><rect x="71.0" y="963.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="71.0" y="947.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="74.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.34%)</title><rect x="71.0" y="931.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.34%)</title><rect x="71.0" y="915.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.34%)</title><rect x="71.0" y="899.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.34%)</title><rect x="71.0" y="883.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.writeInt (1 samples, 0.34%)</title><rect x="71.0" y="867.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.69%)</title><rect x="75.1" y="995.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.34%)</title><rect x="75.1" y="979.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.34%)</title><rect x="75.1" y="963.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="78.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.34%)</title><rect x="75.1" y="947.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.34%)</title><rect x="75.1" y="931.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="78.1" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.34%)</title><rect x="75.1" y="915.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (1 samples, 0.34%)</title><rect x="75.1" y="899.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.1" y="910.0"></text>
</g>
<g>
<title>__write (1 samples, 0.34%)</title><rect x="75.1" y="883.0" width="4.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="78.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.34%)</title><rect x="79.2" y="979.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="82.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.34%)</title><rect x="79.2" y="963.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.34%)</title><rect x="79.2" y="947.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.34%)</title><rect x="79.2" y="931.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.34%)</title><rect x="79.2" y="915.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="82.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.34%)</title><rect x="79.2" y="899.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.2" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (191 samples, 65.86%)</title><rect x="83.2" y="1075.0" width="777.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="86.2" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (191 samples, 65.86%)</title><rect x="83.2" y="1059.0" width="777.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="86.2" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (191 samples, 65.86%)</title><rect x="83.2" y="1043.0" width="777.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.2" y="1054.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/420501188.run (182 samples, 62.76%)</title><rect x="87.3" y="1027.0" width="740.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.3" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/420501188.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (182 samples, 62.76%)</title><rect x="87.3" y="1011.0" width="740.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.3" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (182 samples, 62.76%)</title><rect x="87.3" y="995.0" width="740.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.3" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (175 samples, 60.34%)</title><rect x="95.4" y="979.0" width="712.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.4" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (10 samples, 3.45%)</title><rect x="95.4" y="963.0" width="40.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.4" y="974.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 3.45%)</title><rect x="95.4" y="947.0" width="40.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.4" y="958.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 3.45%)</title><rect x="95.4" y="931.0" width="40.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.4" y="942.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.07%)</title><rect x="111.7" y="915.0" width="24.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.7" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.69%)</title><rect x="111.7" y="899.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$519/567651795.accept (2 samples, 0.69%)</title><rect x="111.7" y="883.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="114.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.38%)</title><rect x="119.9" y="899.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$519/567651795.accept (4 samples, 1.38%)</title><rect x="119.9" y="883.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (4 samples, 1.38%)</title><rect x="119.9" y="867.0" width="16.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="122.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 1.38%)</title><rect x="119.9" y="851.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 1.38%)</title><rect x="119.9" y="835.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.38%)</title><rect x="119.9" y="819.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.69%)</title><rect x="119.9" y="803.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$505/1087422169.accept (1 samples, 0.34%)</title><rect x="119.9" y="787.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="122.9" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.34%)</title><rect x="123.9" y="787.0" width="4.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="126.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.69%)</title><rect x="128.0" y="803.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$504/388483164.accept (1 samples, 0.34%)</title><rect x="132.1" y="787.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="135.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (2 samples, 0.69%)</title><rect x="136.1" y="963.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (23 samples, 7.93%)</title><rect x="144.3" y="963.0" width="93.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="147.3" y="974.0">com/linecor..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (23 samples, 7.93%)</title><rect x="144.3" y="947.0" width="93.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.3" y="958.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (16 samples, 5.52%)</title><rect x="144.3" y="931.0" width="65.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="147.3" y="942.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (14 samples, 4.83%)</title><rect x="144.3" y="915.0" width="56.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.3" y="926.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (14 samples, 4.83%)</title><rect x="144.3" y="899.0" width="56.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.3" y="910.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (11 samples, 3.79%)</title><rect x="148.3" y="883.0" width="44.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="151.3" y="894.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (11 samples, 3.79%)</title><rect x="148.3" y="867.0" width="44.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.3" y="878.0">io/m..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (11 samples, 3.79%)</title><rect x="148.3" y="851.0" width="44.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.3" y="862.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (11 samples, 3.79%)</title><rect x="148.3" y="835.0" width="44.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.3" y="846.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (11 samples, 3.79%)</title><rect x="148.3" y="819.0" width="44.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="151.3" y="830.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (9 samples, 3.10%)</title><rect x="148.3" y="803.0" width="36.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.3" y="814.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (6 samples, 2.07%)</title><rect x="148.3" y="787.0" width="24.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.3" y="798.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (6 samples, 2.07%)</title><rect x="148.3" y="771.0" width="24.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.3" y="782.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (3 samples, 1.03%)</title><rect x="172.8" y="787.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (3 samples, 1.03%)</title><rect x="172.8" y="771.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (3 samples, 1.03%)</title><rect x="172.8" y="755.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="175.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (3 samples, 1.03%)</title><rect x="172.8" y="739.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="175.8" y="750.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (2 samples, 0.69%)</title><rect x="185.0" y="803.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.0" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.69%)</title><rect x="193.1" y="883.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="196.1" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="197.2" y="867.0" width="4.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="200.2" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (2 samples, 0.69%)</title><rect x="201.2" y="915.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.2" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.69%)</title><rect x="201.2" y="899.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.2" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.34%)</title><rect x="205.3" y="883.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.3" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.rotate (1 samples, 0.34%)</title><rect x="205.3" y="867.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.3" y="878.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (7 samples, 2.41%)</title><rect x="209.4" y="931.0" width="28.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.4" y="942.0">ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.34%)</title><rect x="229.7" y="915.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.7" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="233.8" y="915.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="236.8" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="233.8" y="899.0" width="4.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="236.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (27 samples, 9.31%)</title><rect x="237.9" y="963.0" width="109.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.9" y="974.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (27 samples, 9.31%)</title><rect x="237.9" y="947.0" width="109.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.9" y="958.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (27 samples, 9.31%)</title><rect x="237.9" y="931.0" width="109.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.9" y="942.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 9.31%)</title><rect x="237.9" y="915.0" width="109.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.9" y="926.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 9.31%)</title><rect x="237.9" y="899.0" width="109.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.9" y="910.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (27 samples, 9.31%)</title><rect x="237.9" y="883.0" width="109.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.9" y="894.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 3.79%)</title><rect x="237.9" y="867.0" width="44.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.9" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 3.79%)</title><rect x="237.9" y="851.0" width="44.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.9" y="862.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (11 samples, 3.79%)</title><rect x="237.9" y="835.0" width="44.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.9" y="846.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 3.45%)</title><rect x="237.9" y="819.0" width="40.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.9" y="830.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (10 samples, 3.45%)</title><rect x="237.9" y="803.0" width="40.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.9" y="814.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (8 samples, 2.76%)</title><rect x="237.9" y="787.0" width="32.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.9" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (8 samples, 2.76%)</title><rect x="237.9" y="771.0" width="32.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.9" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.34%)</title><rect x="270.4" y="787.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="273.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="270.4" y="771.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="273.4" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="270.4" y="755.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="273.4" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.34%)</title><rect x="270.4" y="739.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="273.4" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.34%)</title><rect x="270.4" y="723.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="273.4" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.34%)</title><rect x="270.4" y="707.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="273.4" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.34%)</title><rect x="270.4" y="691.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="273.4" y="702.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.34%)</title><rect x="270.4" y="675.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="273.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.34%)</title><rect x="274.5" y="787.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.34%)</title><rect x="274.5" y="771.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.34%)</title><rect x="278.6" y="819.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="278.6" y="803.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="281.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="278.6" y="787.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="281.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.34%)</title><rect x="278.6" y="771.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="281.6" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.34%)</title><rect x="278.6" y="755.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="281.6" y="766.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.34%)</title><rect x="278.6" y="739.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="281.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (14 samples, 4.83%)</title><rect x="282.6" y="867.0" width="57.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.6" y="878.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 1.72%)</title><rect x="282.6" y="851.0" width="20.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.03%)</title><rect x="286.7" y="835.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.69%)</title><rect x="290.8" y="819.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.69%)</title><rect x="290.8" y="803.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.34%)</title><rect x="298.9" y="835.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (9 samples, 3.10%)</title><rect x="303.0" y="851.0" width="36.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.0" y="862.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 3.10%)</title><rect x="303.0" y="835.0" width="36.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.0" y="846.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.69%)</title><rect x="303.0" y="819.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.34%)</title><rect x="303.0" y="803.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.34%)</title><rect x="303.0" y="787.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.34%)</title><rect x="303.0" y="771.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.34%)</title><rect x="307.0" y="803.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.41%)</title><rect x="311.1" y="819.0" width="28.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.1" y="830.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.41%)</title><rect x="311.1" y="803.0" width="28.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.1" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.41%)</title><rect x="311.1" y="787.0" width="28.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.1" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.69%)</title><rect x="315.2" y="771.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.34%)</title><rect x="315.2" y="755.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.34%)</title><rect x="315.2" y="739.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="318.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.34%)</title><rect x="315.2" y="723.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.34%)</title><rect x="315.2" y="707.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.34%)</title><rect x="319.2" y="755.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.34%)</title><rect x="323.3" y="771.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="326.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.34%)</title><rect x="327.4" y="771.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.34%)</title><rect x="327.4" y="755.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.34%)</title><rect x="327.4" y="739.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="330.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.34%)</title><rect x="327.4" y="723.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.4" y="734.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.34%)</title><rect x="327.4" y="707.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.4" y="718.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.34%)</title><rect x="327.4" y="691.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="330.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.69%)</title><rect x="331.4" y="771.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.69%)</title><rect x="331.4" y="755.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.69%)</title><rect x="331.4" y="739.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.34%)</title><rect x="335.5" y="723.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="338.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.69%)</title><rect x="339.6" y="867.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="342.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.69%)</title><rect x="339.6" y="851.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.69%)</title><rect x="339.6" y="835.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.69%)</title><rect x="339.6" y="819.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.69%)</title><rect x="339.6" y="803.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="342.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (113 samples, 38.97%)</title><rect x="347.7" y="963.0" width="459.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="350.7" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (8 samples, 2.76%)</title><rect x="351.8" y="947.0" width="32.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.8" y="958.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (8 samples, 2.76%)</title><rect x="351.8" y="931.0" width="32.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.8" y="942.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (8 samples, 2.76%)</title><rect x="351.8" y="915.0" width="32.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.8" y="926.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.38%)</title><rect x="351.8" y="899.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.03%)</title><rect x="355.9" y="883.0" width="12.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="358.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.03%)</title><rect x="355.9" y="867.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="358.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.38%)</title><rect x="368.1" y="899.0" width="16.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="371.1" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.38%)</title><rect x="368.1" y="883.0" width="16.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="371.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (21 samples, 7.24%)</title><rect x="384.3" y="947.0" width="85.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.3" y="958.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (11 samples, 3.79%)</title><rect x="392.5" y="931.0" width="44.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.5" y="942.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.76%)</title><rect x="392.5" y="915.0" width="32.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.5" y="926.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.34%)</title><rect x="392.5" y="899.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="395.5" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.34%)</title><rect x="392.5" y="883.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="392.5" y="867.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="395.5" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="392.5" y="851.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="395.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.07%)</title><rect x="396.6" y="899.0" width="24.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.6" y="910.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.34%)</title><rect x="408.8" y="883.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.8" y="894.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.34%)</title><rect x="412.8" y="883.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="415.8" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.34%)</title><rect x="416.9" y="883.0" width="4.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="419.9" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.34%)</title><rect x="421.0" y="899.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="424.0" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.34%)</title><rect x="421.0" y="883.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.0" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.34%)</title><rect x="421.0" y="867.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="424.0" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.34%)</title><rect x="421.0" y="851.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="424.0" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.34%)</title><rect x="421.0" y="835.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="424.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.34%)</title><rect x="421.0" y="819.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="424.0" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.34%)</title><rect x="421.0" y="803.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="424.0" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.03%)</title><rect x="425.0" y="915.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.0" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.03%)</title><rect x="425.0" y="899.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.0" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.34%)</title><rect x="425.0" y="883.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="428.0" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 0.69%)</title><rect x="429.1" y="883.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="432.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.69%)</title><rect x="429.1" y="867.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="432.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.69%)</title><rect x="429.1" y="851.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.34%)</title><rect x="433.2" y="835.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (8 samples, 2.76%)</title><rect x="437.2" y="931.0" width="32.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.2" y="942.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (5 samples, 1.72%)</title><rect x="445.4" y="915.0" width="20.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.4" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 1.03%)</title><rect x="449.4" y="899.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="452.4" y="910.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (3 samples, 1.03%)</title><rect x="449.4" y="883.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="452.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 1.03%)</title><rect x="449.4" y="867.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.4" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="457.6" y="851.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="460.6" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="457.6" y="835.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="460.6" y="846.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.34%)</title><rect x="461.7" y="899.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="464.7" y="910.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (1 samples, 0.34%)</title><rect x="461.7" y="883.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.7" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.34%)</title><rect x="465.7" y="915.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="468.7" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.34%)</title><rect x="465.7" y="899.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="468.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties$$Lambda$233/1598898814.get$Lambda (1 samples, 0.34%)</title><rect x="465.7" y="883.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="468.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties$$Lambda$233/1598898814.&lt;init&gt; (1 samples, 0.34%)</title><rect x="465.7" y="867.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="468.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (48 samples, 16.55%)</title><rect x="469.8" y="947.0" width="195.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.8" y="958.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (48 samples, 16.55%)</title><rect x="469.8" y="931.0" width="195.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="472.8" y="942.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$430/783176384.process (37 samples, 12.76%)</title><rect x="469.8" y="915.0" width="150.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.8" y="926.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (37 samples, 12.76%)</title><rect x="469.8" y="899.0" width="150.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.8" y="910.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (37 samples, 12.76%)</title><rect x="469.8" y="883.0" width="150.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.8" y="894.0">com/linecorp/decato..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="469.8" y="867.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="472.8" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.34%)</title><rect x="469.8" y="851.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.8" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.34%)</title><rect x="469.8" y="835.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="472.8" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.34%)</title><rect x="469.8" y="819.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ExecutionRecord.process (36 samples, 12.41%)</title><rect x="473.9" y="867.0" width="146.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.9" y="878.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/lang/Thread.sleep (36 samples, 12.41%)</title><rect x="473.9" y="851.0" width="146.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.9" y="862.0">java/lang/Thread.s..</text>
</g>
<g>
<title>JVM_Sleep (33 samples, 11.38%)</title><rect x="477.9" y="835.0" width="134.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="480.9" y="846.0">JVM_Sleep</text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.34%)</title><rect x="486.1" y="819.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="489.1" y="830.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.34%)</title><rect x="490.1" y="819.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="493.1" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.72%)</title><rect x="494.2" y="819.0" width="20.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="497.2" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 3.79%)</title><rect x="514.6" y="819.0" width="44.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="517.6" y="830.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.34%)</title><rect x="559.3" y="819.0" width="4.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="562.3" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.34%)</title><rect x="563.4" y="819.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="566.4" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="567.4" y="819.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="570.4" y="830.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (10 samples, 3.45%)</title><rect x="571.5" y="819.0" width="40.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="574.5" y="830.0">os:..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.38%)</title><rect x="579.7" y="803.0" width="16.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="582.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="595.9" y="803.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="598.9" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.34%)</title><rect x="600.0" y="803.0" width="4.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="603.0" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="600.0" y="787.0" width="4.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="603.0" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.69%)</title><rect x="604.1" y="803.0" width="8.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="607.1" y="814.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.34%)</title><rect x="612.2" y="835.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="615.2" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.34%)</title><rect x="616.3" y="835.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="619.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.69%)</title><rect x="620.3" y="915.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="623.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.sleep (1 samples, 0.34%)</title><rect x="624.4" y="899.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.4" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.69%)</title><rect x="628.5" y="915.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="631.5" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.69%)</title><rect x="628.5" y="899.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="631.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$507/1336076859.get$Lambda (1 samples, 0.34%)</title><rect x="628.5" y="883.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="631.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$507/1336076859.&lt;init&gt; (1 samples, 0.34%)</title><rect x="628.5" y="867.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="631.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.34%)</title><rect x="628.5" y="851.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="631.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$508/1397554531.get$Lambda (1 samples, 0.34%)</title><rect x="632.6" y="883.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="635.6" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.34%)</title><rect x="632.6" y="867.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.6" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.69%)</title><rect x="636.6" y="915.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="639.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.69%)</title><rect x="636.6" y="899.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="639.6" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.34%)</title><rect x="644.8" y="915.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.8" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.34%)</title><rect x="648.8" y="915.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="651.8" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.34%)</title><rect x="648.8" y="899.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="651.8" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.34%)</title><rect x="648.8" y="883.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.8" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.34%)</title><rect x="652.9" y="915.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.9" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.34%)</title><rect x="652.9" y="899.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.9" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.34%)</title><rect x="652.9" y="883.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.9" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="652.9" y="867.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="655.9" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="652.9" y="851.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="655.9" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.34%)</title><rect x="652.9" y="835.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.9" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.34%)</title><rect x="652.9" y="819.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="655.9" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.34%)</title><rect x="652.9" y="803.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="655.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.34%)</title><rect x="652.9" y="787.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="655.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.34%)</title><rect x="652.9" y="771.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="655.9" y="782.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.34%)</title><rect x="652.9" y="755.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.34%)</title><rect x="657.0" y="915.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.34%)</title><rect x="657.0" y="899.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.34%)</title><rect x="657.0" y="883.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.34%)</title><rect x="657.0" y="867.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="660.0" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.34%)</title><rect x="657.0" y="851.0" width="4.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="660.0" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="661.0" y="915.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="664.0" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (16 samples, 5.52%)</title><rect x="665.1" y="947.0" width="65.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.1" y="958.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (16 samples, 5.52%)</title><rect x="665.1" y="931.0" width="65.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="668.1" y="942.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (16 samples, 5.52%)</title><rect x="665.1" y="915.0" width="65.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.1" y="926.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (11 samples, 3.79%)</title><rect x="665.1" y="899.0" width="44.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="668.1" y="910.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (11 samples, 3.79%)</title><rect x="665.1" y="883.0" width="44.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.1" y="894.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (10 samples, 3.45%)</title><rect x="665.1" y="867.0" width="40.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="668.1" y="878.0">io/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (10 samples, 3.45%)</title><rect x="665.1" y="851.0" width="40.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.1" y="862.0">io/..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (10 samples, 3.45%)</title><rect x="665.1" y="835.0" width="40.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.1" y="846.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (10 samples, 3.45%)</title><rect x="665.1" y="819.0" width="40.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.1" y="830.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (10 samples, 3.45%)</title><rect x="665.1" y="803.0" width="40.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.1" y="814.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (9 samples, 3.10%)</title><rect x="665.1" y="787.0" width="36.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.1" y="798.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (6 samples, 2.07%)</title><rect x="665.1" y="771.0" width="24.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="668.1" y="782.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (6 samples, 2.07%)</title><rect x="665.1" y="755.0" width="24.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.1" y="766.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (3 samples, 1.03%)</title><rect x="689.5" y="771.0" width="12.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (3 samples, 1.03%)</title><rect x="689.5" y="755.0" width="12.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="692.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (3 samples, 1.03%)</title><rect x="689.5" y="739.0" width="12.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (3 samples, 1.03%)</title><rect x="689.5" y="723.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="692.5" y="734.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.34%)</title><rect x="701.7" y="787.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.7" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="705.8" y="867.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="708.8" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="705.8" y="851.0" width="4.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="708.8" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (5 samples, 1.72%)</title><rect x="709.9" y="899.0" width="20.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.9" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (5 samples, 1.72%)</title><rect x="709.9" y="883.0" width="20.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.9" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.34%)</title><rect x="722.1" y="867.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="725.1" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.34%)</title><rect x="726.1" y="867.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 6.55%)</title><rect x="730.2" y="947.0" width="77.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="733.2" y="958.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 6.55%)</title><rect x="730.2" y="931.0" width="77.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="733.2" y="942.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 6.55%)</title><rect x="730.2" y="915.0" width="77.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="733.2" y="926.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.34%)</title><rect x="730.2" y="899.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$516/1864501466.accept (1 samples, 0.34%)</title><rect x="730.2" y="883.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 6.21%)</title><rect x="734.3" y="899.0" width="73.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.3" y="910.0">java/uti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$516/1864501466.accept (18 samples, 6.21%)</title><rect x="734.3" y="883.0" width="73.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="737.3" y="894.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (18 samples, 6.21%)</title><rect x="734.3" y="867.0" width="73.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="737.3" y="878.0">com/line..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (18 samples, 6.21%)</title><rect x="734.3" y="851.0" width="73.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.3" y="862.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (18 samples, 6.21%)</title><rect x="734.3" y="835.0" width="73.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="737.3" y="846.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (18 samples, 6.21%)</title><rect x="734.3" y="819.0" width="73.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="737.3" y="830.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (15 samples, 5.17%)</title><rect x="734.3" y="803.0" width="61.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="737.3" y="814.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (15 samples, 5.17%)</title><rect x="734.3" y="787.0" width="61.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="737.3" y="798.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (15 samples, 5.17%)</title><rect x="734.3" y="771.0" width="61.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="737.3" y="782.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (15 samples, 5.17%)</title><rect x="734.3" y="755.0" width="61.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="737.3" y="766.0">io/mic..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (15 samples, 5.17%)</title><rect x="734.3" y="739.0" width="61.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="737.3" y="750.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (15 samples, 5.17%)</title><rect x="734.3" y="723.0" width="61.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.3" y="734.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (15 samples, 5.17%)</title><rect x="734.3" y="707.0" width="61.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.3" y="718.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (8 samples, 2.76%)</title><rect x="734.3" y="691.0" width="32.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="737.3" y="702.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (2 samples, 0.69%)</title><rect x="734.3" y="675.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.3" y="686.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (2 samples, 0.69%)</title><rect x="734.3" y="659.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.3" y="670.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (6 samples, 2.07%)</title><rect x="742.4" y="675.0" width="24.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="745.4" y="686.0">o..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (6 samples, 2.07%)</title><rect x="742.4" y="659.0" width="24.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="745.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (6 samples, 2.07%)</title><rect x="742.4" y="643.0" width="24.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="745.4" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (6 samples, 2.07%)</title><rect x="742.4" y="627.0" width="24.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="745.4" y="638.0">j..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (7 samples, 2.41%)</title><rect x="766.8" y="691.0" width="28.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="769.8" y="702.0">or..</text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (3 samples, 1.03%)</title><rect x="795.3" y="803.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="798.3" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 1.03%)</title><rect x="795.3" y="787.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="798.3" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.34%)</title><rect x="803.4" y="771.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.4" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.rotate (1 samples, 0.34%)</title><rect x="803.4" y="755.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="806.4" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.34%)</title><rect x="803.4" y="739.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="806.4" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.34%)</title><rect x="803.4" y="723.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="806.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.34%)</title><rect x="807.5" y="979.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.5" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.34%)</title><rect x="807.5" y="963.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.5" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.34%)</title><rect x="807.5" y="947.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.34%)</title><rect x="811.6" y="979.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.6" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.34%)</title><rect x="811.6" y="963.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="814.6" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.34%)</title><rect x="811.6" y="947.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="814.6" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.34%)</title><rect x="811.6" y="931.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="814.6" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.34%)</title><rect x="811.6" y="915.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="814.6" y="926.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.34%)</title><rect x="811.6" y="899.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.6" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 1.03%)</title><rect x="815.7" y="979.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="818.7" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (3 samples, 1.03%)</title><rect x="815.7" y="963.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="818.7" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (3 samples, 1.03%)</title><rect x="815.7" y="947.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.7" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (3 samples, 1.03%)</title><rect x="815.7" y="931.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="818.7" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 1.03%)</title><rect x="815.7" y="915.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.7" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.69%)</title><rect x="819.7" y="899.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="822.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (1 samples, 0.34%)</title><rect x="827.9" y="1027.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="830.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset (1 samples, 0.34%)</title><rect x="827.9" y="1011.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="830.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1 samples, 0.34%)</title><rect x="827.9" y="995.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.9" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry$$Lambda$164/1320388319.run (1 samples, 0.34%)</title><rect x="827.9" y="979.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="830.9" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry.publishSafely (1 samples, 0.34%)</title><rect x="827.9" y="963.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.9" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.publish (1 samples, 0.34%)</title><rect x="827.9" y="947.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="830.9" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (1 samples, 0.34%)</title><rect x="827.9" y="931.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="830.9" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.34%)</title><rect x="827.9" y="915.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="830.9" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (1 samples, 0.34%)</title><rect x="827.9" y="899.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="830.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (1 samples, 0.34%)</title><rect x="827.9" y="883.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="830.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.34%)</title><rect x="827.9" y="867.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="830.9" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.34%)</title><rect x="827.9" y="851.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="830.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$SizedRefSortingSink.end (1 samples, 0.34%)</title><rect x="827.9" y="835.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="830.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (1 samples, 0.34%)</title><rect x="827.9" y="819.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="830.9" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$525/493749603.accept (1 samples, 0.34%)</title><rect x="827.9" y="803.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="830.9" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$12 (1 samples, 0.34%)</title><rect x="827.9" y="787.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="830.9" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Meter.use (1 samples, 0.34%)</title><rect x="827.9" y="771.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="830.9" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$528/2031051732.accept (1 samples, 0.34%)</title><rect x="827.9" y="755.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="830.9" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$5 (1 samples, 0.34%)</title><rect x="827.9" y="739.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.9" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.takeSnapshot (1 samples, 0.34%)</title><rect x="827.9" y="723.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.9" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.takeSnapshot (1 samples, 0.34%)</title><rect x="827.9" y="707.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="830.9" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.accumulateIfStale (1 samples, 0.34%)</title><rect x="827.9" y="691.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="830.9" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.accumulate (1 samples, 0.34%)</title><rect x="827.9" y="675.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="830.9" y="686.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.add (1 samples, 0.34%)</title><rect x="827.9" y="659.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="830.9" y="670.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValueWithCount (1 samples, 0.34%)</title><rect x="827.9" y="643.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="830.9" y="654.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordCountAtValue (1 samples, 0.34%)</title><rect x="827.9" y="627.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.9" y="638.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.34%)</title><rect x="827.9" y="611.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="830.9" y="622.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValueSlowPath (1 samples, 0.34%)</title><rect x="827.9" y="595.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="830.9" y="606.0"></text>
</g>
<g>
<title>libmLog (1 samples, 0.34%)</title><rect x="827.9" y="579.0" width="4.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="830.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.41%)</title><rect x="831.9" y="1027.0" width="28.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="834.9" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.07%)</title><rect x="836.0" y="1011.0" width="24.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="839.0" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.07%)</title><rect x="836.0" y="995.0" width="24.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="839.0" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.07%)</title><rect x="836.0" y="979.0" width="24.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="839.0" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.07%)</title><rect x="836.0" y="963.0" width="24.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.0" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.07%)</title><rect x="836.0" y="947.0" width="24.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="839.0" y="958.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.34%)</title><rect x="860.4" y="1075.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="863.4" y="1086.0"></text>
</g>
<g>
<title>start_thread (80 samples, 27.59%)</title><rect x="864.5" y="1075.0" width="325.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="867.5" y="1086.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (80 samples, 27.59%)</title><rect x="864.5" y="1059.0" width="325.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="867.5" y="1070.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (80 samples, 27.59%)</title><rect x="864.5" y="1043.0" width="325.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="867.5" y="1054.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 2.07%)</title><rect x="864.5" y="1027.0" width="24.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="867.5" y="1038.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.07%)</title><rect x="864.5" y="1011.0" width="24.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.5" y="1022.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 2.07%)</title><rect x="864.5" y="995.0" width="24.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.5" y="1006.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.38%)</title><rect x="872.6" y="979.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="875.6" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.03%)</title><rect x="876.7" y="963.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.7" y="974.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.34%)</title><rect x="884.8" y="947.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="887.8" y="958.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (74 samples, 25.52%)</title><rect x="888.9" y="1027.0" width="301.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="891.9" y="1038.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (74 samples, 25.52%)</title><rect x="888.9" y="1011.0" width="301.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="891.9" y="1022.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (74 samples, 25.52%)</title><rect x="888.9" y="995.0" width="301.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.9" y="1006.0">CompileBroker::invoke_compiler_on_method(..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (70 samples, 24.14%)</title><rect x="888.9" y="979.0" width="284.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.9" y="990.0">C2Compiler::compile_method(ciEnv*, ciM..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (70 samples, 24.14%)</title><rect x="888.9" y="963.0" width="284.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="891.9" y="974.0">Compile::Compile(ciEnv*, C2Compiler*, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (42 samples, 14.48%)</title><rect x="888.9" y="947.0" width="170.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.9" y="958.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.34%)</title><rect x="888.9" y="931.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.9" y="942.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.34%)</title><rect x="888.9" y="915.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="891.9" y="926.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.34%)</title><rect x="893.0" y="931.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="896.0" y="942.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.34%)</title><rect x="893.0" y="915.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="896.0" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.34%)</title><rect x="893.0" y="899.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="896.0" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.34%)</title><rect x="893.0" y="883.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="896.0" y="894.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.41%)</title><rect x="897.0" y="931.0" width="28.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="900.0" y="942.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (3 samples, 1.03%)</title><rect x="897.0" y="915.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.0" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.38%)</title><rect x="909.2" y="915.0" width="16.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.2" y="926.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.69%)</title><rect x="909.2" y="899.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="912.2" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.69%)</title><rect x="917.4" y="899.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="920.4" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.34%)</title><rect x="917.4" y="883.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="920.4" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.34%)</title><rect x="917.4" y="867.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.4" y="878.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.34%)</title><rect x="917.4" y="851.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="920.4" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.34%)</title><rect x="917.4" y="835.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.4" y="846.0"></text>
</g>
<g>
<title>SystemDictionary::box_klass_type(Klass*) (1 samples, 0.34%)</title><rect x="917.4" y="819.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="920.4" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.34%)</title><rect x="921.4" y="883.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="924.4" y="894.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.34%)</title><rect x="921.4" y="867.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="924.4" y="878.0"></text>
</g>
<g>
<title>MachNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.34%)</title><rect x="921.4" y="851.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="924.4" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.03%)</title><rect x="925.5" y="931.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="928.5" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.03%)</title><rect x="925.5" y="915.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.5" y="926.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.34%)</title><rect x="925.5" y="899.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="928.5" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.34%)</title><rect x="929.6" y="899.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.6" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.34%)</title><rect x="933.7" y="899.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="936.7" y="910.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.34%)</title><rect x="933.7" y="883.0" width="4.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="936.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 10.34%)</title><rect x="937.7" y="931.0" width="122.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="940.7" y="942.0">PhaseChaitin::R..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.34%)</title><rect x="937.7" y="915.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="940.7" y="926.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.69%)</title><rect x="941.8" y="915.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.8" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.34%)</title><rect x="949.9" y="915.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.9" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.34%)</title><rect x="949.9" y="899.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="952.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.34%)</title><rect x="954.0" y="915.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="957.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.41%)</title><rect x="958.1" y="915.0" width="28.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="961.1" y="926.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.34%)</title><rect x="962.1" y="899.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.72%)</title><rect x="966.2" y="899.0" width="20.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="969.2" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.69%)</title><rect x="978.4" y="883.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.69%)</title><rect x="986.6" y="915.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.6" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.69%)</title><rect x="994.7" y="915.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.7" y="926.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.34%)</title><rect x="998.8" y="899.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1001.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.69%)</title><rect x="1002.8" y="915.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.8" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.03%)</title><rect x="1011.0" y="915.0" width="12.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1014.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.34%)</title><rect x="1019.1" y="899.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.1" y="910.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.69%)</title><rect x="1023.2" y="915.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.2" y="926.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.69%)</title><rect x="1023.2" y="899.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1026.2" y="910.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.34%)</title><rect x="1023.2" y="883.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.2" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.34%)</title><rect x="1027.2" y="883.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.2" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.34%)</title><rect x="1031.3" y="915.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.3" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.34%)</title><rect x="1035.4" y="915.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1038.4" y="926.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.34%)</title><rect x="1035.4" y="899.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.4" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.72%)</title><rect x="1039.4" y="915.0" width="20.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1042.4" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.69%)</title><rect x="1051.7" y="899.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.7" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.69%)</title><rect x="1051.7" y="883.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.7" y="894.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 6.90%)</title><rect x="1059.8" y="947.0" width="81.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.8" y="958.0">Compile::..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (7 samples, 2.41%)</title><rect x="1059.8" y="931.0" width="28.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.8" y="942.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 2.41%)</title><rect x="1059.8" y="915.0" width="28.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1062.8" y="926.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.34%)</title><rect x="1059.8" y="899.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.34%)</title><rect x="1063.9" y="899.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.69%)</title><rect x="1067.9" y="899.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.34%)</title><rect x="1072.0" y="883.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.34%)</title><rect x="1072.0" y="867.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.34%)</title><rect x="1072.0" y="851.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.0" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.34%)</title><rect x="1076.1" y="899.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.1" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.69%)</title><rect x="1080.1" y="899.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1083.1" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.69%)</title><rect x="1080.1" y="883.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.1" y="894.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.34%)</title><rect x="1080.1" y="867.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1083.1" y="878.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.34%)</title><rect x="1084.2" y="867.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.2" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.34%)</title><rect x="1084.2" y="851.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1087.2" y="862.0"></text>
</g>
<g>
<title>TypeInt::hash() const (1 samples, 0.34%)</title><rect x="1084.2" y="835.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.2" y="846.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.34%)</title><rect x="1088.3" y="931.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.34%)</title><rect x="1092.3" y="931.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.34%)</title><rect x="1092.3" y="915.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.3" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1092.3" y="899.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.3" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1092.3" y="883.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.3" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1092.3" y="867.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.3" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1092.3" y="851.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.3" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1092.3" y="835.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.3" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.34%)</title><rect x="1092.3" y="819.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.3" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.34%)</title><rect x="1092.3" y="803.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (5 samples, 1.72%)</title><rect x="1096.4" y="931.0" width="20.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1099.4" y="942.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.34%)</title><rect x="1096.4" y="915.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.34%)</title><rect x="1100.5" y="915.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.69%)</title><rect x="1104.6" y="915.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.69%)</title><rect x="1104.6" y="899.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1107.6" y="910.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.34%)</title><rect x="1108.6" y="883.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() [clone .part.156] (1 samples, 0.34%)</title><rect x="1112.7" y="915.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.7" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1112.7" y="899.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.7" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.34%)</title><rect x="1112.7" y="883.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.7" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.38%)</title><rect x="1116.8" y="931.0" width="16.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.38%)</title><rect x="1116.8" y="915.0" width="16.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.8" y="926.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1116.8" y="899.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.34%)</title><rect x="1120.8" y="899.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.34%)</title><rect x="1120.8" y="883.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.8" y="894.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.34%)</title><rect x="1120.8" y="867.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.8" y="878.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1124.9" y="899.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.9" y="910.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.34%)</title><rect x="1124.9" y="883.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.9" y="894.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1129.0" y="899.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.0" y="910.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.34%)</title><rect x="1129.0" y="883.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.0" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="867.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="851.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="835.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="819.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="803.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.0" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="787.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.0" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="771.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.0" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="755.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="739.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="723.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="707.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.34%)</title><rect x="1129.0" y="691.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.0" y="702.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.34%)</title><rect x="1133.0" y="931.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.0" y="942.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.34%)</title><rect x="1133.0" y="915.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.0" y="926.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.34%)</title><rect x="1133.0" y="899.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.0" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.34%)</title><rect x="1137.1" y="931.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.76%)</title><rect x="1141.2" y="947.0" width="32.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.2" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.76%)</title><rect x="1141.2" y="931.0" width="32.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.2" y="942.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.76%)</title><rect x="1141.2" y="915.0" width="32.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.2" y="926.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.76%)</title><rect x="1141.2" y="899.0" width="32.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.2" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.76%)</title><rect x="1141.2" y="883.0" width="32.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.2" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 2.76%)</title><rect x="1141.2" y="867.0" width="32.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.2" y="878.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1141.2" y="851.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.2" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1141.2" y="835.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.2" y="846.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.34%)</title><rect x="1141.2" y="819.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.2" y="830.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.34%)</title><rect x="1141.2" y="803.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.72%)</title><rect x="1145.2" y="851.0" width="20.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.72%)</title><rect x="1145.2" y="835.0" width="20.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.72%)</title><rect x="1145.2" y="819.0" width="20.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.72%)</title><rect x="1145.2" y="803.0" width="20.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.72%)</title><rect x="1145.2" y="787.0" width="20.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.72%)</title><rect x="1145.2" y="771.0" width="20.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.2" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1145.2" y="755.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.2" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.34%)</title><rect x="1145.2" y="739.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.2" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.34%)</title><rect x="1145.2" y="723.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.2" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.34%)</title><rect x="1145.2" y="707.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.2" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.34%)</title><rect x="1145.2" y="691.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1145.2" y="675.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.34%)</title><rect x="1145.2" y="659.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.34%)</title><rect x="1145.2" y="643.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.34%)</title><rect x="1145.2" y="627.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.2" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1145.2" y="611.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.2" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1145.2" y="595.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.2" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1145.2" y="579.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.2" y="590.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.34%)</title><rect x="1145.2" y="563.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.2" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.34%)</title><rect x="1145.2" y="547.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.2" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.34%)</title><rect x="1145.2" y="531.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.2" y="542.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.34%)</title><rect x="1145.2" y="515.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.2" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.34%)</title><rect x="1145.2" y="499.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.2" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.34%)</title><rect x="1145.2" y="483.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.2" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.38%)</title><rect x="1149.3" y="755.0" width="16.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.38%)</title><rect x="1149.3" y="739.0" width="16.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.3" y="750.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.34%)</title><rect x="1149.3" y="723.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.3" y="734.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.34%)</title><rect x="1149.3" y="707.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.3" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.34%)</title><rect x="1149.3" y="691.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.03%)</title><rect x="1153.4" y="723.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.03%)</title><rect x="1153.4" y="707.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.03%)</title><rect x="1153.4" y="691.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.4" y="702.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.34%)</title><rect x="1153.4" y="675.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.4" y="686.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const*&amp;) (1 samples, 0.34%)</title><rect x="1153.4" y="659.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.4" y="670.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*, Node*) (1 samples, 0.34%)</title><rect x="1153.4" y="643.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.4" y="654.0"></text>
</g>
<g>
<title>Compile::constrained_convI2L(PhaseGVN*, Node*, TypeInt const*, Node*, bool) (1 samples, 0.34%)</title><rect x="1153.4" y="627.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.4" y="638.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.34%)</title><rect x="1153.4" y="611.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.4" y="622.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.34%)</title><rect x="1153.4" y="595.0" width="4.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1156.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1157.4" y="675.0" width="8.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1157.4" y="659.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1157.4" y="643.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1157.4" y="627.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1157.4" y="611.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1157.4" y="595.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1157.4" y="579.0" width="8.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1157.4" y="563.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1157.4" y="547.0" width="8.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1157.4" y="531.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1157.4" y="515.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1157.4" y="499.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1157.4" y="483.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1157.4" y="467.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1157.4" y="451.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.34%)</title><rect x="1157.4" y="435.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.4" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1157.4" y="419.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.5" y="467.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.5" y="451.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.5" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.5" y="435.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.5" y="419.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.5" y="403.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.5" y="387.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.5" y="371.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.5" y="355.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.5" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.5" y="339.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.5" y="323.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.5" y="307.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.5" y="291.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.5" y="275.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.5" y="259.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.5" y="243.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.5" y="227.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.5" y="211.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.5" y="195.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.5" y="179.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.5" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1161.5" y="163.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.5" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1161.5" y="147.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1161.5" y="131.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1161.5" y="115.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1161.5" y="99.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.5" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1161.5" y="83.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.5" y="94.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.34%)</title><rect x="1161.5" y="67.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.5" y="78.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.34%)</title><rect x="1161.5" y="51.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.5" y="62.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.34%)</title><rect x="1161.5" y="35.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1165.6" y="851.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1165.6" y="835.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1165.6" y="819.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1165.6" y="803.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1165.6" y="787.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1165.6" y="771.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1165.6" y="755.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1165.6" y="739.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1165.6" y="723.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1165.6" y="707.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1165.6" y="691.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1165.6" y="675.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1165.6" y="659.0" width="8.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1165.6" y="643.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1165.6" y="627.0" width="8.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1165.6" y="611.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1165.6" y="595.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1165.6" y="579.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.69%)</title><rect x="1165.6" y="563.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.6" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1165.6" y="547.0" width="8.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.69%)</title><rect x="1165.6" y="531.0" width="8.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.69%)</title><rect x="1165.6" y="515.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.69%)</title><rect x="1165.6" y="499.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.69%)</title><rect x="1165.6" y="483.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.69%)</title><rect x="1165.6" y="467.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1165.6" y="451.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1165.6" y="435.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1165.6" y="419.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1165.6" y="403.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1165.6" y="387.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1165.6" y="371.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1165.6" y="355.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.34%)</title><rect x="1165.6" y="339.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.34%)</title><rect x="1165.6" y="323.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.34%)</title><rect x="1165.6" y="307.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.34%)</title><rect x="1165.6" y="291.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.34%)</title><rect x="1165.6" y="275.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.34%)</title><rect x="1165.6" y="259.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1165.6" y="243.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.6" y="254.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.34%)</title><rect x="1165.6" y="227.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.6" y="238.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1165.6" y="211.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="222.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.34%)</title><rect x="1165.6" y="195.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.34%)</title><rect x="1169.7" y="451.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.34%)</title><rect x="1169.7" y="435.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.34%)</title><rect x="1169.7" y="419.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.34%)</title><rect x="1169.7" y="403.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="414.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.34%)</title><rect x="1169.7" y="387.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="398.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.34%)</title><rect x="1169.7" y="371.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="382.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.34%)</title><rect x="1169.7" y="355.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="366.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.34%)</title><rect x="1169.7" y="339.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="350.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.34%)</title><rect x="1169.7" y="323.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="334.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 1.38%)</title><rect x="1173.7" y="979.0" width="16.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="990.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 1.38%)</title><rect x="1173.7" y="963.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.7" y="974.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.38%)</title><rect x="1173.7" y="947.0" width="16.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="958.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.38%)</title><rect x="1173.7" y="931.0" width="16.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.7" y="942.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (4 samples, 1.38%)</title><rect x="1173.7" y="915.0" width="16.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="926.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 1.38%)</title><rect x="1173.7" y="899.0" width="16.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="910.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 1.38%)</title><rect x="1173.7" y="883.0" width="16.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 1.38%)</title><rect x="1173.7" y="867.0" width="16.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 1.38%)</title><rect x="1173.7" y="851.0" width="16.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.7" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 1.38%)</title><rect x="1173.7" y="835.0" width="16.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 1.38%)</title><rect x="1173.7" y="819.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.7" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.69%)</title><rect x="1173.7" y="803.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.7" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.69%)</title><rect x="1173.7" y="787.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.69%)</title><rect x="1173.7" y="771.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.69%)</title><rect x="1173.7" y="755.0" width="8.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.7" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.69%)</title><rect x="1173.7" y="739.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1173.7" y="723.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.34%)</title><rect x="1173.7" y="707.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.34%)</title><rect x="1173.7" y="691.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.34%)</title><rect x="1173.7" y="675.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.7" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.34%)</title><rect x="1173.7" y="659.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.34%)</title><rect x="1173.7" y="643.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1173.7" y="627.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="638.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.34%)</title><rect x="1173.7" y="611.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1173.7" y="595.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.34%)</title><rect x="1173.7" y="579.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1173.7" y="563.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1173.7" y="547.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::protection_domain() const (1 samples, 0.34%)</title><rect x="1173.7" y="531.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1177.8" y="723.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1177.8" y="707.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1177.8" y="691.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1177.8" y="675.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="686.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1177.8" y="659.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.8" y="670.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1177.8" y="643.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="654.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.34%)</title><rect x="1177.8" y="627.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.34%)</title><rect x="1177.8" y="611.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="622.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.34%)</title><rect x="1177.8" y="595.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="606.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.34%)</title><rect x="1177.8" y="579.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1180.8" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.34%)</title><rect x="1181.9" y="803.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.9" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.34%)</title><rect x="1181.9" y="787.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.34%)</title><rect x="1181.9" y="771.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.34%)</title><rect x="1185.9" y="803.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="814.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.34%)</title><rect x="1185.9" y="787.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1188.9" y="798.0"></text>
</g>
</g>
</svg>
