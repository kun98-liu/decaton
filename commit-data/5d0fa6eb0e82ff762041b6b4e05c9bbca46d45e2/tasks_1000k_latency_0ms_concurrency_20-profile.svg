<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (1,466 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.14%)</title><rect x="10.8" y="1075.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.8" y="1086.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="10.8" y="1059.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="1070.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.07%)</title><rect x="11.6" y="1059.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (254 samples, 17.33%)</title><rect x="12.4" y="1075.0" width="204.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.4" y="1086.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (254 samples, 17.33%)</title><rect x="12.4" y="1059.0" width="204.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.4" y="1070.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.07%)</title><rect x="12.4" y="1043.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (249 samples, 16.98%)</title><rect x="13.2" y="1043.0" width="200.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.2" y="1054.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="13.2" y="1027.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="16.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.20%)</title><rect x="14.0" y="1027.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.20%)</title><rect x="14.0" y="1011.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.07%)</title><rect x="14.8" y="995.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.07%)</title><rect x="14.8" y="979.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="990.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.07%)</title><rect x="14.8" y="963.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="15.6" y="995.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="15.6" y="979.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="15.6" y="963.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="15.6" y="947.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="15.6" y="931.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="942.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="15.6" y="915.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.6" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="15.6" y="899.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="18.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.14%)</title><rect x="16.4" y="1027.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.14%)</title><rect x="16.4" y="1011.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.14%)</title><rect x="16.4" y="995.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$272/1728778210.accept (2 samples, 0.14%)</title><rect x="16.4" y="979.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.14%)</title><rect x="16.4" y="963.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.14%)</title><rect x="16.4" y="947.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.14%)</title><rect x="16.4" y="931.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.4" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 0.34%)</title><rect x="18.0" y="1027.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.0" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (5 samples, 0.34%)</title><rect x="18.0" y="1011.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.0" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (5 samples, 0.34%)</title><rect x="18.0" y="995.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.0" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (4 samples, 0.27%)</title><rect x="18.0" y="979.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (4 samples, 0.27%)</title><rect x="18.0" y="963.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.0" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (4 samples, 0.27%)</title><rect x="18.0" y="947.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.0" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (4 samples, 0.27%)</title><rect x="18.0" y="931.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.0" y="942.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (4 samples, 0.27%)</title><rect x="18.0" y="915.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.0" y="926.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (4 samples, 0.27%)</title><rect x="18.0" y="899.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="910.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (4 samples, 0.27%)</title><rect x="18.0" y="883.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.0" y="894.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (3 samples, 0.20%)</title><rect x="18.0" y="867.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.0" y="878.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (3 samples, 0.20%)</title><rect x="18.0" y="851.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.0" y="862.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.07%)</title><rect x="20.5" y="867.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.5" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (1 samples, 0.07%)</title><rect x="21.3" y="979.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.3" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.07%)</title><rect x="21.3" y="963.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.3" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (190 samples, 12.96%)</title><rect x="22.1" y="1027.0" width="152.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.1" y="1038.0">java/lang/Iterable...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/987027734.accept (188 samples, 12.82%)</title><rect x="22.1" y="1011.0" width="151.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="1022.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (188 samples, 12.82%)</title><rect x="22.1" y="995.0" width="151.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.1" y="1006.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (174 samples, 11.87%)</title><rect x="22.1" y="979.0" width="140.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.1" y="990.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (174 samples, 11.87%)</title><rect x="22.1" y="963.0" width="140.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.1" y="974.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (174 samples, 11.87%)</title><rect x="22.1" y="947.0" width="140.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="25.1" y="958.0">com/linecorp/decat..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (23 samples, 1.57%)</title><rect x="22.1" y="931.0" width="18.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.1" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (23 samples, 1.57%)</title><rect x="22.1" y="915.0" width="18.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.1" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepCounter.increment (2 samples, 0.14%)</title><rect x="29.3" y="899.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/DoubleAdder.add (2 samples, 0.14%)</title><rect x="29.3" y="883.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.3" y="894.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (12 samples, 0.82%)</title><rect x="30.9" y="899.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (151 samples, 10.30%)</title><rect x="40.6" y="931.0" width="121.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.6" y="942.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (151 samples, 10.30%)</title><rect x="40.6" y="915.0" width="121.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.6" y="926.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (148 samples, 10.10%)</title><rect x="43.0" y="899.0" width="119.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.0" y="910.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (126 samples, 8.59%)</title><rect x="43.0" y="883.0" width="101.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.0" y="894.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.07%)</title><rect x="43.0" y="867.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.07%)</title><rect x="43.0" y="851.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.07%)</title><rect x="43.0" y="835.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.07%)</title><rect x="43.0" y="819.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="46.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (125 samples, 8.53%)</title><rect x="43.8" y="867.0" width="100.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.8" y="878.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (125 samples, 8.53%)</title><rect x="43.8" y="851.0" width="100.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.8" y="862.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (125 samples, 8.53%)</title><rect x="43.8" y="835.0" width="100.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.8" y="846.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (125 samples, 8.53%)</title><rect x="43.8" y="819.0" width="100.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="46.8" y="830.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (100 samples, 6.82%)</title><rect x="63.9" y="803.0" width="80.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.9" y="814.0">jdk/inter..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.07%)</title><rect x="64.7" y="787.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="67.7" y="798.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.07%)</title><rect x="65.5" y="787.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="68.5" y="798.0"></text>
</g>
<g>
<title>Unsafe_Unpark (39 samples, 2.66%)</title><rect x="66.3" y="787.0" width="31.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="69.3" y="798.0">Un..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.14%)</title><rect x="70.4" y="771.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="73.4" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.07%)</title><rect x="72.0" y="771.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="75.0" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.07%)</title><rect x="72.8" y="771.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="75.8" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.41%)</title><rect x="73.6" y="771.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="76.6" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (4 samples, 0.27%)</title><rect x="78.4" y="771.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="81.4" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.41%)</title><rect x="81.6" y="771.0" width="4.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="84.6" y="782.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="86.5" y="771.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="89.5" y="782.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.27%)</title><rect x="87.3" y="771.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="90.3" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.55%)</title><rect x="90.5" y="771.0" width="6.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="93.5" y="782.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="96.9" y="771.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="99.9" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (57 samples, 3.89%)</title><rect x="97.7" y="787.0" width="45.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="100.7" y="798.0">__pt..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="143.6" y="787.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="146.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (14 samples, 0.95%)</title><rect x="144.4" y="883.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="147.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (14 samples, 0.95%)</title><rect x="144.4" y="867.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="147.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.34%)</title><rect x="151.7" y="851.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="154.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.34%)</title><rect x="151.7" y="835.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.55%)</title><rect x="155.7" y="883.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="158.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.55%)</title><rect x="155.7" y="867.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="158.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.55%)</title><rect x="155.7" y="851.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.55%)</title><rect x="155.7" y="835.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="158.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.14%)</title><rect x="160.5" y="819.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (7 samples, 0.48%)</title><rect x="162.1" y="979.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.27%)</title><rect x="164.5" y="963.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.07%)</title><rect x="165.3" y="947.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.14%)</title><rect x="166.2" y="947.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.14%)</title><rect x="166.2" y="931.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.27%)</title><rect x="167.8" y="979.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.8" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.27%)</title><rect x="167.8" y="963.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.8" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="167.8" y="947.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.20%)</title><rect x="168.6" y="947.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (3 samples, 0.20%)</title><rect x="168.6" y="931.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.6" y="942.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (3 samples, 0.20%)</title><rect x="168.6" y="915.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.6" y="926.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.20%)</title><rect x="168.6" y="899.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="171.6" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.20%)</title><rect x="168.6" y="883.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="171.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.20%)</title><rect x="171.0" y="979.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="174.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.20%)</title><rect x="171.0" y="963.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="174.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.20%)</title><rect x="171.0" y="947.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="174.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.20%)</title><rect x="171.0" y="931.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="174.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.14%)</title><rect x="173.4" y="1011.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.14%)</title><rect x="173.4" y="995.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.14%)</title><rect x="173.4" y="979.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.14%)</title><rect x="173.4" y="963.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.4" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (2 samples, 0.14%)</title><rect x="173.4" y="947.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="176.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (2 samples, 0.14%)</title><rect x="173.4" y="931.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (48 samples, 3.27%)</title><rect x="175.0" y="1027.0" width="38.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="178.0" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (48 samples, 3.27%)</title><rect x="175.0" y="1011.0" width="38.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.0" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (34 samples, 2.32%)</title><rect x="175.0" y="995.0" width="27.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="178.0" y="1006.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (34 samples, 2.32%)</title><rect x="175.0" y="979.0" width="27.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="178.0" y="990.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (33 samples, 2.25%)</title><rect x="175.0" y="963.0" width="26.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="178.0" y="974.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (28 samples, 1.91%)</title><rect x="175.0" y="947.0" width="22.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.0" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (28 samples, 1.91%)</title><rect x="175.0" y="931.0" width="22.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="178.0" y="942.0">o..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="177.4" y="915.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="180.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.23%)</title><rect x="178.2" y="915.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.07%)</title><rect x="179.8" y="899.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.07%)</title><rect x="179.8" y="883.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.07%)</title><rect x="179.8" y="867.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.07%)</title><rect x="179.8" y="851.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="182.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.07%)</title><rect x="179.8" y="835.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.07%)</title><rect x="179.8" y="819.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.07%)</title><rect x="179.8" y="803.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.8" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.07%)</title><rect x="179.8" y="787.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.8" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.07%)</title><rect x="179.8" y="771.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.8" y="782.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.07%)</title><rect x="179.8" y="755.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="182.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (14 samples, 0.95%)</title><rect x="180.6" y="899.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="183.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (14 samples, 0.95%)</title><rect x="180.6" y="883.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (14 samples, 0.95%)</title><rect x="180.6" y="867.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (14 samples, 0.95%)</title><rect x="180.6" y="851.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (6 samples, 0.41%)</title><rect x="187.1" y="835.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="191.9" y="899.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="194.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="191.9" y="883.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.07%)</title><rect x="191.9" y="867.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.07%)</title><rect x="191.9" y="851.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.07%)</title><rect x="191.9" y="835.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.07%)</title><rect x="191.9" y="819.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="194.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (6 samples, 0.41%)</title><rect x="192.7" y="915.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.41%)</title><rect x="192.7" y="899.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.41%)</title><rect x="192.7" y="883.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.7" y="894.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.41%)</title><rect x="192.7" y="867.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.7" y="878.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="196.7" y="851.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="199.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (3 samples, 0.20%)</title><rect x="197.5" y="947.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="200.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.20%)</title><rect x="197.5" y="931.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.20%)</title><rect x="197.5" y="915.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (3 samples, 0.20%)</title><rect x="197.5" y="899.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.14%)</title><rect x="197.5" y="883.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="199.2" y="883.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.07%)</title><rect x="200.0" y="947.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="200.0" y="931.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="200.0" y="915.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.07%)</title><rect x="200.0" y="899.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="200.8" y="947.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.07%)</title><rect x="201.6" y="963.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="201.6" y="947.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="201.6" y="931.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.6" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="201.6" y="915.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="201.6" y="899.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.07%)</title><rect x="201.6" y="883.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.6" y="894.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.07%)</title><rect x="201.6" y="867.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.6" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="201.6" y="851.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.6" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.07%)</title><rect x="201.6" y="835.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="204.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.14%)</title><rect x="202.4" y="995.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.07%)</title><rect x="202.4" y="979.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.07%)</title><rect x="202.4" y="963.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.07%)</title><rect x="202.4" y="947.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.07%)</title><rect x="202.4" y="931.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.07%)</title><rect x="202.4" y="915.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.4" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.07%)</title><rect x="202.4" y="899.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="203.2" y="979.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnreadySync (1 samples, 0.07%)</title><rect x="203.2" y="963.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="203.2" y="947.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="203.2" y="931.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="203.2" y="915.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.07%)</title><rect x="203.2" y="899.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="206.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.07%)</title><rect x="203.2" y="883.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="206.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.07%)</title><rect x="203.2" y="867.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.41%)</title><rect x="204.0" y="995.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.41%)</title><rect x="204.0" y="979.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.completeResponses (1 samples, 0.07%)</title><rect x="204.0" y="963.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClientResponse.onComplete (1 samples, 0.07%)</title><rect x="204.0" y="947.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.onComplete (1 samples, 0.07%)</title><rect x="204.0" y="931.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (1 samples, 0.07%)</title><rect x="204.0" y="915.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.offer (1 samples, 0.07%)</title><rect x="204.0" y="899.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.0" y="910.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.07%)</title><rect x="204.0" y="883.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="207.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleInitiateApiVersionRequests (1 samples, 0.07%)</title><rect x="204.8" y="963.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.8" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.07%)</title><rect x="204.8" y="947.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="204.8" y="931.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="204.8" y="915.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.27%)</title><rect x="205.6" y="963.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.27%)</title><rect x="205.6" y="947.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="205.6" y="931.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.07%)</title><rect x="205.6" y="915.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="205.6" y="899.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="205.6" y="883.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.20%)</title><rect x="206.4" y="931.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.14%)</title><rect x="206.4" y="915.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.14%)</title><rect x="206.4" y="899.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.14%)</title><rect x="206.4" y="883.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.07%)</title><rect x="206.4" y="867.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.4" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.07%)</title><rect x="206.4" y="851.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="209.4" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="206.4" y="835.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="206.4" y="819.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="209.4" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="206.4" y="803.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="209.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="206.4" y="787.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="209.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="206.4" y="771.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="209.4" y="782.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="206.4" y="755.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="209.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="207.2" y="867.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="210.2" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="207.2" y="851.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="210.2" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="207.2" y="835.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.2" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.07%)</title><rect x="207.2" y="819.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="210.2" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.07%)</title><rect x="207.2" y="803.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="210.2" y="814.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.07%)</title><rect x="207.2" y="787.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="210.2" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.07%)</title><rect x="207.2" y="771.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.2" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="207.2" y="755.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="210.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.07%)</title><rect x="208.0" y="915.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordCompletedReceive (1 samples, 0.07%)</title><rect x="208.0" y="899.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.0" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="208.0" y="883.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.0" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="208.0" y="867.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.27%)</title><rect x="208.8" y="995.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.27%)</title><rect x="208.8" y="979.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.07%)</title><rect x="208.8" y="963.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="211.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.20%)</title><rect x="209.6" y="963.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.14%)</title><rect x="209.6" y="947.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="211.2" y="947.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="214.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.07%)</title><rect x="211.2" y="931.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="214.2" y="942.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.07%)</title><rect x="211.2" y="915.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="214.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$267/1501774158.accept (1 samples, 0.07%)</title><rect x="211.2" y="899.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.07%)</title><rect x="211.2" y="883.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="214.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$266/159397376.test (1 samples, 0.07%)</title><rect x="211.2" y="867.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$7 (1 samples, 0.07%)</title><rect x="211.2" y="851.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="211.2" y="835.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="211.2" y="819.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="214.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="211.2" y="803.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="211.2" y="787.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="212.0" y="995.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="215.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="212.0" y="979.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="212.8" y="995.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="215.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="212.8" y="979.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.07%)</title><rect x="212.8" y="963.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="212.8" y="947.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="212.8" y="931.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.07%)</title><rect x="213.6" y="1043.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="216.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="213.6" y="1027.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="213.6" y="1011.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="213.6" y="995.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="213.6" y="979.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="213.6" y="963.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="213.6" y="947.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="213.6" y="931.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.07%)</title><rect x="213.6" y="915.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="214.4" y="1043.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.4" y="1054.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="214.4" y="1027.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.4" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="214.4" y="1011.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.4" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="214.4" y="995.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="217.4" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="214.4" y="979.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="217.4" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.14%)</title><rect x="215.3" y="1043.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.3" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (2 samples, 0.14%)</title><rect x="215.3" y="1027.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.3" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (2 samples, 0.14%)</title><rect x="215.3" y="1011.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.3" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="215.3" y="995.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.3" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (2 samples, 0.14%)</title><rect x="215.3" y="979.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.3" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="215.3" y="963.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.3" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.14%)</title><rect x="215.3" y="947.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.3" y="958.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (2 samples, 0.14%)</title><rect x="215.3" y="931.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.3" y="942.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (2 samples, 0.14%)</title><rect x="215.3" y="915.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.3" y="926.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (2 samples, 0.14%)</title><rect x="215.3" y="899.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="218.3" y="910.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (2 samples, 0.14%)</title><rect x="215.3" y="883.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.3" y="894.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (2 samples, 0.14%)</title><rect x="215.3" y="867.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,139 samples, 77.69%)</title><rect x="216.9" y="1075.0" width="916.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.9" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,139 samples, 77.69%)</title><rect x="216.9" y="1059.0" width="916.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.9" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,139 samples, 77.69%)</title><rect x="216.9" y="1043.0" width="916.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="219.9" y="1054.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/1511431779.run (910 samples, 62.07%)</title><rect x="216.9" y="1027.0" width="732.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.9" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/1511431779.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (910 samples, 62.07%)</title><rect x="216.9" y="1011.0" width="732.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="219.9" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (910 samples, 62.07%)</title><rect x="216.9" y="995.0" width="732.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.9" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="218.5" y="979.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="221.5" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (12 samples, 0.82%)</title><rect x="219.3" y="979.0" width="9.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="222.3" y="990.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.68%)</title><rect x="220.9" y="963.0" width="8.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="223.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (882 samples, 60.16%)</title><rect x="228.9" y="979.0" width="710.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.9" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (69 samples, 4.71%)</title><rect x="230.5" y="963.0" width="55.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.5" y="974.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (69 samples, 4.71%)</title><rect x="230.5" y="947.0" width="55.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.5" y="958.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (69 samples, 4.71%)</title><rect x="230.5" y="931.0" width="55.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.5" y="942.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (49 samples, 3.34%)</title><rect x="246.6" y="915.0" width="39.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.6" y="926.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (6 samples, 0.41%)</title><rect x="246.6" y="899.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.6" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="249.1" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="252.1" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="249.1" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="252.1" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="249.1" y="851.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="252.1" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="249.1" y="835.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="252.1" y="846.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.07%)</title><rect x="249.1" y="819.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="252.1" y="830.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="249.9" y="883.0" width="1.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="252.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (42 samples, 2.86%)</title><rect x="251.5" y="899.0" width="33.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.5" y="910.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$528/2026965657.accept (42 samples, 2.86%)</title><rect x="251.5" y="883.0" width="33.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.5" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (42 samples, 2.86%)</title><rect x="251.5" y="867.0" width="33.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.5" y="878.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$505/1989035276.accept (3 samples, 0.20%)</title><rect x="254.7" y="851.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$504/2097008983.accept (1 samples, 0.07%)</title><rect x="257.1" y="851.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.1" y="862.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="257.9" y="851.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="260.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (32 samples, 2.18%)</title><rect x="259.5" y="851.0" width="25.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.5" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (32 samples, 2.18%)</title><rect x="259.5" y="835.0" width="25.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.5" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (31 samples, 2.11%)</title><rect x="260.3" y="819.0" width="25.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="263.3" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.34%)</title><rect x="260.3" y="803.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (26 samples, 1.77%)</title><rect x="264.4" y="803.0" width="20.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.07%)</title><rect x="285.3" y="899.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (4 samples, 0.27%)</title><rect x="286.1" y="963.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (4 samples, 0.27%)</title><rect x="286.1" y="947.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="289.1" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.27%)</title><rect x="286.1" y="931.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.27%)</title><rect x="286.1" y="915.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="286.1" y="899.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.14%)</title><rect x="287.7" y="899.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (179 samples, 12.21%)</title><rect x="289.3" y="963.0" width="144.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.3" y="974.0">com/linecorp/decat..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (179 samples, 12.21%)</title><rect x="289.3" y="947.0" width="144.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.3" y="958.0">io/micrometer/core..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (154 samples, 10.50%)</title><rect x="290.1" y="931.0" width="124.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="293.1" y="942.0">io/micrometer/c..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (97 samples, 6.62%)</title><rect x="290.1" y="915.0" width="78.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.1" y="926.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (97 samples, 6.62%)</title><rect x="290.1" y="899.0" width="78.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.1" y="910.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (76 samples, 5.18%)</title><rect x="303.0" y="883.0" width="61.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.0" y="894.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (76 samples, 5.18%)</title><rect x="303.0" y="867.0" width="61.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.0" y="878.0">io/mic..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (76 samples, 5.18%)</title><rect x="303.0" y="851.0" width="61.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="306.0" y="862.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (76 samples, 5.18%)</title><rect x="303.0" y="835.0" width="61.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.0" y="846.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (76 samples, 5.18%)</title><rect x="303.0" y="819.0" width="61.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.0" y="830.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (57 samples, 3.89%)</title><rect x="303.0" y="803.0" width="45.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.0" y="814.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (40 samples, 2.73%)</title><rect x="303.0" y="787.0" width="32.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.0" y="798.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (17 samples, 1.16%)</title><rect x="335.2" y="787.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (17 samples, 1.16%)</title><rect x="335.2" y="771.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (17 samples, 1.16%)</title><rect x="335.2" y="755.0" width="13.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (17 samples, 1.16%)</title><rect x="335.2" y="739.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.2" y="750.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (19 samples, 1.30%)</title><rect x="348.9" y="803.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.9" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.34%)</title><rect x="364.2" y="883.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="367.2" y="894.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="364.2" y="867.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="367.2" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (57 samples, 3.89%)</title><rect x="368.2" y="915.0" width="45.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.2" y="926.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (55 samples, 3.75%)</title><rect x="368.2" y="899.0" width="44.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.2" y="910.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (18 samples, 1.23%)</title><rect x="398.0" y="883.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="401.0" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="400.4" y="867.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="403.4" y="878.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="401.2" y="867.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="404.2" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 0.89%)</title><rect x="402.0" y="867.0" width="10.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="405.0" y="878.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.82%)</title><rect x="402.8" y="851.0" width="9.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="405.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (2 samples, 0.14%)</title><rect x="412.5" y="899.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="415.5" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.07%)</title><rect x="413.3" y="883.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="416.3" y="894.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (24 samples, 1.64%)</title><rect x="414.1" y="931.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="417.1" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (1 samples, 0.07%)</title><rect x="426.9" y="915.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="429.9" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.48%)</title><rect x="427.7" y="915.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="430.7" y="926.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="429.4" y="899.0" width="4.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="432.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (110 samples, 7.50%)</title><rect x="433.4" y="963.0" width="88.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.4" y="974.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (110 samples, 7.50%)</title><rect x="433.4" y="947.0" width="88.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.4" y="958.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (110 samples, 7.50%)</title><rect x="433.4" y="931.0" width="88.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="436.4" y="942.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (110 samples, 7.50%)</title><rect x="433.4" y="915.0" width="88.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.4" y="926.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (110 samples, 7.50%)</title><rect x="433.4" y="899.0" width="88.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="436.4" y="910.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (110 samples, 7.50%)</title><rect x="433.4" y="883.0" width="88.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.4" y="894.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (30 samples, 2.05%)</title><rect x="433.4" y="867.0" width="24.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="436.4" y="878.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (30 samples, 2.05%)</title><rect x="433.4" y="851.0" width="24.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="436.4" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (30 samples, 2.05%)</title><rect x="433.4" y="835.0" width="24.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="436.4" y="846.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (30 samples, 2.05%)</title><rect x="433.4" y="819.0" width="24.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="436.4" y="830.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="433.4" y="803.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="436.4" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="433.4" y="787.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="436.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="433.4" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="436.4" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="433.4" y="755.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="436.4" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="433.4" y="739.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="436.4" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.07%)</title><rect x="433.4" y="723.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="436.4" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.07%)</title><rect x="433.4" y="707.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="436.4" y="718.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="433.4" y="691.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="436.4" y="702.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.07%)</title><rect x="433.4" y="675.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="436.4" y="686.0"></text>
</g>
<g>
<title>G1SurvivorRegions::length() const (1 samples, 0.07%)</title><rect x="433.4" y="659.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="436.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (29 samples, 1.98%)</title><rect x="434.2" y="803.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="437.2" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.14%)</title><rect x="455.9" y="787.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (65 samples, 4.43%)</title><rect x="457.5" y="867.0" width="52.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="460.5" y="878.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.27%)</title><rect x="457.5" y="851.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="460.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.27%)</title><rect x="457.5" y="835.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="460.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="459.9" y="819.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="462.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.48%)</title><rect x="460.8" y="851.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="463.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="465.6" y="835.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="465.6" y="819.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="465.6" y="803.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="468.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.07%)</title><rect x="466.4" y="851.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="469.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.07%)</title><rect x="466.4" y="835.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="466.4" y="819.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="469.4" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="466.4" y="803.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="469.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="466.4" y="787.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="469.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="466.4" y="771.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="469.4" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="466.4" y="755.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="469.4" y="766.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.07%)</title><rect x="466.4" y="739.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="469.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (53 samples, 3.62%)</title><rect x="467.2" y="851.0" width="42.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.2" y="862.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (53 samples, 3.62%)</title><rect x="467.2" y="835.0" width="42.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.2" y="846.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.02%)</title><rect x="467.2" y="819.0" width="12.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.07%)</title><rect x="467.2" y="803.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.07%)</title><rect x="467.2" y="787.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.27%)</title><rect x="468.0" y="803.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.27%)</title><rect x="468.0" y="787.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.27%)</title><rect x="468.0" y="771.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.48%)</title><rect x="471.2" y="803.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.20%)</title><rect x="476.8" y="803.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="479.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.20%)</title><rect x="476.8" y="787.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (38 samples, 2.59%)</title><rect x="479.3" y="819.0" width="30.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="482.3" y="830.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (38 samples, 2.59%)</title><rect x="479.3" y="803.0" width="30.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.3" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="480.1" y="787.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (36 samples, 2.46%)</title><rect x="480.9" y="787.0" width="28.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.9" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.02%)</title><rect x="485.7" y="771.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.14%)</title><rect x="486.5" y="755.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="489.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.14%)</title><rect x="486.5" y="739.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="489.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.55%)</title><rect x="488.1" y="755.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="491.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.55%)</title><rect x="488.1" y="739.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="491.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.55%)</title><rect x="488.1" y="723.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.41%)</title><rect x="489.7" y="707.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.14%)</title><rect x="494.6" y="755.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="497.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="496.2" y="755.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="496.2" y="739.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="499.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="497.0" y="755.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="500.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.55%)</title><rect x="497.8" y="771.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="500.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.55%)</title><rect x="497.8" y="755.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="500.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (6 samples, 0.41%)</title><rect x="497.8" y="739.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (6 samples, 0.41%)</title><rect x="497.8" y="723.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (6 samples, 0.41%)</title><rect x="497.8" y="707.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (6 samples, 0.41%)</title><rect x="497.8" y="691.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="500.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (6 samples, 0.41%)</title><rect x="497.8" y="675.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (6 samples, 0.41%)</title><rect x="497.8" y="659.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="500.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.14%)</title><rect x="502.6" y="739.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.14%)</title><rect x="502.6" y="723.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="505.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (2 samples, 0.14%)</title><rect x="502.6" y="707.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (2 samples, 0.14%)</title><rect x="502.6" y="691.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="505.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (2 samples, 0.14%)</title><rect x="502.6" y="675.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (2 samples, 0.14%)</title><rect x="502.6" y="659.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="505.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (2 samples, 0.14%)</title><rect x="502.6" y="643.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="505.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.27%)</title><rect x="504.2" y="771.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="507.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.27%)</title><rect x="504.2" y="755.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="507.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.27%)</title><rect x="504.2" y="739.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="507.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.27%)</title><rect x="504.2" y="723.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="507.2" y="734.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.27%)</title><rect x="504.2" y="707.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="507.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.27%)</title><rect x="504.2" y="691.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.20%)</title><rect x="507.4" y="771.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="510.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.20%)</title><rect x="507.4" y="755.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="507.4" y="739.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="509.0" y="739.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="512.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="509.0" y="723.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.0" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.07%)</title><rect x="509.0" y="707.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="512.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.02%)</title><rect x="509.8" y="867.0" width="12.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (15 samples, 1.02%)</title><rect x="509.8" y="851.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="512.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (15 samples, 1.02%)</title><rect x="509.8" y="835.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.14%)</title><rect x="513.1" y="819.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="516.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.61%)</title><rect x="514.7" y="819.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="517.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.61%)</title><rect x="514.7" y="803.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="517.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.20%)</title><rect x="519.5" y="787.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="522.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (516 samples, 35.20%)</title><rect x="521.9" y="963.0" width="415.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.9" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessPi..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (51 samples, 3.48%)</title><rect x="528.4" y="947.0" width="41.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="531.4" y="958.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.14%)</title><rect x="530.8" y="931.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="533.8" y="942.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (46 samples, 3.14%)</title><rect x="532.4" y="931.0" width="37.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="535.4" y="942.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (42 samples, 2.86%)</title><rect x="535.6" y="915.0" width="33.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="538.6" y="926.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (18 samples, 1.23%)</title><rect x="537.2" y="899.0" width="14.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.2" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="541.2" y="883.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.2" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="542.0" y="867.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="545.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 0.75%)</title><rect x="542.9" y="883.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.75%)</title><rect x="542.9" y="867.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.27%)</title><rect x="551.7" y="899.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="554.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="554.1" y="883.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.1" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="554.1" y="867.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.07%)</title><rect x="554.1" y="851.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="557.1" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (18 samples, 1.23%)</title><rect x="554.9" y="899.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="557.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 1.23%)</title><rect x="554.9" y="883.0" width="14.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="557.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (18 samples, 1.23%)</title><rect x="554.9" y="867.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="557.9" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.14%)</title><rect x="567.8" y="851.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="570.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (109 samples, 7.44%)</title><rect x="569.4" y="947.0" width="87.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.4" y="958.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (94 samples, 6.41%)</title><rect x="569.4" y="931.0" width="75.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="572.4" y="942.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (28 samples, 1.91%)</title><rect x="577.5" y="915.0" width="22.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="580.5" y="926.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 0.48%)</title><rect x="591.1" y="899.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.1" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.34%)</title><rect x="592.8" y="883.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="595.8" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.34%)</title><rect x="592.8" y="867.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="595.8" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.34%)</title><rect x="592.8" y="851.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="595.8" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="594.4" y="835.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="597.4" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="594.4" y="819.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="597.4" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="594.4" y="803.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="597.4" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="594.4" y="787.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="597.4" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="595.2" y="835.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="598.2" y="846.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.07%)</title><rect x="596.0" y="835.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="599.0" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="596.8" y="899.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="599.8" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.07%)</title><rect x="596.8" y="883.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="599.8" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.07%)</title><rect x="596.8" y="867.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="599.8" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="596.8" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="599.8" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="596.8" y="835.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="599.8" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="596.8" y="819.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="599.8" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="596.8" y="803.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="599.8" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="596.8" y="787.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="599.8" y="798.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.07%)</title><rect x="596.8" y="771.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="599.8" y="782.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="597.6" y="899.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="600.6" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="598.4" y="899.0" width="1.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="601.4" y="910.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="600.0" y="915.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.0" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (55 samples, 3.75%)</title><rect x="600.8" y="915.0" width="44.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="603.8" y="926.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (53 samples, 3.62%)</title><rect x="602.4" y="899.0" width="42.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="605.4" y="910.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (27 samples, 1.84%)</title><rect x="602.4" y="883.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="605.4" y="894.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (16 samples, 1.09%)</title><rect x="611.3" y="867.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="614.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (16 samples, 1.09%)</title><rect x="611.3" y="851.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="614.3" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.14%)</title><rect x="624.1" y="883.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="627.1" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (24 samples, 1.64%)</title><rect x="625.8" y="883.0" width="19.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="628.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (24 samples, 1.64%)</title><rect x="625.8" y="867.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="628.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (24 samples, 1.64%)</title><rect x="625.8" y="851.0" width="19.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="628.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.27%)</title><rect x="641.9" y="835.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (15 samples, 1.02%)</title><rect x="645.1" y="931.0" width="12.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="648.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (15 samples, 1.02%)</title><rect x="645.1" y="915.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="648.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (15 samples, 1.02%)</title><rect x="645.1" y="899.0" width="12.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="648.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (15 samples, 1.02%)</title><rect x="645.1" y="883.0" width="12.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="648.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (15 samples, 1.02%)</title><rect x="645.1" y="867.0" width="12.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="648.1" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.48%)</title><rect x="651.5" y="851.0" width="5.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="654.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="653.1" y="835.0" width="4.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="656.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (62 samples, 4.23%)</title><rect x="657.1" y="947.0" width="50.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.1" y="958.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (62 samples, 4.23%)</title><rect x="657.1" y="931.0" width="50.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="660.1" y="942.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$430/1751766351.process (37 samples, 2.52%)</title><rect x="660.4" y="915.0" width="29.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="663.4" y="926.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (34 samples, 2.32%)</title><rect x="662.8" y="899.0" width="27.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="665.8" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (28 samples, 1.91%)</title><rect x="662.8" y="883.0" width="22.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="665.8" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ExecutionRecord.process (21 samples, 1.43%)</title><rect x="668.4" y="867.0" width="16.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="671.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="680.5" y="851.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="683.5" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="680.5" y="835.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="683.5" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.34%)</title><rect x="681.3" y="851.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="684.3" y="862.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="681.3" y="835.0" width="4.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="684.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (6 samples, 0.41%)</title><rect x="685.3" y="883.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.20%)</title><rect x="685.3" y="867.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="688.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.20%)</title><rect x="687.7" y="867.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="690.7" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.20%)</title><rect x="687.7" y="851.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="690.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.14%)</title><rect x="690.2" y="915.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="693.2" y="926.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.07%)</title><rect x="690.2" y="899.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="693.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.07%)</title><rect x="691.0" y="899.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.07%)</title><rect x="691.0" y="883.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.07%)</title><rect x="691.0" y="867.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.07%)</title><rect x="691.0" y="851.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="694.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.07%)</title><rect x="691.0" y="835.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.0" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="691.8" y="915.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="694.8" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="691.8" y="899.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.8" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.14%)</title><rect x="692.6" y="915.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="695.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.14%)</title><rect x="692.6" y="899.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="695.6" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.20%)</title><rect x="694.2" y="915.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="697.2" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.20%)</title><rect x="694.2" y="899.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.2" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.55%)</title><rect x="696.6" y="915.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="699.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.48%)</title><rect x="697.4" y="899.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.34%)</title><rect x="703.0" y="915.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.34%)</title><rect x="703.0" y="899.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="706.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.34%)</title><rect x="703.0" y="883.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="706.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.34%)</title><rect x="703.0" y="867.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="706.0" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="706.2" y="851.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="709.2" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (35 samples, 2.39%)</title><rect x="707.1" y="947.0" width="28.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="710.1" y="958.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (35 samples, 2.39%)</title><rect x="707.1" y="931.0" width="28.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="710.1" y="942.0">io..</text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (20 samples, 1.36%)</title><rect x="719.1" y="915.0" width="16.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="722.1" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.61%)</title><rect x="727.2" y="899.0" width="7.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="730.2" y="910.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.61%)</title><rect x="727.2" y="883.0" width="7.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="730.2" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.07%)</title><rect x="734.4" y="899.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="737.4" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (112 samples, 7.64%)</title><rect x="735.2" y="947.0" width="90.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.2" y="958.0">io/microme..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (111 samples, 7.57%)</title><rect x="735.2" y="931.0" width="89.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.2" y="942.0">io/microme..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (111 samples, 7.57%)</title><rect x="735.2" y="915.0" width="89.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="738.2" y="926.0">io/microme..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (90 samples, 6.14%)</title><rect x="735.2" y="899.0" width="72.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.2" y="910.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (90 samples, 6.14%)</title><rect x="735.2" y="883.0" width="72.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.2" y="894.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (81 samples, 5.53%)</title><rect x="738.4" y="867.0" width="65.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="741.4" y="878.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (81 samples, 5.53%)</title><rect x="738.4" y="851.0" width="65.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="741.4" y="862.0">io/micr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (81 samples, 5.53%)</title><rect x="738.4" y="835.0" width="65.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="741.4" y="846.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (81 samples, 5.53%)</title><rect x="738.4" y="819.0" width="65.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.4" y="830.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (81 samples, 5.53%)</title><rect x="738.4" y="803.0" width="65.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="741.4" y="814.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (57 samples, 3.89%)</title><rect x="738.4" y="787.0" width="45.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="741.4" y="798.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (37 samples, 2.52%)</title><rect x="738.4" y="771.0" width="29.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="741.4" y="782.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (20 samples, 1.36%)</title><rect x="768.2" y="771.0" width="16.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="771.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (20 samples, 1.36%)</title><rect x="768.2" y="755.0" width="16.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="771.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (20 samples, 1.36%)</title><rect x="768.2" y="739.0" width="16.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (20 samples, 1.36%)</title><rect x="768.2" y="723.0" width="16.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="771.2" y="734.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (24 samples, 1.64%)</title><rect x="784.3" y="787.0" width="19.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.3" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.34%)</title><rect x="803.6" y="867.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="806.6" y="878.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="803.6" y="851.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="806.6" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (21 samples, 1.43%)</title><rect x="807.7" y="899.0" width="16.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="810.7" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (21 samples, 1.43%)</title><rect x="807.7" y="883.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.7" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 0.20%)</title><rect x="821.4" y="867.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="824.4" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.14%)</title><rect x="822.2" y="851.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="825.2" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="822.2" y="835.0" width="1.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="825.2" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="823.8" y="867.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="826.8" y="878.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.07%)</title><rect x="824.6" y="931.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.6" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.07%)</title><rect x="825.4" y="947.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="828.4" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.07%)</title><rect x="825.4" y="931.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="828.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$526/2072927934.get$Lambda (1 samples, 0.07%)</title><rect x="825.4" y="915.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="828.4" y="926.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.07%)</title><rect x="825.4" y="899.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="828.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (134 samples, 9.14%)</title><rect x="826.2" y="947.0" width="107.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="829.2" y="958.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (134 samples, 9.14%)</title><rect x="826.2" y="931.0" width="107.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="829.2" y="942.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (132 samples, 9.00%)</title><rect x="827.8" y="915.0" width="106.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="830.8" y="926.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (6 samples, 0.41%)</title><rect x="827.8" y="899.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="830.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$526/2072927934.accept (4 samples, 0.27%)</title><rect x="829.4" y="883.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="832.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (125 samples, 8.53%)</title><rect x="832.6" y="899.0" width="100.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="835.6" y="910.0">java/util/co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$526/2072927934.accept (125 samples, 8.53%)</title><rect x="832.6" y="883.0" width="100.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="835.6" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (125 samples, 8.53%)</title><rect x="832.6" y="867.0" width="100.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="835.6" y="878.0">com/linecorp..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="835.8" y="851.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="838.8" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.27%)</title><rect x="837.4" y="851.0" width="3.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="840.4" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="839.1" y="835.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="842.1" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (115 samples, 7.84%)</title><rect x="840.7" y="851.0" width="92.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="843.7" y="862.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (114 samples, 7.78%)</title><rect x="840.7" y="835.0" width="91.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="843.7" y="846.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (114 samples, 7.78%)</title><rect x="840.7" y="819.0" width="91.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="843.7" y="830.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (96 samples, 6.55%)</title><rect x="840.7" y="803.0" width="77.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.7" y="814.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (96 samples, 6.55%)</title><rect x="840.7" y="787.0" width="77.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="843.7" y="798.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (79 samples, 5.39%)</title><rect x="850.3" y="771.0" width="63.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="853.3" y="782.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (79 samples, 5.39%)</title><rect x="850.3" y="755.0" width="63.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.3" y="766.0">io/micr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (79 samples, 5.39%)</title><rect x="850.3" y="739.0" width="63.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="853.3" y="750.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (79 samples, 5.39%)</title><rect x="850.3" y="723.0" width="63.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="853.3" y="734.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (79 samples, 5.39%)</title><rect x="850.3" y="707.0" width="63.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="853.3" y="718.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (60 samples, 4.09%)</title><rect x="850.3" y="691.0" width="48.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="853.3" y="702.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (45 samples, 3.07%)</title><rect x="850.3" y="675.0" width="36.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="853.3" y="686.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (15 samples, 1.02%)</title><rect x="886.5" y="675.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="889.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (15 samples, 1.02%)</title><rect x="886.5" y="659.0" width="12.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="889.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (15 samples, 1.02%)</title><rect x="886.5" y="643.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="889.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (15 samples, 1.02%)</title><rect x="886.5" y="627.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="889.5" y="638.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (19 samples, 1.30%)</title><rect x="898.6" y="691.0" width="15.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="901.6" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.34%)</title><rect x="913.9" y="771.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.9" y="782.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="913.9" y="755.0" width="4.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="916.9" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (18 samples, 1.23%)</title><rect x="917.9" y="803.0" width="14.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.9" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (18 samples, 1.23%)</title><rect x="917.9" y="787.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.9" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 0.20%)</title><rect x="930.0" y="771.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="933.0" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.20%)</title><rect x="930.0" y="755.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.0" y="766.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="930.8" y="739.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="933.8" y="750.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.07%)</title><rect x="932.4" y="835.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="935.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.07%)</title><rect x="933.2" y="899.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="936.2" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.27%)</title><rect x="934.0" y="947.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="937.0" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.14%)</title><rect x="937.3" y="963.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="940.3" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="937.3" y="947.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="940.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.07%)</title><rect x="938.9" y="979.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="941.9" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (12 samples, 0.82%)</title><rect x="939.7" y="979.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="942.7" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (8 samples, 0.55%)</title><rect x="939.7" y="963.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="942.7" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (8 samples, 0.55%)</title><rect x="939.7" y="947.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="942.7" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="939.7" y="931.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="942.7" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (1 samples, 0.07%)</title><rect x="939.7" y="915.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="942.7" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (7 samples, 0.48%)</title><rect x="940.5" y="931.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.5" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (7 samples, 0.48%)</title><rect x="940.5" y="915.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="943.5" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (6 samples, 0.41%)</title><rect x="941.3" y="899.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="944.3" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="942.1" y="883.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="945.1" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.27%)</title><rect x="942.9" y="883.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="945.9" y="894.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="943.7" y="867.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="946.7" y="878.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (4 samples, 0.27%)</title><rect x="946.1" y="963.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="949.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.34%)</title><rect x="949.3" y="1027.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="952.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.34%)</title><rect x="949.3" y="1011.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="952.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.34%)</title><rect x="949.3" y="995.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="952.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.34%)</title><rect x="949.3" y="979.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="952.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (224 samples, 15.28%)</title><rect x="953.4" y="1027.0" width="180.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="956.4" y="1038.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (224 samples, 15.28%)</title><rect x="953.4" y="1011.0" width="180.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.4" y="1022.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (194 samples, 13.23%)</title><rect x="954.2" y="995.0" width="156.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="957.2" y="1006.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (6 samples, 0.41%)</title><rect x="955.8" y="979.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="958.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (14 samples, 0.95%)</title><rect x="960.6" y="979.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="963.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.34%)</title><rect x="971.9" y="979.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="974.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.34%)</title><rect x="971.9" y="963.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="974.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.14%)</title><rect x="974.3" y="947.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="977.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.14%)</title><rect x="974.3" y="931.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="977.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.14%)</title><rect x="974.3" y="915.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="977.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.34%)</title><rect x="975.9" y="979.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="978.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.34%)</title><rect x="975.9" y="963.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="978.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (161 samples, 10.98%)</title><rect x="979.9" y="979.0" width="129.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="982.9" y="990.0">java/util/concur..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (159 samples, 10.85%)</title><rect x="981.5" y="963.0" width="128.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="984.5" y="974.0">jdk/internal/mis..</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.14%)</title><rect x="985.6" y="947.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.6" y="958.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 10.37%)</title><rect x="987.2" y="947.0" width="122.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="990.2" y="958.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.14%)</title><rect x="988.8" y="931.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.8" y="942.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (15 samples, 1.02%)</title><rect x="990.4" y="931.0" width="12.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="993.4" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.34%)</title><rect x="994.4" y="915.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.4" y="926.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.07%)</title><rect x="997.6" y="899.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1000.6" y="910.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.14%)</title><rect x="998.4" y="915.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1001.4" y="926.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1000.0" y="915.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1003.0" y="926.0"></text>
</g>
<g>
<title>update_get_addr (2 samples, 0.14%)</title><rect x="1000.8" y="915.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1003.8" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (6 samples, 0.41%)</title><rect x="1002.5" y="931.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.5" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.14%)</title><rect x="1007.3" y="931.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.3" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (41 samples, 2.80%)</title><rect x="1008.9" y="931.0" width="33.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1011.9" y="942.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (71 samples, 4.84%)</title><rect x="1041.9" y="931.0" width="57.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1044.9" y="942.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.34%)</title><rect x="1099.0" y="931.0" width="4.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1102.0" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="1103.1" y="931.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1106.1" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="1103.9" y="931.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1106.9" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="1104.7" y="931.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1107.7" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.14%)</title><rect x="1105.5" y="931.0" width="1.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1108.5" y="942.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="1107.1" y="931.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1110.1" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="1107.9" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.9" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="1108.7" y="931.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.7" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="1109.5" y="979.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1112.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.20%)</title><rect x="1110.3" y="995.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1113.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.20%)</title><rect x="1112.7" y="995.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1115.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.20%)</title><rect x="1112.7" y="979.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1115.7" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.20%)</title><rect x="1112.7" y="963.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1115.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 1.57%)</title><rect x="1115.1" y="995.0" width="18.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1118.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 1.57%)</title><rect x="1115.1" y="979.0" width="18.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1118.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 1.57%)</title><rect x="1115.1" y="963.0" width="18.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1118.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 1.57%)</title><rect x="1115.1" y="947.0" width="18.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1118.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="1133.7" y="1075.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1136.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.07%)</title><rect x="1133.7" y="1059.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1136.7" y="1070.0"></text>
</g>
<g>
<title>start_thread (69 samples, 4.71%)</title><rect x="1134.5" y="1075.0" width="55.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1137.5" y="1086.0">start..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (69 samples, 4.71%)</title><rect x="1134.5" y="1059.0" width="55.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1137.5" y="1070.0">threa..</text>
</g>
<g>
<title>Thread::call_run() (69 samples, 4.71%)</title><rect x="1134.5" y="1043.0" width="55.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.5" y="1054.0">Threa..</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 0.68%)</title><rect x="1134.5" y="1027.0" width="8.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.5" y="1038.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 0.61%)</title><rect x="1134.5" y="1011.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.5" y="1022.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.27%)</title><rect x="1134.5" y="995.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.5" y="1006.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="1134.5" y="979.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.5" y="990.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.20%)</title><rect x="1135.3" y="979.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1138.3" y="990.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1137.7" y="995.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1137.7" y="979.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="1137.7" y="963.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="974.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="1137.7" y="947.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.7" y="958.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.07%)</title><rect x="1137.7" y="931.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="942.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.07%)</title><rect x="1137.7" y="915.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.7" y="926.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.07%)</title><rect x="1137.7" y="899.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.7" y="910.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.14%)</title><rect x="1138.5" y="995.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.5" y="1006.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.14%)</title><rect x="1138.5" y="979.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.5" y="990.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.14%)</title><rect x="1138.5" y="963.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.5" y="974.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.07%)</title><rect x="1138.5" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.5" y="958.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.07%)</title><rect x="1138.5" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.5" y="942.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.07%)</title><rect x="1139.3" y="947.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.3" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.14%)</title><rect x="1140.1" y="995.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.1" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="1140.1" y="979.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.1" y="990.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.14%)</title><rect x="1140.1" y="963.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.1" y="974.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.14%)</title><rect x="1140.1" y="947.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="958.0"></text>
</g>
<g>
<title>frame::oops_entry_do(OopClosure*, RegisterMap const*) (1 samples, 0.07%)</title><rect x="1140.1" y="931.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.1" y="942.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="1140.1" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.1" y="926.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.07%)</title><rect x="1140.9" y="931.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.9" y="942.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.07%)</title><rect x="1140.9" y="915.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.9" y="926.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle const&amp;, int, InterpreterOopMap*) (1 samples, 0.07%)</title><rect x="1140.9" y="899.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.9" y="910.0"></text>
</g>
<g>
<title>OopMapCacheEntry::fill(methodHandle const&amp;, int) (1 samples, 0.07%)</title><rect x="1140.9" y="883.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.9" y="894.0"></text>
</g>
<g>
<title>GenerateOopMap::compute_map(Thread*) (1 samples, 0.07%)</title><rect x="1140.9" y="867.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.9" y="878.0"></text>
</g>
<g>
<title>GenerateOopMap::do_interpretation() (1 samples, 0.07%)</title><rect x="1140.9" y="851.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.9" y="862.0"></text>
</g>
<g>
<title>GenerateOopMap::interp_bb(BasicBlock*) (1 samples, 0.07%)</title><rect x="1140.9" y="835.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.9" y="846.0"></text>
</g>
<g>
<title>GenerateOopMap::interp1(BytecodeStream*) (1 samples, 0.07%)</title><rect x="1140.9" y="819.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.9" y="830.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="1141.7" y="1011.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.7" y="1022.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.07%)</title><rect x="1141.7" y="995.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.7" y="1006.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1141.7" y="979.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.7" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="1141.7" y="963.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.7" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (58 samples, 3.96%)</title><rect x="1142.5" y="1027.0" width="46.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.5" y="1038.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (58 samples, 3.96%)</title><rect x="1142.5" y="1011.0" width="46.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.5" y="1022.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (58 samples, 3.96%)</title><rect x="1142.5" y="995.0" width="46.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.5" y="1006.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (58 samples, 3.96%)</title><rect x="1142.5" y="979.0" width="46.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.5" y="990.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (58 samples, 3.96%)</title><rect x="1142.5" y="963.0" width="46.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.5" y="974.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 2.39%)</title><rect x="1142.5" y="947.0" width="28.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.5" y="958.0">Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.07%)</title><rect x="1142.5" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.5" y="942.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="1142.5" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.5" y="926.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.14%)</title><rect x="1143.3" y="931.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.3" y="942.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.07%)</title><rect x="1143.3" y="915.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.3" y="926.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.07%)</title><rect x="1144.1" y="915.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.1" y="926.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="1144.1" y="899.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.1" y="910.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1144.1" y="883.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.1" y="894.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1144.1" y="867.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1147.1" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.14%)</title><rect x="1144.9" y="931.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.9" y="942.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="1144.9" y="915.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.9" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.07%)</title><rect x="1145.7" y="915.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.7" y="926.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.07%)</title><rect x="1145.7" y="899.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.7" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.34%)</title><rect x="1146.5" y="931.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.5" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.07%)</title><rect x="1146.5" y="915.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.5" y="926.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.07%)</title><rect x="1146.5" y="899.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.5" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.27%)</title><rect x="1147.3" y="915.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1147.3" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.3" y="910.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1147.3" y="883.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.3" y="894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1147.3" y="867.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.3" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.07%)</title><rect x="1148.1" y="899.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.1" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.14%)</title><rect x="1148.9" y="899.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.9" y="910.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="1149.8" y="883.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="894.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="1149.8" y="867.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 1.71%)</title><rect x="1150.6" y="931.0" width="20.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.6" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.07%)</title><rect x="1150.6" y="915.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.6" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.07%)</title><rect x="1151.4" y="915.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.4" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.07%)</title><rect x="1151.4" y="899.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.20%)</title><rect x="1152.2" y="915.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.2" y="926.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="1153.8" y="899.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.55%)</title><rect x="1154.6" y="915.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.6" y="926.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.07%)</title><rect x="1155.4" y="899.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.4" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1156.2" y="899.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.2" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.07%)</title><rect x="1157.0" y="899.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.0" y="910.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.07%)</title><rect x="1157.0" y="883.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.0" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.20%)</title><rect x="1157.8" y="899.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.8" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.07%)</title><rect x="1160.2" y="899.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.2" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1160.2" y="883.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.2" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="1161.0" y="915.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.0" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="1161.0" y="899.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.0" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.07%)</title><rect x="1161.8" y="915.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.8" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.14%)</title><rect x="1162.6" y="915.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="926.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.07%)</title><rect x="1163.4" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.4" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.14%)</title><rect x="1164.2" y="915.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.2" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.07%)</title><rect x="1165.9" y="915.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.9" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1165.9" y="899.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.9" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="1166.7" y="915.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.7" y="926.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1166.7" y="899.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.7" y="910.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.20%)</title><rect x="1167.5" y="915.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.5" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="1169.1" y="899.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.1" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1169.1" y="883.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.1" y="894.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="1169.9" y="915.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.9" y="926.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 1.30%)</title><rect x="1170.7" y="947.0" width="15.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.7" y="958.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (10 samples, 0.68%)</title><rect x="1170.7" y="931.0" width="8.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (10 samples, 0.68%)</title><rect x="1170.7" y="915.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.27%)</title><rect x="1170.7" y="899.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.14%)</title><rect x="1173.9" y="899.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.14%)</title><rect x="1173.9" y="883.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.14%)</title><rect x="1173.9" y="867.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.14%)</title><rect x="1173.9" y="851.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1173.9" y="835.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.9" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (2 samples, 0.14%)</title><rect x="1173.9" y="819.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.07%)</title><rect x="1175.5" y="899.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.07%)</title><rect x="1175.5" y="883.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.14%)</title><rect x="1176.3" y="899.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1177.1" y="883.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1177.1" y="867.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="878.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1177.1" y="851.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1177.9" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1177.9" y="883.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="894.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1177.9" y="867.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="1178.7" y="931.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.7" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1178.7" y="915.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1178.7" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.7" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1178.7" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1178.7" y="867.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 0.27%)</title><rect x="1179.5" y="931.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.5" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1179.5" y="915.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1179.5" y="899.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.07%)</title><rect x="1179.5" y="883.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="1179.5" y="867.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.07%)</title><rect x="1180.3" y="915.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.3" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.14%)</title><rect x="1181.1" y="915.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.20%)</title><rect x="1182.8" y="931.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.20%)</title><rect x="1182.8" y="915.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="926.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1182.8" y="899.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1182.8" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="894.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1182.8" y="867.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="899.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.6" y="910.0"></text>
</g>
<g>
<title>PhiNode::wait_for_region_igvn(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1183.6" y="883.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="894.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="899.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="910.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.07%)</title><rect x="1185.2" y="931.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="942.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.07%)</title><rect x="1185.2" y="915.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="926.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.2" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1186.0" y="947.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1186.0" y="931.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1186.0" y="915.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1186.0" y="899.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1186.0" y="883.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1186.0" y="867.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1186.0" y="851.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1186.0" y="835.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1186.0" y="819.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1186.0" y="803.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1186.0" y="787.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1186.0" y="771.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1186.0" y="755.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1186.0" y="739.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1186.0" y="723.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1186.0" y="707.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1186.0" y="691.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1186.0" y="675.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1186.0" y="659.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1186.0" y="643.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.0" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1186.0" y="627.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1186.0" y="611.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1186.0" y="595.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1186.0" y="579.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1186.0" y="563.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1186.0" y="547.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1186.0" y="531.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1186.0" y="515.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1186.0" y="499.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1186.0" y="483.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1186.0" y="467.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1186.0" y="451.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.0" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1186.0" y="435.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1186.0" y="419.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1186.0" y="403.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1186.0" y="387.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1186.0" y="371.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1186.0" y="355.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.0" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1186.0" y="339.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1186.0" y="323.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1186.0" y="307.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1186.0" y="291.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1186.0" y="275.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1186.0" y="259.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1186.0" y="243.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1186.0" y="227.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1186.0" y="211.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1186.0" y="195.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1186.0" y="179.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="190.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1186.0" y="163.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.0" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.07%)</title><rect x="1186.0" y="147.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.0" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_Class_query(vmIntrinsics::ID) (1 samples, 0.07%)</title><rect x="1186.0" y="131.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.0" y="142.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1186.0" y="115.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="126.0"></text>
</g>
<g>
<title>TypePtr::speculative_type() const (1 samples, 0.07%)</title><rect x="1186.0" y="99.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="110.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1186.0" y="83.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1186.0" y="67.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.07%)</title><rect x="1186.0" y="51.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.0" y="62.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.07%)</title><rect x="1186.0" y="35.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.0" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1186.8" y="163.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.8" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1186.8" y="147.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1186.8" y="131.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1186.8" y="115.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1186.8" y="99.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1186.8" y="83.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.8" y="94.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1186.8" y="67.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="78.0"></text>
</g>
<g>
<title>Compile::AliasType::Init(int, TypePtr const*) (1 samples, 0.07%)</title><rect x="1186.8" y="51.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.8" y="62.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1187.6" y="163.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.6" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1187.6" y="147.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.6" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1187.6" y="131.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="142.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.07%)</title><rect x="1187.6" y="115.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.6" y="126.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.07%)</title><rect x="1187.6" y="99.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.4" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.4" y="835.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.4" y="819.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1188.4" y="803.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1188.4" y="787.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1188.4" y="771.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1188.4" y="755.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.4" y="739.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.4" y="723.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1188.4" y="707.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1188.4" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1188.4" y="675.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1188.4" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.4" y="643.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.4" y="627.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.4" y="638.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.07%)</title><rect x="1188.4" y="611.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.4" y="622.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1188.4" y="595.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.4" y="606.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="1188.4" y="579.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1191.4" y="590.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.2" y="1027.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.2" y="1038.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.2" y="1011.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.2" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1189.2" y="995.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.2" y="1006.0"></text>
</g>
<g>
<title>StrongRootsScope::StrongRootsScope(unsigned int) (1 samples, 0.07%)</title><rect x="1189.2" y="979.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.2" y="990.0"></text>
</g>
</g>
</svg>
