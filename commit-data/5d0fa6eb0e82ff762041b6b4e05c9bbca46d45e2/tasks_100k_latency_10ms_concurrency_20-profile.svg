<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (283 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.35%)</title><rect x="10.0" y="851.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.35%)</title><rect x="10.0" y="835.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (20 samples, 7.07%)</title><rect x="14.2" y="851.0" width="83.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="862.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (20 samples, 7.07%)</title><rect x="14.2" y="835.0" width="83.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.2" y="846.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.71%)</title><rect x="14.2" y="819.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.71%)</title><rect x="14.2" y="803.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.commitReadyOffsets (1 samples, 0.35%)</title><rect x="14.2" y="787.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.2" y="798.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (1 samples, 0.35%)</title><rect x="14.2" y="771.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$528/1607003200.accept (1 samples, 0.35%)</title><rect x="14.2" y="755.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.2" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.35%)</title><rect x="14.2" y="739.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.2" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="723.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.2" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="707.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.2" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="691.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.2" y="702.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="675.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.2" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="659.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.2" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="643.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.2" y="654.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="627.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="17.2" y="638.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="611.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.2" y="622.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="595.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.2" y="606.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.35%)</title><rect x="14.2" y="579.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.2" y="590.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.35%)</title><rect x="14.2" y="563.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.35%)</title><rect x="18.3" y="787.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.35%)</title><rect x="18.3" y="771.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.35%)</title><rect x="18.3" y="755.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.35%)</title><rect x="18.3" y="739.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (18 samples, 6.36%)</title><rect x="22.5" y="819.0" width="75.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.5" y="830.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.71%)</title><rect x="22.5" y="803.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (2 samples, 0.71%)</title><rect x="22.5" y="787.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (2 samples, 0.71%)</title><rect x="22.5" y="771.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.5" y="782.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.35%)</title><rect x="26.7" y="755.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.71%)</title><rect x="30.8" y="803.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.71%)</title><rect x="30.8" y="787.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.71%)</title><rect x="30.8" y="771.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$272/628847719.accept (2 samples, 0.71%)</title><rect x="30.8" y="755.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.71%)</title><rect x="30.8" y="739.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.71%)</title><rect x="30.8" y="723.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.8" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.71%)</title><rect x="30.8" y="707.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.77%)</title><rect x="39.2" y="803.0" width="20.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/716656862.accept (4 samples, 1.41%)</title><rect x="39.2" y="787.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.41%)</title><rect x="39.2" y="771.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (2 samples, 0.71%)</title><rect x="39.2" y="755.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="42.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.71%)</title><rect x="39.2" y="739.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.71%)</title><rect x="39.2" y="723.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.2" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (2 samples, 0.71%)</title><rect x="39.2" y="707.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.2" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (2 samples, 0.71%)</title><rect x="39.2" y="691.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.2" y="702.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (2 samples, 0.71%)</title><rect x="39.2" y="675.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.71%)</title><rect x="47.5" y="755.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.71%)</title><rect x="47.5" y="739.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.35%)</title><rect x="51.7" y="723.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.35%)</title><rect x="51.7" y="707.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.35%)</title><rect x="51.7" y="691.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.35%)</title><rect x="51.7" y="675.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.7" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.35%)</title><rect x="55.9" y="787.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="58.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.18%)</title><rect x="60.0" y="803.0" width="37.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.0" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.18%)</title><rect x="60.0" y="787.0" width="37.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.0" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.12%)</title><rect x="60.0" y="771.0" width="25.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.0" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.77%)</title><rect x="60.0" y="755.0" width="20.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.77%)</title><rect x="60.0" y="739.0" width="20.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.71%)</title><rect x="60.0" y="723.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.35%)</title><rect x="60.0" y="707.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.35%)</title><rect x="60.0" y="691.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.35%)</title><rect x="60.0" y="675.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.35%)</title><rect x="60.0" y="659.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.35%)</title><rect x="60.0" y="643.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData.&lt;init&gt; (1 samples, 0.35%)</title><rect x="60.0" y="627.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData.read (1 samples, 0.35%)</title><rect x="60.0" y="611.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ByteBufferAccessor.readShort (1 samples, 0.35%)</title><rect x="60.0" y="595.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.0" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getShort (1 samples, 0.35%)</title><rect x="60.0" y="579.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.0" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.35%)</title><rect x="60.0" y="563.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="64.2" y="707.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="64.2" y="691.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.35%)</title><rect x="64.2" y="675.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.35%)</title><rect x="64.2" y="659.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.35%)</title><rect x="64.2" y="643.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.35%)</title><rect x="64.2" y="627.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.35%)</title><rect x="64.2" y="611.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.2" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.35%)</title><rect x="64.2" y="595.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.2" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.35%)</title><rect x="64.2" y="579.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.2" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="64.2" y="563.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="67.2" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="64.2" y="547.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="67.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.35%)</title><rect x="64.2" y="531.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="67.2" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.35%)</title><rect x="64.2" y="515.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="67.2" y="526.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="64.2" y="499.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="67.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.35%)</title><rect x="68.4" y="723.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.4" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.35%)</title><rect x="68.4" y="707.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="71.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.35%)</title><rect x="72.5" y="723.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.35%)</title><rect x="72.5" y="707.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.35%)</title><rect x="72.5" y="691.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.35%)</title><rect x="72.5" y="675.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.35%)</title><rect x="72.5" y="659.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.35%)</title><rect x="72.5" y="643.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.35%)</title><rect x="72.5" y="627.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.topicIds (1 samples, 0.35%)</title><rect x="72.5" y="611.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.5" y="622.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.35%)</title><rect x="72.5" y="595.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.35%)</title><rect x="72.5" y="579.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.5" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.characteristics (1 samples, 0.35%)</title><rect x="72.5" y="563.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="75.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.35%)</title><rect x="76.7" y="723.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.35%)</title><rect x="80.9" y="755.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.35%)</title><rect x="80.9" y="739.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.35%)</title><rect x="80.9" y="723.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="83.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.35%)</title><rect x="80.9" y="707.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.&lt;init&gt; (1 samples, 0.35%)</title><rect x="80.9" y="691.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.35%)</title><rect x="85.1" y="771.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.35%)</title><rect x="85.1" y="755.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.35%)</title><rect x="85.1" y="739.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.35%)</title><rect x="85.1" y="723.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.35%)</title><rect x="85.1" y="707.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.35%)</title><rect x="85.1" y="691.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="85.1" y="675.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.35%)</title><rect x="85.1" y="659.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="88.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="85.1" y="643.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="85.1" y="627.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.71%)</title><rect x="89.2" y="771.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.35%)</title><rect x="89.2" y="755.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.35%)</title><rect x="89.2" y="739.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.35%)</title><rect x="89.2" y="723.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.35%)</title><rect x="89.2" y="707.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.35%)</title><rect x="89.2" y="691.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.35%)</title><rect x="89.2" y="675.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.35%)</title><rect x="89.2" y="659.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.35%)</title><rect x="89.2" y="643.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.2" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.35%)</title><rect x="89.2" y="627.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.2" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.35%)</title><rect x="89.2" y="611.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.2" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="89.2" y="595.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="92.2" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="89.2" y="579.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="92.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.35%)</title><rect x="89.2" y="563.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="92.2" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.35%)</title><rect x="89.2" y="547.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="92.2" y="558.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="89.2" y="531.0" width="4.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="92.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.35%)</title><rect x="93.4" y="755.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.35%)</title><rect x="93.4" y="739.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.35%)</title><rect x="93.4" y="723.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.35%)</title><rect x="93.4" y="707.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (208 samples, 73.50%)</title><rect x="97.6" y="851.0" width="867.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.6" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (208 samples, 73.50%)</title><rect x="97.6" y="835.0" width="867.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.6" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (208 samples, 73.50%)</title><rect x="97.6" y="819.0" width="867.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.6" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/1689224031.run (197 samples, 69.61%)</title><rect x="101.7" y="803.0" width="821.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="104.7" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/1689224031.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (197 samples, 69.61%)</title><rect x="101.7" y="787.0" width="821.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="104.7" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (197 samples, 69.61%)</title><rect x="101.7" y="771.0" width="821.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="104.7" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="110.1" y="755.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="113.1" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="110.1" y="739.0" width="4.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="113.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (189 samples, 66.78%)</title><rect x="114.2" y="755.0" width="788.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.2" y="766.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.35%)</title><rect x="114.2" y="739.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (8 samples, 2.83%)</title><rect x="118.4" y="739.0" width="33.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.4" y="750.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.83%)</title><rect x="118.4" y="723.0" width="33.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="121.4" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 2.83%)</title><rect x="118.4" y="707.0" width="33.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.4" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.12%)</title><rect x="126.7" y="691.0" width="25.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="129.7" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.12%)</title><rect x="126.7" y="675.0" width="25.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="129.7" y="686.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$526/1191820319.accept (5 samples, 1.77%)</title><rect x="130.9" y="659.0" width="20.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (5 samples, 1.77%)</title><rect x="130.9" y="643.0" width="20.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="133.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$504/484736765.accept (1 samples, 0.35%)</title><rect x="130.9" y="627.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 1.41%)</title><rect x="135.1" y="627.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 1.41%)</title><rect x="135.1" y="611.0" width="16.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="138.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.41%)</title><rect x="135.1" y="595.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.41%)</title><rect x="135.1" y="579.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="138.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$504/484736765.accept (1 samples, 0.35%)</title><rect x="147.6" y="563.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.6" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (2 samples, 0.71%)</title><rect x="151.8" y="739.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (2 samples, 0.71%)</title><rect x="151.8" y="723.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="154.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.71%)</title><rect x="151.8" y="707.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.71%)</title><rect x="151.8" y="691.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="154.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.71%)</title><rect x="151.8" y="675.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (25 samples, 8.83%)</title><rect x="160.1" y="739.0" width="104.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.1" y="750.0">com/linecorp..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (25 samples, 8.83%)</title><rect x="160.1" y="723.0" width="104.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.1" y="734.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (20 samples, 7.07%)</title><rect x="164.3" y="707.0" width="83.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.3" y="718.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (15 samples, 5.30%)</title><rect x="168.4" y="691.0" width="62.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.4" y="702.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (15 samples, 5.30%)</title><rect x="168.4" y="675.0" width="62.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.4" y="686.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (14 samples, 4.95%)</title><rect x="168.4" y="659.0" width="58.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.4" y="670.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (14 samples, 4.95%)</title><rect x="168.4" y="643.0" width="58.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.4" y="654.0">io/mic..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (14 samples, 4.95%)</title><rect x="168.4" y="627.0" width="58.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.4" y="638.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (14 samples, 4.95%)</title><rect x="168.4" y="611.0" width="58.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.4" y="622.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (14 samples, 4.95%)</title><rect x="168.4" y="595.0" width="58.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.4" y="606.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (10 samples, 3.53%)</title><rect x="168.4" y="579.0" width="41.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="171.4" y="590.0">org..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (6 samples, 2.12%)</title><rect x="168.4" y="563.0" width="25.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.4" y="574.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (6 samples, 2.12%)</title><rect x="168.4" y="547.0" width="25.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.4" y="558.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (4 samples, 1.41%)</title><rect x="193.5" y="563.0" width="16.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (4 samples, 1.41%)</title><rect x="193.5" y="547.0" width="16.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (4 samples, 1.41%)</title><rect x="193.5" y="531.0" width="16.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (4 samples, 1.41%)</title><rect x="193.5" y="515.0" width="16.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="196.5" y="526.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (4 samples, 1.41%)</title><rect x="210.1" y="579.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.1" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.35%)</title><rect x="226.8" y="659.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="229.8" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="226.8" y="643.0" width="4.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="229.8" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (4 samples, 1.41%)</title><rect x="231.0" y="691.0" width="16.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.0" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 1.41%)</title><rect x="231.0" y="675.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.0" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 1.41%)</title><rect x="231.0" y="659.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.0" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.35%)</title><rect x="243.5" y="643.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="246.5" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="243.5" y="627.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="246.5" y="638.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (4 samples, 1.41%)</title><rect x="247.7" y="707.0" width="16.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (15 samples, 5.30%)</title><rect x="264.3" y="739.0" width="62.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.3" y="750.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (15 samples, 5.30%)</title><rect x="264.3" y="723.0" width="62.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.3" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (15 samples, 5.30%)</title><rect x="264.3" y="707.0" width="62.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.3" y="718.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 4.95%)</title><rect x="264.3" y="691.0" width="58.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.3" y="702.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 4.95%)</title><rect x="264.3" y="675.0" width="58.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.3" y="686.0">com/li..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 4.95%)</title><rect x="264.3" y="659.0" width="58.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.3" y="670.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 1.77%)</title><rect x="264.3" y="643.0" width="20.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="267.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.71%)</title><rect x="276.9" y="627.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.71%)</title><rect x="276.9" y="611.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="276.9" y="595.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="279.9" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="276.9" y="579.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="279.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.35%)</title><rect x="276.9" y="563.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="279.9" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.35%)</title><rect x="276.9" y="547.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="279.9" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.35%)</title><rect x="276.9" y="531.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="279.9" y="542.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="276.9" y="515.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="279.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.35%)</title><rect x="281.0" y="595.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.35%)</title><rect x="281.0" y="579.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 3.18%)</title><rect x="285.2" y="643.0" width="37.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.2" y="654.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.35%)</title><rect x="285.2" y="627.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="285.2" y="611.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.35%)</title><rect x="285.2" y="595.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.35%)</title><rect x="285.2" y="579.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 1.06%)</title><rect x="289.4" y="627.0" width="12.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 1.06%)</title><rect x="289.4" y="611.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 1.06%)</title><rect x="289.4" y="595.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 1.06%)</title><rect x="289.4" y="579.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 1.06%)</title><rect x="289.4" y="563.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (3 samples, 1.06%)</title><rect x="289.4" y="547.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (5 samples, 1.77%)</title><rect x="301.9" y="627.0" width="20.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 1.77%)</title><rect x="301.9" y="611.0" width="20.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.35%)</title><rect x="301.9" y="595.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.35%)</title><rect x="301.9" y="579.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.41%)</title><rect x="306.0" y="595.0" width="16.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.41%)</title><rect x="306.0" y="579.0" width="16.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.41%)</title><rect x="306.0" y="563.0" width="16.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.71%)</title><rect x="310.2" y="547.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.71%)</title><rect x="310.2" y="531.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.71%)</title><rect x="310.2" y="515.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.71%)</title><rect x="310.2" y="499.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.35%)</title><rect x="314.4" y="483.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.35%)</title><rect x="318.6" y="547.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.35%)</title><rect x="318.6" y="531.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.35%)</title><rect x="318.6" y="515.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.6" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.35%)</title><rect x="322.7" y="691.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="325.7" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="322.7" y="675.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="325.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="322.7" y="659.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="325.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.35%)</title><rect x="322.7" y="643.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="325.7" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.35%)</title><rect x="322.7" y="627.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="325.7" y="638.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.35%)</title><rect x="322.7" y="611.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="325.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (138 samples, 48.76%)</title><rect x="326.9" y="739.0" width="575.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="329.9" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.35%)</title><rect x="326.9" y="723.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="329.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.35%)</title><rect x="331.1" y="723.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="334.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.35%)</title><rect x="331.1" y="707.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="334.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.35%)</title><rect x="331.1" y="691.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="334.1" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.35%)</title><rect x="331.1" y="675.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="334.1" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.35%)</title><rect x="331.1" y="659.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="334.1" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.35%)</title><rect x="331.1" y="643.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="334.1" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.35%)</title><rect x="331.1" y="627.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="334.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (26 samples, 9.19%)</title><rect x="335.2" y="723.0" width="108.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.2" y="734.0">com/linecorp/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 9.19%)</title><rect x="335.2" y="707.0" width="108.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.2" y="718.0">org/slf4j/MDC..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (26 samples, 9.19%)</title><rect x="335.2" y="691.0" width="108.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="338.2" y="702.0">ch/qos/logbac..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 1.77%)</title><rect x="339.4" y="675.0" width="20.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="339.4" y="659.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="339.4" y="643.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 1.41%)</title><rect x="343.6" y="659.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 1.41%)</title><rect x="343.6" y="643.0" width="16.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="346.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.77%)</title><rect x="360.2" y="675.0" width="20.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="363.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.06%)</title><rect x="368.6" y="659.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.6" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (15 samples, 5.30%)</title><rect x="381.1" y="675.0" width="62.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="384.1" y="686.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (14 samples, 4.95%)</title><rect x="385.3" y="659.0" width="58.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.3" y="670.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (14 samples, 4.95%)</title><rect x="385.3" y="643.0" width="58.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.3" y="654.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="443.6" y="723.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="446.6" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.35%)</title><rect x="443.6" y="707.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (16 samples, 5.65%)</title><rect x="447.8" y="723.0" width="66.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.8" y="734.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (14 samples, 4.95%)</title><rect x="447.8" y="707.0" width="58.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.8" y="718.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.41%)</title><rect x="452.0" y="691.0" width="16.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.0" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.35%)</title><rect x="460.3" y="675.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.3" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.35%)</title><rect x="460.3" y="659.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="463.3" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.35%)</title><rect x="460.3" y="643.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.3" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.35%)</title><rect x="460.3" y="627.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="463.3" y="638.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="464.5" y="675.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="467.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.35%)</title><rect x="468.7" y="691.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.35%)</title><rect x="468.7" y="675.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.7" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.35%)</title><rect x="468.7" y="659.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="471.7" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.35%)</title><rect x="468.7" y="643.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="471.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.35%)</title><rect x="468.7" y="627.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="471.7" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.35%)</title><rect x="468.7" y="611.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="471.7" y="622.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.35%)</title><rect x="468.7" y="595.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="471.7" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.83%)</title><rect x="472.8" y="691.0" width="33.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.8" y="702.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.47%)</title><rect x="477.0" y="675.0" width="29.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.0" y="686.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.71%)</title><rect x="477.0" y="659.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.71%)</title><rect x="477.0" y="643.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.71%)</title><rect x="477.0" y="627.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="485.3" y="659.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="488.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="485.3" y="643.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="488.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.35%)</title><rect x="485.3" y="627.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.3" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.35%)</title><rect x="485.3" y="611.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.3" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.41%)</title><rect x="489.5" y="659.0" width="16.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.41%)</title><rect x="489.5" y="643.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.41%)</title><rect x="489.5" y="627.0" width="16.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="492.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (2 samples, 0.71%)</title><rect x="506.2" y="707.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (2 samples, 0.71%)</title><rect x="506.2" y="691.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="509.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.71%)</title><rect x="506.2" y="675.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="509.2" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 0.71%)</title><rect x="506.2" y="659.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.71%)</title><rect x="506.2" y="643.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="509.2" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="510.4" y="627.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="513.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (66 samples, 23.32%)</title><rect x="514.5" y="723.0" width="275.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="517.5" y="734.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (66 samples, 23.32%)</title><rect x="514.5" y="707.0" width="275.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="517.5" y="718.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$430/1845948618.process (46 samples, 16.25%)</title><rect x="531.2" y="691.0" width="191.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="534.2" y="702.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (46 samples, 16.25%)</title><rect x="531.2" y="675.0" width="191.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="534.2" y="686.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (45 samples, 15.90%)</title><rect x="531.2" y="659.0" width="187.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.2" y="670.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="539.5" y="643.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="542.5" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.35%)</title><rect x="539.5" y="627.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="542.5" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.35%)</title><rect x="539.5" y="611.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="542.5" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.35%)</title><rect x="539.5" y="595.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="542.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.35%)</title><rect x="539.5" y="579.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="542.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.35%)</title><rect x="539.5" y="563.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="542.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ExecutionRecord.process (42 samples, 14.84%)</title><rect x="543.7" y="643.0" width="175.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="546.7" y="654.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (40 samples, 14.13%)</title><rect x="552.0" y="627.0" width="166.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="555.0" y="638.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (35 samples, 12.37%)</title><rect x="564.6" y="611.0" width="145.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="567.6" y="622.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.35%)</title><rect x="568.7" y="595.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="571.7" y="606.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.35%)</title><rect x="572.9" y="595.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="575.9" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.77%)</title><rect x="577.1" y="595.0" width="20.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="580.1" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 4.59%)</title><rect x="597.9" y="595.0" width="54.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="600.9" y="606.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.35%)</title><rect x="652.1" y="595.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="655.1" y="606.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (12 samples, 4.24%)</title><rect x="656.3" y="595.0" width="50.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="659.3" y="606.0">os::s..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 1.06%)</title><rect x="673.0" y="579.0" width="12.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="676.0" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.35%)</title><rect x="677.1" y="563.0" width="4.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="680.1" y="574.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.35%)</title><rect x="681.3" y="563.0" width="4.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="684.3" y="574.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="685.5" y="579.0" width="4.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="688.5" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="689.6" y="579.0" width="4.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="692.6" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="689.6" y="563.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="692.6" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 1.06%)</title><rect x="693.8" y="579.0" width="12.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="696.8" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.35%)</title><rect x="706.3" y="595.0" width="4.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="709.3" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.253] (1 samples, 0.35%)</title><rect x="710.5" y="611.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="713.5" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.35%)</title><rect x="714.7" y="611.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="717.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.35%)</title><rect x="718.8" y="659.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="721.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.35%)</title><rect x="718.8" y="643.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="721.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.35%)</title><rect x="718.8" y="627.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="721.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.35%)</title><rect x="718.8" y="611.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="721.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.35%)</title><rect x="723.0" y="691.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="726.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.taskDataBytes (1 samples, 0.35%)</title><rect x="727.2" y="691.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.35%)</title><rect x="731.3" y="691.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="734.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.35%)</title><rect x="731.3" y="675.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="734.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.35%)</title><rect x="731.3" y="659.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="734.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.35%)</title><rect x="731.3" y="643.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="734.3" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.35%)</title><rect x="731.3" y="627.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="734.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.35%)</title><rect x="731.3" y="611.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="734.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.35%)</title><rect x="735.5" y="691.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="738.5" y="702.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.35%)</title><rect x="735.5" y="675.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="738.5" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (8 samples, 2.83%)</title><rect x="739.7" y="691.0" width="33.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.7" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (8 samples, 2.83%)</title><rect x="739.7" y="675.0" width="33.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="742.7" y="686.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$507/269976490.get$Lambda (7 samples, 2.47%)</title><rect x="739.7" y="659.0" width="29.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="742.7" y="670.0">co..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.71%)</title><rect x="739.7" y="643.0" width="8.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="742.7" y="654.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.71%)</title><rect x="739.7" y="627.0" width="8.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="742.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$507/269976490.&lt;init&gt; (5 samples, 1.77%)</title><rect x="748.0" y="643.0" width="20.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="751.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.71%)</title><rect x="760.5" y="627.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$521/720287697.get$Lambda (1 samples, 0.35%)</title><rect x="768.9" y="659.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="771.9" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="768.9" y="643.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="771.9" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="768.9" y="627.0" width="4.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="771.9" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.35%)</title><rect x="773.0" y="691.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.0" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.35%)</title><rect x="777.2" y="691.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="780.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.71%)</title><rect x="781.4" y="691.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="784.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.71%)</title><rect x="781.4" y="675.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.71%)</title><rect x="781.4" y="659.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.71%)</title><rect x="781.4" y="643.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.4" y="654.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.71%)</title><rect x="781.4" y="627.0" width="8.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="784.4" y="638.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (9 samples, 3.18%)</title><rect x="789.7" y="723.0" width="37.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="792.7" y="734.0">io/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (8 samples, 2.83%)</title><rect x="789.7" y="707.0" width="33.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="792.7" y="718.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (8 samples, 2.83%)</title><rect x="789.7" y="691.0" width="33.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="792.7" y="702.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (3 samples, 1.06%)</title><rect x="802.2" y="675.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.2" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (3 samples, 1.06%)</title><rect x="802.2" y="659.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="805.2" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (3 samples, 1.06%)</title><rect x="802.2" y="643.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="805.2" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (3 samples, 1.06%)</title><rect x="802.2" y="627.0" width="12.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="805.2" y="638.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (3 samples, 1.06%)</title><rect x="802.2" y="611.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="805.2" y="622.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (3 samples, 1.06%)</title><rect x="802.2" y="595.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.2" y="606.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (3 samples, 1.06%)</title><rect x="802.2" y="579.0" width="12.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="805.2" y="590.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (3 samples, 1.06%)</title><rect x="802.2" y="563.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.2" y="574.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (3 samples, 1.06%)</title><rect x="802.2" y="547.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.2" y="558.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (3 samples, 1.06%)</title><rect x="802.2" y="531.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="805.2" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (2 samples, 0.71%)</title><rect x="814.7" y="675.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.7" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.71%)</title><rect x="814.7" y="659.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.7" y="670.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.71%)</title><rect x="814.7" y="643.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="817.7" y="654.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.getChildren (1 samples, 0.35%)</title><rect x="823.1" y="707.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="826.1" y="718.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.values (1 samples, 0.35%)</title><rect x="823.1" y="691.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="826.1" y="702.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$Values.&lt;init&gt; (1 samples, 0.35%)</title><rect x="823.1" y="675.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="826.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 6.36%)</title><rect x="827.2" y="723.0" width="75.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="830.2" y="734.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 6.36%)</title><rect x="827.2" y="707.0" width="75.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="830.2" y="718.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 6.36%)</title><rect x="827.2" y="691.0" width="75.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="830.2" y="702.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.35%)</title><rect x="827.2" y="675.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="830.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 6.01%)</title><rect x="831.4" y="675.0" width="70.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="834.4" y="686.0">java/uti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$524/1127624865.accept (17 samples, 6.01%)</title><rect x="831.4" y="659.0" width="70.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="834.4" y="670.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (17 samples, 6.01%)</title><rect x="831.4" y="643.0" width="70.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="834.4" y="654.0">com/line..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="831.4" y="627.0" width="4.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="834.4" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="831.4" y="611.0" width="4.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="834.4" y="622.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (16 samples, 5.65%)</title><rect x="835.6" y="627.0" width="66.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.6" y="638.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (15 samples, 5.30%)</title><rect x="835.6" y="611.0" width="62.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="838.6" y="622.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (15 samples, 5.30%)</title><rect x="835.6" y="595.0" width="62.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.6" y="606.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (15 samples, 5.30%)</title><rect x="835.6" y="579.0" width="62.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.6" y="590.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (15 samples, 5.30%)</title><rect x="835.6" y="563.0" width="62.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="838.6" y="574.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (13 samples, 4.59%)</title><rect x="843.9" y="547.0" width="54.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.9" y="558.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (13 samples, 4.59%)</title><rect x="843.9" y="531.0" width="54.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="846.9" y="542.0">io/mi..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (13 samples, 4.59%)</title><rect x="843.9" y="515.0" width="54.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="846.9" y="526.0">org/H..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (13 samples, 4.59%)</title><rect x="843.9" y="499.0" width="54.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="846.9" y="510.0">org/H..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (13 samples, 4.59%)</title><rect x="843.9" y="483.0" width="54.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="846.9" y="494.0">org/H..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (8 samples, 2.83%)</title><rect x="843.9" y="467.0" width="33.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.9" y="478.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (7 samples, 2.47%)</title><rect x="843.9" y="451.0" width="29.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="846.9" y="462.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (7 samples, 2.47%)</title><rect x="843.9" y="435.0" width="29.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.9" y="446.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (1 samples, 0.35%)</title><rect x="873.1" y="451.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (1 samples, 0.35%)</title><rect x="873.1" y="435.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="876.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (1 samples, 0.35%)</title><rect x="873.1" y="419.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="876.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (1 samples, 0.35%)</title><rect x="873.1" y="403.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="876.1" y="414.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (5 samples, 1.77%)</title><rect x="877.3" y="467.0" width="20.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="880.3" y="478.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.35%)</title><rect x="898.1" y="611.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="901.1" y="622.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (5 samples, 1.77%)</title><rect x="902.3" y="755.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="905.3" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (4 samples, 1.41%)</title><rect x="902.3" y="739.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="905.3" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (3 samples, 1.06%)</title><rect x="906.5" y="723.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="909.5" y="734.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (3 samples, 1.06%)</title><rect x="906.5" y="707.0" width="12.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="909.5" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 1.06%)</title><rect x="906.5" y="691.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="909.5" y="702.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 1.06%)</title><rect x="906.5" y="675.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="909.5" y="686.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.35%)</title><rect x="919.0" y="739.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="922.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (1 samples, 0.35%)</title><rect x="923.1" y="803.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset (1 samples, 0.35%)</title><rect x="923.1" y="787.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="926.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1 samples, 0.35%)</title><rect x="923.1" y="771.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.1" y="782.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry$$Lambda$164/1320388319.run (1 samples, 0.35%)</title><rect x="923.1" y="755.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="926.1" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry.publishSafely (1 samples, 0.35%)</title><rect x="923.1" y="739.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="926.1" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.publish (1 samples, 0.35%)</title><rect x="923.1" y="723.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="926.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (1 samples, 0.35%)</title><rect x="923.1" y="707.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="926.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.35%)</title><rect x="923.1" y="691.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="926.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (1 samples, 0.35%)</title><rect x="923.1" y="675.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="926.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (1 samples, 0.35%)</title><rect x="923.1" y="659.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="926.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.35%)</title><rect x="923.1" y="643.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.35%)</title><rect x="923.1" y="627.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="926.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$SizedRefSortingSink.end (1 samples, 0.35%)</title><rect x="923.1" y="611.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (1 samples, 0.35%)</title><rect x="923.1" y="595.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.1" y="606.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$533/2073482886.accept (1 samples, 0.35%)</title><rect x="923.1" y="579.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="926.1" y="590.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$12 (1 samples, 0.35%)</title><rect x="923.1" y="563.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="926.1" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Meter.use (1 samples, 0.35%)</title><rect x="923.1" y="547.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="926.1" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$535/1305659843.accept (1 samples, 0.35%)</title><rect x="923.1" y="531.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="926.1" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$4 (1 samples, 0.35%)</title><rect x="923.1" y="515.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="926.1" y="526.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$Printer.id (1 samples, 0.35%)</title><rect x="923.1" y="499.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="926.1" y="510.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$163/1076071888.apply (1 samples, 0.35%)</title><rect x="923.1" y="483.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="926.1" y="494.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$defaultMeterIdPrinter$1 (1 samples, 0.35%)</title><rect x="923.1" y="467.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="926.1" y="478.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.35%)</title><rect x="923.1" y="451.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="926.1" y="462.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.35%)</title><rect x="923.1" y="435.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 3.18%)</title><rect x="927.3" y="803.0" width="37.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="930.3" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 3.18%)</title><rect x="927.3" y="787.0" width="37.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.3" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.12%)</title><rect x="939.8" y="771.0" width="25.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="942.8" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.12%)</title><rect x="939.8" y="755.0" width="25.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="942.8" y="766.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.71%)</title><rect x="964.8" y="851.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="967.8" y="862.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.35%)</title><rect x="964.8" y="835.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="967.8" y="846.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.35%)</title><rect x="969.0" y="835.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.0" y="846.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.35%)</title><rect x="969.0" y="819.0" width="4.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="972.0" y="830.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.35%)</title><rect x="969.0" y="803.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="972.0" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.35%)</title><rect x="969.0" y="787.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="972.0" y="798.0"></text>
</g>
<g>
<title>start_thread (52 samples, 18.37%)</title><rect x="973.2" y="851.0" width="216.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="976.2" y="862.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (52 samples, 18.37%)</title><rect x="973.2" y="835.0" width="216.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="976.2" y="846.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (52 samples, 18.37%)</title><rect x="973.2" y="819.0" width="216.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.2" y="830.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.47%)</title><rect x="973.2" y="803.0" width="29.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.2" y="814.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.12%)</title><rect x="973.2" y="787.0" width="25.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="976.2" y="798.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.77%)</title><rect x="973.2" y="771.0" width="20.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.2" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 1.77%)</title><rect x="973.2" y="755.0" width="20.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.2" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.41%)</title><rect x="977.3" y="739.0" width="16.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.3" y="750.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (2 samples, 0.71%)</title><rect x="985.7" y="723.0" width="8.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.7" y="734.0"></text>
</g>
<g>
<title>G1Allocator::survivor_attempt_allocation(unsigned long, unsigned long, unsigned long*) (2 samples, 0.71%)</title><rect x="985.7" y="707.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="988.7" y="718.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.35%)</title><rect x="994.0" y="771.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.0" y="782.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.35%)</title><rect x="994.0" y="755.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.0" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.35%)</title><rect x="994.0" y="739.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="997.0" y="750.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.35%)</title><rect x="994.0" y="723.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="997.0" y="734.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.35%)</title><rect x="994.0" y="707.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.0" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.35%)</title><rect x="994.0" y="691.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.0" y="702.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.35%)</title><rect x="998.2" y="787.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1001.2" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.35%)</title><rect x="998.2" y="771.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.2" y="782.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.35%)</title><rect x="998.2" y="755.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.2" y="766.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.35%)</title><rect x="998.2" y="739.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.2" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (44 samples, 15.55%)</title><rect x="1002.4" y="803.0" width="183.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1005.4" y="814.0">JavaThread::thread_main_..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (44 samples, 15.55%)</title><rect x="1002.4" y="787.0" width="183.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.4" y="798.0">CompileBroker::compiler_..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (44 samples, 15.55%)</title><rect x="1002.4" y="771.0" width="183.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.4" y="782.0">CompileBroker::invoke_co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (40 samples, 14.13%)</title><rect x="1002.4" y="755.0" width="166.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1005.4" y="766.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (40 samples, 14.13%)</title><rect x="1002.4" y="739.0" width="166.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1005.4" y="750.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (23 samples, 8.13%)</title><rect x="1002.4" y="723.0" width="95.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.4" y="734.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.35%)</title><rect x="1002.4" y="707.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.4" y="718.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.35%)</title><rect x="1002.4" y="691.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.4" y="702.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.35%)</title><rect x="1002.4" y="675.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1005.4" y="686.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.35%)</title><rect x="1006.5" y="707.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.5" y="718.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.35%)</title><rect x="1006.5" y="691.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.5" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.35%)</title><rect x="1006.5" y="675.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1009.5" y="686.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.35%)</title><rect x="1006.5" y="659.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.5" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.35%)</title><rect x="1010.7" y="707.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.7" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.35%)</title><rect x="1010.7" y="691.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.7" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.35%)</title><rect x="1010.7" y="675.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1013.7" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.35%)</title><rect x="1010.7" y="659.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.7" y="670.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.35%)</title><rect x="1010.7" y="643.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.7" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.71%)</title><rect x="1014.9" y="707.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.9" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.71%)</title><rect x="1014.9" y="691.0" width="8.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.9" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.35%)</title><rect x="1014.9" y="675.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1017.9" y="686.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.35%)</title><rect x="1014.9" y="659.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1017.9" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.35%)</title><rect x="1019.0" y="675.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1022.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (1 samples, 0.35%)</title><rect x="1019.0" y="659.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1022.0" y="670.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="1019.0" y="643.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1022.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (18 samples, 6.36%)</title><rect x="1023.2" y="707.0" width="75.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1026.2" y="718.0">PhaseCha..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.71%)</title><rect x="1023.2" y="691.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.2" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.35%)</title><rect x="1027.4" y="675.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1030.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.12%)</title><rect x="1031.6" y="691.0" width="25.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.6" y="702.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.41%)</title><rect x="1039.9" y="675.0" width="16.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1042.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.71%)</title><rect x="1056.6" y="691.0" width="8.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1059.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.35%)</title><rect x="1060.7" y="675.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1063.7" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.35%)</title><rect x="1064.9" y="691.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.9" y="702.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.35%)</title><rect x="1064.9" y="675.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (2 samples, 0.71%)</title><rect x="1069.1" y="691.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.1" y="702.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.35%)</title><rect x="1069.1" y="675.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.1" y="686.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.35%)</title><rect x="1073.3" y="675.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1076.3" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 1.77%)</title><rect x="1077.4" y="691.0" width="20.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 1.41%)</title><rect x="1081.6" y="675.0" width="16.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1084.6" y="686.0"></text>
</g>
<g>
<title>Compile::Optimize() (14 samples, 4.95%)</title><rect x="1098.3" y="723.0" width="58.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.3" y="734.0">Compil..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (3 samples, 1.06%)</title><rect x="1098.3" y="707.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (3 samples, 1.06%)</title><rect x="1098.3" y="691.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.35%)</title><rect x="1098.3" y="675.0" width="4.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.35%)</title><rect x="1102.4" y="675.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.4" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.35%)</title><rect x="1102.4" y="659.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.4" y="670.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.35%)</title><rect x="1102.4" y="643.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1105.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.35%)</title><rect x="1106.6" y="675.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.35%)</title><rect x="1110.8" y="707.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.35%)</title><rect x="1110.8" y="691.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.8" y="702.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.35%)</title><rect x="1114.9" y="707.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.9" y="718.0"></text>
</g>
<g>
<title>CmpUNode::Value(PhaseGVN*) const (1 samples, 0.35%)</title><rect x="1114.9" y="691.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.9" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1114.9" y="675.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.9" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.35%)</title><rect x="1114.9" y="659.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.9" y="670.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.35%)</title><rect x="1114.9" y="643.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.9" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.35%)</title><rect x="1114.9" y="627.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (5 samples, 1.77%)</title><rect x="1119.1" y="707.0" width="20.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 1.41%)</title><rect x="1119.1" y="691.0" width="16.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.1" y="702.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.35%)</title><rect x="1131.6" y="675.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.35%)</title><rect x="1135.8" y="691.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.35%)</title><rect x="1135.8" y="675.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.8" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_before_loop(Node*, Node*) (1 samples, 0.35%)</title><rect x="1135.8" y="659.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.35%)</title><rect x="1135.8" y="643.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.8" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.71%)</title><rect x="1140.0" y="707.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.71%)</title><rect x="1140.0" y="691.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.0" y="702.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1140.0" y="675.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.0" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1144.1" y="675.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.1" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="1144.1" y="659.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.1" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.71%)</title><rect x="1148.3" y="707.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.3" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.35%)</title><rect x="1148.3" y="691.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.3" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.35%)</title><rect x="1148.3" y="675.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.3" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.35%)</title><rect x="1148.3" y="659.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.3" y="670.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.35%)</title><rect x="1148.3" y="643.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.3" y="654.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.35%)</title><rect x="1152.5" y="691.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.5" y="702.0"></text>
</g>
<g>
<title>ciField::compute_type() (1 samples, 0.35%)</title><rect x="1152.5" y="675.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.35%)</title><rect x="1152.5" y="659.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.5" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.35%)</title><rect x="1152.5" y="643.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.35%)</title><rect x="1152.5" y="627.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.06%)</title><rect x="1156.6" y="723.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.06%)</title><rect x="1156.6" y="707.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.06%)</title><rect x="1156.6" y="691.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.06%)</title><rect x="1156.6" y="675.0" width="12.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.06%)</title><rect x="1156.6" y="659.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.06%)</title><rect x="1156.6" y="643.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="627.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1156.6" y="611.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1156.6" y="595.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1156.6" y="579.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1156.6" y="563.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1156.6" y="547.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="531.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1156.6" y="515.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1156.6" y="499.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1156.6" y="483.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1156.6" y="467.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1156.6" y="451.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.6" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="435.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="419.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1156.6" y="403.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1156.6" y="387.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1156.6" y="371.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1156.6" y="355.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1156.6" y="339.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1156.6" y="323.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1156.6" y="307.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1156.6" y="291.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1156.6" y="275.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.35%)</title><rect x="1156.6" y="259.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.6" y="270.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.35%)</title><rect x="1156.6" y="243.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.6" y="254.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.35%)</title><rect x="1156.6" y="227.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.6" y="238.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1156.6" y="211.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.6" y="222.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1156.6" y="195.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.6" y="206.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.35%)</title><rect x="1156.6" y="179.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.6" y="190.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.35%)</title><rect x="1156.6" y="163.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.6" y="174.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.35%)</title><rect x="1156.6" y="147.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.6" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1160.8" y="627.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1160.8" y="611.0" width="8.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1160.8" y="595.0" width="8.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1160.8" y="579.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1160.8" y="563.0" width="8.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1160.8" y="547.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.71%)</title><rect x="1160.8" y="531.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.71%)</title><rect x="1160.8" y="515.0" width="8.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.71%)</title><rect x="1160.8" y="499.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.71%)</title><rect x="1160.8" y="483.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.71%)</title><rect x="1160.8" y="467.0" width="8.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.71%)</title><rect x="1160.8" y="451.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="462.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.35%)</title><rect x="1160.8" y="435.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.8" y="446.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.35%)</title><rect x="1160.8" y="419.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.8" y="430.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.35%)</title><rect x="1160.8" y="403.0" width="4.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1163.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.0" y="435.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.0" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="419.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="403.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.0" y="387.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.0" y="371.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.0" y="355.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.0" y="339.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.35%)</title><rect x="1165.0" y="323.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.35%)</title><rect x="1165.0" y="307.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.35%)</title><rect x="1165.0" y="291.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.35%)</title><rect x="1165.0" y="275.0" width="4.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.35%)</title><rect x="1165.0" y="259.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.35%)</title><rect x="1165.0" y="243.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.35%)</title><rect x="1165.0" y="227.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.35%)</title><rect x="1165.0" y="211.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.0" y="222.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.35%)</title><rect x="1165.0" y="195.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.0" y="206.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.35%)</title><rect x="1165.0" y="179.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.0" y="190.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.35%)</title><rect x="1165.0" y="163.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.0" y="174.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.35%)</title><rect x="1165.0" y="147.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.0" y="158.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (1 samples, 0.35%)</title><rect x="1165.0" y="131.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.35%)</title><rect x="1165.0" y="115.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.0" y="126.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.35%)</title><rect x="1165.0" y="99.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.0" y="110.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.35%)</title><rect x="1165.0" y="83.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.0" y="94.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1165.0" y="67.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.0" y="78.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.35%)</title><rect x="1165.0" y="51.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.0" y="62.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.35%)</title><rect x="1165.0" y="35.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.0" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 1.41%)</title><rect x="1169.2" y="755.0" width="16.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.2" y="766.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 1.41%)</title><rect x="1169.2" y="739.0" width="16.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.2" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.41%)</title><rect x="1169.2" y="723.0" width="16.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.41%)</title><rect x="1169.2" y="707.0" width="16.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.2" y="718.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (2 samples, 0.71%)</title><rect x="1169.2" y="691.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.2" y="702.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.35%)</title><rect x="1169.2" y="675.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.2" y="686.0"></text>
</g>
<g>
<title>ShortLoopOptimizer::process(BlockBegin*) (1 samples, 0.35%)</title><rect x="1169.2" y="659.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.2" y="670.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.35%)</title><rect x="1173.3" y="675.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="686.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.35%)</title><rect x="1173.3" y="659.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.35%)</title><rect x="1173.3" y="643.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.35%)</title><rect x="1173.3" y="627.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.3" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.35%)</title><rect x="1173.3" y="611.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.3" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.35%)</title><rect x="1173.3" y="595.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.35%)</title><rect x="1173.3" y="579.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.3" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1173.3" y="563.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.35%)</title><rect x="1173.3" y="547.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="558.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.35%)</title><rect x="1173.3" y="531.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.3" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.35%)</title><rect x="1173.3" y="515.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.3" y="526.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.35%)</title><rect x="1173.3" y="499.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.3" y="510.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.35%)</title><rect x="1173.3" y="483.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.35%)</title><rect x="1173.3" y="467.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.3" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.35%)</title><rect x="1173.3" y="451.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.3" y="462.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.71%)</title><rect x="1177.5" y="691.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.5" y="702.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.71%)</title><rect x="1177.5" y="675.0" width="8.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.35%)</title><rect x="1177.5" y="659.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="670.0"></text>
</g>
<g>
<title>LinearScan::use_kind_of_output_operand(LIR_Op*, LIR_OprDesc*) (1 samples, 0.35%)</title><rect x="1177.5" y="643.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="654.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.35%)</title><rect x="1181.7" y="659.0" width="4.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.35%)</title><rect x="1185.8" y="803.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="814.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.35%)</title><rect x="1185.8" y="787.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.8" y="798.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.35%)</title><rect x="1185.8" y="771.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.8" y="782.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.35%)</title><rect x="1185.8" y="755.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="766.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.35%)</title><rect x="1185.8" y="739.0" width="4.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1188.8" y="750.0"></text>
</g>
</g>
</svg>
